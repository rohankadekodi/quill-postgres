cscope 15 $HOME/projects/quill-postgres               0001529511
	@debug.h

1 #i‚de‡
__DEBUG_INCLUDED


2 
	#__DEBUG_INCLUDED


	)

4 
	~"boo°/¥ïro˚ss‹/li°/f‹_óch.hµ
"

7 #i‚de‡
SHOW_DEBUG


8 
	#SHOW_DEBUG
 0

	)

11 #i‚de‡
PRINT_DEBUG_FILE


12 
	#PRINT_DEBUG_FILE
 0

	)

15 #i‚de‡
PRINT_RESULT_FILE


16 
	#PRINT_RESULT_FILE
 0

	)

19 #i‚de‡
SPIN_ON_ERROR


20 
	#SPIN_ON_ERROR
 0

	)

28 
	~<±hªad.h
>

29 
	~<°dio.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<uni°d.h
>

35 
	#NVP_PRINT_FD
 ((
_nvp_¥öt_fd
)?_nvp_¥öt_fd:
°dîr
)

	)

37 * 
	tch¨±r
;

38 
xû_¥ötf
(
FILE
* 
f
, c⁄° 
ch¨±r
 
c
, ...);

41 
	#_nvp_debug_h™doff
(
x
Ë\

	)

43 
¶ìp
(1); \

44 vﬁ©ûê
	gasdf
 = 1; \

45 
¶ìp
(1); \

46 
	gasdf
) {}; \

49 
	#ERROR_NAMES_LIST
 (
EPERM
, (
ENOENT
, (
ESRCH
, (
EINTR
, (
EIO
, (
ENXIO
, (
E2BIG
, (
ENOEXEC
, (
EBADF
, (
ECHILD
, (
EAGAIN
, (
ENOMEM
, (
EACCES
, (
EFAULT
, (
ENOTBLK
, (
EBUSY
, (
EEXIST
, (
EXDEV
, (
ENODEV
, (
ENOTDIR
, (
EISDIR
, (
EINVAL
, (
ENFILE
, (
EMFILE
, (
ENOTTY
, (
ETXTBSY
, (
EFBIG
, (
ENOSPC
, (
ESPIPE
, (
EROFS
, (
EMLINK
, (
EPIPE
, (
EDOM
, (
ERANGE
, (
EDEADLK
, 
BOOST_PP_NIL
)))))))))))))))))))))))))))))))))))

	)

51 
	#ERROR_IF_PRINT
(
r
, 
d©a
, 
ñem
Ëif(d©®=ñemË{ 
	`DEBUG
("î∫ÿ=%†(%i): %s\n", 
	`MK_STR
”Àm),ÉÀm, 
	`°ªº‹
”Àm)); }

	)

55 
	#PRINTFUNC
 
xû_¥ötf


	)

58 
	#MSG
(
f‹m©
, ...Ëdo{
	`PRINTFUNC
(
NVP_PRINT_FD
, "NVP_MSG (%i): " f‹m©, 
	`gëpid
(), ##
__VA_ARGS__
); 
	`fÊush
(NVP_PRINT_FD); }0)

	)

60 
	#ERROR
(
f‹m©
, ...Ëdo{
	`PRINTFUNC
(
NVP_PRINT_FD
, "\033[01;33mNVP_ERROR\e[m (pid %i): " f‹m©, 
	`gëpid
(), ##
__VA_ARGS__
); 
_nv_îr‹_cou¡
++; if(
SPIN_ON_ERROR
){ 
	`_nvp_debug_h™doff
(); } }0)

	)

62 
FILE
 *
	gdebug_fd
;

63 
FILE
 *
	gªsu…_fd
;

64 
	#DEBUG_FD
 
debug_fd


	)

65 
	#RESULT_FD
 
ªsu…_fd


	)

67 #i‡
PRINT_RESULT_FILE


68 
	#RESULT_FILE
(
f‹m©
, ...Ëdÿ{
	`PRINTFUNC
(
RESULT_FD
, "\033[01;33mNVP_RESULT\e[m (pid %i): " f‹m©, 
	`gëpid
(), ##
__VA_ARGS__
); }0)

	)

70 
	#RESULT_FILE
(
f‹m©
, ...Ëdo{}0)

	)

73 #i‡
PRINT_DEBUG_FILE


74 
	#DEBUG_FILE
(
f‹m©
, ...Ëdÿ{
	`PRINTFUNC
(
DEBUG_FD
, "\033[01;33mNVP_DEBUG\e[m (pid %i): " f‹m©, 
	`gëpid
(), ##
__VA_ARGS__
); }0)

	)

76 
	#DEBUG_FILE
(
f‹m©
, ...Ëdo{}0)

	)

79 
	g_nv_îr‹_cou¡
;

81 #i‡
SHOW_DEBUG


82 
	#DEBUG
(
f‹m©
, ...Ëdo{
loc
; 
	`PRINTFUNC
(
NVP_PRINT_FD
, "NVP_DEBUG (PID %òSP %p): " f‹m©, 
	`gëpid
(), &loc, ##
__VA_ARGS__
); 
	`fÊush
(NVP_PRINT_FD); } 0)

	)

83 
	#WARNING
(
f‹m©
, ...Ëdo{
	`PRINTFUNC
(
NVP_PRINT_FD
, "NVP_WARNING (PID %i): " f‹m©, 
	`gëpid
(), ##
__VA_ARGS__
); } 0)

	)

84 
	#DEBUG_P
(
f‹m©
, ...Ëdo{
	`PRINTFUNC
(
NVP_PRINT_FD
, f‹m©, ##
__VA_ARGS__
); } 0)

	)

86 
	#DEBUG
(
f‹m©
, ...Ëdo{}0)

	)

87 
	#WARNING
(
f‹m©
, ...Ëdo{}0)

	)

88 
	#DEBUG_P
(
f‹m©
, ...Ëdo{}0)

	)

91 
	#FAIL
 \

	)

112 
	#PRINT_ERROR_NAME
(
î∫oö
Ë
	`_nvp_¥öt_îr‹_«me
”ºnoö);

	)

113 
_nvp_¥öt_îr‹_«me
(
î∫oö
);

	@fileops_hub.c

10 
	~"nv_comm⁄.h
"

11 
	~"debug.h
"

14 
	#ENV_HUB_FOP
 "NVP_HUB_FOP"

	)

16 
	#ENV_TREE_FILE
 "NVP_TREE_FILE"

	)

19 
	#LIBC_SO_LOC
 "/lib/x86_64-löux-gnu/libc.so.6"

	)

23 
Fûe›s_p
** 
	g_hub_fd_lookup
;

24 
Fûe›s_p
* 
	g_hub_m™aged_fûe›s
;

26 * 
	g_libc_so_p
;

28 
	gOPEN_MAX
;

30 
	g_hub_fûe›s_cou¡
 = 0;

31 
Fûe›s_p
* 
	g_hub_fûe›s_lookup
[
MAX_FILEOPS
];

33 
_hub_add_™d_ªsﬁve_fûe›s_åì_‰om_fûe
(* 
fûíame
);

35 
hub_check_ªsﬁve_fûe›s
(* 
åì
);

36 
_hub_öô2
();

38 
	#HUB_CHECK_RESOLVE_FILEOPS
(
NAME
, 
FUNCT
Ë\

	)

39 
as£π
–
_hub_m™aged_fûe›s
 !
NULL
 ); \

40 
as£π
–
_hub_fûe›s
 !
NULL
 );

42 
	#HUB_ADD_FUNCTP
(
SOFILE
, 
FUNCT
Ë\

	)

43 
	gdlsym_ªsu…
 = 
dlsym
(
SOFILE
, 
MK_STR3
–
ALIAS_
##
FUNCT
 ) ); \

44 if(!
	gdlsym_ªsu…
) { \

45 
ERROR
("Couldn'àföd symbﬁ \"%s\" f‹ " #FUNCT " i¿\"" #SOFILE "\"\n", 
MK_STR3
–
ALIAS_
##
FUNCT
 ) );\

46 
ERROR
("%s\n", 
dÀº‹
()); \

47 
as£π
(0); \

49 
	gfo
->
	gFUNCT
 = (
RETT_
##
	$FUNCT
(*)(
INTF_
##
FUNCT
)Ë
dlsym_ªsu…
 ;

51 
	#HUB_ADD_SHM_FUNCTP
(
SOFILE
, 
FUNCT
Ë\

	)

52 
dlsym_ªsu…
 = 
	`dlsym
(
SOFILE
, 
	`MK_STR3
–
_nvp_
##
FUNCT
 ) ); \

53 if(!
dlsym_ªsu…
) { \

54 
	`ERROR
("Couldn'àföd symbﬁ \"%s\" f‹ " #FUNCT " i¿\"" #SOFILE "\"\n", 
	`MK_STR3
–
ALIAS_
##
FUNCT
 ) );\

55 
	`ERROR
("%s\n", 
	`dÀº‹
()); \

56 
	`as£π
(0); \

57 
	}
} \

58 
	gfo
->
	gFUNCT
 = (
RETT_
##
	$FUNCT
(*)(
INTF_
##
FUNCT
)Ë
dlsym_ªsu…
 ;

62 
	#HUB_ADD_FUNCTP_IWRAP
(
r
, 
d©a
, 
ñem
Ë
	`HUB_ADD_FUNCTP
(d©a,ÉÀm)

	)

63 
	#HUB_ADD_FUNCTP_SHM_IWRAP
(
r
, 
d©a
, 
ñem
Ë
	`HUB_ADD_SHM_FUNCTP
(d©a,ÉÀm)

	)

66 
	#HUB_INIT_FILEOPS_P
(
NAME
, 
SOFILELOC
Ë\

	)

67 
so_p
 = 
	`dl›í
(
SOFILELOC
, 
RTLD_LAZY
|
RTLD_LOCAL
); \

68 if(!
so_p
) { \

69 
	`ERROR
("Couldn'àloˇã \"%s\"áàsuµlõdÖ©h \"%s\"\n", 
NAME
, 
SOFILELOC
);\

70 
	`ERROR
("%s\n", 
	`dÀº‹
());\

71 
	`as£π
(0);\

72 
	}
}\

73 
Fûe›s_p
* 
	gfo
 = (Fûe›s_p*Ë
ˇŒoc
(1, (Fileops_p)); \

74 
	gfo
->
	g«me
 = (*)
ˇŒoc
(
°æí
(
NAME
)+1, ()); \

75 
	gfo
->
	g«me
 = 
°r˝y
(
fo
->
«me
, 
NAME
); \

76 
DEBUG
("P›uœtög %†Fûe›s_∞‰om \"%s\"\n", 
NAME
, 
SOFILELOC
); \

77 * 
	gdlsym_ªsu…
; \

78 
BOOST_PP_SEQ_FOR_EACH
(
HUB_ADD_FUNCTP_IWRAP
, 
so_p
, 
ALLOPS_WPAREN
) \

79 
BOOST_PP_SEQ_FOR_EACH
(
HUB_ADD_FUNCTP_SHM_IWRAP
, 
so_p
, 
SHM_WPAREN
) \

82 
	#HUB_ADD_POSIX_FUNCTP
(
FUNCT
Ë\

	)

83 
	gdlsym_ªsu…
 = 
dlsym
(
_libc_so_p
, 
MK_STR3
–
ALIAS_
##
FUNCT
 ) ); \

84 if(!
	gdlsym_ªsu…
) { \

85 
ERROR
("Couldn'àföd symbﬁ \"%s\" f‹ " #FUNCT " i¿\"" 
LIBC_SO_LOC
 "\"\n", 
MK_STR3
–
ALIAS_
##
FUNCT
 ) );\

86 
ERROR
("%s\n", 
dÀº‹
()); \

87 
as£π
(0); \

89 
	gfo
->
	gFUNCT
 = (
RETT_
##
	$FUNCT
(*)(
INTF_
##
FUNCT
)Ë
dlsym_ªsu…
 ;

91 
	#HUB_ADD_POSIX_FUNCTP_IWRAP
(
r
, 
d©a
, 
ñem
Ë
	`HUB_ADD_POSIX_FUNCTP
”Àm)

	)

93 
	#HUB_INIT_POSIX_FILEOPS_P
(
NAME
Ë\

	)

94 
Fûe›s_p
* 
fo
 = (Fûe›s_p*Ë
	`ˇŒoc
(1, (Fileops_p)); \

95 
fo
->
«me
 = (*)
	`ˇŒoc
(
	`°æí
(
NAME
)+1, ()); \

96 
fo
->
«me
 = 
	`°r˝y
(fo->«me, 
NAME
); \

97 
	`DEBUG
("P›uœtög hub Fûe›s_∞‰omÜibc.sÿ© \"" 
LIBC_SO_LOC
 "\"\n" ); \

98 * 
dlsym_ªsu…
; \

99 
	`BOOST_PP_SEQ_FOR_EACH
(
HUB_ADD_POSIX_FUNCTP_IWRAP
, 
xxx
, 
ALLOPS_WPAREN
) \

100 
	`_hub_add_fûe›
(
fo
);

103 
	$_hub_add_™d_ªsﬁve_fûe›s_åì_‰om_fûe
(* 
fûíame
)

105 if(
fûíame
==
NULL
) {

106 
	`ERROR
("Fûíamêwa†nuŒ! C™'àbuûdÅªe! (Did you f‹gëÅÿ£àív v¨ %s?)\n", 
ENV_TREE_FILE
);

107 
	`as£π
(0);

109 
	`DEBUG
("GŸ fûíamê%s\n", 
fûíame
);

112 if(
	`ac˚ss
(
fûíame
, 
R_OK
)) {

113 
	`ERROR
("Couldn'à›í fûê%†f‹Ñódög: %s\n", 
fûíame
, 
	`°ªº‹
(
î∫o
));

114 
	`as£π
(0);

116 
	`DEBUG
("Fûê%†i†OK f‹Ñódög\n", 
fûíame
);

119 
	`DEBUG
("Ródög from fûê%s\n", 
fûíame
);

122 *
buf„r
;

123 
fûeLí
;

145 
fûeLí
 = 22;

146 
buf„r
 = (*Ë
	`ˇŒoc
(
fûeLí
+1, ());

147 i‡(!
buf„r
)

149 
	`ERROR
("MemoryÉrror!");

151 
	`as£π
(0);

156 
	`mem˝y
(
buf„r
, "hub(posix,nvp(posix))\n", 22);

158 * 
moduÀs_to_lﬂd
[
MAX_FILEOPS
];

159 
moduÀ_cou¡
 = 0;

161 * 
b
 = (*Ë
	`ˇŒoc
(
	`°æí
(
buf„r
)+1, ());

162 
	`mem˝y
(
b
, 
buf„r
, 
	`°æí
(buffer)+1);

164 * 
tok
 = 
	`°πok
(
b
, "(), \t\n");

166 
tok
)

169 if(
moduÀ_cou¡
 =
MAX_FILEOPS
) {

170 
	`ERROR
("Toÿm™y fûe›s! Ch™gêMAX_FILEOPS i¿nv_comm⁄.h (cuºíàmax i†%i)\n", 
MAX_FILEOPS
);

171 
	`as£π
(0);

173 
i
;

174 
cmp_m©ch
 = 0;

175 
i
=0; i<
moduÀ_cou¡
; i++) {

176 if(!
	`°rcmp
(
moduÀs_to_lﬂd
[
i
], 
tok
)) {

177 
cmp_m©ch
 = 1;

181 if(
cmp_m©ch
) {

182 
	`DEBUG
("ModuÀ %†wa†Æªady i¿thêli°; skùpög.\n", 
tok
);

185 
moduÀs_to_lﬂd
[
moduÀ_cou¡
] = 
	`ˇŒoc
(
	`°æí
(
tok
)+1, ());

186 
	`mem˝y
(
moduÀs_to_lﬂd
[
moduÀ_cou¡
], 
tok
, 
	`°æí
(tok)+1);

187 
moduÀ_cou¡
++;

189 
tok
 = 
	`°πok
(
NULL
, "(), \t\n");

192 if(
	`°rcmp
(
moduÀs_to_lﬂd
[0],"hub")) {

193 
	`ERROR
("Invalid format: first item must be hub\n");

194 
	`as£π
(0);

197 * 
åì
 = (*Ë
	`ˇŒoc
(
fûeLí
, ());

198 
i
;

199 
c
[2] = { '\0', '\0' };

202 
i
=0; i<
fûeLí
; i++)

204 if(!
	`is•a˚
(
buf„r
[
i
]))

206 
c
[0] = 
buf„r
[
i
];

207 
	`°rˇt
(
åì
, 
c
);

211 
	`DEBUG
("Hîe'†thêåì wôhouàwhôe•a˚: %s\n", 
åì
);

213 
	`DEBUG
("%òmoduÀ†wû»bêlﬂded (nŸ cou¡ög hub). Hîê¨êtheúÇames:\n", 
moduÀ_cou¡
-1);

214 
‚ame
[256];

215 * 
so_p
;

216 
i
=1; i<
moduÀ_cou¡
; i++)

218 
	`•rötf
(
‚ame
, "libfûe›s_%s.so", 
moduÀs_to_lﬂd
[
i
]);

219 
	`DEBUG_P
("%†(%s)\n", 
moduÀs_to_lﬂd
[
i
], 
‚ame
);

221 
i
=1; i<
moduÀ_cou¡
; i++)

223 
	`•rötf
(
‚ame
, "libfûe›s_%s.so", 
moduÀs_to_lﬂd
[
i
]);

224 if(
	`°rcmp
(
moduÀs_to_lﬂd
[
i
],"posix")==0) {

225 
	`DEBUG
("Module \"posix\" isÜoaded manually; skipping.\n");

227 
	`DEBUG
("Lﬂdög moduÀ \"%s\"\n", 
moduÀs_to_lﬂd
[
i
]);

228 
	`HUB_INIT_FILEOPS_P
(
moduÀs_to_lﬂd
[
i
], 
‚ame
);

232 
	`DEBUG
("Doneádding fileops. Resolvingáll fileops...\n");

234 
	`_hub_ªsﬁve_Æl_fûe›s
(
åì
);

236 
	`DEBUG
("Done initializing hubándÑesolving fileops.\n");

239 
	}
}

243 
	$BOOST_PP_SEQ_FOR_EACH
(
DECLARE_AND_ALIAS_FUNCTS_IWRAP
, 
_hub_
, 
ALLOPS_FINITEPARAMS_WPAREN
)

246 
RETT_OPEN
 
	$ALIAS_OPEN
(
INTF_OPEN
Ë
	`WEAK_ALIAS
("_hub_OPEN");

247 
RETT_OPEN
 
	`_hub_OPEN
(
INTF_OPEN
);

249 
RETT_FCNTL
 
	$ALIAS_FCNTL
(
INTF_FCNTL
Ë
	`WEAK_ALIAS
("_hub_FCNTL");

250 
RETT_FCNTL
 
	`_hub_FCNTL
(
INTF_FCNTL
);

252 
RETT_OPENAT
 
	$ALIAS_OPENAT
(
INTF_OPENAT
Ë
	`WEAK_ALIAS
("_hub_OPENAT");

253 
RETT_OPENAT
 
	`_hub_OPENAT
(
INTF_OPENAT
);

255 
RETT_EXECVE
 
	$ALIAS_EXECVE
(
INTF_EXECVE
Ë
	`WEAK_ALIAS
("_hub_EXECVE");

256 
RETT_EXECVE
 
	`_hub_EXECVE
(
INTF_EXECVE
);

258 
RETT_EXECVP
 
	$ALIAS_EXECVP
(
INTF_EXECVP
Ë
	`WEAK_ALIAS
("_hub_EXECVP");

259 
RETT_EXECVP
 
	`_hub_EXECVP
(
INTF_EXECVP
);

261 
RETT_EXECV
 
	$ALIAS_EXECV
(
INTF_EXECV
Ë
	`WEAK_ALIAS
("_hub_EXECV");

262 
RETT_EXECV
 
	`_hub_EXECV
(
INTF_EXECV
);

264 
RETT_EXECL
 
	$ALIAS_EXECL
(
INTF_EXECL
Ë
	`WEAK_ALIAS
("_hub_EXECL");

265 
RETT_EXECL
 
	`_hub_EXECL
(
INTF_EXECL
);

267 
RETT_SHM_COPY
 
	`_hub_SHM_COPY
();

269 #ifde‡
TRACE_FP_CALLS


275 
RETT_FOPEN
 
	$ALIAS_FOPEN
(
INTF_FOPEN
Ë
	`WEAK_ALIAS
("_hub_FOPEN");

276 
RETT_FOPEN
 
	`_hub_FOPEN
(
INTF_FOPEN
);

278 
RETT_FOPEN64
 
	$ALIAS_FOPEN64
(
INTF_FOPEN64
Ë
	`WEAK_ALIAS
("_hub_FOPEN64");

279 
RETT_FOPEN64
 
	`_hub_FOPEN64
(
INTF_FOPEN64
);

283 
RETT_IOCTL
 
	$ALIAS_IOCTL
(
INTF_IOCTL
Ë
	`WEAK_ALIAS
("_hub_IOCTL");

284 
RETT_IOCTL
 
	`_hub_IOCTL
(
INTF_IOCTL
);

286 
RETT_OPEN64
 
	$ALIAS_OPEN64
(
INTF_OPEN64
Ë
	`WEAK_ALIAS
("_hub_OPEN64");

287 
RETT_OPEN64
 
	`_hub_OPEN64
(
INTF_OPEN64
);

289 
RETT_MKSTEMP
 
	$ALIAS_MKSTEMP
(
INTF_MKSTEMP
Ë
	`WEAK_ALIAS
("_hub_MKSTEMP");

290 
RETT_MKSTEMP
 
	`_hub_MKSTEMP
(
INTF_MKSTEMP
);

292 
	`MODULE_REGISTRATION_F
("hub", 
_hub_
, 
	`_hub_öô2
(); )

296 
	$_hub_öô2
()

298 
execv_d⁄e
 = 0;

299 
fûe›s_ªtu∫
;

300 
i
;

301 
	`MSG
("InôülizögÅhêlibnv∞hub. I‡you'ªÑódögÅhis,Åhêlibøry i†beögÜﬂded! (thi†i†PID %i, myÖ¨íài†%i)\n", 
	`gëpid
(), 
	`gëµid
());

302 
	`MSG
("CÆ»åì wû»bê∑r£d from %s\n", 
	`gëív
(
ENV_TREE_FILE
));

304 
	`DEBUG
("InitializingÖosix module\n");

306 
_libc_so_p
 = 
	`dl›í
(
LIBC_SO_LOC
, 
RTLD_LAZY
|
RTLD_LOCAL
);

308 if(!
_libc_so_p
) {

309 
	`ERROR
("Couldn'àloˇãÜibc.sÿ© suµlõdÖ©h \"" 
LIBC_SO_LOC
 "\"\n");

310 
	`ERROR
("%s\n", 
	`dÀº‹
());

311 
	`as£π
(0);

314 
i
=0; i<
_hub_fûe›s_cou¡
; i++)

316 if(!
	`°rcmp
(
_hub_fûe›s_lookup
[
i
]->
«me
, "posix"))

318 
	`MSG
("C™'àadd fûe› %s: o√ wôhÅhêßmê«mêÆªadyÉxi°†© index %i. Ign‹ög. \n", "posix", 
i
);

319 
out
;

324 
	`HUB_INIT_POSIX_FILEOPS_P
("posix");

326 
_hub_fd_lookup
 = (
Fûe›s_p
**Ë
	`ˇŒoc
(
OPEN_MAX
, (Fileops_p*));

328 
	`as£π
(
	`_hub_föd_fûe›
("hub")!=
NULL
);

329 
	`_hub_föd_fûe›
("hub")->
ªsﬁve
 = 
hub_check_ªsﬁve_fûe›s
;

331 
	`_hub_add_™d_ªsﬁve_fûe›s_åì_‰om_fûe
(
	`gëív
(
ENV_TREE_FILE
));

333 
	`DEBUG
("CurrentlyÖrinting on stderr\n");

335 
_nvp_¥öt_fd
 = 
	`fd›í
(
	`_hub_föd_fûe›
("posix")->
	`DUP
(2), "a");

336 
debug_fd
 = 
	`_hub_föd_fûe›
("posix")->
	`FOPEN
("/tmp/ledger_dbg.tmp", "a");

337 
ªsu…_fd
 = 
	`_hub_föd_fûe›
("posix")->
	`FOPEN
("/tmp/ledger_res.tmp", "a");

339 
	`DEBUG_FILE
("%s: Cª©edánd o≥√d debug fûe\n", 
__func__
);

341 
	`DEBUG
("NowÖrötög o¿fd %p\n", 
_nvp_¥öt_fd
);

342 
	`as£π
(
_nvp_¥öt_fd
 >= 0);

344 i‡(
execv_d⁄e
)

345 
	`_hub_SHM_COPY
();

347 
out
:

348 
execv_d⁄e
 = 0;

351 
	}
}

355 
	$hub_check_ªsﬁve_fûe›s
(* 
åì
)

357 
	`RESOLVE_TWO_FILEOPS
("hub", 
_hub_fûe›s
, 
_hub_m™aged_fûe›s
);

359 
i
;

360 
i
=0; i<
OPEN_MAX
; i++)

362 
_hub_fd_lookup
[
i
] = 
_hub_fûe›s
;

365 
_hub_fd_lookup
[0] = 
_hub_m™aged_fûe›s
;

366 
_hub_fd_lookup
[1] = 
_hub_m™aged_fûe›s
;

367 
_hub_fd_lookup
[2] = 
_hub_m™aged_fûe›s
;

369 
	}
}

371 
	#HUB_WRAP_HAS_FD
(
›
Ë\

	)

372 
	gRETT_
##
›
 
	g_hub_
##› ( 
INTF_
##op ) { \

373 
HUB_CHECK_RESOLVE_FILEOPS
(
_hub_
, 
›
); \

374 
DEBUG_FILE
("CALL: _hub_" #› ", fd = %i\n", 
fûe
); \

375 if(
	gfûe
>=
OPEN_MAX
Ë{ 
DEBUG
("fûêdes¸ùt‹Åoÿœrgê(%ò> %i)\n", 
fûe
, OPEN_MAX-1); 
	gî∫o
 = 
EBADF
;  (
	gRETT_
##
	g›
) -1; } \

376 if(
	gfûe
<0Ë{ 
DEBUG_FILE
("fûê< 0 (fûê%i).Ñëu∫ -1;\n", 
fûe
); 
	gî∫o
 = 
EBADF
;  (
	gRETT_
##
	g›
) -1; } \

377 if(
	g_hub_fd_lookup
[
fûe
]==
NULL
Ë{ 
DEBUG_FILE
("_hub_"#›": Th© fûêdes¸ùt‹ (%iËi†övÆid:Öîh≠†you didn'àˇŒ o≥¿fú°. Assignög hub fûe›s\n", fûe); 
	gî∫o
 = 
EBADF
; _hub_fd_lookup[fûe] = 
_hub_fûe›s
; } \

378 
DEBUG
("_hub_" #› " i†ˇŒög %s->" #› "\n", 
_hub_fd_lookup
[
fûe
]->
«me
); \

379  (
	gRETT_
##
	g›
Ë
	g_hub_fd_lookup
[
fûe
]->
›
–
CALL_
##op ); \

382 
	#HUB_WRAP_NO_FD
(
›
Ë\

	)

383 
	gRETT_
##
›
 
	g_hub_
##› ( 
INTF_
##op ) { \

384 
	gªsu…
 = 0; \

385 
HUB_CHECK_RESOLVE_FILEOPS
(
_hub_
, 
›
); \

386 
DEBUG
("CALL: " 
MK_STR
(
_hub_
##
›
) "\n"); \

387 
DEBUG
("_hub_" #› " i†ˇŒög %s->" #› "\n", 
_hub_fûe›s
->
«me
); \

388 
	gªsu…
 = 
_hub_fûe›s
->
›
–
CALL_
##op ); \

389  
	gªsu…
; \

392 
	#HUB_WRAP_PIPE
(Ë\

	)

393 
RETT_PIPE
 
	$_hub_PIPE
(
INTF_PIPE
) { \

394 
ªsu…
 = 0; \

395 
	`CHECK_RESOLVE_FILEOPS
(
_hub_
); \

396 
ªsu…
 = 
_hub_fûe›s
->
	`PIPE
(
CALL_PIPE
); \

397 
_hub_fd_lookup
[
fûe
[0]] = 
_hub_fûe›s
; \

398 
_hub_fd_lookup
[
fûe
[1]] = 
_hub_fûe›s
; \

399  
ªsu…
; \

400 
	}
}

402 #ifde‡
TRACE_FP_CALLS


404 
	#HUB_WRAP_HAS_FP
(
›
Ë\

	)

405 
	gRETT_
##
›
 
	g_hub_
##› ( 
INTF_
##op ) { \

406 
HUB_CHECK_RESOLVE_FILEOPS
(
_hub_
, 
›
); \

407 
DEBUG_FILE
("CALL: _hub_" #› ", fd = %i\n", 
fûío
(
Â
)); \

408 if(
fûío
(
Â
)>=
OPEN_MAX
Ë{ 
DEBUG
("fûêdes¸ùt‹Åoÿœrgê(%ò> %i)\n", fûío(Â), OPEN_MAX-1); 
	gî∫o
 = 
EBADF
;  (
	gRETT_
##
	g›
) -1; } \

409 if(
fûío
(
Â
)<0Ë{ 
DEBUG
("fûê< 0 (fûê%i).Ñëu∫ -1;\n", fûío(Â)); 
	gî∫o
 = 
EBADF
;  (
	gRETT_
##
	g›
) -1; } \

410 if(
	g_hub_fd_lookup
[
fûío
(
Â
)]==
NULL
Ë{ 
DEBUG_FILE
("_hub_"#›": Th© fûêdes¸ùt‹ (%iËi†övÆid:Öîh≠†you didn'àˇŒ o≥¿fú°. Assignög hub fûe›†\n", fûío(Â)); 
	gî∫o
 = 
EBADF
; _hub_fd_lookup[fûío(Â)] = 
_hub_fûe›s
; } \

411 
DEBUG_FILE
("_hub_" #› " i†ˇŒög %s->" #› "\n", 
_hub_fd_lookup
[
fûío
(
Â
)]->
«me
); \

412  (
	gRETT_
##
	g›
Ë
	g_hub_fd_lookup
[
fûío
(
Â
)]->
›
–
CALL_
##op ); \

415 
	#HUB_WRAP_HAS_FP_IWRAP
(
r
, 
d©a
, 
ñem
Ë
	`HUB_WRAP_HAS_FP
”Àm)

	)

416 
	$BOOST_PP_SEQ_FOR_EACH
(
HUB_WRAP_HAS_FP_IWRAP
, 
∂a˚hﬁdî
, 
FILEOPS_WITH_FP
)

420 
	#HUB_WRAP_HAS_FD_IWRAP
(
r
, 
d©a
, 
ñem
Ë
	`HUB_WRAP_HAS_FD
”Àm)

	)

421 
	#HUB_WRAP_NO_FD_IWRAP
(
r
, 
d©a
, 
ñem
Ë
	`HUB_WRAP_NO_FD
”Àm)

	)

422 
	#HUB_WRAP_PIPE_IWRAP
(
r
, 
d©a
, 
ñem
Ë
	`HUB_WRAP_PIPE
()

	)

424 
	$BOOST_PP_SEQ_FOR_EACH
(
HUB_WRAP_HAS_FD_IWRAP
, 
∂a˚hﬁdî
, 
FILEOPS_WITH_FD
)

425 
	$BOOST_PP_SEQ_FOR_EACH
(
HUB_WRAP_NO_FD_IWRAP
, 
∂a˚hﬁdî
, 
FILEOPS_WITHOUT_FD
)

426 
	$BOOST_PP_SEQ_FOR_EACH
(
HUB_WRAP_PIPE_IWRAP
, 
∂a˚hﬁdî
, 
FILEOPS_PIPE
)

428 
	$_hub_ªsﬁve_Æl_fûe›s
(* 
åì
)

432 
i
;

433 
	`DEBUG
("_hub_fûe›s_looku∞c⁄èö†%òñemíts,ánd hîêtheyáª:\n", 
_hub_fûe›s_cou¡
);

434 
i
=0; i<
_hub_fûe›s_cou¡
; i++)

436 
	`DEBUG
("\t%s\n", 
_hub_fûe›s_lookup
[
i
]->
«me
);

439 
i
=0; i<
_hub_fûe›s_cou¡
; i++)

441 
	`DEBUG
("Resovög %òo‡%i: %s\n", 
i
+1, 
_hub_fûe›s_cou¡
, 
_hub_fûe›s_lookup
[i]->
«me
);

443 if(!
	`°rcmp
(
_hub_fûe›s_lookup
[
i
]->
«me
, "posix")) { ; }

445 
_hub_fûe›s_lookup
[
i
]->
	`ªsﬁve
(
åì
);

447 
	}
}

449 
Fûe›s_p
* 
	$deÁu…_ªsﬁve_fûe›s
(* 
åì
, * 
«me
)

451 
	`DEBUG
("Resﬁvög \"%s\" fûe›†usög deÁu…Ñesﬁvî.\n", 
«me
);

453 
Fûe›s_p
* 
fûe›s
 = *(
	`ªsﬁve_n_fûe›s
(
åì
, 
«me
, 1));

455 if(
fûe›s
 =
NULL
){

456 
	`ERROR
("Couldn'àªsﬁvêfûe›†%s\n", 
«me
);

457 
	`as£π
(0);

459 
	`DEBUG
("\"%s\"ÑesﬁvedÅÿ\"%s\"\n", 
«me
, 
fûe›s
->name);

460  
fûe›s
;

461 
	}
}

463 
Fûe›s_p
** 
	$ªsﬁve_n_fûe›s
(* 
åì
, * 
«me
, 
cou¡
)

465 
Fûe›s_p
** 
ªsu…
 = (Fûe›s_p**Ë
	`ˇŒoc
(
cou¡
, (Fileops_p*));

467 * 
°¨t
 = 
	`°r°r
(
åì
, 
«me
);

468 if(!
°¨t
){

469 
	`ERROR
("Coud 'àfödÅhi†moduÀ (%sËöÅhêåì (%s)\n", 
«me
, 
åì
);

470 
	`as£π
(0);

473 
°¨t
 +
	`°æí
(
«me
)+1;

475 
¶Ÿ
 = 0;

476 
¶Ÿ
 = 0; slŸ<
cou¡
; slot++)

480 
∑ªn_Àvñ
 = 0;

481 
i
;

483 
i
=0; i<
	`°æí
(
°¨t
); i++)

485 if(
	`i•un˘
(
°¨t
[
i
])) { ; }

488 * 
moduÀ_«me
 = (*Ë
	`ˇŒoc
(
i
+3, ());

489 
moduÀ_«me
 = 
	`mem˝y
(moduÀ_«me, 
°¨t
, 
i
);

493 
ªsu…
[
¶Ÿ
] = 
	`_hub_föd_fûe›
(
moduÀ_«me
);

494 if(
ªsu…
[
¶Ÿ
] =
NULL
){

495 
	`ERROR
("Couldn'àªsﬁvêfûe›†%†¶Ÿ %òtÿex≥˘ed moduÀ %s\n", 
«me
, 
¶Ÿ
, 
moduÀ_«me
);

496 
	`as£π
(0);

503 if(
¶Ÿ
+1>=
cou¡
) {

508 
°¨t
 +
i
;

512 if(
°¨t
[0] == ',') {

514 
°¨t
++;

519 
	`as£π
(
°¨t
[0]=='(');

521 
°¨t
++;

522 
∑ªn_Àvñ
=1;

523 
i
=0; i<
	`°æí
(
°¨t
); i++)

526 
°¨t
[
i
]) {

527 '(': 
∑ªn_Àvñ
++; ;

528 ')': 
∑ªn_Àvñ
--; ;

530 if(
∑ªn_Àvñ
 == 0) {

531 
°¨t
 +
i
+2;

537  
ªsu…
;

538 
	}
}

543 
	$_hub_add_fûe›
(
Fûe›s_p
* 
fo
)

546 
	`DEBUG
("Registering Fileops_p \"%s\"át index %i\n",

547 
fo
->
«me
, 
_hub_fûe›s_cou¡
);

549 
i
=0;

550 
i
=0; i<
_hub_fûe›s_cou¡
; i++)

552 if(!
	`°rcmp
(
_hub_fûe›s_lookup
[
i
]->
«me
, 
fo
->name))

554 
	`MSG
("C™'àadd fûe› %s: o√ wôhÅhêßmê«mêÆªadyÉxi°†© index %i. Ign‹ög. \n", 
fo
->
«me
, 
i
);

559 if(
_hub_fûe›s_cou¡
 >
MAX_FILEOPS
) {

560 
	`ERROR
("_hub_fileops_lookup is full:Åoo many Fileops_p!\n");

561 
	`ERROR
("Maximum suµ‹ãd: %i\n", 
MAX_FILEOPS
);

562 
	`ERROR
("Check fileops_compareharness.cÅo increase\n");

566 
_hub_fûe›s_lookup
[
_hub_fûe›s_cou¡
] = 
fo
;

567 
_hub_fûe›s_cou¡
++;

568 
	}
}

574 
Fûe›s_p
* 
	$_hub_föd_fûe›
(c⁄° * 
«me
)

576 if(
«me
 =
NULL
) {

577 
	`DEBUG
("Name wasÇull; using default: \"posix\"\n");

578 
«me
 = "posix";

579 
	`as£π
(0);

582 
i
;

583 
i
=0; i<
_hub_fûe›s_cou¡
; i++)

585 if(
_hub_fûe›s_lookup
[
i
] =
NULL
) { ; }

586 if(
	`°rcmp
(
«me
, 
_hub_fûe›s_lookup
[
i
]->name)==0)

588  
_hub_fûe›s_lookup
[
i
];

592 
	`DEBUG
("Fûe›s_∞\"%s\"ÇŸ found;ÑesﬁvögÅÿ\"posix\"\n", 
«me
);

593 
«me
 = "posix";

594 
	`as£π
(0);

596 
i
=0; i<
_hub_fûe›s_cou¡
; i++)

598 if(
_hub_fûe›s_lookup
[
i
] =
NULL
) { ; }

599 if(
	`°rcmp
(
«me
, 
_hub_fûe›s_lookup
[
i
]->name)==0)

601  
_hub_fûe›s_lookup
[
i
];

605 
	`as£π
(0);

607  
NULL
;

608 
	}
}

611 
RETT_OPEN
 
	$_hub_OPEN
(
INTF_OPEN
)

613 
	`CHECK_RESOLVE_FILEOPS
(
_hub_
);

615 
	`DEBUG
("CALL: _hub_OPEN f‹ %s\n", 
∑th
);

617 
Fûe›s_p
* 
›_to_u£
 = 
NULL
;

619 
ªsu…
;

620 
öode_mode
;

622 if(
∑th
[0] == '/' &&Öath[1] == 'v' &&Öath[2] == 'a' &&Öath[3] == 'r') {

623 
›_to_u£
 = 
_hub_fûe›s
;

624 
›íög
;

627 i‡(!
	`°rcmp
(
∑th
, "/dev/shm/exec-ledger") || !strcmp(path, "/dev/shm/exec-hub")) {

628 
›_to_u£
 = 
_hub_fûe›s
;

629 
›íög
;

632 if(
	`ac˚ss
(
∑th
, 
F_OK
Ë=-1 && 
î∫o
 =
ENOENT
)

634 if(
	`FLAGS_INCLUDE
(
oÊag
, 
O_CREAT
)) {

635 
	`DEBUG_FILE
("File doesÇotÉxistánd is setÅo be created. Using managed fileops (%s)\n",

636 
_hub_m™aged_fûe›s
->
«me
);

637 
›_to_u£
 = 
_hub_m™aged_fûe›s
;

639 
	`DEBUG_FILE
("File doesÇotÉxistánd isÇot setÅo be created. Using unmanaged fileops (%s)\n",

640 
_hub_fûe›s
->
«me
);

641 
›_to_u£
 = 
_hub_fûe›s
;

645 
°©
 
fûe_°
;

647 if(
	`°©
(
∑th
, &
fûe_°
))

649 
	`DEBUG
("_hub: failedÅo get device stats for \"%s\" (error: %s). Using unmanaged fileops (%s)\n",

650 
∑th
, 
	`°ªº‹
(
î∫o
), 
_hub_fûe›s
->
«me
);

651 
›_to_u£
 = 
_hub_fûe›s
;

653 if(
	`S_ISREG
(
fûe_°
.
°_mode
))

655 
	`DEBUG
("_hub: fileÉxistsánd isáÑegular file. Using managed fileops (%s)\n",

656 
_hub_m™aged_fûe›s
->
«me
);

657 
›_to_u£
 = 
_hub_m™aged_fûe›s
;

659 i‡(
	`S_ISBLK
(
fûe_°
.
°_mode
))

661 
	`DEBUG
("_hub: fileÉxistsánd isá block device. Using managed fileops (%s)\n",

662 
_hub_m™aged_fûe›s
->
«me
);

663 
›_to_u£
 = 
_hub_m™aged_fûe›s
;

667 
	`DEBUG
("_hub: fileÉxistsánd isÇotáÑegular file. Using unmanaged fileops (%s)\n",

668 
_hub_fûe›s
->
«me
);

669 
›_to_u£
 = 
_hub_fûe›s
;

676 
›íög
:

678 
	`as£π
(
›_to_u£
 !
NULL
);

680 i‡(
	`FLAGS_INCLUDE
(
oÊag
, 
O_CREAT
))

682 
va_li°
 
¨g
;

683 
	`va_°¨t
(
¨g
, 
oÊag
);

684 
mode
 = 
	`va_¨g
(
¨g
, );

685 
	`va_íd
(
¨g
);

686 
ªsu…
 = 
›_to_u£
->
	`OPEN
(
∑th
, 
oÊag
, 
mode
);

688 
ªsu…
 = 
›_to_u£
->
	`OPEN
(
∑th
, 
oÊag
);

691 if(
ªsu…
 >= 0)

697 
_hub_fd_lookup
[
ªsu…
] = 
›_to_u£
;

698 
	`DEBUG
("_hub_OPENássignög fd %òfûe› %s\n", 
ªsu…
, 
›_to_u£
->
«me
);

702 
	`DEBUG
("_hub_OPEN->%s_OPEN faûed;ÇŸássignög fûe›. P©h = %s, fœg = %d, Eº = %s\n", 
›_to_u£
->
«me
, 
∑th
, 
oÊag
, 
	`°ªº‹
(
î∫o
));

706 
	`DEBUG_FILE
("%s:Ö©h = %s. Fœg†%d. (Ród fœg = %d, WrôêÊag = %d, R/W fœg = %d). Fd = %d\n", 
__func__
, 
∑th
, 
oÊag
, 
O_RDONLY
, 
O_WRONLY
, 
O_RDWR
, 
ªsu…
);

708  
ªsu…
;

709 
	}
}

711 
RETT_OPENAT
 
	$_hub_OPENAT
(
INTF_OPENAT
)

713 
	`CHECK_RESOLVE_FILEOPS
(
_hub_
);

715 
	`DEBUG
("CALL: _hub_OPEN f‹ %s\n", 
∑th
);

717 
Fûe›s_p
* 
›_to_u£
 = 
NULL
;

719 
ªsu…
;

721 i‡(
dúfd
 =
AT_FDCWD
) {

722 
ªsu…
 = 
	`_hub_OPEN
(
CALL_OPEN
);

723 i‡(
ªsu…
 < 0) {

726  
ªsu…
;

729 
›_to_u£
 = 
_hub_fûe›s
;

731 
	`as£π
(
›_to_u£
 !
NULL
);

733 i‡(
	`FLAGS_INCLUDE
(
oÊag
, 
O_CREAT
)) {

734 
va_li°
 
¨g
;

735 
	`va_°¨t
(
¨g
, 
oÊag
);

736 
mode
 = 
	`va_¨g
(
¨g
, );

737 
	`va_íd
(
¨g
);

738 
ªsu…
 = 
›_to_u£
->
	`OPENAT
(
dúfd
, 
∑th
, 
oÊag
, 
mode
);

740 
ªsu…
 = 
›_to_u£
->
	`OPENAT
(
dúfd
, 
∑th
, 
oÊag
);

743 if(
ªsu…
 >= 0) {

744 
	`DEBUG
("_hub_OPENássignög fd %òfûe› %s\n", 
ªsu…
, 
›_to_u£
->
«me
);

745 
_hub_fd_lookup
[
ªsu…
] = 
›_to_u£
;

747 
	`DEBUG
("_hub_OPEN->%s_OPEN faûed;ÇŸássignög fûe›.\n", 
›_to_u£
->
«me
);

750  
ªsu…
;

751 
	}
}

753 
RETT_EXECVE
 
	$_hub_EXECVE
(
INTF_EXECVE
) {

755 
	`CHECK_RESOLVE_FILEOPS
(
_hub_
);

757 
Fûe›s_p
* 
›_to_u£
 = 
NULL
;

758 
ªsu…
 = -1, 
exec_hub_fd
 = -1, 
i
 = 0;

759 
hub_›s
[1024];

760 
off£t_ö_m≠
 = 0;

762 
i
 = 0; i < 1024; i++) {

763 i‡(
_hub_fd_lookup
[
i
] =
NULL
)

764 
hub_›s
[
i
] = 0;

765 i‡(
_hub_fd_lookup
[
i
] =
_hub_fûe›s
)

766 
hub_›s
[
i
] = 1;

767 i‡(
_hub_fd_lookup
[
i
] =
_hub_m™aged_fûe›s
)

768 
hub_›s
[
i
] = 2;

771 
exec_hub_fd
 = 
	`shm_›í
("exec-hub", 
O_RDWR
 | 
O_CREAT
, 
S_IRUSR
 | 
S_IWUSR
);

772 i‡(
exec_hub_fd
 == -1) {

773 
	`¥ötf
("%s: %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

774 
	`as£π
(0);

777 
ªs
 = 
_hub_fûe›s
->
	`TRUNC64
(
exec_hub_fd
, (1024*1024));

778 i‡(
ªs
 == -1) {

779 
	`¥ötf
("%s: fåunˇã faûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

780 
	`as£π
(0);

783 *
shm_¨ó
 = 
	`mm≠
(
NULL
, 1024*1024, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
exec_hub_fd
, 0);

784 i‡(
shm_¨ó
 =
NULL
) {

785 
	`¥ötf
("%s: mm≠ faûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

786 
	`as£π
(0);

789 i‡(
	`mem˝y
(
shm_¨ó
 + 
off£t_ö_m≠
, 
hub_›s
, 1024 * ()Ë=
NULL
) {

790 
	`¥ötf
("%s: mem˝y o‡hub op†Áûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

791 
	`as£π
(0);

794 
off£t_ö_m≠
 += (1024 * ());

797 
›_to_u£
 = 
_hub_m™aged_fûe›s
;

798 
ªsu…
 = 
›_to_u£
->
	`EXECVE
(
CALL_EXECVE
);

800  
ªsu…
;

801 
	}
}

803 
RETT_EXECVP
 
	$_hub_EXECVP
(
INTF_EXECVP
) {

805 
	`CHECK_RESOLVE_FILEOPS
(
_hub_
);

807 
Fûe›s_p
* 
›_to_u£
 = 
NULL
;

808 
ªsu…
 = -1, 
exec_hub_fd
 = -1, 
i
 = 0;

809 
hub_›s
[1024];

810 
off£t_ö_m≠
 = 0;

812 
i
 = 0; i < 1024; i++) {

813 i‡(
_hub_fd_lookup
[
i
] =
NULL
)

814 
hub_›s
[
i
] = 0;

815 i‡(
_hub_fd_lookup
[
i
] =
_hub_fûe›s
)

816 
hub_›s
[
i
] = 1;

817 i‡(
_hub_fd_lookup
[
i
] =
_hub_m™aged_fûe›s
)

818 
hub_›s
[
i
] = 2;

821 
exec_hub_fd
 = 
	`shm_›í
("exec-hub", 
O_RDWR
 | 
O_CREAT
, 
S_IRUSR
 | 
S_IWUSR
);

822 i‡(
exec_hub_fd
 == -1) {

823 
	`¥ötf
("%s: %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

824 
	`as£π
(0);

827 
ªs
 = 
_hub_fûe›s
->
	`TRUNC64
(
exec_hub_fd
, (1024*1024));

828 i‡(
ªs
 == -1) {

829 
	`¥ötf
("%s: fåunˇã faûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

830 
	`as£π
(0);

833 *
shm_¨ó
 = 
	`mm≠
(
NULL
, 1024*1024, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
exec_hub_fd
, 0);

834 i‡(
shm_¨ó
 =
NULL
) {

835 
	`¥ötf
("%s: mm≠ faûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

836 
	`as£π
(0);

839 i‡(
	`mem˝y
(
shm_¨ó
 + 
off£t_ö_m≠
, 
hub_›s
, 1024 * ()Ë=
NULL
) {

840 
	`¥ötf
("%s: mem˝y o‡hub op†Áûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

841 
	`as£π
(0);

844 
off£t_ö_m≠
 += (1024 * ());

847 
›_to_u£
 = 
_hub_m™aged_fûe›s
;

848 
ªsu…
 = 
›_to_u£
->
	`EXECVP
(
CALL_EXECVP
);

850  
ªsu…
;

851 
	}
}

853 
RETT_EXECV
 
	$_hub_EXECV
(
INTF_EXECV
) {

855 
	`CHECK_RESOLVE_FILEOPS
(
_hub_
);

857 
Fûe›s_p
* 
›_to_u£
 = 
NULL
;

858 
ªsu…
 = -1, 
exec_hub_fd
 = -1, 
i
 = 0;

859 
hub_›s
[1024];

860 
off£t_ö_m≠
 = 0;

862 
i
 = 0; i < 1024; i++) {

863 i‡(
_hub_fd_lookup
[
i
] =
NULL
)

864 
hub_›s
[
i
] = 0;

865 i‡(
_hub_fd_lookup
[
i
] =
_hub_fûe›s
)

866 
hub_›s
[
i
] = 1;

867 i‡(
_hub_fd_lookup
[
i
] =
_hub_m™aged_fûe›s
)

868 
hub_›s
[
i
] = 2;

871 
exec_hub_fd
 = 
	`shm_›í
("exec-hub", 
O_RDWR
 | 
O_CREAT
, 
S_IRUSR
 | 
S_IWUSR
);

872 i‡(
exec_hub_fd
 == -1) {

873 
	`¥ötf
("%s: %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

874 
	`as£π
(0);

877 
ªs
 = 
_hub_fûe›s
->
	`TRUNC64
(
exec_hub_fd
, (1024*1024));

878 i‡(
ªs
 == -1) {

879 
	`¥ötf
("%s: fåunˇã faûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

880 
	`as£π
(0);

883 *
shm_¨ó
 = 
	`mm≠
(
NULL
, 1024*1024, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
exec_hub_fd
, 0);

884 i‡(
shm_¨ó
 =
NULL
) {

885 
	`¥ötf
("%s: mm≠ faûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

886 
	`as£π
(0);

889 i‡(
	`mem˝y
(
shm_¨ó
 + 
off£t_ö_m≠
, 
hub_›s
, 1024 * ()Ë=
NULL
) {

890 
	`¥ötf
("%s: mem˝y o‡hub op†Áûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

891 
	`as£π
(0);

894 
off£t_ö_m≠
 += (1024 * ());

897 
›_to_u£
 = 
_hub_m™aged_fûe›s
;

898 
ªsu…
 = 
›_to_u£
->
	`EXECV
(
CALL_EXECV
);

900  
ªsu…
;

901 
	}
}

903 
RETT_EXECL
 
	$_hub_EXECL
(
INTF_EXECL
) {

905 
	`CHECK_RESOLVE_FILEOPS
(
_hub_
);

907 
Fûe›s_p
* 
›_to_u£
 = 
NULL
;

908 
ªsu…
 = -1, 
exec_hub_fd
 = -1, 
i
 = 0;

909 
hub_›s
[1024];

910 
off£t_ö_m≠
 = 0;

911 c⁄° *
¨gv1
 = 
NULL
;

912 c⁄° *
¨gv2
 = 
NULL
;

914 
va_li°
 
¨gli°
;

915 
	`va_°¨t
(
¨gli°
, 
¨g
);

916 
¨gv1
 = 
	`va_¨g
(
¨gli°
, const *);

917 
¨gv2
 = 
	`va_¨g
(
¨gli°
, const *);

918 
	`va_íd
(
¨gli°
);

921 
i
 = 0; i < 1024; i++) {

922 i‡(
_hub_fd_lookup
[
i
] =
NULL
)

923 
hub_›s
[
i
] = 0;

924 i‡(
_hub_fd_lookup
[
i
] =
_hub_fûe›s
)

925 
hub_›s
[
i
] = 1;

926 i‡(
_hub_fd_lookup
[
i
] =
_hub_m™aged_fûe›s
)

927 
hub_›s
[
i
] = 2;

930 
exec_hub_fd
 = 
	`shm_›í
("exec-hub", 
O_RDWR
 | 
O_CREAT
, 
S_IRUSR
 | 
S_IWUSR
);

931 i‡(
exec_hub_fd
 == -1) {

932 
	`¥ötf
("%s: %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

933 
	`as£π
(0);

936 
ªs
 = 
_hub_fûe›s
->
	`TRUNC64
(
exec_hub_fd
, (1024*1024));

937 i‡(
ªs
 == -1) {

938 
	`¥ötf
("%s: fåunˇã faûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

939 
	`as£π
(0);

942 *
shm_¨ó
 = 
	`mm≠
(
NULL
, 1024*1024, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
exec_hub_fd
, 0);

943 i‡(
shm_¨ó
 =
NULL
) {

944 
	`¥ötf
("%s: mm≠ faûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

945 
	`as£π
(0);

948 i‡(
	`mem˝y
(
shm_¨ó
 + 
off£t_ö_m≠
, 
hub_›s
, 1024 * ()Ë=
NULL
) {

949 
	`¥ötf
("%s: mem˝y o‡hub op†Áûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

950 
	`as£π
(0);

953 
off£t_ö_m≠
 += (1024 * ());

956 
›_to_u£
 = 
_hub_m™aged_fûe›s
;

957 
ªsu…
 = 
›_to_u£
->
	`EXECL
(
CALL_EXECL
, 
¨gv1
, 
¨gv2
, (*Ë
NULL
);

959  
ªsu…
;

960 
	}
}

964 
RETT_SHM_COPY
 
	$_hub_SHM_COPY
() {

966 
	`HUB_CHECK_RESOLVE_FILEOPS
(
_hub_
, 
SHM_COPY
);

967 
exec_hub_fd
 = -1, 
i
 = 0;

968 
hub_›s
[1024];

969 
off£t_ö_m≠
 = 0;

971 
exec_hub_fd
 = 
	`shm_›í
("exec-hub", 
O_RDONLY
, 0666);

972 i‡(
exec_hub_fd
 == -1) {

973 
	`¥ötf
("%s: %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

974 
	`as£π
(0);

977 *
shm_¨ó
 = 
	`mm≠
(
NULL
, 1024*1024, 
PROT_READ
, 
MAP_SHARED
, 
exec_hub_fd
, 0);

978 i‡(
shm_¨ó
 =
NULL
) {

979 
	`¥ötf
("%s: mm≠ faûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

980 
	`as£π
(0);

983 i‡(
	`mem˝y
(
hub_›s
, 
shm_¨ó
 + 
off£t_ö_m≠
, 1024 * ()Ë=
NULL
) {

984 
	`¥ötf
("%s: mem˝y o‡hub op†Áûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

985 
	`as£π
(0);

988 
i
 = 0; i < 1024; i++) {

989 i‡(
hub_›s
[
i
] == 0)

990 
_hub_fd_lookup
[
i
] = 
NULL
;

991 i‡(
hub_›s
[
i
] == 1)

992 
_hub_fd_lookup
[
i
] = 
_hub_fûe›s
;

993 i‡(
hub_›s
[
i
] == 2)

994 
_hub_fd_lookup
[
i
] = 
_hub_m™aged_fûe›s
;

997 
	`munm≠
(
shm_¨ó
, 1024*1024);

998 
	`shm_u∆ök
("exec-hub");

1000  
_hub_m™aged_fûe›s
->
	`SHM_COPY
();

1001 
	}
}

1004 #ifde‡
TRACE_FP_CALLS


1024 
RETT_FOPEN
 
	$_hub_FOPEN
(
INTF_FOPEN
)

1026 
	`CHECK_RESOLVE_FILEOPS
(
_hub_
);

1028 
	`DEBUG
("CALL: _hub_FOPEN f‹ %s\n", 
∑th
);

1030 
FILE
 *
Â
 = 
NULL
;

1031 
fd
 = -1, 
oÊag
 = 0;

1032 
num_mode_ch¨s
 = 0;

1045 i‡((
mode
[0] == 'w' || mode[0] == 'a') && mode[1] == '+') {

1046 
oÊag
 |
O_RDWR
;

1047 
oÊag
 |
O_CREAT
;

1048 
num_mode_ch¨s
 += 2;

1050 i‡(
mode
[0] == 'r' && mode[1] == '+') {

1051 
oÊag
 |
O_RDWR
;

1052 
num_mode_ch¨s
 += 2;

1054 i‡(
mode
[0] == 'w' || mode[0] == 'a') {

1055 
oÊag
 |
O_WRONLY
;

1056 
oÊag
 |
O_CREAT
;

1057 
oÊag
 |
O_TRUNC
;

1058 
num_mode_ch¨s
++;

1059 } i‡(
mode
[0] == 'r') {

1060 
oÊag
 |
O_RDONLY
;

1061 
num_mode_ch¨s
++;

1067 
	`DEBUG_FILE
("%s:Ö©h = %s, modê%s\n", 
__func__
, 
∑th
, 
mode
);

1069 i‡(
mode
[0] == 'a') {

1070 
oÊag
 |
O_APPEND
;

1071 
num_mode_ch¨s
++;

1074 i‡(
mode
[
num_mode_ch¨s
] == 'e') {

1075 
oÊag
 |
O_CLOEXEC
;

1076 
num_mode_ch¨s
++;

1079 i‡(
	`FLAGS_INCLUDE
(
oÊag
,
O_CREAT
))

1080 
fd
 = 
	`_hub_OPEN
(
∑th
, 
oÊag
, 0666);

1082 
fd
 = 
	`_hub_OPEN
(
∑th
, 
oÊag
);

1084 i‡(
fd
 >= 0) {

1085 
Â
 = 
	`fd›í
(
fd
, 
mode
);

1086 i‡(!
Â
) {

1087 
	`DEBUG_FILE
("%s: fd›í faûed!Éº‹ = %s, fd = %d, modê%s\n", 
__func__
, 
	`°ªº‹
(
î∫o
), 
fd
, 
mode
);

1088 
	`as£π
(0);

1092  
Â
;

1093 
	}
}

1095 
RETT_FOPEN64
 
	$_hub_FOPEN64
(
INTF_FOPEN64
) {

1097  
	`_hub_FOPEN
(
CALL_FOPEN64
);

1098 
	}
}

1101 
RETT_MKSTEMP
 
	$_hub_MKSTEMP
(
INTF_MKSTEMP
)

1103 
	`CHECK_RESOLVE_FILEOPS
(
_hub_
);

1105 
	`DEBUG
("CÆÀd _hub_mk°em∞wôhÅem∂©ê%s; makögáÇew fûíame...\n", 
fûe
);

1107 *
suffix
 = 
fûe
 + 
	`°æí
(file) - 6;

1109 if(
suffix
 =
NULL
) {

1110 
	`DEBUG
("InvÆidÅem∂©ê°rög (%sË∑s£dÅÿmk°emp\n", 
fûe
);

1111 
î∫o
 = 
EINVAL
;

1115 
RETT_OPEN
 
ªsu…
 = -1;

1117 
i
;

1118 
suc˚ss
 = 0;

1119 
i
=0; i<1000000; i++)

1121 
	`•rötf
(
suffix
, "%.6i", 
i
);

1123 
fs
 = 
	`ac˚ss
(
fûe
, 
F_OK
);

1125 if(
fs
 == -1) {

1126 
suc˚ss
 = 1;

1132 if(!
suc˚ss
) {

1133 
	`DEBUG
("Noávailable fileÇames!\n");

1137 
	`DEBUG
("Gíî©ed fûíamê%s. CÆlög (ªguœrË›í...\n", 
fûe
);

1139 
ªsu…
 = 
	`›í
(
fûe
, 
O_CREAT
 | 
O_EXCL
 | 
O_RDWR
, 0600);

1141  
ªsu…
;

1142 
	}
}

1145 #ifde‡
TRACE_FP_CALLS


1147 
RETT_FCLOSE
 
	$_hub_FCLOSE
(
INTF_FCLOSE
)

1149 
	`CHECK_RESOLVE_FILEOPS
(
_hub_
);

1151 if(
_hub_fd_lookup
[
	`fûío
(
Â
)]==
NULL
) {

1152 
	`DEBUG
("Th© fûêdes¸ùt‹ (%iËi†övÆid:Öîh≠†you didn'àˇŒ o≥¿fú°?\n", 
	`fûío
(
Â
));

1153 
î∫o
 = 
EBADF
;

1157 
	`DEBUG
("CALL: _hub_CLOSE\n");

1159 
	`as£π
(
_hub_fd_lookup
[
	`fûío
(
Â
)]!=
NULL
);

1161 
	`DEBUG
("_hub_CLOSE i†ˇŒög %s->CLOSE\n", 
_hub_fd_lookup
[
	`fûío
(
Â
)]->
«me
);

1163 
RETT_CLOSE
 
ªsu…
 = 
	`_hub_CLOSE
(
	`fûío
(
Â
));

1165  
ªsu…
;

1166 
	}
}

1170 
RETT_CLOSE
 
	$_hub_CLOSE
(
INTF_CLOSE
)

1172 
	`CHECK_RESOLVE_FILEOPS
(
_hub_
);

1174 if–(
fûe
<0Ë|| (fûê>
OPEN_MAX
) ) {

1175 
	`DEBUG
("fd %òi†œrgîÅh™ÅhêmaximumÇumbî o‡›í fûes; ign‹ög it.\n", 
fûe
);

1176 
	`DEBUG_FILE
("fd %òi†œrgîÅh™ÅhêmaximumÇumbî o‡›í fûes; ign‹ög it.\n", 
fûe
);

1177 
î∫o
 = 
EBADF
;

1181 if(
_hub_fd_lookup
[
fûe
]==
NULL
) {

1182 
	`DEBUG
("Th© fûêdes¸ùt‹ (%iËi†övÆid:Öîh≠†you didn'àˇŒ o≥¿fú°? Assignög hub fûe›s\n", 
fûe
);

1183 
	`DEBUG_FILE
("Th© fûêdes¸ùt‹ (%iËi†övÆid:Öîh≠†you didn'àˇŒ o≥¿fú°? Assignög hub fûe›s\n", 
fûe
);

1184 
_hub_fd_lookup
[
fûe
] = 
_hub_fûe›s
;

1189 
	`DEBUG_FILE
("CALL: _hub_CLOSE. Fd = %d\n", 
fûe
);

1191 
	`as£π
(
_hub_fd_lookup
[
fûe
]!=
NULL
);

1192 
	`as£π
(
_hub_fd_lookup
[
fûe
]->
«me
!=
NULL
);

1194 
	`DEBUG
("_hub_CLOSE i†ˇŒög %s->CLOSE\n", 
_hub_fd_lookup
[
fûe
]->
«me
);

1196 
Fûe›s_p
* 
ãmp
 = 
_hub_fd_lookup
[
fûe
];

1197 
_hub_fd_lookup
[
fûe
] = 
NULL
;

1198 
ªsu…
 = 
ãmp
->
	`CLOSE
(
CALL_CLOSE
);

1200 if(
ªsu…
) {

1201 
	`DEBUG
("ˇŒÅÿ%s->CLOSE faûed: %s\n", 
_hub_fûe›s
->
«me
, 
	`°ªº‹
(
î∫o
));

1202  
ªsu…
;

1205  
ªsu…
;

1206 
	}
}

1208 
RETT_DUP
 
	$_hub_DUP
(
INTF_DUP
)

1210 
	`HUB_CHECK_RESOLVE_FILEOPS
(
_hub_
, 
DUP
);

1212 
	`DEBUG
("CALL: _hub_DUP(%i)\n", 
fûe
);

1214 if–(
fûe
<0Ë|| (fûê>
OPEN_MAX
) ) {

1215 
	`DEBUG
("fd %òi†œrgîÅh™ÅhêmaximumÇumbî o‡›í fûes; ign‹ög it.\n", 
fûe
);

1216 
î∫o
 = 
EBADF
;

1220 if(
_hub_fd_lookup
[
fûe
]==
NULL
) {

1221 
	`DEBUG_FILE
("Th© fûêdes¸ùt‹ (%iËi†övÆid:Öîh≠†you didn'àˇŒ o≥¿fú°?\n", 
fûe
);

1222 
î∫o
 = 
EBADF
;

1226 
	`as£π
(
_hub_fd_lookup
[
fûe
]!=
NULL
);

1227 
	`as£π
(
_hub_fd_lookup
[
fûe
]->
«me
!=
NULL
);

1229 
	`DEBUG_FILE
("_hub_DUP i†ˇŒög %s->DUP\n", 
_hub_fd_lookup
[
fûe
]->
«me
);

1231 
ªsu…
 = 
_hub_fd_lookup
[
fûe
]->
	`DUP
(
CALL_DUP
);

1233 if(
ªsu…
 >= 0) {

1234 
	`DEBUG
("Hub(dupËm™agögÇew FD %òwôh samê›†(\"%s\"Ëa†öôü»FD (%i)\n", 
ªsu…
, 
_hub_fd_lookup
[
fûe
]->
«me
, file);

1235 
	`DEBUG_FILE
("Hub(dupËm™agögÇew FD %òwôh samê›†(\"%s\"Ëa†öôü»FD (%i)\n", 
ªsu…
, 
_hub_fd_lookup
[
fûe
]->
«me
, file);

1236 
_hub_fd_lookup
[
ªsu…
] = _hub_fd_lookup[
fûe
];

1242  
ªsu…
;

1243 
	}
}

1246 
RETT_DUP2
 
	$_hub_DUP2
(
INTF_DUP2
)

1248 
	`HUB_CHECK_RESOLVE_FILEOPS
(
_hub_
, 
DUP2
);

1250 
	`DEBUG_FILE
("CALL: _hub_DUP2(%i, %i)\n", 
fûe
, 
fd2
);

1252 if–(
fûe
<0Ë|| (fûê>
OPEN_MAX
) ) {

1253 
	`DEBUG
("fd %òi†œrgîÅh™ÅhêmaximumÇumbî o‡›í fûes; ign‹ög it.\n", 
fûe
);

1254 
î∫o
 = 
EBADF
;

1258 if–(
fd2
<0Ë|| (fd2 >
OPEN_MAX
) ) {

1259 
	`DEBUG
("fd %òi†œrgîÅh™ÅhêmaximumÇumbî o‡›í fûes; ign‹ög it.\n", 
fd2
);

1260 
î∫o
 = 
EBADF
;

1264 if(
_hub_fd_lookup
[
fûe
]==
NULL
) {

1265 
	`DEBUG_FILE
("Thêfú° fûêdes¸ùt‹ (%iËi†övÆid:Öîh≠†you didn'àˇŒ o≥¿fú°?\n", 
fûe
);

1266 
î∫o
 = 
EBADF
;

1278 if–
_hub_fd_lookup
[
fûe
] !_hub_fd_lookup[
fd2
] ) {

1280 
	`WARNING
("fd1 (%iË™d fd2 (%iËdÿnŸ havêthêßmêh™dÀrs! (%†™d %s)\n", 
fûe
, 
fd2
,
_hub_fd_lookup
[fûe]->
«me
, _hub_fd_lookup[fd2]->name );

1282 if(
_hub_fd_lookup
[
fûe
] =
_hub_m™aged_fûe›s
) {

1283 
	`DEBUG
("I'm goingÅoállowÅhis because it's closingÅhe unmanaged file\n");

1285 
	`DEBUG
("This shall beállowed because we wantÅo handleÇormal files with Posix operations.\n");

1289 
	`DEBUG
("_hub_DUP2: fd1 (%iË™d fd2 (%iËhavêthêßmêh™dÀ∏(%s)\n", 
fûe
, 
fd2
, 
_hub_fd_lookup
[fûe]->
«me
);

1292 
	`DEBUG_FILE
("_hub_DUP2 i†ˇŒög %s->DUP2(%i, %iË’=%p)\n", 
_hub_fd_lookup
[
fûe
]->
«me
, fûe, 
fd2
, _hub_fd_lookup[fûe]->
DUP2
);

1294 
ªsu…
 = 
_hub_fd_lookup
[
fûe
]->
	`DUP2
(
CALL_DUP2
);

1297 if(
ªsu…
 < 0)

1299 
	`DEBUG_FILE
("DUP2 call hadánÉrror.\n");

1300 
	`WARNING
("fd2 (%iËmayÇŸ bêc‹ª˘ly m¨kedá†vÆid/övÆid i¿submoduÀs\n", 
fd2
);

1304 
	`DEBUG_FILE
("DUP2 call completed successfully.\n");

1306 if(
ªsu…
 !
fd2
)

1308 
	`DEBUG_FILE
("_hub_DUP2:Ñesu…!=fd2 (%ò!%i), sÿÀt'†upd©êthêèbÀ...\n", 
ªsu…
, 
fd2
);

1309 
_hub_fd_lookup
[
fd2
] = 
NULL
;

1312 
	`DEBUG_FILE
("Hub(dup2Ëm™agögÇew FD %òwôh samê›†(\"%s\"Ëa†öôü»FD (%i)\n", 
ªsu…
, 
_hub_fd_lookup
[
fûe
]->
«me
, file);

1314 
_hub_fd_lookup
[
ªsu…
] = _hub_fd_lookup[
fûe
];

1317  
ªsu…
;

1318 
	}
}

1321 
RETT_FCNTL
 
	$_hub_FCNTL
(
INTF_FCNTL
) {

1323 
	`CHECK_RESOLVE_FILEOPS
(
_hub_
);

1325 
	`DEBUG
("CALL: _hub_FCNTL f‹ %d\n", 
fûe
);

1327 
Fûe›s_p
* 
›_to_u£
 = 
NULL
;

1328 
ªsu…
 = 0, 
num_∑øms
 = 0;

1329 
va_li°
 
¨g
;

1330 
¨g3_öt
 = 0;

1331 
Êock
 *
¨g3_Êock
 = 
NULL
;

1332 
f_ow√r_ex
 *
¨g3_fow√r_ex
 = 
NULL
;

1333 
uöt64_t
 *
¨g3_uöt64
 = 
NULL
;

1335 
cmd
) {

1337 
F_DUPFD
:

1338 
num_∑øms
 = 3;

1339 
	`va_°¨t
(
¨g
, 
cmd
);

1340 
¨g3_öt
 = 
	`va_¨g
(
¨g
, );

1341 
	`va_íd
(
¨g
);

1342 
›_to_u£
 = 
_hub_fûe›s
;

1345 
F_DUPFD_CLOEXEC
:

1346 
num_∑øms
 = 3;

1347 
	`va_°¨t
(
¨g
, 
cmd
);

1348 
¨g3_öt
 = 
	`va_¨g
(
¨g
, );

1349 
	`va_íd
(
¨g
);

1350 
›_to_u£
 = 
_hub_fûe›s
;

1353 
F_GETFD
:

1354 
num_∑øms
 = 2;

1355 
›_to_u£
 = 
_hub_fûe›s
;

1358 
F_SETFD
:

1359 
num_∑øms
 = 3;

1360 
	`va_°¨t
(
¨g
, 
cmd
);

1361 
¨g3_öt
 = 
	`va_¨g
(
¨g
, );

1362 
	`va_íd
(
¨g
);

1363 
›_to_u£
 = 
_hub_fûe›s
;

1366 
F_GETFL
:

1367 
num_∑øms
 = 2;

1368 
›_to_u£
 = 
_hub_fûe›s
;

1371 
F_SETFL
:

1372 
num_∑øms
 = 3;

1373 
	`va_°¨t
(
¨g
, 
cmd
);

1374 
¨g3_öt
 = 
	`va_¨g
(
¨g
, );

1375 
	`va_íd
(
¨g
);

1376 i‡(
_hub_fd_lookup
[
fûe
] =
NULL
) {

1377 
	`DEBUG
("%s: AŒ fûe›†nuŒ f‹ fd = %d. SëtögÅÿposix\n", 
__func__
, 
fûe
);

1378 
›_to_u£
 = 
_hub_fûe›s
;

1380 
›_to_u£
 = 
_hub_fd_lookup
[
fûe
];

1383 
F_SETLK
:

1384 
num_∑øms
 = 3;

1385 
	`va_°¨t
(
¨g
, 
cmd
);

1386 
¨g3_Êock
 = 
	`va_¨g
(
¨g
, 
Êock
 *);

1387 
	`va_íd
(
¨g
);

1388 
›_to_u£
 = 
_hub_fûe›s
;

1391 
F_SETLKW
:

1392 
num_∑øms
 = 3;

1393 
	`va_°¨t
(
¨g
, 
cmd
);

1394 
¨g3_Êock
 = 
	`va_¨g
(
¨g
, 
Êock
 *);

1395 
	`va_íd
(
¨g
);

1396 
›_to_u£
 = 
_hub_fûe›s
;

1399 
F_GETLK
:

1400 
num_∑øms
 = 3;

1401 
	`va_°¨t
(
¨g
, 
cmd
);

1402 
¨g3_Êock
 = 
	`va_¨g
(
¨g
, 
Êock
 *);

1403 
	`va_íd
(
¨g
);

1404 
›_to_u£
 = 
_hub_fûe›s
;

1407 
F_OFD_SETLK
:

1408 
num_∑øms
 = 3;

1409 
	`va_°¨t
(
¨g
, 
cmd
);

1410 
¨g3_Êock
 = 
	`va_¨g
(
¨g
, 
Êock
 *);

1411 
	`va_íd
(
¨g
);

1412 
›_to_u£
 = 
_hub_fûe›s
;

1415 
F_OFD_SETLKW
:

1416 
num_∑øms
 = 3;

1417 
	`va_°¨t
(
¨g
, 
cmd
);

1418 
¨g3_Êock
 = 
	`va_¨g
(
¨g
, 
Êock
 *);

1419 
	`va_íd
(
¨g
);

1420 
›_to_u£
 = 
_hub_fûe›s
;

1423 
F_OFD_GETLK
:

1424 
num_∑øms
 = 3;

1425 
	`va_°¨t
(
¨g
, 
cmd
);

1426 
¨g3_Êock
 = 
	`va_¨g
(
¨g
, 
Êock
 *);

1427 
	`va_íd
(
¨g
);

1428 
›_to_u£
 = 
_hub_fûe›s
;

1431 
F_GETOWN
:

1432 
num_∑øms
 = 2;

1433 
›_to_u£
 = 
_hub_fûe›s
;

1436 
F_SETOWN
:

1437 
num_∑øms
 = 3;

1438 
	`va_°¨t
(
¨g
, 
cmd
);

1439 
¨g3_öt
 = 
	`va_¨g
(
¨g
, );

1440 
	`va_íd
(
¨g
);

1441 
›_to_u£
 = 
_hub_fûe›s
;

1444 
F_GETOWN_EX
:

1445 
num_∑øms
 = 3;

1446 
	`va_°¨t
(
¨g
, 
cmd
);

1447 
¨g3_fow√r_ex
 = 
	`va_¨g
(
¨g
, 
f_ow√r_ex
 *);

1448 
	`va_íd
(
¨g
);

1449 
›_to_u£
 = 
_hub_fûe›s
;

1452 
F_SETOWN_EX
:

1453 
num_∑øms
 = 3;

1454 
	`va_°¨t
(
¨g
, 
cmd
);

1455 
¨g3_fow√r_ex
 = 
	`va_¨g
(
¨g
, 
f_ow√r_ex
 *);

1456 
	`va_íd
(
¨g
);

1457 
›_to_u£
 = 
_hub_fûe›s
;

1460 
F_GETSIG
:

1461 
num_∑øms
 = 2;

1462 
›_to_u£
 = 
_hub_fûe›s
;

1465 
F_SETSIG
:

1466 
num_∑øms
 = 3;

1467 
	`va_°¨t
(
¨g
, 
cmd
);

1468 
¨g3_öt
 = 
	`va_¨g
(
¨g
, );

1469 
	`va_íd
(
¨g
);

1470 
›_to_u£
 = 
_hub_fûe›s
;

1473 
F_SETLEASE
:

1474 
num_∑øms
 = 3;

1475 
	`va_°¨t
(
¨g
, 
cmd
);

1476 
¨g3_öt
 = 
	`va_¨g
(
¨g
, );

1477 
	`va_íd
(
¨g
);

1478 
›_to_u£
 = 
_hub_fûe›s
;

1481 
F_GETLEASE
:

1482 
num_∑øms
 = 2;

1483 
›_to_u£
 = 
_hub_fûe›s
;

1486 
F_NOTIFY
:

1487 
num_∑øms
 = 3;

1488 
	`va_°¨t
(
¨g
, 
cmd
);

1489 
¨g3_öt
 = 
	`va_¨g
(
¨g
, );

1490 
	`va_íd
(
¨g
);

1491 
›_to_u£
 = 
_hub_fûe›s
;

1494 
F_SETPIPE_SZ
:

1495 
num_∑øms
 = 3;

1496 
	`va_°¨t
(
¨g
, 
cmd
);

1497 
¨g3_öt
 = 
	`va_¨g
(
¨g
, );

1498 
	`va_íd
(
¨g
);

1499 
›_to_u£
 = 
_hub_fûe›s
;

1502 
F_GETPIPE_SZ
:

1503 
num_∑øms
 = 2;

1504 
›_to_u£
 = 
_hub_fûe›s
;

1552 i‡(
num_∑øms
 == 2) {

1553 
ªsu…
 = 
›_to_u£
->
	`FCNTL
(
fûe
, 
cmd
);

1556 i‡(
¨g3_uöt64
 !
NULL
)

1557 
ªsu…
 = 
›_to_u£
->
	`FCNTL
(
fûe
, 
cmd
, 
¨g3_uöt64
);

1558 i‡(
¨g3_fow√r_ex
 !
NULL
)

1559 
ªsu…
 = 
›_to_u£
->
	`FCNTL
(
fûe
, 
cmd
, 
¨g3_fow√r_ex
);

1560 if(
¨g3_Êock
 !
NULL
)

1561 
ªsu…
 = 
›_to_u£
->
	`FCNTL
(
fûe
, 
cmd
, 
¨g3_Êock
);

1563 
ªsu…
 = 
›_to_u£
->
	`FCNTL
(
fûe
, 
cmd
, 
¨g3_öt
);

1564 
	`DEBUG
("%s:árg 3 = %d\n", 
__func__
, 
¨g3_öt
);

1565 i‡(
cmd
 =
F_DUPFD
 && 
ªsu…
 != -1) {

1566 
_hub_fd_lookup
[
fûe
] = 
_hub_fûe›s
;

1567 
_hub_fd_lookup
[
ªsu…
] = 
_hub_fûe›s
;

1572 i‡(
ªsu…
 == -1) {

1573 
	`DEBUG_FILE
("%s: FCNTL faûed.\n", 
__func__
);

1574 
	`as£π
(0);

1577 
	`DEBUG
("%s: f˙éÑëu∫ed %d\n", 
__func__
, 
ªsu…
);

1578  
ªsu…
;

1579 
	}
}

1582 
RETT_IOCTL
 
	$_hub_IOCTL
(
INTF_IOCTL
)

1584 
	`CHECK_RESOLVE_FILEOPS
(
_hub_
);

1587 
	`DEBUG
("CALL: _hub_IOCTL\n");

1589 
va_li°
 
¨g
;

1590 
	`va_°¨t
(
¨g
, 
ªque°
);

1591 * 
thúd
 = 
	`va_¨g
(
¨g
, *);

1593 
RETT_IOCTL
 
ªsu…
 = 
_hub_fûe›s
->
	`IOCTL
(
fûe
, 
ªque°
, 
thúd
);

1596  
ªsu…
;

1597 
	}
}

1599 
RETT_OPEN64
 
	$_hub_OPEN64
(
INTF_OPEN64
)

1601 
	`CHECK_RESOLVE_FILEOPS
(
_hub_
);

1604 
	`DEBUG
("CALL: _hub_OPEN64\n");

1605 i‡(
	`FLAGS_INCLUDE
(
oÊag
, 
O_CREAT
))

1607 
va_li°
 
¨g
;

1608 
	`va_°¨t
(
¨g
, 
oÊag
);

1609 
mode
 = 
	`va_¨g
(
¨g
, );

1610 
	`va_íd
(
¨g
);

1612  
	`_hub_OPEN
(
∑th
, 
oÊag
, 
mode
);

1615  
	`_hub_OPEN
(
∑th
, 
oÊag
);

1617 
	}
}

1619 
RETT_SOCKET
 
	$_hub_SOCKET
(
INTF_SOCKET
)

1621 
	`CHECK_RESOLVE_FILEOPS
(
_hub_
);

1624 
	`DEBUG
("CALL: _hub_SOCKET\n");

1626 
RETT_SOCKET
 
ªsu…
 = 
_hub_fûe›s
->
	`SOCKET
(
CALL_SOCKET
);

1628 i‡(
ªsu…
 > 0) {

1630 
_hub_fd_lookup
[
ªsu…
] = 
_hub_fûe›s
;

1634  
ªsu…
;

1635 
	}
}

1637 
RETT_ACCEPT
 
	$_hub_ACCEPT
(
INTF_ACCEPT
)

1639 
	`CHECK_RESOLVE_FILEOPS
(
_hub_
);

1642 
	`DEBUG
("CALL: _hub_ACCEPT\n");

1644 
RETT_ACCEPT
 
ªsu…
 = 
_hub_fûe›s
->
	`ACCEPT
(
CALL_ACCEPT
);

1646 i‡(
ªsu…
 > 0) {

1648 
_hub_fd_lookup
[
ªsu…
] = 
_hub_fûe›s
;

1652  
ªsu…
;

1653 
	}
}

1655 
RETT_UNLINK
 
	$_hub_UNLINK
(
INTF_UNLINK
)

1657 
	`CHECK_RESOLVE_FILEOPS
(
_hub_
);

1660 
	`DEBUG
("CALL: _hub_UNLINK\n");

1662 
RETT_UNLINK
 
ªsu…
 = 
_hub_m™aged_fûe›s
->
	`UNLINK
(
CALL_UNLINK
);

1665  
ªsu…
;

1666 
	}
}

1668 
RETT_UNLINKAT
 
	$_hub_UNLINKAT
(
INTF_UNLINKAT
)

1670 
	`CHECK_RESOLVE_FILEOPS
(
_hub_
);

1674 
	`DEBUG
("CALL: _hub_UNLINKAT\n");

1676 
RETT_UNLINKAT
 
ªsu…
 = 
_hub_m™aged_fûe›s
->
	`UNLINKAT
(
CALL_UNLINKAT
);

1679  
ªsu…
;

1680 
	}
}

	@fileops_nvp.c

3 
	~"nv_comm⁄.h
"

4 
	~<sys/ty≥s.h
>

5 
	~<sys/mm™.h
>

6 
	~<sys/°©.h
>

7 
	~<f˙é.h
>

8 
	~<limôs.h
>

9 
	~<±hªad.h
>

10 
	~<sig«l.h
>

11 
	~<löux/kî√l.h
>

12 
	~<sys/sysˇŒ.h
>

13 
	~<uni°d.h
>

14 
	~"≥rfcou¡.h
"

16 
	~"nvp_mm™.h
"

18 
	~"fûe›s_nvp.h
"

19 
	~"mîkÀLogiˇlBåì.h
"

20 
	~"thªad_h™dÀ.h
"

21 
	~"°ack.h
"

22 
	~"Ãu_ˇche.h
"

23 
	~"timîs.h
"

25 #i‡
NON_TEMPORAL_WRITES


26 
	~"n⁄_ãmp‹Æ.h
"

29 
	$BOOST_PP_SEQ_FOR_EACH
(
DECLARE_WITHOUT_ALIAS_FUNCTS_IWRAP
, 
_nvp_
, 
ALLOPS_WPAREN
)

30 
	$BOOST_PP_SEQ_FOR_EACH
(
DECLARE_WITHOUT_ALIAS_FUNCTS_IWRAP
, 
_nvp_
, 
SHM_WPAREN
)

32 
MMAP_PAGE_SIZE
;

34 * 
_nvp_zbuf
;

36 
±hªad_•ölock_t
 
node_lookup_lock
[
NUM_NODE_LISTS
];

38 
NVFûe
* 
_nvp_fd_lookup
;

39 
execve_fd_∑ssög
[1024];

42 
lfds711_queue_umm_ñemít
 *
qe
, 
qe_dummy
;

43 
lfds711_queue_umm_°©e
 
qs
;

47 
_nvp_‰ì_li°_hód
;

49 
_nvp_öo_lookup
[1024];

50 
InodeToM≠pög
* 
_nvp_öo_m≠pög
;

52 
	`_nvp_öô2
();

54 
	`MODULE_REGISTRATION_F
("nvp", 
_nvp_
, 
	`_nvp_öô2
(); );

56 
	#NVP_WRAP_HAS_FD
(
›
Ë\

	)

57 
RETT_
##
›
 
_nvp_
##
	`›
 ( 
INTF_
##op ) { \

58 
	`CHECK_RESOLVE_FILEOPS
(
_nvp_
); \

59 
	`DEBUG
("_nvp_"#›" i†ju° wøµög %s->"#›"\n", 
_nvp_fûe›s
->
«me
); \

60 if(
	`UNLIKELY
(
fûe
>=
OPEN_MAX
)Ë{ 
	`DEBUG
("fûêdes¸ùt‹Åoÿœrgê(%ò> %i)\n", fûe, OPEN_MAX-1); 
î∫o
 = 
EBADF
;  (
RETT_
##
›
) -1; } \

61 if(
	`UNLIKELY
(
fûe
<0)Ë{ 
	`DEBUG
("fûê< 0 (fûê%i).Ñëu∫ -1;\n", fûe); 
î∫o
 = 
EBADF
;  (
RETT_
##
›
) -1; } \

62 if(
	`UNLIKELY
(!
_nvp_fd_lookup
[
fûe
].
vÆid
)Ë{ 
	`DEBUG
("Th© fûêdes¸ùt‹ (%iËi†övÆid\n", fûe); 
î∫o
 = 
EBADF
;  -1; } \

63 
	`DEBUG
("_nvp_" #› " i†ˇŒög %s->" #› "\n", 
_nvp_fûe›s
->
«me
); \

64  (
RETT_
##
›
Ë
_nvp_fûe›s
->
	`›
–
CALL_
##op ); \

65 
	}
}

67 
	#NVP_WRAP_NO_FD
(
›
Ë\

	)

68 
	gRETT_
##
›
 
	g_nvp_
##› ( 
INTF_
##op ) { \

69 
CHECK_RESOLVE_FILEOPS
(
_nvp_
); \

70 
DEBUG
("_nvp_"#›" i†ju° wøµög %s->"#›"\n", 
_nvp_fûe›s
->
«me
); \

71  
	g_nvp_fûe›s
->
›
–
CALL_
##op ); \

74 
	#NVP_WRAP_HAS_FD_IWRAP
(
r
, 
d©a
, 
ñem
Ë
	`NVP_WRAP_HAS_FD
”Àm)

	)

75 
	#NVP_WRAP_NO_FD_IWRAP
(
r
, 
d©a
, 
ñem
Ë
	`NVP_WRAP_NO_FD
”Àm)

	)

77 
BOOST_PP_SEQ_FOR_EACH
(
NVP_WRAP_HAS_FD_IWRAP
, 
∂a˚hﬁdî
, (
ACCEPT
))

78 
BOOST_PP_SEQ_FOR_EACH
(
NVP_WRAP_NO_FD_IWRAP
, 
∂a˚hﬁdî
, (
PIPE
Ë(
FORK
Ë(
SOCKET
))

83 
c›y_u£r_noˇche
(*
d°
, c⁄° *
§c
, 
size
, 
zî‹e°
);

85 
ölöe
 
	$c›y_‰om_u£r_ö©omic_noˇche
(*
d°
, c⁄° *
§c
, 
size
) {

86  
	`c›y_u£r_noˇche
(
d°
, 
§c
, 
size
, 0);

87 
	}
}

89 
ölöe
 * 
	$my_mem˝y_noˇche
(* 
d°
, c⁄° * 
§c
, 
size
) {

90 if(
	`c›y_‰om_u£r_ö©omic_noˇche
(
d°
, 
§c
, 
size
)) {

91  
d°
;

95 
	}
}

97 
ölöe
 *
	$öãl_mem˝y
(* 
__ª°ri˘__
 
b
, c⁄° * __ª°ri˘__ 
a
, 
size_t
 
n
){

98 *
s1
 = 
b
;

99 c⁄° *
s2
 = 
a
;

100 ; 0<
n
; --n)*
s1
++ = *
s2
++;

101  
b
;

102 
	}
}

104 *(*
	gimp‹t_mem˝y
)(* 
__ª°ri˘__
 
	gb
, c⁄° * __ª°ri˘__ 
	ga
, 
size_t
 
	gn
);

106 * 
__mem˝y
(* 
__ª°ri˘__
 
to
, c⁄° * __ª°ri˘__ 
‰om
, 
size_t
 
Àn
);

108 
	#MMX2_MEMCPY_MIN_LEN
 0x40

	)

109 
	#MMX_MMREG_SIZE
 8

	)

112 * 
	$mmx2_mem˝y
(* 
__ª°ri˘__
 
to
, c⁄° * __ª°ri˘__ 
‰om
, 
size_t
 
Àn
)

114 *
ªtvÆ
;

180 if(
Àn
)

181 
ªtvÆ
 = 
	`mem˝y
(
to
, 
‰om
, 
Àn
);

183 
ªtvÆ
 = 
to
;

185  
ªtvÆ
;

186 
	}
}

205 
	gnum_›í
;

206 
	gnum_˛o£
;

207 
	gnum_ªad
;

208 
	gnum_wrôe
;

209 
	gnum_°©
;

210 
	gnum_u∆ök
;

211 
	gnum_mm≠
;

212 
	gnum_≠≥ndfsync
;

213 
	gnum_mem˝y_ªad
;

214 
	gnum_mem˝y_wrôe
;

215 
	gnum_posix_ªad
;

216 
	gnum_posix_wrôe
;

217 
	gnum_fsync
;

218 
	gnum_m„n˚
;

219 
	gnum_wrôe_n⁄ãmp‹Æ
;

220 
	gnum_wrôe_ãmp‹Æ
;

221 
	gnum_˛Êush›t
;

222 
	g≠≥ndfsync_size
;

223 
	gn⁄_ãmp‹Æ_wrôe_size
;

224 
	gãmp‹Æ_wrôe_size
;

225 
	gªad_size
;

226 
	gwrôe_size
;

227 
	gmem˝y_ªad_size
;

228 
	gmem˝y_wrôe_size
;

229 
	gposix_ªad_size
;

230 
	gposix_wrôe_size
;

231 
	gtŸÆ_sysˇŒs
;

232 vﬁ©ûê
size_t
 
	g_nvp_wr_exãnded
;

233 vﬁ©ûê
size_t
 
	g_nvp_wr_tŸÆ
;

235 
	$nvp_¥öt_io_°©s
()

237 
	`¥ötf
("====================== NVP IO stats: ======================\n");

238 
	`¥ötf
("›í %u, clo£ %u,ásyn¯˛o£ %u\n", 
num_›í
, 
num_˛o£
, 
num_async_˛o£
);

239 
	`¥ötf
("mm≠ %u, u∆ök %u, sèà%u\n", 
num_mm≠
, 
num_u∆ök
, 
num_°©
);

240 
	`¥ötf
("fsyn¯%u,áµídfsync: cou¡ %u sizê%Œuávîagê%Œu\n", 
num_fsync
, 
num_≠≥ndfsync
, 
≠≥ndfsync_size
,Çum_appendfsync ?áppendfsync_size /Çum_appendfsync : 0);

241 
	`¥ötf
("READ: cou¡ %u, sizê%Œu,ávîagê%Œu\n", 
num_ªad
,

242 
ªad_size
, 
num_ªad
 ?Ñead_size /Çum_read : 0);

243 
	`¥ötf
("WRITE: cou¡ %u, sizê%Œu,ávîagê%Œu\n", 
num_wrôe
,

244 
wrôe_size
, 
num_wrôe
 ? write_size /Çum_write : 0);

245 
	`¥ötf
("memcpy READ: count %u, size %llu,áverage %llu\n",

246 
num_mem˝y_ªad
, 
mem˝y_ªad_size
,

247 
num_mem˝y_ªad
 ? 
mem˝y_ªad_size
 /Çum_memcpy_read : 0);

248 
	`¥ötf
("memcpy WRITE: count %u, size %llu,áverage %llu\n",

249 
num_mem˝y_wrôe
, 
mem˝y_wrôe_size
,

250 
num_mem˝y_wrôe
 ? 
mem˝y_wrôe_size
 /Çum_memcpy_write : 0);

251 
	`¥ötf
("posix READ: count %u, size %llu,áverage %llu\n",

252 
num_posix_ªad
, 
posix_ªad_size
,

253 
num_posix_ªad
 ? 
posix_ªad_size
 /Çum_posix_read : 0);

254 
	`¥ötf
("posix WRITE: count %u, size %llu,áverage %llu\n",

255 
num_posix_wrôe
, 
posix_wrôe_size
,

256 
num_posix_wrôe
 ? 
posix_wrôe_size
 /Çum_posix_write : 0);

257 
	`¥ötf
("wrôêexãnd†%lu,ÅŸÆ %lu\n", 
_nvp_wr_exãnded
,

258 
_nvp_wr_tŸÆ
);

259 
	`¥ötf
("MFENCE: count %u\n",

260 
num_m„n˚
);

261 
	`¥ötf
("CLFLUSHOPT: count %u\n",

262 
num_˛Êush›t
);

263 
	`¥ötf
("NON_TEMPORAL_WRITES: count %u, size %llu,áverage %llu\n",

264 
num_wrôe_n⁄ãmp‹Æ
, 
n⁄_ãmp‹Æ_wrôe_size
,

265 
num_wrôe_n⁄ãmp‹Æ
 ? 
n⁄_ãmp‹Æ_wrôe_size
 /Çum_write_nontemporal : 0);

266 
	`¥ötf
("TEMPORAL WRITES: count %u, size %llu,áverage %llu\n",

267 
num_wrôe_ãmp‹Æ
, 
ãmp‹Æ_wrôe_size
,

268 
num_wrôe_ãmp‹Æ
 ? 
ãmp‹Æ_wrôe_size
 /Çum_write_temporal : 0);

269 
	`¥ötf
("TOTAL SYSCALLS (open + close +Ñead + write + fsync): count %u\n",

270 
num_›í
 + 
num_˛o£
 + 
num_posix_ªad
 + 
num_posix_wrôe
);

271 
	}
}

273 
	$msg_nvp_¥öt_io_°©s
()

275 
	`MSG
("====================== NVP IO stats: ======================\n");

276 
	`MSG
("›í %u, clo£ %u,ásyn¯˛o£ %u\n", 
num_›í
, 
num_˛o£
, 
num_async_˛o£
);

277 
	`MSG
("mm≠ %u, u∆ök %u, sèà%u\n", 
num_mm≠
, 
num_u∆ök
, 
num_°©
);

278 
	`MSG
("fsyn¯%u,áµídfsync: cou¡ %u sizê%Œuávîagê%Œu\n", 
num_fsync
, 
num_≠≥ndfsync
, 
≠≥ndfsync_size
,Çum_appendfsync ?áppendfsync_size /Çum_appendfsync : 0);

279 
	`MSG
("READ: cou¡ %u, sizê%Œu,ávîagê%Œu\n", 
num_ªad
,

280 
ªad_size
, 
num_ªad
 ?Ñead_size /Çum_read : 0);

281 
	`MSG
("WRITE: cou¡ %u, sizê%Œu,ávîagê%Œu\n", 
num_wrôe
,

282 
wrôe_size
, 
num_wrôe
 ? write_size /Çum_write : 0);

283 
	`MSG
("memcpy READ: count %u, size %llu,áverage %llu\n",

284 
num_mem˝y_ªad
, 
mem˝y_ªad_size
,

285 
num_mem˝y_ªad
 ? 
mem˝y_ªad_size
 /Çum_memcpy_read : 0);

286 
	`MSG
("memcpy WRITE: count %u, size %llu,áverage %llu\n",

287 
num_mem˝y_wrôe
, 
mem˝y_wrôe_size
,

288 
num_mem˝y_wrôe
 ? 
mem˝y_wrôe_size
 /Çum_memcpy_write : 0);

289 
	`MSG
("posix READ: count %u, size %llu,áverage %llu\n",

290 
num_posix_ªad
, 
posix_ªad_size
,

291 
num_posix_ªad
 ? 
posix_ªad_size
 /Çum_posix_read : 0);

292 
	`MSG
("posix WRITE: count %u, size %llu,áverage %llu\n",

293 
num_posix_wrôe
, 
posix_wrôe_size
,

294 
num_posix_wrôe
 ? 
posix_wrôe_size
 /Çum_posix_write : 0);

295 
	`MSG
("wrôêexãnd†%lu,ÅŸÆ %lu\n", 
_nvp_wr_exãnded
,

296 
_nvp_wr_tŸÆ
);

297 
	`MSG
("MFENCE: count %u\n",

298 
num_m„n˚
);

299 
	`MSG
("CLFLUSHOPT: count %u\n",

300 
num_˛Êush›t
);

301 
	`MSG
("NON_TEMPORAL_WRITES: count %u, size %llu,áverage %llu\n",

302 
num_wrôe_n⁄ãmp‹Æ
, 
n⁄_ãmp‹Æ_wrôe_size
,

303 
num_wrôe_n⁄ãmp‹Æ
 ? 
n⁄_ãmp‹Æ_wrôe_size
 /Çum_write_nontemporal : 0);

304 
	`MSG
("TEMPORAL WRITES: count %u, size %llu,áverage %llu\n",

305 
num_wrôe_ãmp‹Æ
, 
ãmp‹Æ_wrôe_size
,

306 
num_wrôe_ãmp‹Æ
 ? 
ãmp‹Æ_wrôe_size
 /Çum_write_temporal : 0);

307 
	`MSG
("TOTAL SYSCALLS (open + close +Ñead + write + fsync): count %u\n",

308 
num_›í
 + 
num_˛o£
 + 
num_posix_ªad
 + 
num_posix_wrôe
);

309 
	}
}

312 
	$ªsu…_nvp_¥öt_io_°©s
()

314 
	`RESULT_FILE
("====================== NVP IO stats: ======================\n");

315 
	`RESULT_FILE
("›í %u, clo£ %u,ásyn¯˛o£ %u\n", 
num_›í
, 
num_˛o£
, 
num_async_˛o£
);

316 
	`RESULT_FILE
("mm≠ %u, u∆ök %u, sèà%u\n", 
num_mm≠
, 
num_u∆ök
, 
num_°©
);

317 
	`RESULT_FILE
("fsyn¯%u,áµídfsync: cou¡ %u sizê%Œuávîagê%Œu\n", 
num_fsync
, 
num_≠≥ndfsync
, 
≠≥ndfsync_size
,Çum_appendfsync ?áppendfsync_size /Çum_appendfsync : 0);

318 
	`RESULT_FILE
("READ: cou¡ %u, sizê%Œu,ávîagê%Œu\n", 
num_ªad
,

319 
ªad_size
, 
num_ªad
 ?Ñead_size /Çum_read : 0);

320 
	`RESULT_FILE
("WRITE: cou¡ %u, sizê%Œu,ávîagê%Œu\n", 
num_wrôe
,

321 
wrôe_size
, 
num_wrôe
 ? write_size /Çum_write : 0);

322 
	`RESULT_FILE
("memcpy READ: count %u, size %llu,áverage %llu\n",

323 
num_mem˝y_ªad
, 
mem˝y_ªad_size
,

324 
num_mem˝y_ªad
 ? 
mem˝y_ªad_size
 /Çum_memcpy_read : 0);

325 
	`RESULT_FILE
("memcpy WRITE: count %u, size %llu,áverage %llu\n",

326 
num_mem˝y_wrôe
, 
mem˝y_wrôe_size
,

327 
num_mem˝y_wrôe
 ? 
mem˝y_wrôe_size
 /Çum_memcpy_write : 0);

328 
	`RESULT_FILE
("posix READ: count %u, size %llu,áverage %llu\n",

329 
num_posix_ªad
, 
posix_ªad_size
,

330 
num_posix_ªad
 ? 
posix_ªad_size
 /Çum_posix_read : 0);

331 
	`RESULT_FILE
("posix WRITE: count %u, size %llu,áverage %llu\n",

332 
num_posix_wrôe
, 
posix_wrôe_size
,

333 
num_posix_wrôe
 ? 
posix_wrôe_size
 /Çum_posix_write : 0);

334 
	`RESULT_FILE
("wrôêexãnd†%lu,ÅŸÆ %lu\n", 
_nvp_wr_exãnded
,

335 
_nvp_wr_tŸÆ
);

336 
	`RESULT_FILE
("MFENCE: count %u\n",

337 
num_m„n˚
);

338 
	`RESULT_FILE
("CLFLUSHOPT: count %u\n",

339 
num_˛Êush›t
);

340 
	`RESULT_FILE
("NON_TEMPORAL_WRITES: count %u, size %llu,áverage %llu\n",

341 
num_wrôe_n⁄ãmp‹Æ
, 
n⁄_ãmp‹Æ_wrôe_size
,

342 
num_wrôe_n⁄ãmp‹Æ
 ? 
n⁄_ãmp‹Æ_wrôe_size
 /Çum_write_nontemporal : 0);

343 
	`RESULT_FILE
("TEMPORAL WRITES: count %u, size %llu,áverage %llu\n",

344 
num_wrôe_ãmp‹Æ
, 
ãmp‹Æ_wrôe_size
,

345 
num_wrôe_ãmp‹Æ
 ? 
ãmp‹Æ_wrôe_size
 /Çum_write_temporal : 0);

346 
	`RESULT_FILE
("TOTAL SYSCALLS (open + close +Ñead + write + fsync): count %u\n",

347 
num_›í
 + 
num_˛o£
 + 
num_posix_ªad
 + 
num_posix_wrôe
);

348 
	}
}

361 
	#MEMCPY
 
mmx2_mem˝y


	)

363 
	#MMAP
 
mm≠


	)

366 
	#FSYNC_POLICY_NONE
 0

	)

367 
	#FSYNC_POLICY_FLUSH_ON_FSYNC
 1

	)

368 
	#FSYNC_POLICY_UNCACHEABLE_MAP
 2

	)

369 
	#FSYNC_POLICY_NONTEMPORAL_WRITES
 3

	)

370 
	#FSYNC_POLICY_FLUSH_ON_WRITE
 4

	)

372 
	#FSYNC_POLICY
 
FSYNC_POLICY_FLUSH_ON_FSYNC


	)

374 #i‡
FSYNC_POLICY
 =
FSYNC_POLICY_NONE


375 
	#FSYNC_MEMCPY
 
MEMCPY


	)

376 
	#FSYNC_MMAP
 
MMAP


	)

377 
	#FSYNC_FSYNC


	)

378 #ñi‡
FSYNC_POLICY
 =
FSYNC_POLICY_FLUSH_ON_FSYNC


379 
	#FSYNC_MEMCPY
 
MEMCPY


	)

380 
	#FSYNC_MMAP
 
MMAP


	)

381 
	#FSYNC_FSYNC
(
nvf
,
˝uid
,
˛o£
,
fdsync
Ë
	`fsync_Êush_⁄_fsync
“vf,˝uid,˛o£,fdsync)

	)

382 #ñi‡
FSYNC_POLICY
 =
FSYNC_POLICY_UNCACHEABLE_MAP


383 
	#FSYNC_MEMCPY
 
MEMCPY


	)

384 
	#FSYNC_MMAP
 
mm≠_fsync_unˇchóbÀ_m≠


	)

385 
	#FSYNC_FSYNC


	)

386 #ñi‡
FSYNC_POLICY
 =
FSYNC_POLICY_NONTEMPORAL_WRITES


387 
	#FSYNC_MEMCPY
 
mem˝y_fsync_n⁄ãmp‹Æ_wrôes


	)

388 
	#FSYNC_MMAP
 
MMAP


	)

389 
	#FSYNC_FSYNC
 
	`_mm_m„n˚
()

	)

390 #ñi‡
FSYNC_POLICY
 =
FSYNC_POLICY_FLUSH_ON_WRITE


391 
	#FSYNC_MEMCPY
 
mem˝y_fsync_Êush_⁄_wrôe


	)

392 
	#FSYNC_MMAP
 
MMAP


	)

393 
	#FSYNC_FSYNC
 
	`_mm_m„n˚
()

	)

399 
ˇlcuœã_ˇ∑côy
(
height
);

400 
ˇlcuœã_™⁄_ˇ∑côy
(
height
);

402 
ölöe
 
	$c›y_≠≥nds_to_fûe
(
NVFûe
* 
nvf
, 
˛o£
, 
fdsync
)

404 
ˇ∑côy
 = 
ANON_MAX_MMAP_SIZE
;

405 *
roŸ
 = 
nvf
->
node
->
™⁄ymous_roŸ
;

406 
°¨t_addr
;

407 
off_t
 
°¨t_off£t
, 
cuº_off£t
;

408 
ödex
;

409 
™⁄ymous_off£t_°¨t
, 
™⁄ymous_off£t_íd
;

410 
size_t
 
Àn_to_wrôe
;

411 
size_t
 
posix_wrôe
;

413 
ˇ∑côy
 = 
	`ˇlcuœã_™⁄_ˇ∑côy
(0);

415 
	`_mm_m„n˚
();

417 
°¨t_off£t
 = 
nvf
->
node
->
™⁄ymous_roŸ_dúty_°¨t
 * 
ANON_MAX_MMAP_SIZE
;

420 
cuº_off£t
 = 
°¨t_off£t
;

421 
ödex
 = 
cuº_off£t
 / 
ˇ∑côy
;

422 
	`DEBUG
("ödex %d\n", 
ödex
);

423 i‡(
ödex
 > 
nvf
->
node
->
™⁄ymous_roŸ_dúty_íd
)

427 if(
roŸ
[
ödex
] != 0) {

428 
°¨t_addr
 = 
roŸ
[
ödex
];

429 
™⁄ymous_off£t_°¨t
 = 
nvf
->
node
->™⁄ymous_off£t_°¨t[
ödex
];

430 
™⁄ymous_off£t_íd
 = 
nvf
->
node
->™⁄ymous_off£t_íd[
ödex
];

431 
Àn_to_wrôe
 = 
™⁄ymous_off£t_íd
 - 
™⁄ymous_off£t_°¨t
 + 1;

432 if(!
˛o£
) {

434 
num_m„n˚
++;

435 
num_wrôe_n⁄ãmp‹Æ
++;

437 if(
fdsync
) {

438 
posix_wrôe
 = 
_nvp_fûe›s
->
	`PWRITE
(
nvf
->
fd
, (c⁄° *)
°¨t_addr
 + 
™⁄ymous_off£t_°¨t
, 
Àn_to_wrôe
,Çvf->
node
->
åue_Àngth
 + 
°¨t_off£t
 +ánonymous_offset_start);

440 
posix_wrôe
 = 
	`sysˇŒ
(333, 
nvf
->
fd
, 
°¨t_addr
 + 
™⁄ymous_off£t_°¨t
, 
Àn_to_wrôe
,Çvf->
node
->
åue_Àngth
 + 
°¨t_off£t
 +ánonymous_offset_start);

442 
num_m„n˚
++;

443 
n⁄_ãmp‹Æ_wrôe_size
 +
posix_wrôe
;

446 if(
nvf
->
node
->
ª„ªn˚
 != 1)

447 
out
;

449 
num_m„n˚
++;

450 
num_wrôe_n⁄ãmp‹Æ
++;

452 
posix_wrôe
 = 
_nvp_fûe›s
->
	`PWRITE
(
nvf
->
fd
, (c⁄° *)
°¨t_addr
 + 
™⁄ymous_off£t_°¨t
, 
Àn_to_wrôe
,Çvf->
node
->
åue_Àngth
 + 
°¨t_off£t
 +ánonymous_offset_start);

454 
num_m„n˚
++;

455 
n⁄_ãmp‹Æ_wrôe_size
 +
posix_wrôe
;

458 
num_≠≥ndfsync
++;

459 
≠≥ndfsync_size
 +
Àn_to_wrôe
;

463 if(
posix_wrôe
 !
Àn_to_wrôe
) {

464 
	`ERROR
("%s: wrôêÁûed! Rós⁄ = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

465 
	`ERROR
("%s:Çvf->node->åue_Àngth = %lu,Çvf->node->Àngth = %lu, off£àö fûê%lu, sèπ_off£à%lu, index = %d, sizêo‡wrôê%lu, fd = %d, inodê%lu,Ñëu∫ vÆuê%lu\n", 
__func__
, 
nvf
->
node
->
åue_Àngth
,Çvf->node->
Àngth
,Çvf->node->åue_Àngth + 
°¨t_off£t
 + 
™⁄ymous_off£t_°¨t
, sèπ_off£t, 
ödex
, 
Àn_to_wrôe
,Çvf->
fd
,Çvf->node->
£rü o
, 
posix_wrôe
);

466 
	`fÊush
(
NULL
);

468 
	`as£π
(0);

470 
nvf
->
node
->
isAn⁄M≠Re£t
 = 0;

473 
cuº_off£t
 = cuº_off£à% 
ˇ∑côy
;

474 
°¨t_off£t
 +
ANON_MAX_MMAP_SIZE
;

477 
nvf
->
node
->
åue_Àngth
 =Çvf->node->
Àngth
;

478 if(
˛o£
)

479 
nvf
->
node
->
åue_Àngth_f‹_ªad
 =Çvf->node->
Àngth
;

481 
out
:

483 
	}
}

486 
ölöe
 
	$fsync_Êush_⁄_fsync
(
NVFûe
* 
nvf
, 
˝uid
, 
˛o£
, 
fdsync
)

488 
ö°rumíèti⁄_ty≥
 
nvnode_lock_time
;

490 #i‡
NON_TEMPORAL_WRITES


491 
out
;

493 
height
 = 
nvf
->
node
->height;

494 
ˇ∑côy
 = 
MAX_MMAP_SIZE
;

495 *
roŸ
 = 
nvf
->
node
->root;

496 *
mîkÀ_roŸ
 = 
nvf
->
node
->merkle_root;

497 
uöt64_t
 
num_ˇchñöes
 = 0;

498 
off_t
 
°¨t_off£t
 = 0, 
cuº_off£t
;

499 
ödex
;

500 #i‡
DIRTY_TRACKING


501 
°¨t_addr
;

503 if(
˛o£
)

504 
out
;

506 
ˇ∑côy
 = 
	`ˇlcuœã_ˇ∑côy
(
height
);

508 
	`_mm_m„n˚
();

509 
num_m„n˚
++;

512 
height
 = 
nvf
->
node
->height;

513 
cuº_off£t
 = 
°¨t_off£t
;

515 
ödex
 = 
cuº_off£t
 / 
ˇ∑côy
;

516 
	`DEBUG
("ödex %d\n", 
ödex
);

517 i‡(
ödex
 >1024 || 
roŸ
[ödex] =0 || 
mîkÀ_roŸ
[index] == 0) {

518 
out
;

520 i‡(
height
) {

521 
roŸ
 = (*ÏoŸ[
ödex
];

522 
mîkÀ_roŸ
 = (*)mîkÀ_roŸ[
ödex
];

523 
	`DEBUG
("%p\n", 
roŸ
);

526 #i‡
DIRTY_TRACKING


527 
°¨t_addr
 = 
roŸ
[
ödex
];

528 
num_ˇchñöes
 = 
	`åavî£Tªe
((
mîkÀBåìNode
 *)
mîkÀ_roŸ
[
ödex
], 
°¨t_addr
);

529 
num_˛Êush›t
 +
num_ˇchñöes
;

533 
cuº_off£t
 = cuº_off£à% 
ˇ∑côy
;

534 } 
height
--);

535 
°¨t_off£t
 +
MAX_MMAP_SIZE
;

538 
	`_mm_m„n˚
();

539 
num_m„n˚
++;

542 
out
:

543 if(
nvf
->
node
->
åue_Àngth
 !nvf->node->
Àngth
) {

544 #i‡
ANON_MEM_HANDLE


545 
	`DEBUG_FILE
("%s: Fûêdes¯%d,ÅruêÀngth = %lu, fakêÀngth = %lu\n", 
__func__
, 
nvf
->
fd
,Çvf->
node
->
åue_Àngth
,Çvf->node->
Àngth
);

546 
	`START_TIMING
(
nvnode_lock_t
, 
nvnode_lock_time
);

547 
	`NVP_LOCK_NODE_WR
(
nvf
);

548 
	`END_TIMING
(
nvnode_lock_t
, 
nvnode_lock_time
);

549 
	`c›y_≠≥nds_to_fûe
(
nvf
, 
˛o£
, 
fdsync
);

550 
	`NVP_UNLOCK_NODE_WR
(
nvf
);

552 
_nvp_fûe›s
->
	`FSYNC
(
nvf
->
fd
);

555 
	}
}

557 *
	$mm≠_fsync_unˇchóbÀ_m≠
(*
°¨t
, 
size_t
 
Àngth
, 
¥Ÿ
, 
Êags
, 
fd
, 
off_t
 
off£t
)

559 * 
ªsu…
 = 
	`MMAP
–
°¨t
, 
Àngth
, 
¥Ÿ
, 
Êags
, 
fd
, 
off£t
 );

563  
ªsu…
;

564 
	}
}

566 *
	$mem˝y_fsync_n⁄ãmp‹Æ_wrôes
(*
de°
, c⁄° *
§c
, 
size_t
 
n
)

571 
	`_mm_m„n˚
();

573  
NULL
;

575 
	}
}

577 *
	$mem˝y_fsync_Êush_⁄_wrôe
(*
de°
, c⁄° *
§c
, 
size_t
 
n
)

580 * 
ªsu…
 = 
	`MEMCPY
(
de°
, 
§c
, 
n
);

583 
	`_mm_m„n˚
();

584 
	`do_cÊush_Àn
(
de°
, 
n
);

585 
	`_mm_m„n˚
();

587  
ªsu…
;

588 
	}
}

694 
nvp_‰ì_båì
(*
roŸ
, *
mîkÀ_roŸ
, 
height
, *
dúty_ˇche
, 
roŸ_dúty_num
, 
tŸÆ_dúty_mm≠s
);

695 
nvp_‰ì_™⁄ymous_mm≠s
();

696 
nvp_˛ónup_node
(
NVNode
 *
node
, 
‰ì_roŸ
, 
unm≠_båì
);

698 
	$nvp_˛ónup
()

700 
i
, 
j
;

705 #i‡
BG_CLOSING


706 !
waôög_f‹_sig«l
)

707 
	`¶ìp
(1);

710 
	`ˇn˚lBgThªad
();

711 
exô_bgthªad
 = 1;

712 
˛ónup
 = 1;

713 
	`bgClo£Fûes
(1);

715 
	`nvp_‰ì_™⁄ymous_mm≠s
();

717 
	`‰ì
(
_nvp_fd_lookup
);

719 
i
 = 0; i < 
NUM_NODE_LISTS
; i++) {

720 
	`±hªad_•ö_lock
(&
node_lookup_lock
[
i
]);

722 
j
 = 0; j< 
OPEN_MAX
; j++) {

723 
	`nvp_˛ónup_node
(&
_nvp_node_lookup
[
i
][
j
], 1, 1);

726 
	`±hªad_•ö_u∆ock
(&
node_lookup_lock
[
i
]);

728 
	`‰ì
(
_nvp_node_lookup
[
i
]);

734 
i
 = 0; i < 
OPEN_MAX
; i++) {

735 
	`nvp_‰ì_båì
(
_nvp_öo_m≠pög
[
i
].
roŸ
, _nvp_öo_m≠pög[i].
mîkÀ_roŸ
, _nvp_öo_m≠pög[i].
height
, _nvp_öo_m≠pög[i].
roŸ_dúty_ˇche
, _nvp_öo_m≠pög[i].
roŸ_dúty_num
, _nvp_öo_m≠pög[i].
tŸÆ_dúty_mm≠s
);

738 
	`‰ì
(
_nvp_öo_m≠pög
);

740 
	}
}

742 
	$nvp_exô_h™dÀr
()

744 
	`MSG
("exit handler\n");

748 
	`ªsu…_nvp_¥öt_io_°©s
();

749 
	`PRINT_TIME
();

752 
	`nvp_˛ónup
();

753 
	}
}

755 
	$_nvp_SIGUSR1_h™dÀr
(
sig
)

757 
	`MSG
("SIGUSR1:Örint stats\n");

760 
	`ªsu…_nvp_¥öt_io_°©s
();

763 
	`PRINT_TIME
();

764 
	}
}

766 
	$_nvp_SIGBUS_h™dÀr
(
sig
)

768 
	`ERROR
("We gotá SIGBUS (sig %i)! "

771 "fûe.\n", 
sig
);

772 
	`¥ötf
("%s: sigbu†gŸ\n", 
__func__
);

773 
	`fÊush
(
NULL
);

775 
	`as£π
(0);

776 
	}
}

778 
	$_nvp_SHM_COPY
() {

780 
exec_Àdgî_fd
 = -1;

781 
i
,
j
;

782 
off£t_ö_m≠
 = 0;

784 
exec_Àdgî_fd
 = 
	`shm_›í
("exec-Àdgî", 
O_RDONLY
, 0666);

786 i‡(
exec_Àdgî_fd
 == -1) {

787 
	`¥ötf
("%s: shm_›í faûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

788 
	`as£π
(0);

791 *
shm_¨ó
 = 
	`mm≠
(
NULL
, 10*1024*1024, 
PROT_READ
, 
MAP_SHARED
, 
exec_Àdgî_fd
, 0);

792 i‡(
shm_¨ó
 =
NULL
) {

793 
	`¥ötf
("%s: mm≠ faûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

794 
	`as£π
(0);

797 i‡(
	`mem˝y
(
_nvp_fd_lookup
, 
shm_¨ó
 + 
off£t_ö_m≠
, 1024 * (
NVFûe
)Ë=
NULL
) {

798 
	`¥ötf
("%s: mem˝y o‡fdÜooku∞Áûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

799 
	`as£π
(0);

802 
off£t_ö_m≠
 +(1024 * (
NVFûe
));

804 i‡(
	`mem˝y
(
execve_fd_∑ssög
, 
shm_¨ó
 + 
off£t_ö_m≠
, 1024 * ()Ë=
NULL
) {

805 
	`¥ötf
("%s: mem˝y o‡off£à∑ssög faûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

808 
off£t_ö_m≠
 += (1024 * ());

810 
i
 = 0; i < 1024; i++) {

811 
_nvp_fd_lookup
[
i
].
off£t
 = (
size_t
*)
	`ˇŒoc
(1, ());

812 *(
_nvp_fd_lookup
[
i
].
off£t
Ë
execve_fd_∑ssög
[i];

815 i‡(
	`mem˝y
(
_nvp_node_lookup
[0], 
shm_¨ó
 + 
off£t_ö_m≠
, 1024*(
NVNode
)Ë=
NULL
) {

816 
	`¥ötf
("%s: mem˝y o‡nodêlooku∞Áûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

817 
	`as£π
(0);

820 
i
 = 0; i < 1024; i++) {

821 
_nvp_fd_lookup
[
i
].
node
 = 
NULL
;

822 
_nvp_node_lookup
[0][
i
].
roŸ_dúty_num
 = 0;

823 
_nvp_node_lookup
[0][
i
].
tŸÆ_dúty_mm≠s
 = 0;

824 
_nvp_node_lookup
[0][
i
].
usögAn⁄Mem
 = 0;

825 
_nvp_node_lookup
[0][
i
].
isRoŸSë
 = 0;

826 
_nvp_node_lookup
[0][
i
].
isAn⁄M≠Re£t
 = 1;

827 
_nvp_node_lookup
[0][
i
].
™⁄_mem_u£d
 = 0;

828 
_nvp_node_lookup
[0][
i
].
height
 = 0;

829 
_nvp_node_lookup
[0][
i
].
roŸ_dúty_num
 = 0;

831 
_nvp_node_lookup
[0][
i
].
roŸ
 = 
_nvp_backup_roŸs
[0][i].root;

832 
_nvp_node_lookup
[0][
i
].
™⁄ymous_roŸ
 = 
_nvp_backup_roŸs
[0][i].anonymous_root;

833 
_nvp_node_lookup
[0][
i
].
™⁄ymous_off£t_°¨t
 = 
_nvp_backup_roŸs
[0][i].anonymous_offset_start;

834 
_nvp_node_lookup
[0][
i
].
™⁄ymous_off£t_íd
 = 
_nvp_backup_roŸs
[0][i].anonymous_offset_end;

835 
_nvp_node_lookup
[0][
i
].
mîkÀ_roŸ
 = 
_nvp_backup_roŸs
[0][i].merkle_root;

838 
off£t_ö_m≠
 +(1024*(
NVNode
));

840 
i
 = 0; i < 1024; i++) {

841 i‡(
_nvp_fd_lookup
[
i
].
fd
 != -1) {

842 
j
 = 0; j < 1024; j++) {

843 i‡(
_nvp_fd_lookup
[
i
].
£rü o
 =
_nvp_node_lookup
[0][
j
].serialno) {

844 i‡(
_nvp_fd_lookup
[
i
].
fd
 == 1)

845 
	`MSG
("%s: hîe\n", 
__func__
);

846 
_nvp_fd_lookup
[
i
].
node
 = &
_nvp_node_lookup
[0][
j
];

853 i‡(
	`mem˝y
(
_nvp_öo_lookup
, 
shm_¨ó
 + 
off£t_ö_m≠
, 1024 * ()Ë=
NULL
) {

854 
	`¥ötf
("%s: mem˝y o‡öÿlooku∞Áûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

855 
	`as£π
(0);

858 
off£t_ö_m≠
 += (1024 * ());

860 i‡(
	`mem˝y
(
_nvp_‰ì_node_li°
[0], 
shm_¨ó
 + 
off£t_ö_m≠
, 1024*(
SèckNode
)Ë=
NULL
) {

861 
	`¥ötf
("%s: mem˝y o‡‰ìÇodêli° faûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

862 
	`as£π
(0);

865 
	`munm≠
(
shm_¨ó
, 10*1024*1024);

866 
	`shm_u∆ök
("exec-ledger");

867 
	}
}

869 
	$_nvp_öô2
()

871 
i
, 
j
;

872 
InodeToM≠pög
 *
ãmpM≠pög
;

874 
	`as£π
(!
	`posix_memÆign
(((**)&
_nvp_zbuf
), 4096, 4096));

877 
ASYNC_CLOSING
 = 0;

882 
_nvp_fd_lookup
 = (
NVFûe
*)
	`ˇŒoc
(
OPEN_MAX
,

883 (
NVFûe
));

885 i‡(!
_nvp_fd_lookup
)

886 
	`as£π
(0);

889 
i
 = 0; i < 
OPEN_MAX
; i++) {

890 
_nvp_fd_lookup
[
i
].
vÆid
 = 0;

891 
execve_fd_∑ssög
[
i
] = 0;

892 
	`NVP_LOCK_INIT
(
_nvp_fd_lookup
[
i
].
lock
);

896 
_nvp_˛o£d_fûes
 = (
Clo£dFûes
*)
	`ˇŒoc
(
TOTAL_CLOSED_INODES
, (ClosedFiles));

897 
i
 = 0; i < 
TOTAL_CLOSED_INODES
; i++) {

898 
_nvp_˛o£d_fûes
[
i
].
fd
 = -1;

899 
_nvp_˛o£d_fûes
[
i
].
£rü o
 = 0;

900 
_nvp_˛o£d_fûes
[
i
].
ödex_ö_‰ì_li°
 = -1;

901 
_nvp_˛o£d_fûes
[
i
].
√xt_˛o£d_fûe
 = -1;

902 
_nvp_˛o£d_fûes
[
i
].
¥ev_˛o£d_fûe
 = -1;

903 
	`NVP_LOCK_INIT
(
_nvp_˛o£d_fûes
[
i
].
lock
);

906 
Ãu_hód
 = -1;

907 
Ãu_èû
 = -1;

908 
Ãu_èû_£rü o
 = 0;

910 if(!
_nvp_˛o£d_fûes
)

911 
	`as£π
(0);

914 
öode_to_˛o£d_fûe
 = (
InodeClo£dFûe
 *)
	`ˇŒoc
(
OPEN_MAX
, (InodeClosedFile));

915 
i
 = 0; i < 
OPEN_MAX
; i++) {

916 
öode_to_˛o£d_fûe
[
i
].
ödex
 = -1;

917 
	`NVP_LOCK_INIT
(
öode_to_˛o£d_fûe
[
i
].
lock
);

920 if(!
öode_to_˛o£d_fûe
)

921 
	`as£π
(0);

926 
i
 = 0; i < 
NUM_NODE_LISTS
; i++) {

927 
_nvp_‰ì_node_li°
[
i
] = (
SèckNode
*)
	`ˇŒoc
(
OPEN_MAX
,

928 (
SèckNode
));

929 
j
 = 0; j < 
OPEN_MAX
; j++) {

930 
_nvp_‰ì_node_li°
[
i
][
j
].
‰ì_bô
 = 1;

931 
_nvp_‰ì_node_li°
[
i
][
j
].
√xt_‰ì_idx
 = j+1;

933 
_nvp_‰ì_node_li°
[
i
][
OPEN_MAX
 - 1].
√xt_‰ì_idx
 = -1;

936 
_nvp_‰ì_Ãu_li°
 = (
SèckNode
*)
	`ˇŒoc
(
OPEN_MAX
,

937 (
SèckNode
));

938 
i
 = 0; i < 
OPEN_MAX
; i++) {

939 
_nvp_‰ì_Ãu_li°
[
i
].
‰ì_bô
 = 1;

940 
_nvp_‰ì_Ãu_li°
[
i
].
√xt_‰ì_idx
 = i+1;

942 
_nvp_‰ì_Ãu_li°
[
OPEN_MAX
 - 1].
√xt_‰ì_idx
 = -1;

944 
i
 = 0; i < 
NUM_NODE_LISTS
; i++) {

945 i‡(!
_nvp_‰ì_node_li°
[
i
])

946 
	`as£π
(0);

949 if(!
_nvp_‰ì_Ãu_li°
)

950 
	`as£π
(0);

952 
i
 = 0; i < 
NUM_NODE_LISTS
; i++) {

953 
_nvp_‰ì_node_li°_hód
[
i
] = 0;

955 
_nvp_‰ì_Ãu_li°_hód
 = 0;

960 
_nvp_öo_m≠pög
 = (
InodeToM≠pög
*)
	`ˇŒoc
(
OPEN_MAX
, (InodeToMapping));

961 
	`mem£t
(
_nvp_öo_m≠pög
, 0, 
OPEN_MAX
 * (
InodeToM≠pög
));

962 i‡(!
_nvp_öo_m≠pög
)

963 
	`as£π
(0);

965 
i
=0; i<
OPEN_MAX
; i++) {

966 
ãmpM≠pög
 = &
_nvp_öo_m≠pög
[
i
];

969 
ãmpM≠pög
->
roŸ
 = 
	`mÆloc
(1024 * ());

970 
	`mem£t
(
ãmpM≠pög
->
roŸ
, 0, 1024 * ());

972 
ãmpM≠pög
->
mîkÀ_roŸ
 = 
	`mÆloc
(1024 * ());

973 
	`mem£t
(
ãmpM≠pög
->
mîkÀ_roŸ
, 0, 1024 * ());

976 
ãmpM≠pög
->
roŸ_dúty_ˇche
 = 
	`mÆloc
(20 * ());

977 
	`mem£t
(
ãmpM≠pög
->
roŸ_dúty_ˇche
, 0, 20 * ());

979 
ãmpM≠pög
->
roŸ_dúty_num
 = 0;

980 
ãmpM≠pög
->
tŸÆ_dúty_mm≠s
 = 0;

983 
_nvp_öo_m≠pög
[
i
].
£rü o
 = 0;

990 
i
 = 0; i < 
NUM_NODE_LISTS
; i++) {

991 
_nvp_node_lookup
[
i
] = (
NVNode
*)
	`ˇŒoc
(
OPEN_MAX
,

992 (
NVNode
));

993 
_nvp_backup_roŸs
[
i
] = (
backupRoŸs
*)
	`ˇŒoc
(
OPEN_MAX
,

994 (
backupRoŸs
));

995 i‡(!
_nvp_node_lookup
[
i
])

996 
	`as£π
(0);

997 
	`mem£t
(
_nvp_node_lookup
[
i
], 0, 
OPEN_MAX
 * (
NVNode
));

1000 
j
 = 0; j < 
OPEN_MAX
; j++) {

1003 
	`NVP_LOCK_INIT
(
_nvp_node_lookup
[
i
][
j
].
lock
);

1006 
_nvp_node_lookup
[
i
][
j
].
roŸ
 = 
	`mÆloc
(1024 * ());

1007 
	`mem£t
(
_nvp_node_lookup
[
i
][
j
].
roŸ
, 0, 1024 * ());

1008 
_nvp_backup_roŸs
[
i
][
j
].
roŸ
 = 
_nvp_node_lookup
[i][j].root;

1011 
_nvp_node_lookup
[
i
][
j
].
mîkÀ_roŸ
 = 
	`mÆloc
(1024 * ());

1012 
	`mem£t
(
_nvp_node_lookup
[
i
][
j
].
mîkÀ_roŸ
, 0, 1024 * ());

1013 
_nvp_backup_roŸs
[
i
][
j
].
mîkÀ_roŸ
 = 
_nvp_node_lookup
[i][j].merkle_root;

1016 
_nvp_node_lookup
[
i
][
j
].
roŸ_dúty_ˇche
 = 
	`mÆloc
(20 * ());

1017 
	`mem£t
(
_nvp_node_lookup
[
i
][
j
].
roŸ_dúty_ˇche
, 0, 20 * ());

1018 
_nvp_backup_roŸs
[
i
][
j
].
roŸ_dúty_ˇche
 = 
_nvp_node_lookup
[i][j].root_dirty_cache;

1020 
_nvp_node_lookup
[
i
][
j
].
roŸ_dúty_num
 = 0;

1021 
_nvp_node_lookup
[
i
][
j
].
tŸÆ_dúty_mm≠s
 = 0;

1024 
_nvp_node_lookup
[
i
][
j
].
™⁄ymous_roŸ
 = 
	`mÆloc
(1024 * ());

1025 
	`mem£t
(
_nvp_node_lookup
[
i
][
j
].
™⁄ymous_roŸ
, 0, 1024 * ());

1026 
_nvp_backup_roŸs
[
i
][
j
].
™⁄ymous_roŸ
 = 
_nvp_node_lookup
[i][j].anonymous_root;

1028 
_nvp_node_lookup
[
i
][
j
].
™⁄ymous_off£t_°¨t
 = 
	`mÆloc
(1024 * ());

1029 
	`mem£t
(
_nvp_node_lookup
[
i
][
j
].
™⁄ymous_off£t_°¨t
, 
UINT32_MAX
, 1024 * ());

1030 
_nvp_backup_roŸs
[
i
][
j
].
™⁄ymous_off£t_°¨t
 = 
_nvp_node_lookup
[i][j].anonymous_offset_start;

1033 
_nvp_node_lookup
[
i
][
j
].
™⁄ymous_off£t_íd
 = 
	`mÆloc
(1024 * ());

1034 
	`mem£t
(
_nvp_node_lookup
[
i
][
j
].
™⁄ymous_off£t_íd
, 0, 1024 * ());

1035 
_nvp_backup_roŸs
[
i
][
j
].
™⁄ymous_off£t_íd
 = 
_nvp_node_lookup
[i][j].anonymous_offset_end;

1041 
i
 = 0; i < 
NUM_NODE_LISTS
; i++) {

1042 
	`±hªad_•ö_öô
(&
node_lookup_lock
[
i
], 
PTHREAD_PROCESS_SHARED
);

1044 
	`±hªad_•ö_öô
(&
globÆ_lock
, 
PTHREAD_PROCESS_SHARED
);

1045 
	`±hªad_•ö_öô
(&
globÆ_lock_˛o£d_fûes
, 
PTHREAD_PROCESS_SHARED
);

1046 
	`±hªad_•ö_öô
(&
globÆ_lock_Ãu_hód
, 
PTHREAD_PROCESS_SHARED
);

1047 
	`±hªad_•ö_öô
(&
°ack_lock
, 
PTHREAD_PROCESS_SHARED
);

1053 
	`lfds711_queue_umm_öô_vÆid_⁄_cuºít_logiˇl_c‹e
–&
qs
, &
qe_dummy
, 
NULL
 );

1055 
MMAP_PAGE_SIZE
 = 
	`gë∑gesize
();

1056 
	`SANITYCHECK
(
MMAP_PAGE_SIZE
 > 100);

1058 
	`INITIALIZE_TIMERS
();

1064 
˛ónup
 = 0;

1065 
waôög_f‹_sig«l
 = 0;

1066 
°¨ãd_bgthªad
 = 0;

1067 
exô_bgthªad
 = 0;

1068 
lim_num_fûes
 = 100;

1069 
lim_™⁄_mem
 = (5ULL) * 1024 * 1024 * 1024;

1070 
lim_™⁄_mem_˛o£d
 = 500 * 1024 * 1024;

1071 
run_background_thªad
 = 0;

1072 
	`öôEnvF‹Bg
();

1074 
™⁄_mem_Æloˇãd
 = 0;

1075 
™⁄_mem_˛o£d_fûes
 = 0;

1076 #i‡
BG_CLOSING


1077 
ˇŒedBgThªad
 = 0;

1078 
	`°¨tBgThªad
();

1084 
	`DEBUG
("Installing signal handler.\n");

1085 
	`sig«l
(
SIGBUS
, 
_nvp_SIGBUS_h™dÀr
);

1087 
	`sig«l
(
SIGUSR1
, 
_nvp_SIGUSR1_h™dÀr
);

1092 
	`©exô
(
nvp_exô_h™dÀr
);

1094 i‡(
	`ac˚ss
("/dev/shm/exec-Àdgî", 
F_OK
 ) != -1)

1095 
execv_d⁄e
 = 1;

1097 
execv_d⁄e
 = 0;

1099 
	}
}

1101 
	$nvp_å™s„r_to_‰ì_™⁄ymous_poﬁ
(*
roŸ
, *
off£t_°¨t
, *
off£t_íd
, 
™⁄ymous_roŸ_dúty_°¨t
, 
™⁄ymous_roŸ_dúty_íd
, 
NVNode
 *
node
) {

1103 
i
, 
num_‰ì_™⁄ymous_mm≠s
;

1104 
‰ì_™⁄_poﬁ
 *
‰ì_poﬁ_of_™⁄ymous_mm≠s
;

1106 if(
™⁄ymous_roŸ_dúty_°¨t
 != -1) {

1108 
‰ì_poﬁ_of_™⁄ymous_mm≠s
 = 
	`mÆloc
((
‰ì_™⁄_poﬁ
)*(
™⁄ymous_roŸ_dúty_íd
 - 
™⁄ymous_roŸ_dúty_°¨t
 + 1));

1109 
num_‰ì_™⁄ymous_mm≠s
 = 0;

1111 
i
=
™⁄ymous_roŸ_dúty_°¨t
; i<=
™⁄ymous_roŸ_dúty_íd
; i++) {

1112 if(
roŸ
[
i
]) {

1113 
off£t_°¨t
[
i
] = 
UINT32_MAX
;

1114 
off£t_íd
[
i
] = 0;

1116 
‰ì_poﬁ_of_™⁄ymous_mm≠s
[
num_‰ì_™⁄ymous_mm≠s
].
addr
 = 
roŸ
[
i
];

1117 
	`LFDS711_QUEUE_UMM_SET_VALUE_IN_ELEMENT
–
‰ì_poﬁ_of_™⁄ymous_mm≠s
[
num_‰ì_™⁄ymous_mm≠s
].
qe
, &free_pool_of_anonymous_mmaps[num_free_anonymous_mmaps] );

1118 
	`lfds711_queue_umm_íqueue
–&
qs
, &
‰ì_poﬁ_of_™⁄ymous_mm≠s
[
num_‰ì_™⁄ymous_mm≠s
].
qe
 );

1119 
num_‰ì_™⁄ymous_mm≠s
++;

1120 
roŸ
[
i
] = 0;

1122 
	`__©omic_„tch_sub
(&
™⁄_mem_Æloˇãd
, 
ANON_MAX_MMAP_SIZE
, 
__ATOMIC_SEQ_CST
);

1123 i‡(
node
->
async_fûe_˛o£
)

1124 
	`__©omic_„tch_sub
(&
™⁄_mem_˛o£d_fûes
, 
ANON_MAX_MMAP_SIZE
, 
__ATOMIC_SEQ_CST
);

1132 
node
->
™⁄ymous_roŸ_dúty_°¨t
 = -1;

1133 
node
->
™⁄ymous_roŸ_dúty_íd
 = -1;

1134 
node
->
isAn⁄M≠Re£t
 = 1;

1135 
node
->
usögAn⁄Mem
 = 0;

1139 
	}
}

1141 
	$nvp_‰ì_™⁄ymous_mm≠s
()

1143 
addr
;

1144 
‰ì_™⁄_poﬁ
 *
ãmp_‰ì_poﬁ_of_™⁄ymous_mm≠s
;

1146  
	`lfds711_queue_umm_dequeue
(&
qs
, &
qe
) ) {

1147 
ãmp_‰ì_poﬁ_of_™⁄ymous_mm≠s
 = 
	`LFDS711_QUEUE_UMM_GET_VALUE_FROM_ELEMENT
–*
qe
 );

1148 
addr
 = 
ãmp_‰ì_poﬁ_of_™⁄ymous_mm≠s
->addr;

1149 
	`munm≠
((*)
addr
, 
ANON_MAX_MMAP_SIZE
);

1152 
	`lfds711_queue_umm_˛ónup
–&
qs
, 
NULL
 );

1154 
	}
}

1156 
	$nvp_‰ì_båì
(*
roŸ
, *
mîkÀ_roŸ
, 
height
, *
dúty_ˇche
, 
roŸ_dúty_num
, 
tŸÆ_dúty_mm≠s
)

1158 
i
, 
dúty_ödex
;

1160 
dúty_ödex
 = 0;

1161 i‡(
height
 == 0) {

1162 
i
 = 0; i < 
roŸ_dúty_num
; i++) {

1163 
dúty_ödex
 = 
dúty_ˇche
[
i
];

1164 if(
roŸ
 &&ÑoŸ[
dúty_ödex
]) {

1165 
	`munm≠
((*)
roŸ
[
dúty_ödex
], 
MAX_MMAP_SIZE
);

1166 
roŸ
[
dúty_ödex
] = 0;

1167 
mîkÀ_roŸ
[
dúty_ödex
] = 0;

1171 
roŸ_dúty_num
 = 0;

1173 if(
tŸÆ_dúty_mm≠s
) {

1174 
i
 = 0; i < 1024; i++) {

1175 i‡(
roŸ
 &&ÑoŸ[
i
]) {

1176 
	`DEBUG
("munmap: %d,áddr 0x%lx\n",

1177 
i
, 
roŸ
[i]);

1178 
	`munm≠
((*)
roŸ
[
i
], 
MAX_MMAP_SIZE
);

1179 
roŸ
[
i
] = 0;

1180 
mîkÀ_roŸ
[
i
] = 0;

1187 
i
 = 0; i < 1024; i++) {

1188 i‡(
roŸ
[
i
] && 
mîkÀ_roŸ
[i]) {

1189 
	`nvp_‰ì_båì
((*)
roŸ
[
i
], (*)
mîkÀ_roŸ
[i], 
height
 - 1, 
NULL
, 0, 1);

1190 
roŸ
[
i
] = 0;

1191 
mîkÀ_roŸ
[
i
] = 0;

1195 
	`‰ì
(
roŸ
);

1196 
	`‰ì
(
mîkÀ_roŸ
);

1197 
	}
}

1200 
	$nvp_add_to_öode_m≠pög
(
NVNode
 *
node
, 
öo_t
 
£rü o
)

1202 
InodeToM≠pög
 *
m≠pögToBeAdded
;

1204 
ödex
 = 
£rü o
 % 1024;

1205 
i
, 
dúty_ödex
;

1207 i‡(
£rü o
 == 0)

1210 
	`DEBUG
("CÀ™up:ÑoŸ 0x%x, heighà%u\n", 
roŸ
, 
height
);

1213 
m≠pögToBeAdded
 = &
_nvp_öo_m≠pög
[
ödex
];

1219 if(
m≠pögToBeAdded
->
£rü o
 != 0 && mappingToBeAdded->serialno != serialno) {

1221 
	`nvp_‰ì_båì
(
m≠pögToBeAdded
->
roŸ
, m≠pögToBeAdded->
mîkÀ_roŸ
, m≠pögToBeAdded->
height
, m≠pögToBeAdded->
roŸ_dúty_ˇche
, m≠pögToBeAdded->
roŸ_dúty_num
, m≠pögToBeAdded->
tŸÆ_dúty_mm≠s
);

1223 
m≠pögToBeAdded
->
£rü o
 = 0;

1227 if(
node
->
tŸÆ_dúty_mm≠s
) {

1228 
	`mem˝y
(
m≠pögToBeAdded
->
roŸ
, 
node
->root, 1024 * ());

1229 
	`mem˝y
(
m≠pögToBeAdded
->
mîkÀ_roŸ
, 
node
->merkle_root, 1024 * ());

1233 
i
 = 0; i < 
node
->
roŸ_dúty_num
; i++) {

1234 
dúty_ödex
 = 
node
->
roŸ_dúty_ˇche
[
i
];

1235 if(
node
->
roŸ
 &&Çode->roŸ[
dúty_ödex
])

1236 
m≠pögToBeAdded
->
roŸ
[
dúty_ödex
] = 
node
->root[dirty_index];

1238 if(
node
->
mîkÀ_roŸ
 &&Çode->mîkÀ_roŸ[
dúty_ödex
])

1239 
m≠pögToBeAdded
->
mîkÀ_roŸ
[
dúty_ödex
] = 
node
->merkle_root[dirty_index];

1243 
m≠pögToBeAdded
->
£rü o
 = serialno;

1245 if(
node
->
roŸ_dúty_num
)

1246 
	`mem˝y
(
m≠pögToBeAdded
->
roŸ_dúty_ˇche
, 
node
->root_dirty_cache, 20 * ());

1248 
m≠pögToBeAdded
->
roŸ_dúty_num
 = 
node
->root_dirty_num;

1249 
m≠pögToBeAdded
->
tŸÆ_dúty_mm≠s
 = 
node
->total_dirty_mmaps;

1250 
m≠pögToBeAdded
->
height
 = 
node
->height;

1254 
	}
}

1259 
	$nvp_ªåõve_öode_m≠pög
(
NVNode
 *
node
)

1262 
InodeToM≠pög
 *
m≠pögToBeRërõved
;

1263 
ödex
 = 
node
->
£rü o
 % 1024;

1264 
dúty_ödex
, 
i
;

1266 
	`DEBUG
("CÀ™up:ÑoŸ 0x%x, heighà%u\n", 
roŸ
, 
height
);

1272 
m≠pögToBeRërõved
 = &
_nvp_öo_m≠pög
[
ödex
];

1274 if(
m≠pögToBeRërõved
->
£rü o
 =
node
->serialno) {

1280 if(
m≠pögToBeRërõved
->
tŸÆ_dúty_mm≠s
) {

1281 
	`mem˝y
(
node
->
roŸ
, 
m≠pögToBeRërõved
->root, 1024 * ());

1282 
	`mem˝y
(
node
->
mîkÀ_roŸ
, 
m≠pögToBeRërõved
->merkle_root, 1024 * ());

1286 
i
 = 0; i < 
m≠pögToBeRërõved
->
roŸ_dúty_num
; i++) {

1287 
dúty_ödex
 = 
m≠pögToBeRërõved
->
roŸ_dúty_ˇche
[
i
];

1288 if(
m≠pögToBeRërõved
->
roŸ
 && m≠pögToBeRërõved->roŸ[
dúty_ödex
])

1289 
node
->
roŸ
[
dúty_ödex
] = 
m≠pögToBeRërõved
->root[dirty_index];

1291 if(
m≠pögToBeRërõved
->
mîkÀ_roŸ
 && m≠pögToBeRërõved->mîkÀ_roŸ[
dúty_ödex
])

1292 
node
->
mîkÀ_roŸ
[
dúty_ödex
] = 
m≠pögToBeRërõved
->merkle_root[dirty_index];

1297 if(
m≠pögToBeRërõved
->
roŸ_dúty_num
)

1298 
	`mem˝y
(
node
->
roŸ_dúty_ˇche
, 
m≠pögToBeRërõved
->root_dirty_cache, 20 * ());

1300 
node
->
roŸ_dúty_num
 = 
m≠pögToBeRërõved
->root_dirty_num;

1301 
node
->
tŸÆ_dúty_mm≠s
 = 
m≠pögToBeRërõved
->total_dirty_mmaps;

1302 
node
->
height
 = 
m≠pögToBeRërõved
->height;

1306 
out
;

1310 
out
:

1312 
	}
}

1314 
	$nvp_ª£t_m≠pögs
(
NVNode
 *
node
)

1316 
i
, 
dúty_ödex
;

1318 
	`DEBUG
("CÀ™up:ÑoŸ 0x%x, heighà%u\n", 
roŸ
, 
height
);

1320 if(
node
->
roŸ_dúty_num
) {

1322 if(
node
->
tŸÆ_dúty_mm≠s
) {

1323 
	`mem£t
(
node
->
roŸ
, 0, 1024 * ());

1324 
	`mem£t
(
node
->
mîkÀ_roŸ
, 0, 1024 * ());

1327 
i
 = 0; i < 
node
->
roŸ_dúty_num
; i++) {

1328 
dúty_ödex
 = 
node
->
roŸ_dúty_ˇche
[
i
];

1329 if(
node
->
roŸ
 &&Çode->roŸ[
dúty_ödex
]) {

1330 
node
->
roŸ
[
dúty_ödex
] = 0;

1331 
node
->
mîkÀ_roŸ
[
dúty_ödex
] = 0;

1336 if(
node
->
roŸ_dúty_num
)

1337 
	`mem£t
(
node
->
roŸ_dúty_ˇche
, 0, 20 * ());

1340 
node
->
isRoŸSë
 = 0;

1341 
node
->
height
 = 0;

1342 
node
->
tŸÆ_dúty_mm≠s
 = 0;

1343 
node
->
roŸ_dúty_num
 = 0;

1345 
	}
}

1347 
	$nvp_˛ónup_node
(
NVNode
 *
node
, 
‰ì_roŸ
, 
unm≠_båì
)

1350 
height
 = 
node
->height;

1351 *
roŸ
 = 
node
->root;

1352 *
mîkÀ_roŸ
 = 
node
->merkle_root;

1353 *
dúty_ˇche
;

1354 
tŸÆ_dúty_mm≠s
 = 
node
->total_dirty_mmaps;

1355 
roŸ_dúty_num
 = 
node
->root_dirty_num;

1357 
	`DEBUG
("CÀ™up:ÑoŸ 0x%x, heighà%u\n", 
roŸ
, 
height
);

1359 if(
roŸ_dúty_num
 > 0)

1360 
dúty_ˇche
 = 
node
->
roŸ_dúty_ˇche
;

1362 
dúty_ˇche
 = 
NULL
;

1364 if(
unm≠_båì
 && 
node
->
roŸ_dúty_num
) {

1366 
	`nvp_‰ì_båì
(
roŸ
, 
mîkÀ_roŸ
, 
height
, 
dúty_ˇche
, 
roŸ_dúty_num
, 
tŸÆ_dúty_mm≠s
);

1372 i‡(
‰ì_roŸ
 && 
node
->
roŸ
[0]) {

1373 
	`‰ì
(
node
->
roŸ
);

1374 
	`‰ì
(
node
->
mîkÀ_roŸ
);

1375 
	`‰ì
(
node
->
roŸ_dúty_ˇche
);

1376 
node
->
roŸ
 = 
NULL
;

1377 
node
->
mîkÀ_roŸ
 = 
NULL
;

1378 
node
->
roŸ_dúty_ˇche
 = 
NULL
;

1387 if(!
unm≠_båì
)

1388 
	`nvp_ª£t_m≠pögs
(
node
);

1389 
	}
}

1391 
	$nvp_öô_™⁄ymous
(
NVNode
 *
node
)

1393 if(!
node
->
™⁄ymous_roŸ
) {

1394 
node
->
™⁄ymous_roŸ
 = 
	`mÆloc
(1024 * ());

1395 
	`mem£t
(
node
->
™⁄ymous_roŸ
, 0, 1024 * ());

1397 if(!
node
->
™⁄ymous_off£t_°¨t
) {

1398 
node
->
™⁄ymous_off£t_°¨t
 = 
	`mÆloc
(1024 * ());

1399 
	`mem£t
(
node
->
™⁄ymous_off£t_°¨t
, 
UINT32_MAX
, 1024 * ());

1401 if(!
node
->
™⁄ymous_off£t_íd
) {

1402 
node
->
™⁄ymous_off£t_íd
 = 
	`mÆloc
(1024 * ());

1403 
	`mem£t
(
node
->
™⁄ymous_off£t_íd
, 0, 1024 * ());

1405 
	}
}

1407 
	$nvp_öô_node
(
NVNode
 *
node
)

1409 
i
;

1410 i‡(!
node
->
roŸ
) {

1411 
node
->
roŸ
 = 
	`mÆloc
(1024 * ());

1412 
	`mem£t
(
node
->
roŸ
, 0, 1024 * ());

1414 if(!
node
->
mîkÀ_roŸ
) {

1415 
node
->
mîkÀ_roŸ
 = 
	`mÆloc
(1024 * (
mîkÀBåìNode
 *));

1416 
i
=0; i<1024; i++)

1417 
node
->
mîkÀ_roŸ
[
i
] = 0;

1419 if(!
node
->
roŸ_dúty_ˇche
) {

1420 
node
->
roŸ_dúty_ˇche
 = 
	`mÆloc
(20 * ());

1421 
	`mem£t
(
node
->
roŸ_dúty_ˇche
, 0, 20 * ());

1423 
	}
}

1425 
NVNode
 * 
	$nvp_Æloˇã_node
(
li°_idx
)

1427 
NVNode
 *
node
 = 
NULL
;

1428 
idx_ö_li°
 = -1;

1429 
i
, 
ˇndid©e
 = -1;

1431 #i‡
PRINT_DEBUG_MSGS


1432 
	`¥ötf
("%s:Ö›pög from sèck, index = %d\n", 
__func__
, 
li°_idx
);

1433 
	`fÊush
(
NULL
);

1436 
idx_ö_li°
 = 
	`p›_‰om_°ack
(1, 0, 
li°_idx
);

1438 #i‡
PRINT_DEBUG_MSGS


1439 
	`¥ötf
("%s:Ö›≥d from sèck, index = %d\n", 
__func__
, 
li°_idx
);

1440 
	`fÊush
(
NULL
);

1443 if(
idx_ö_li°
 != -1) {

1444 
node
 = &
_nvp_node_lookup
[
li°_idx
][
idx_ö_li°
];

1445 
node
->
ödex_ö_‰ì_li°
 = 
idx_ö_li°
;

1446 #i‡
PRINT_DEBUG_MSGS


1447 
	`¥ötf
("%s:Ñëu∫ögÇode, index = %d\n", 
__func__
, 
li°_idx
);

1448 
	`fÊush
(
NULL
);

1450  
node
;

1457 
i
 = 0; i < 1024; i++) {

1458 i‡(
_nvp_node_lookup
[
li°_idx
][
i
].
£rü o
 == 0) {

1459 
	`DEBUG
("AŒoˇã unu£dÇodê%d\n", 
i
);

1460 
_nvp_‰ì_node_li°
[
li°_idx
][
i
].
‰ì_bô
 = 0;

1461 
node
->
ödex_ö_‰ì_li°
 = 
i
;

1462 
_nvp_‰ì_node_li°_hód
[
li°_idx
] = 
_nvp_‰ì_node_li°
[li°_idx][
node
->
ödex_ö_‰ì_li°
].
√xt_‰ì_idx
;

1463 
node
 = &
_nvp_node_lookup
[
li°_idx
][
i
];

1466 i‡(
ˇndid©e
 =-1 && 
_nvp_node_lookup
[
li°_idx
][
i
].
ª„ªn˚
 == 0)

1467 
ˇndid©e
 = 
i
;

1470 i‡(
node
) {

1471  
node
;

1474 i‡(
ˇndid©e
 != -1) {

1475 
node
 = &
_nvp_node_lookup
[
li°_idx
][
ˇndid©e
];

1476 
	`DEBUG
("AŒoˇã uƒe„ªn˚dÇodê%d\n", 
ˇndid©e
);

1477 
node
->
ödex_ö_‰ì_li°
 = 
ˇndid©e
;

1478 
_nvp_‰ì_node_li°
[
li°_idx
][
ˇndid©e
].
‰ì_bô
 = 0;

1479 
_nvp_‰ì_node_li°_hód
[
li°_idx
] = 
_nvp_‰ì_node_li°
[li°_idx][
ˇndid©e
].
√xt_‰ì_idx
;

1480  
node
;

1483  
NULL
;

1484 
	}
}

1486 
NVNode
 * 
	$nvp_gë_node
(c⁄° *
∑th
, 
°©
 *
fûe_°
, 
ªsu…
)

1488 
i
, 
ödex
, 
ªt
;

1489 
NVNode
 *
node
 = 
NULL
;

1490 
node_li°_idx
 = 
	`±hªad_£lf
(Ë% 
NUM_NODE_LISTS
;

1491 
ö°rumíèti⁄_ty≥
 
node_lookup_lock_time
, 
nvnode_lock_time
;

1493 #i‡
PRINT_DEBUG_MSGS


1494 
	`¥ötf
("%s:ácquúögÇodêlooku∞lock, index = %d,Åhªad = %lu\n", 
__func__
, 
node_li°_idx
, 
	`±hªad_£lf
());

1495 
	`fÊush
(
NULL
);

1499 
	`±hªad_•ö_lock
(&
node_lookup_lock
[
node_li°_idx
]);

1501 #i‡
PRINT_DEBUG_MSGS


1502 
	`¥ötf
("%s:ácquúedÇodêlooku∞lock, index = %d,Åhªad = %lu\n", 
__func__
, 
node_li°_idx
, 
	`±hªad_£lf
());

1503 
	`fÊush
(
NULL
);

1510 
ödex
 = 
fûe_°
->
°_öo
 % 1024;

1511 i‡(
_nvp_öo_lookup
[
ödex
]) {

1512 
i
 = 
_nvp_öo_lookup
[
ödex
];

1513 i‡–
_nvp_fd_lookup
[
i
].
node
 &&

1514 
_nvp_fd_lookup
[
i
].
node
->
£rü o
 =
fûe_°
->
°_öo
) {

1515 
	`DEBUG
("File %s is (or was)álready open in fd %i "

1517 "Sh¨ögÇodes.\n", 
∑th
, 
i
);

1519 
node
 = 
_nvp_fd_lookup
[
i
].node;

1520 
	`SANITYCHECK
(
node
 !
NULL
);

1523 
	`NVP_LOCK_WR
(
node
->
lock
);

1525 
node
->
ª„ªn˚
++;

1526 
	`NVP_LOCK_UNLOCK_WR
(
node
->
lock
);

1528 
	`±hªad_•ö_u∆ock
(&
node_lookup_lock
[
node_li°_idx
]);

1531 
out
;

1535 #i‡
PRINT_DEBUG_MSGS


1536 
	`¥ötf
("%s: i¿thê¨ó whîênodêNULL, index = %d\n", 
__func__
, 
node_li°_idx
);

1537 
	`fÊush
(
NULL
);

1542 if(
node
 =
NULL
) {

1543 
	`DEBUG
("File %s isÇotálready open. "

1544 "AŒoˇtögÇew NVNode.\n", 
∑th
);

1545 
node
 = 
	`nvp_Æloˇã_node
(
node_li°_idx
);

1547 
	`NVP_LOCK_WR
(
node
->
lock
);

1549 
node
->
£rü o
 = 
fûe_°
->
°_öo
;

1550 
node
->
ª„ªn˚
++;

1551 
	`NVP_LOCK_UNLOCK_WR
(
node
->
lock
);

1552 if(
	`UNLIKELY
(!
node
)) {

1553 
	`ERROR
("Node isÇull\n");

1554 
	`as£π
(100);

1559 #i‡
PRINT_DEBUG_MSGS


1560 
	`¥ötf
("%s:ÑñósögÇodêlooku∞lock, index = %d,Åhªad = %lu\n", 
__func__
, 
node_li°_idx
, 
	`±hªad_£lf
());

1561 
	`fÊush
(
NULL
);

1564 
ödex
 = 
fûe_°
->
°_öo
 % 1024;

1565 i‡(
_nvp_öo_lookup
[
ödex
] == 0)

1566 
_nvp_öo_lookup
[
ödex
] = 
ªsu…
;

1568 
node
->
‰ì_li°_idx
 = 
node_li°_idx
;

1570 
	`±hªad_•ö_u∆ock
(&
node_lookup_lock
[
node_li°_idx
]);

1573 #i‡
PRINT_DEBUG_MSGS


1574 
	`¥ötf
("%s:Ññó£dÇodêlooku∞lock, index = %d,Åhªad = %lu\n", 
__func__
, 
node_li°_idx
, 
	`±hªad_£lf
());

1575 
	`fÊush
(
NULL
);

1579 
	`NVP_LOCK_WR
(
node
->
lock
);

1586 
	`nvp_add_to_öode_m≠pög
(
node
,Çode->
backup_£rü o
);

1587 
	`nvp_ª£t_m≠pögs
(
node
);

1588 
ªt
 = 
	`nvp_ªåõve_öode_m≠pög
(
node
);

1590 if(
ªt
 != 0) {

1595 if(
node
->
height
 != 0)

1596 
	`nvp_˛ónup_node
(
node
, 0, 1);

1599 
node
->
Àngth
 = 
fûe_°
->
°_size
;

1600 
node
->
m≠Àngth
 = 0;

1601 
node
->
åue_Àngth
 =Çode->
Àngth
;

1602 
node
->
åue_Àngth_f‹_ªad
 =Çode->
åue_Àngth
;

1603 
node
->
usögAn⁄Mem
 = 0;

1604 
node
->
™⁄_mem_u£d
 = 0;

1606 
	`GLOBAL_LOCK_WR
();

1608 if(
node
->
™⁄ymous_roŸ
) {

1609 
	`nvp_å™s„r_to_‰ì_™⁄ymous_poﬁ
(
node
->
™⁄ymous_roŸ
,Çode->
™⁄ymous_off£t_°¨t
,Çode->
™⁄ymous_off£t_íd
,Çode->
™⁄ymous_roŸ_dúty_°¨t
,Çode->
™⁄ymous_roŸ_dúty_íd
,Çode);

1612 
node
->
async_fûe_˛o£
 = 0;

1613 
node
->
backup_£rü o
 =Çode->
£rü o
;

1615 
	`GLOBAL_UNLOCK_WR
();

1617 
	`NVP_LOCK_UNLOCK_WR
(
node
->
lock
);

1619 
out
:

1620  
node
;

1621 
	}
}

1623 
	$ˇlcuœã_™⁄_ˇ∑côy
(
height
)

1625 
ˇ∑côy
 = 
ANON_MAX_MMAP_SIZE
;

1627 
height
) {

1628 
ˇ∑côy
 *= 1024;

1629 
height
--;

1632  
ˇ∑côy
;

1633 
	}
}

1635 
	$ˇlcuœã_ˇ∑côy
(
height
)

1637 
ˇ∑côy
 = 
MAX_MMAP_SIZE
;

1639 
height
) {

1640 
ˇ∑côy
 *= 1024;

1641 
height
--;

1644  
ˇ∑côy
;

1645 
	}
}

1647 
	$ˇlcuœã_√w_height
(
off_t
 
off£t
)

1649 
height
 = 0;

1650 
off_t
 
ãmp_off£t
 = 
off£t
 / (()1024 * 
MAX_MMAP_SIZE
);

1652 
ãmp_off£t
) {

1653 
ãmp_off£t
 /= 1024;

1654 
height
++;

1657  
height
;

1658 
	}
}

1660 
	$nvp_gë_mm≠_addªss
(
NVFûe
 *
nvf
, 
off_t
 
off£t
, 
size_t
 
cou¡
, *
mm≠_addr
, *
bôm≠_roŸ
, off_à*
off£t_wôhö_mm≠
, size_à*
exã¡_Àngth
, 
wr_lock
, 
˝uid
)

1662 
i
;

1663 
ödex
;

1664 
height
 = 
nvf
->
node
->height;

1665 
√w_height
;

1666 
ˇ∑côy
 = 
MAX_MMAP_SIZE
;

1667 *
roŸ
 = 
nvf
->
node
->root;

1668 *
mîkÀ_roŸ
 = 
nvf
->
node
->merkle_root;

1669 
°¨t_addr
;

1670 
mîkÀ_°¨t_addr
;

1671 
off_t
 
°¨t_off£t
 = 
off£t
;

1672 
ö°rumíèti⁄_ty≥
 
nvnode_lock_time
;

1674 
	`DEBUG
("Gë mm≠áddªss: off£à0x%lx, heighà%u\n", 
off£t
, 
height
);

1675 
	`DEBUG
("roŸ @ %p\n", 
roŸ
);

1679 
ˇ∑côy
 = 
	`ˇlcuœã_ˇ∑côy
(
height
);

1680 
ödex
 = 
°¨t_off£t
 / 
ˇ∑côy
;

1682 
	`DEBUG
("ödex %d\n", 
ödex
);

1683 i‡(
ödex
 >1024 || 
roŸ
[ödex] =0 || 
mîkÀ_roŸ
[index] == 0) {

1685 
nŸ_found
;

1687 i‡(
height
) {

1688 
roŸ
 = (*ÏoŸ[
ödex
];

1689 
mîkÀ_roŸ
 = (*)mîkÀ_roŸ[
ödex
];

1690 
	`DEBUG
("%p\n", 
roŸ
);

1692 
°¨t_addr
 = 
roŸ
[
ödex
];

1693 
mîkÀ_°¨t_addr
 = 
mîkÀ_roŸ
[
ödex
];

1694 
	`DEBUG
("add∏0x%lx\n", 
°¨t_addr
);

1696 
°¨t_off£t
 = sèπ_off£à% 
ˇ∑côy
;

1697 } 
height
--);

1700 i‡(
	`IS_ERR
(
°¨t_addr
Ë|| sèπ_add∏=0 || 
mîkÀ_°¨t_addr
 == 0) {

1701 
	`MSG
("ERROR!\n");

1702 
	`fÊush
(
NULL
);

1703 
	`as£π
(0);

1706 (*
mm≠_addr
Ë(
°¨t_addr
 + (
off£t
 % 
MAX_MMAP_SIZE
));

1707 *
off£t_wôhö_mm≠
 = 
off£t
 % 
MAX_MMAP_SIZE
;

1708 *
bôm≠_roŸ
 = 
mîkÀ_°¨t_addr
;

1709 (*
exã¡_Àngth
Ë(
MAX_MMAP_SIZE
 - (
off£t
 % MAX_MMAP_SIZE));

1711 
	`DEBUG
("Found: mmapáddr 0x%lx,ÉxtentÜength %lu\n",

1712 *
mm≠_addr
, *
exã¡_Àngth
);

1715 
nŸ_found
:

1716 
	`DEBUG
("Not found,Öerform mmap\n");

1718 i‡(
off£t
 >
	`ALIGN_MMAP_DOWN
(
nvf
->
node
->
åue_Àngth
)) {

1719 
	`DEBUG
("FileÜength smallerÅhan offset: "

1721 
nvf
->
node
->
Àngth
, 
off£t
);

1725 i‡(!
wr_lock
) {

1726 
	`NVP_UNLOCK_NODE_RD
(
nvf
, 
˝uid
);

1727 
	`START_TIMING
(
nvnode_lock_t
, 
nvnode_lock_time
);

1728 
	`NVP_LOCK_NODE_WR
(
nvf
);

1729 
	`END_TIMING
(
nvnode_lock_t
, 
nvnode_lock_time
);

1732 
°¨t_off£t
 = 
	`ALIGN_MMAP_DOWN
(
off£t
);

1734 i‡(
°¨t_off£t
 + 
MAX_MMAP_SIZE
 > 
nvf
->
node
->
åue_Àngth
) {

1735 
	`ERROR
("FileÜength smallerÅhan offset: "

1737 
nvf
->
node
->
Àngth
, 
off£t
);

1738 
	`¥ötf
("%s: fûêÀngth smÆÀ∏th™ off£t\n", 
__func__
);

1739 
	`fÊush
(
NULL
);

1745 
max_≥rms
 = ((
nvf
->
ˇnRód
Ë? 
PROT_READ
 : 0) |

1746 ((
nvf
->
ˇnWrôe
Ë? 
PROT_WRITE
 : 0);

1748 
°¨t_addr
 = (Ë
FSYNC_MMAP


1750 
NULL
,

1751 
MAX_MMAP_SIZE
,

1752 
max_≥rms
,

1753 
MAP_SHARED
 | 
MAP_POPULATE
,

1755 
nvf
->
fd
,

1756 
°¨t_off£t


1763 
	`¸óãTªe
((
mîkÀBåìNode
 **)&
mîkÀ_°¨t_addr
);

1765 
num_mm≠
++;

1767 i‡(
	`IS_ERR
(
°¨t_addr
Ë|| sèπ_add∏=0 || 
mîkÀ_°¨t_addr
 == 0)

1769 
	`MSG
("mmap failed for fd %i: %s, mmap count %d,áddr %lu,Érrno is %lu\n",

1770 
nvf
->
fd
, 
	`°ªº‹
(
î∫o
), 
num_mm≠
, 
°¨t_addr
,Érrno);

1771 
	`MSG
("O≥¿cou¡ %d, clo£ cou¡ %d\n", 
num_›í
, 
num_˛o£
);

1772 
	`MSG
("U£Öosix o≥øti⁄†f‹ fd %òö°ód.\n", 
nvf
->
fd
);

1773 
nvf
->
posix
 = 1;

1774 
	`fÊush
(
NULL
);

1775 
	`as£π
(0);

1778 
	`DEBUG
("mm≠ off£à0x%lx, sèπ_off£à0x%lx\n", 
off£t
, 
°¨t_off£t
);

1780 
height
 = 
nvf
->
node
->height;

1781 
√w_height
 = 
	`ˇlcuœã_√w_height
(
off£t
);

1783 i‡(
height
 < 
√w_height
) {

1784 
	`MSG
("In¸ó£ heighà‰om %uÅÿ%u\n", 
height
, 
√w_height
);

1786 
height
 < 
√w_height
) {

1787 
ﬁd_roŸ
 = ()
nvf
->
node
->
roŸ
;

1788 
ﬁd_mîkÀ_roŸ
 = ()
nvf
->
node
->
mîkÀ_roŸ
;

1789 
nvf
->
node
->
roŸ
 = 
	`mÆloc
(1024 * ());

1790 
nvf
->
node
->
mîkÀ_roŸ
 = 
	`mÆloc
(1024 * ());

1791 
	`DEBUG
("MÆlo¯√wÑoŸ @ %p\n", 
nvf
->
node
->
roŸ
);

1792 
i
 = 0; i < 1024; i++) {

1793 
nvf
->
node
->
roŸ
[
i
] = 0;

1794 
nvf
->
node
->
mîkÀ_roŸ
[
i
] = 0;

1796 
nvf
->
node
->
roŸ
[0] = ()
ﬁd_roŸ
;

1797 
nvf
->
node
->
mîkÀ_roŸ
[0] = ()
ﬁd_mîkÀ_roŸ
;

1798 
	`DEBUG
("OldÑoŸ 0x%lx\n", 
nvf
->
node
->
roŸ
[0]);

1799 
height
++;

1802 
nvf
->
node
->
height
 = 
√w_height
;

1803 
height
 = 
√w_height
;

1806 
roŸ
 = 
nvf
->
node
->root;

1807 
mîkÀ_roŸ
 = 
nvf
->
node
->merkle_root;

1809 
ˇ∑côy
 = 
	`ˇlcuœã_ˇ∑côy
(
height
);

1810 
ödex
 = 
°¨t_off£t
 / 
ˇ∑côy
;

1811 
	`DEBUG
("ödex %d\n", 
ödex
);

1812 i‡(
height
) {

1813 i‡(
roŸ
[
ödex
] == 0) {

1814 
roŸ
[
ödex
] = ()
	`mÆloc
(1024 *

1816 
mîkÀ_roŸ
[
ödex
] = ()
	`mÆloc
(1024 * ());

1817 
	`DEBUG
("MallocÇewÜeaf @%p, height %u, "

1819 
roŸ
[
ödex
], 
height
, index);

1820 
roŸ
 = (*ÏoŸ[
ödex
];

1821 
mîkÀ_roŸ
 = (*)mîkÀ_roŸ[
ödex
];

1822 
i
 = 0; i < 1024; i++) {

1823 
roŸ
[
i
] = 0;

1824 
mîkÀ_roŸ
[
i
] = 0;

1827 
roŸ
 = (*ÏoŸ[
ödex
];

1828 
mîkÀ_roŸ
 = (*)mîkÀ_roŸ[
ödex
];

1831 
roŸ
[
ödex
] = 
°¨t_addr
;

1832 
nvf
->
node
->
roŸ_dúty_ˇche
[nvf->node->
roŸ_dúty_num
] = 
ödex
;

1833 if(!
nvf
->
node
->
tŸÆ_dúty_mm≠s
) {

1834 
nvf
->
node
->
roŸ_dúty_num
++;

1835 if(
nvf
->
node
->
roŸ_dúty_num
 == 20)

1836 
nvf
->
node
->
tŸÆ_dúty_mm≠s
 = 1;

1838 
mîkÀ_roŸ
[
ödex
] = 
mîkÀ_°¨t_addr
;

1839 
	`DEBUG
("mmap for fd %i: %d,áddr 0x%lx\n",

1840 
nvf
->
fd
, 
ödex
, 
°¨t_addr
);

1842 
°¨t_off£t
 = sèπ_off£à% 
ˇ∑côy
;

1843 } 
height
--);

1845 
nvf
->
node
->
isRoŸSë
 = 1;

1846 (*
mm≠_addr
Ë(
°¨t_addr
 + (
off£t
 % 
MAX_MMAP_SIZE
));

1847 *
off£t_wôhö_mm≠
 = 
off£t
 % 
MAX_MMAP_SIZE
;

1848 *
bôm≠_roŸ
 = 
mîkÀ_°¨t_addr
;

1849 (*
exã¡_Àngth
Ë(
MAX_MMAP_SIZE
 - (
off£t
 % MAX_MMAP_SIZE));

1851 i‡(!
wr_lock
) {

1852 
	`NVP_UNLOCK_NODE_WR
(
nvf
);

1853 
	`NVP_LOCK_NODE_RD
(
nvf
, 
˝uid
);

1856 
	`DEBUG
("mmapáddr 0x%lx,ÉxtentÜength %lu\n",

1857 *
mm≠_addr
, *
exã¡_Àngth
);

1860 
	}
}

1862 
	$nvp_m™age_™⁄ymous_mem‹y
(
NVFûe
 *
nvf
, 
uöt64_t
 *
exã¡_Àngth
, uöt64_à
Àn_to_wrôe
, 
off_t
 
°¨t_off£t
, 
ödex
) {

1864 
i
;

1869 if(!
nvf
->
node
->
isAn⁄M≠Re£t
) {

1871 
i
=
nvf
->
node
->
™⁄ymous_roŸ_dúty_°¨t
; i<Úvf->node->
™⁄ymous_roŸ_dúty_íd
; i++) {

1872 
nvf
->
node
->
™⁄ymous_off£t_íd
[
i
] = 0;

1873 
nvf
->
node
->
™⁄ymous_off£t_°¨t
[
i
] = 
UINT32_MAX
;

1877 
nvf
->
node
->
™⁄ymous_roŸ_dúty_°¨t
 = -1;

1878 
nvf
->
node
->
™⁄ymous_roŸ_dúty_íd
 = -1;

1879 
nvf
->
node
->
isAn⁄M≠Re£t
 = 1;

1882 if(
nvf
->
node
->
™⁄ymous_off£t_°¨t
[
ödex
] > 
°¨t_off£t
)

1884 
nvf
->
node
->
™⁄ymous_off£t_°¨t
[
ödex
] = 
°¨t_off£t
;

1885 if(*
exã¡_Àngth
 > 
Àn_to_wrôe
) {

1886 if(
nvf
->
node
->
™⁄ymous_off£t_íd
[
ödex
] < (
°¨t_off£t
 + 
Àn_to_wrôe
))

1888 
nvf
->
node
->
™⁄ymous_off£t_íd
[
ödex
] = (
°¨t_off£t
 + 
Àn_to_wrôe
 - 1Ë% 
ANON_MAX_MMAP_SIZE
;

1892 if(
nvf
->
node
->
™⁄ymous_off£t_íd
[
ödex
] < (
°¨t_off£t
 + *
exã¡_Àngth
))

1893 
nvf
->
node
->
™⁄ymous_off£t_íd
[
ödex
] = (
°¨t_off£t
 + *
exã¡_Àngth
 - 1Ë% 
ANON_MAX_MMAP_SIZE
;

1896 if(
nvf
->
node
->
™⁄ymous_roŸ_dúty_°¨t
 == -1) {

1898 
nvf
->
node
->
™⁄ymous_roŸ_dúty_°¨t
 = 
ödex
;

1899 
nvf
->
node
->
™⁄ymous_roŸ_dúty_íd
 = 
ödex
;

1901 if(
ödex
 > 
nvf
->
node
->
™⁄ymous_roŸ_dúty_íd
)

1903 
nvf
->
node
->
™⁄ymous_roŸ_dúty_íd
 = 
ödex
;

1904 if(
ödex
 < 
nvf
->
node
->
™⁄ymous_roŸ_dúty_°¨t
)

1906 
nvf
->
node
->
™⁄ymous_roŸ_dúty_°¨t
 = 
ödex
;

1912 
	}
}

1915 
	$nvp_gë_™⁄ymous_mm≠_addªss
(
NVFûe
 *
nvf
, 
off_t
 
off£t
, 
size_t
 
Àn_to_wrôe
, size_à
cou¡
, *
mm≠_addr
, off_à*
off£t_wôhö_mm≠
, size_à*
exã¡_Àngth
, 
wr_lock
,
˝uid
, 
iswrôe
)

1917 
ödex
;

1918 
ˇ∑côy
 = 
ANON_MAX_MMAP_SIZE
;

1919 *
roŸ
 = 
nvf
->
node
->
™⁄ymous_roŸ
;

1920 
°¨t_addr
;

1921 
off_t
 
°¨t_off£t
 = 
off£t
;

1922 
ö°rumíèti⁄_ty≥
 
nvnode_lock_time
, 
™⁄_mem_queue_time
;

1923 
‰ì_™⁄_poﬁ
 *
ãmp_‰ì_poﬁ_of_™⁄ymous_mm≠s
;

1925 
	`DEBUG
("Gë mm≠áddªss: off£à0x%lx, heighà%u\n", 
off£t
, 
height
);

1926 
	`DEBUG
("roŸ @ %p\n", 
roŸ
);

1931 
ödex
 = 
°¨t_off£t
 / 
ˇ∑côy
;

1932 
	`DEBUG
("ödex %d\n", 
ödex
);

1933 i‡(
ödex
 >1024 || 
roŸ
[index] == 0) {

1935 if(
iswrôe
)

1937 
nŸ_found
;

1940 
	`ERROR
("anon mmapÇot found\n");

1941 
	`¥ötf
("%s:án⁄ mm≠ÇŸ found\n", 
__func__
);

1942 
	`fÊush
(
NULL
);

1943 
	`exô
(100);

1949 
°¨t_addr
 = 
roŸ
[
ödex
];

1951 
	`DEBUG
("add∏0x%lx\n", 
°¨t_addr
);

1953 
°¨t_off£t
 = sèπ_off£à% 
ˇ∑côy
;

1957 i‡(
	`IS_ERR
(
°¨t_addr
) || start_addr == 0) {

1958 
	`MSG
("ERROR!\n");

1959 
	`fÊush
(
NULL
);

1960 
	`as£π
(0);

1964 *
mm≠_addr
 = 
°¨t_addr
 + 
°¨t_off£t
;

1965 *
off£t_wôhö_mm≠
 = 
°¨t_off£t
;

1967 *
exã¡_Àngth
 = 
ANON_MAX_MMAP_SIZE
 - 
°¨t_off£t
;

1970 i‡(!
wr_lock
) {

1971 
	`NVP_UNLOCK_NODE_RD
(
nvf
, 
˝uid
);

1972 
	`START_TIMING
(
nvnode_lock_t
, 
nvnode_lock_time
);

1973 
	`NVP_LOCK_NODE_WR
(
nvf
);

1974 
	`END_TIMING
(
nvnode_lock_t
, 
nvnode_lock_time
);

1977 if(
iswrôe
) {

1978 
	`nvp_m™age_™⁄ymous_mem‹y
(
nvf
, 
exã¡_Àngth
, 
Àn_to_wrôe
, 
°¨t_off£t
, 
ödex
);

1981 i‡(!
wr_lock
 && !
iswrôe
) {

1982 
	`NVP_UNLOCK_NODE_WR
(
nvf
);

1983 
	`NVP_LOCK_NODE_RD
(
nvf
, 
˝uid
);

1988 
nŸ_found
:

1991 i‡(!
wr_lock
) {

1992 
	`NVP_UNLOCK_NODE_RD
(
nvf
, 
˝uid
);

1993 
	`START_TIMING
(
nvnode_lock_t
, 
nvnode_lock_time
);

1994 
	`NVP_LOCK_NODE_WR
(
nvf
);

1995 
	`END_TIMING
(
nvnode_lock_t
, 
nvnode_lock_time
);

2001 
	`GLOBAL_LOCK_WR
();

2003 
	`START_TIMING
(
™⁄_mem_queue_t
, 
™⁄_mem_queue_time
);

2004 if–
	`lfds711_queue_umm_dequeue
(&
qs
, &
qe
) ) {

2005 
ãmp_‰ì_poﬁ_of_™⁄ymous_mm≠s
 = 
	`LFDS711_QUEUE_UMM_GET_VALUE_FROM_ELEMENT
–*
qe
 );

2006 
°¨t_addr
 = 
ãmp_‰ì_poﬁ_of_™⁄ymous_mm≠s
->
addr
;

2008 
	`GLOBAL_UNLOCK_WR
();

2011 
nvf
->
node
->
usögAn⁄Mem
 = 1;

2012 
	`__©omic_„tch_add
(&
™⁄_mem_Æloˇãd
, 
ANON_MAX_MMAP_SIZE
, 
__ATOMIC_SEQ_CST
);

2013 
nvf
->
node
->
™⁄_mem_u£d
 +
ANON_MAX_MMAP_SIZE
;

2016 
	`GLOBAL_UNLOCK_WR
();

2018 
max_≥rms
 = ((
nvf
->
ˇnRód
Ë? 
PROT_READ
 : 0) |

2019 ((
nvf
->
ˇnWrôe
Ë? 
PROT_WRITE
 : 0);

2022 
°¨t_addr
 = (Ë
FSYNC_MMAP


2024 
NULL
,

2025 
ANON_MAX_MMAP_SIZE
,

2026 
max_≥rms
,

2027 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
,

2032 
num_mm≠
++;

2034 
nvf
->
node
->
usögAn⁄Mem
 = 1;

2035 
	`__©omic_„tch_add
(&
™⁄_mem_Æloˇãd
, 
ANON_MAX_MMAP_SIZE
, 
__ATOMIC_SEQ_CST
);

2036 
nvf
->
node
->
™⁄_mem_u£d
 +
ANON_MAX_MMAP_SIZE
;

2038 
	`END_TIMING
(
™⁄_mem_queue_t
, 
™⁄_mem_queue_time
);

2040 i‡(
	`IS_ERR
(
°¨t_addr
) || start_addr == 0)

2042 
	`MSG
("mmap failed for %s, mmap count %d,áddr %lu,Érrno is %lu\n",

2043 
	`°ªº‹
(
î∫o
), 
num_mm≠
, 
°¨t_addr
,Érrno);

2044 
	`MSG
("O≥¿cou¡ %d, clo£ cou¡ %d\n", 
num_›í
, 
num_˛o£
);

2045 
nvf
->
posix
 = 1;

2046 
	`fÊush
(
NULL
);

2047 
	`as£π
(0);

2051 
roŸ
 = 
nvf
->
node
->
™⁄ymous_roŸ
;

2053 
ödex
 = 
°¨t_off£t
 / 
ˇ∑côy
;

2054 
roŸ
[
ödex
] = 
°¨t_addr
;

2055 
°¨t_off£t
 = sèπ_off£à% 
ˇ∑côy
;

2059 *
mm≠_addr
 = 
°¨t_addr
 + 
°¨t_off£t
;

2060 *
off£t_wôhö_mm≠
 = 
°¨t_off£t
;

2061 *
exã¡_Àngth
 = 
ANON_MAX_MMAP_SIZE
 - 
°¨t_off£t
;

2063 if(
iswrôe
)

2064 
	`nvp_m™age_™⁄ymous_mem‹y
(
nvf
, 
exã¡_Àngth
, 
Àn_to_wrôe
, 
°¨t_off£t
, 
ödex
);

2066 i‡(!
wr_lock
 && !
iswrôe
) {

2067 
	`NVP_UNLOCK_NODE_WR
(
nvf
);

2068 
	`NVP_LOCK_NODE_RD
(
nvf
, 
˝uid
);

2072 
	}
}

2074 
RETT_PREAD
 
	$_nvp_ªad_bey⁄d_åue_Àngth
(
INTF_PREAD
, 
wr_lock
, 
˝uid
, 
NVFûe
 *
nvf
)

2076 
size_t
 
Àn_to_ªad
, 
exã¡_Àngth
, 
Àn_to_ªad_bey⁄d_åue_Àngth
, 
ªad_cou¡
;

2078 
mm≠_addr
;

2079 
off_t
 
ªad_off£t_bey⁄d_åue_Àngth
, 
off£t_wôhö_mm≠
;

2082 
ªad_cou¡
 = 0;

2083 
Àn_to_ªad
 = 
cou¡
;

2085 
ªad_off£t_bey⁄d_åue_Àngth
 = 
off£t
 - 
nvf
->
node
->
åue_Àngth_f‹_ªad
;

2086 
Àn_to_ªad_bey⁄d_åue_Àngth
 = 
Àn_to_ªad
;

2088 
Àn_to_ªad
 > 0) {

2093 
	`nvp_gë_™⁄ymous_mm≠_addªss
(
nvf
, 
ªad_off£t_bey⁄d_åue_Àngth
, 
Àn_to_ªad_bey⁄d_åue_Àngth
, 
ªad_cou¡
, &
mm≠_addr
, &
off£t_wôhö_mm≠
, &
exã¡_Àngth
, 
wr_lock
, 
˝uid
, 0);

2096 if(
exã¡_Àngth
 > 
Àn_to_ªad_bey⁄d_åue_Àngth
)

2097 
exã¡_Àngth
 = 
Àn_to_ªad_bey⁄d_åue_Àngth
;

2101 if(
	`FSYNC_MEMCPY
(
buf
, (*)
mm≠_addr
, 
exã¡_Àngth
) != buf) {

2102 
	`¥ötf
("%s: mem˝yÑód faûed\n", 
__func__
);

2103 
	`fÊush
(
NULL
);

2104 
	`as£π
(0);

2108 
num_mem˝y_ªad
++;

2109 
mem˝y_ªad_size
 +
exã¡_Àngth
;

2111 
Àn_to_ªad_bey⁄d_åue_Àngth
 -
exã¡_Àngth
;

2112 
ªad_off£t_bey⁄d_åue_Àngth
 +
exã¡_Àngth
;

2113 
ªad_cou¡
 +
exã¡_Àngth
;

2114 
buf
 +
exã¡_Àngth
;

2115 
Àn_to_ªad
 -
exã¡_Àngth
;

2119  
ªad_cou¡
;

2120 
	}
}

2122 
RETT_PREAD
 
	$_nvp_do_¥ód
(
INTF_PREAD
, 
wr_lock
, 
˝uid
, 
NVFûe
 *
nvf
)

2124 
	`SANITYCHECKNVF
(
nvf
);

2125 
ªt
;

2126 
off_t
 
ªad_off£t_wôhö_åue_Àngth
 = 0;

2127 
size_t
 
ªad_cou¡
, 
exã¡_Àngth
, 
ªad_cou¡_bey⁄d_åue_Àngth
;

2128 
size_t
 
Àn_to_ªad_wôhö_åue_Àngth
;

2129 
size_t
 
posix_ªad
 = 0;

2130 
mm≠_addr
 = 0;

2131 
bôm≠_roŸ
 = 0;

2132 
off_t
 
off£t_wôhö_mm≠
;

2133 
ssize_t
 
avaûabÀ_Àngth
 = (
nvf
->
node
->
Àngth
Ë- 
off£t
;

2134 *
buf2
 = 
buf
;

2136 i‡(
	`UNLIKELY
(!
nvf
->
ˇnRód
)) {

2137 
	`DEBUG
("FDÇŸ o≥¿f‹Ñódög: %i\n", 
fûe
);

2138 
î∫o
 = 
EBADF
;

2142 i‡(
	`UNLIKELY
(
off£t
 < 0))

2144 
	`DEBUG
("Reque°edÑódáà√g©ivêoff£à(%li)\n", 
off£t
);

2145 
î∫o
 = 
EINVAL
;

2149 if(
nvf
->
Æig√d
)

2151 
	`DEBUG
("ThisÑead must beáligned. Checkingálignment.\n");

2153 if(
	`UNLIKELY
(
avaûabÀ_Àngth
 <= 0))

2155 
	`DEBUG
("ActuallyÅhere weren'tány bytesávailable "

2157 "avaûabÀ_Àngth %li)\n", 
nvf
->
node
->
Àngth
,

2158 
off£t
, 
avaûabÀ_Àngth
);

2162 if(
	`UNLIKELY
(
cou¡
 % 512))

2164 
	`DEBUG
("cout isÇotálignedÅo 512 (count was %i)\n",

2165 
cou¡
);

2167 
î∫o
 = 
EINVAL
;

2170 if(
	`UNLIKELY
(
off£t
 % 512))

2172 
	`DEBUG
("offset wasÇotálignedÅo 512 (offset was %i)\n",

2173 
off£t
);

2175 
î∫o
 = 
EINVAL
;

2178 if(
	`UNLIKELY
((()
buf
 & (512-1)) != 0))

2180 
	`DEBUG
("buffer wasÇotálignedÅo 512 (buffer was %p, "

2181 "mod 512=%i)\n", 
buf
, ()buf % 512);

2182 
î∫o
 = 
EINVAL
;

2187 
ssize_t
 
Àn_to_ªad
 = 
cou¡
;

2188 i‡(
cou¡
 > 
avaûabÀ_Àngth
)

2190 
Àn_to_ªad
 = 
avaûabÀ_Àngth
;

2191 
	`DEBUG
("RequestÑeadÜength was %li, but only %li bytes "

2193 "ªque°ed %li)\n", 
cou¡
, 
Àn_to_ªad
,

2194 
nvf
->
node
->
Àngth
, 
off£t
, 
cou¡
);

2197 if(
	`UNLIKELY
–(
Àn_to_ªad
 <0Ë|| (
avaûabÀ_Àngth
 <= 0) ))

2203 
	`DEBUG
("mm≠ i†Àngth %li,Üí_to_ªad i†%li\n", 
nvf
->
node
->
m≠Àngth
,

2204 
Àn_to_ªad
);

2206 
	`SANITYCHECK
(
Àn_to_ªad
 + 
off£t
 <
nvf
->
node
->
Àngth
);

2208 
ªad_cou¡
 = 0;

2215 
ªad_off£t_wôhö_åue_Àngth
 = (
off£t
 > 
nvf
->
node
->
åue_Àngth_f‹_ªad
) ? -1 : offset;

2217 if(
ªad_off£t_wôhö_åue_Àngth
 == -1)

2218 
Àn_to_ªad_wôhö_åue_Àngth
 = 0;

2220 
Àn_to_ªad_wôhö_åue_Àngth
 = (
Àn_to_ªad
 + 
off£t
 > 
nvf
->
node
->
åue_Àngth_f‹_ªad
) ?Çvf->node->true_length_for_read - offset :Üen_to_read;

2223 
Àn_to_ªad_wôhö_åue_Àngth
 > 0) {

2225 
ªt
 = 
	`nvp_gë_mm≠_addªss
(
nvf
, 
ªad_off£t_wôhö_åue_Àngth
, 
ªad_cou¡
, &
mm≠_addr
, &
bôm≠_roŸ
, &
off£t_wôhö_mm≠
, &
exã¡_Àngth
, 
wr_lock
,
˝uid
);

2228 
	`DEBUG
("Pread: get_mmap_addressÑeturned %d,Üength %llu\n",

2229 
ªt
, 
exã¡_Àngth
);

2231 
ªt
) {

2235 
posix_ªad
 = 
_nvp_fûe›s
->
	`PREAD
(
nvf
->
fd
, 
buf2
,

2236 
Àn_to_ªad_wôhö_åue_Àngth
, 
ªad_off£t_wôhö_åue_Àngth
);

2238 
ªad_cou¡
 +
posix_ªad
;

2239 
Àn_to_ªad
 -
posix_ªad
;

2240 
off£t
 +
posix_ªad
;

2241 
num_posix_ªad
++;

2242 
posix_ªad_size
 +
posix_ªad
;

2244 
√xt
;

2249 i‡(
exã¡_Àngth
 > 
Àn_to_ªad_wôhö_åue_Àngth
)

2250 
exã¡_Àngth
 = 
Àn_to_ªad_wôhö_åue_Àngth
;

2254 if(
	`FSYNC_MEMCPY
(
buf2
, (c⁄° * 
ª°ri˘
)
mm≠_addr
, 
exã¡_Àngth
) != buf2) {

2255 
	`¥ötf
("%s: mem˝yÑód faûed\n", 
__func__
);

2256 
	`fÊush
(
NULL
);

2257 
	`as£π
(0);

2261 #i‡
NVM_DELAY


2262 
	`≥rfmodñ_add_dñay
(1, 
exã¡_Àngth
);

2266 
num_mem˝y_ªad
++;

2267 
mem˝y_ªad_size
 +
exã¡_Àngth
;

2268 
Àn_to_ªad
 -
exã¡_Àngth
;

2269 
Àn_to_ªad_wôhö_åue_Àngth
 -
exã¡_Àngth
;

2270 
ªad_off£t_wôhö_åue_Àngth
 +
exã¡_Àngth
;

2271 
ªad_cou¡
 +
exã¡_Àngth
;

2272 
buf2
 +
exã¡_Àngth
;

2273 
off£t
 +
exã¡_Àngth
;

2276 
√xt
:

2277 if(!
Àn_to_ªad
) {

2278  
ªad_cou¡
;

2282 if(
buf
 =
buf2
)

2283 
buf2
 +
posix_ªad
;

2284 
ªad_cou¡_bey⁄d_åue_Àngth
 = 
	`_nvp_ªad_bey⁄d_åue_Àngth
(
nvf
->
fd
, 
buf2
, 
Àn_to_ªad
, 
off£t
, 
wr_lock
, 
˝uid
,Çvf);

2285 
ªad_cou¡
 +
ªad_cou¡_bey⁄d_åue_Àngth
;

2287  
ªad_cou¡
;

2288 
	}
}

2296 
RETT_PWRITE
 
	$_nvp_exãnd_wrôe
(
INTF_PWRITE
, 
wr_lock
, 
˝uid
, 
NVFûe
 *
nvf
) {

2298 
size_t
 
Àn_to_wrôe
, 
wrôe_cou¡
;

2299 
off_t
 
wrôe_off£t
;

2300 
mm≠_addr
;

2301 
off_t
 
off£t_wôhö_mm≠
, 
wrôe_off£t_wπ_åue_Àngth
;

2302 
size_t
 
exã¡_Àngth
, 
exãnsi⁄_wôh_node_Àngth
;

2303 
ö°rumíèti⁄_ty≥
 
gë_m≠_time
, 
c›y_d©a_time
;

2307 
_nvp_wr_exãnded
++;

2309 
	`DEBUG
("Request writeÜength %li willÉxtend file. "

2311 
cou¡
, 
nvf
->
node
->
Àngth
, 
off£t
, cou¡, 
exãnsi⁄
);

2313 
Àn_to_wrôe
 = 
cou¡
;

2314 
wrôe_cou¡
 = 0;

2315 
wrôe_off£t
 = 
off£t
;

2317 
exãnsi⁄_wôh_node_Àngth
 = 0;

2319 
Àn_to_wrôe
 > 0) {

2321 
wrôe_off£t_wπ_åue_Àngth
 = 
wrôe_off£t
 - 
nvf
->
node
->
åue_Àngth
;

2324 
	`START_TIMING
(
gë_m≠_t
, 
gë_m≠_time
);

2326 
	`nvp_gë_™⁄ymous_mm≠_addªss
(
nvf
, 
wrôe_off£t_wπ_åue_Àngth
, 
Àn_to_wrôe
, 
wrôe_cou¡
, &
mm≠_addr
, &
off£t_wôhö_mm≠
, &
exã¡_Àngth
, 
wr_lock
, 
˝uid
, 1);

2327 i‡(
exã¡_Àngth
 > 
Àn_to_wrôe
)

2328 
exã¡_Àngth
 = 
Àn_to_wrôe
;

2330 if((
exã¡_Àngth
 + 
wrôe_off£t
Ë> 
nvf
->
node
->
Àngth
)

2331 
exãnsi⁄_wôh_node_Àngth
 = 
exã¡_Àngth
 + 
wrôe_off£t
 - 
nvf
->
node
->
Àngth
;

2333 
nvf
->
node
->
Àngth
 +
exãnsi⁄_wôh_node_Àngth
;

2335 
	`END_TIMING
(
gë_m≠_t
, 
gë_m≠_time
);

2337 
	`NVP_UNLOCK_NODE_WR
(
nvf
);

2338 
	`NVP_LOCK_NODE_RD
(
nvf
, 
˝uid
);

2342 
	`START_TIMING
(
c›y_d©a_t
, 
c›y_d©a_time
);

2344 if(
	`FSYNC_MEMCPY
((*)
mm≠_addr
, 
buf
, 
exã¡_Àngth
) != (*)mmap_addr) {

2345 
	`¥ötf
("%s: mem˝y faûed\n", 
__func__
);

2346 
	`fÊush
(
NULL
);

2347 
	`as£π
(0);

2350 
num_mem˝y_wrôe
++;

2351 
mem˝y_wrôe_size
 +
exã¡_Àngth
;

2353 
Àn_to_wrôe
 -
exã¡_Àngth
;

2354 
wrôe_off£t
 +
exã¡_Àngth
;

2355 
wrôe_cou¡
 +
exã¡_Àngth
;

2356 
buf
 +
exã¡_Àngth
;

2358 
	`END_TIMING
(
c›y_d©a_t
, 
c›y_d©a_time
);

2361  
wrôe_cou¡
;

2362 
	}
}

2364 
RETT_PWRITE
 
	$_nvp_do_pwrôe
(
INTF_PWRITE
, 
wr_lock
, 
˝uid
, 
NVFûe
 *
nvf
)

2366 
	`CHECK_RESOLVE_FILEOPS
(
_nvp_
);

2367 
ö°rumíèti⁄_ty≥
 
gë_m≠_time
, 
c›y_d©a_time
, 
wrôe_sysˇŒ_time
, 
nvp_do_pwrôe_time
, 
nvp_do_pwrôe_ovîwrôe_time
, 
nvp_do_pwrôe_≠≥nd_time
;

2369 
ªt
;

2370 
off_t
 
wrôe_off£t
, 
off£t_wôhö_mm≠
;

2371 
size_t
 
wrôe_cou¡
, 
exã¡_Àngth
;

2372 
size_t
 
posix_wrôe
;

2373 
mm≠_addr
 = 0;

2374 
bôm≠_roŸ
 = 0;

2375 
uöt64_t
 
exãndFûeRëu∫
;

2377 
	`START_TIMING
(
nvp_do_pwrôe_t
, 
nvp_do_pwrôe_time
);

2379 
	`DEBUG
("_nvp_do_pwrite\n");

2381 
_nvp_wr_tŸÆ
++;

2383 
	`SANITYCHECKNVF
(
nvf
);

2385 if(
	`UNLIKELY
(!
nvf
->
ˇnWrôe
)) {

2386 
	`DEBUG
("FDÇŸ o≥¿f‹ wrôög: %i\n", 
fûe
);

2387 
î∫o
 = 
EBADF
;

2389 
	`END_TIMING
(
nvp_do_pwrôe_t
, 
nvp_do_pwrôe_time
);

2393 if(
nvf
->
Æig√d
)

2395 
	`DEBUG
("This write must beáligned. Checkingálignment.\n");

2396 if(
	`UNLIKELY
(
cou¡
 % 512))

2398 
	`DEBUG
("count isÇotálignedÅo 512 (count was %li)\n",

2399 
cou¡
);

2400 
î∫o
 = 
EINVAL
;

2402 
	`END_TIMING
(
nvp_do_pwrôe_t
, 
nvp_do_pwrôe_time
);

2405 if(
	`UNLIKELY
(
off£t
 % 512))

2407 
	`DEBUG
("offset wasÇotálignedÅo 512 "

2408 "(off£àwa†%li)\n", 
off£t
);

2409 
î∫o
 = 
EINVAL
;

2411 
	`END_TIMING
(
nvp_do_pwrôe_t
, 
nvp_do_pwrôe_time
);

2415 if(
	`UNLIKELY
((()
buf
 & (512-1)) != 0))

2417 
	`DEBUG
("buffer wasÇotálignedÅo 512 (buffer was %p, "

2418 "mod 512 = %li)\n", 
buf
,

2419 ()
buf
 % 512);

2420 
î∫o
 = 
EINVAL
;

2422 
	`END_TIMING
(
nvp_do_pwrôe_t
, 
nvp_do_pwrôe_time
);

2427 if(
nvf
->
≠≥nd
)

2429 
	`DEBUG
("this fd (%i) is O_APPEND; setting offset fromÅhe "

2431 "¥i‹Åÿwrôögánythög\n", 
nvf
->
fd
, 
off£t
,

2432 
nvf
->
node
->
Àngth
);

2433 
off£t
 = 
nvf
->
node
->
Àngth
;

2436 
ssize_t
 
Àn_to_wrôe
;

2437 
ssize_t
 
exãnsi⁄_wôh_åue_Àngth
, 
exãnsi⁄_wôh_ªad_Àngth
;

2438 
	`DEBUG
("timêf‹á Pwrôe. fûêÀngth %li, off£à%li,Éxãnsi⁄ %li, cou¡ %li\n", 
nvf
->
node
->
Àngth
, 
off£t
, 
exãnsi⁄
, 
cou¡
);

2440 
Àn_to_wrôe
 = 
cou¡
;

2442 
	`SANITYCHECK
(
nvf
->
vÆid
);

2443 
	`SANITYCHECK
(
nvf
->
node
 !
NULL
);

2444 
	`SANITYCHECK
(
buf
 > 0);

2445 
	`SANITYCHECK
(
cou¡
 >= 0);

2447 
wrôe_cou¡
 = 0;

2448 
wrôe_off£t
 = 
off£t
;

2450 
Àn_to_wrôe
 > 0) {

2453 
exãnsi⁄_wôh_åue_Àngth
 = 
Àn_to_wrôe
 + 
wrôe_off£t
 - (
nvf
->
node
->
åue_Àngth
);

2454 
exãnsi⁄_wôh_ªad_Àngth
 = 
Àn_to_wrôe
 + 
wrôe_off£t
 - (
nvf
->
node
->
åue_Àngth_f‹_ªad
);

2456 if((
nvf
->
node
->
åue_Àngth_f‹_ªad
 <Çvf->node->
åue_Àngth
Ë&& 
exãnsi⁄_wôh_ªad_Àngth
 > 0)

2457 
nvf
->
node
->
åue_Àngth_f‹_ªad
 =Çvf->node->
åue_Àngth
;

2459 if(
wrôe_off£t
 < 
nvf
->
node
->
åue_Àngth
) {

2461 
	`START_TIMING
(
nvp_do_pwrôe_ovîwrôe_t
, 
nvp_do_pwrôe_ovîwrôe_time
);

2465 
	`START_TIMING
(
gë_m≠_t
, 
gë_m≠_time
);

2467 
ªt
 = 
	`nvp_gë_mm≠_addªss
(
nvf
, 
wrôe_off£t
, 
wrôe_cou¡
, &
mm≠_addr
, &
bôm≠_roŸ
, &
off£t_wôhö_mm≠
, &
exã¡_Àngth
, 
wr_lock
, 
˝uid
);

2469 
	`END_TIMING
(
gë_m≠_t
, 
gë_m≠_time
);

2471 
	`DEBUG
("Pwrite: get_mmap_addressÑeturned %d,Üength %llu\n",

2472 
ªt
, 
exã¡_Àngth
);

2474 
ªt
) {

2479 
num_m„n˚
++;

2480 if(
exãnsi⁄_wôh_åue_Àngth
 > 0) {

2481 
	`START_TIMING
(
wrôe_sysˇŒ_t
, 
wrôe_sysˇŒ_time
);

2482 
posix_wrôe
 = 
_nvp_fûe›s
->
	`PWRITE
(
fûe
, 
buf
,

2483 (
nvf
->
node
->
åue_Àngth
 - 
wrôe_off£t
) , write_offset);

2484 
	`END_TIMING
(
wrôe_sysˇŒ_t
, 
wrôe_sysˇŒ_time
);

2488 
	`START_TIMING
(
wrôe_sysˇŒ_t
, 
wrôe_sysˇŒ_time
);

2489 
posix_wrôe
 = 
_nvp_fûe›s
->
	`PWRITE
(
fûe
, 
buf
, 
Àn_to_wrôe
, 
wrôe_off£t
);

2490 
	`END_TIMING
(
wrôe_sysˇŒ_t
, 
wrôe_sysˇŒ_time
);

2492 
num_m„n˚
++;

2493 
num_wrôe_n⁄ãmp‹Æ
++;

2494 
n⁄_ãmp‹Æ_wrôe_size
 +
posix_wrôe
;

2495 
wrôe_cou¡
 +
posix_wrôe
;

2496 
num_posix_wrôe
++;

2497 
posix_wrôe_size
 +
posix_wrôe
;

2498 
Àn_to_wrôe
 -
posix_wrôe
;

2499 
buf
 +
posix_wrôe
;

2500 
wrôe_off£t
 +
posix_wrôe
;

2502 
	`END_TIMING
(
nvp_do_pwrôe_ovîwrôe_t
, 
nvp_do_pwrôe_ovîwrôe_time
);

2508 if(
exã¡_Àngth
 > 
Àn_to_wrôe
)

2509 
exã¡_Àngth
 = 
Àn_to_wrôe
;

2510 if(
exã¡_Àngth
 > 
nvf
->
node
->
åue_Àngth
 - 
wrôe_off£t
)

2511 
exã¡_Àngth
 = (
nvf
->
node
->
åue_Àngth
 - 
wrôe_off£t
);

2514 #i‡
NON_TEMPORAL_WRITES


2516 
	`START_TIMING
(
c›y_d©a_t
, 
c›y_d©a_time
);

2518 
	`_mm_m„n˚
();

2519 
num_m„n˚
++;

2520 if(
	`memmove_nodøö_mov¡_gønuœrôy
((*)
mm≠_addr
, 
buf
, 
exã¡_Àngth
Ë=
NULL
) {

2521 
	`DEBUG_FILE
("%s:Ç⁄-ãmp‹Æ mem˝y faûed\n", 
__func__
);

2523 
	`END_TIMING
(
nvp_do_pwrôe_ovîwrôe_t
, 
nvp_do_pwrôe_ovîwrôe_time
);

2524 
	`END_TIMING
(
nvp_do_pwrôe_t
, 
nvp_do_pwrôe_time
);

2525 
	`as£π
(0);

2528 #i‡
NVM_DELAY


2529 
	`DEBUG_FILE
("%s: dñayög\n", 
__func__
);

2530 
	`≥rfmodñ_add_dñay
(0, 
exã¡_Àngth
);

2532 
	`_mm_m„n˚
();

2533 
num_m„n˚
++;

2534 
num_wrôe_n⁄ãmp‹Æ
++;

2535 
n⁄_ãmp‹Æ_wrôe_size
 +
exã¡_Àngth
;

2537 
	`END_TIMING
(
c›y_d©a_t
, 
c›y_d©a_time
);

2541 if(
	`FSYNC_MEMCPY
((*)
mm≠_addr
, 
buf
, 
exã¡_Àngth
) != (*)mmap_addr) {

2542 
	`DEBUG_FILE
("%s: mem˝y faûed\n", 
__func__
);

2544 
	`END_TIMING
(
nvp_do_pwrôe_ovîwrôe_t
, 
nvp_do_pwrôe_ovîwrôe_time
);

2545 
	`END_TIMING
(
nvp_do_pwrôe_lo›_t
, 
nvp_do_pwrôe_lo›_time
);

2546 
	`END_TIMING
(
nvp_do_pwrôe_t
, 
nvp_do_pwrôe_time
);

2547 
	`as£π
(0);

2550 #i‡
NVM_DELAY


2551 
	`≥rfmodñ_add_dñay
(0, 
exã¡_Àngth
);

2553 
num_wrôe_ãmp‹Æ
++;

2554 
ãmp‹Æ_wrôe_size
 +
exã¡_Àngth
;

2555 #i‡
DIRTY_TRACKING


2557 
	`modifyBm≠
((
mîkÀBåìNode
 *)
bôm≠_roŸ
, 
off£t_wôhö_mm≠
, 
exã¡_Àngth
);

2561 
num_mem˝y_wrôe
++;

2562 
mem˝y_wrôe_size
 +
exã¡_Àngth
;

2563 
Àn_to_wrôe
 -
exã¡_Àngth
;

2564 
wrôe_off£t
 +
exã¡_Àngth
;

2565 
wrôe_cou¡
 +
exã¡_Àngth
;

2566 
buf
 +
exã¡_Àngth
;

2568 
	`END_TIMING
(
nvp_do_pwrôe_ovîwrôe_t
, 
nvp_do_pwrôe_ovîwrôe_time
);

2572 
	`START_TIMING
(
nvp_do_pwrôe_≠≥nd_t
, 
nvp_do_pwrôe_≠≥nd_time
);

2575 #i‡
ANON_MEM_HANDLE


2576 
exãndFûeRëu∫
 = 
	`_nvp_exãnd_wrôe
(
fûe
, 
buf
, 
Àn_to_wrôe
, 
wrôe_off£t
, 
wr_lock
, 
˝uid
, 
nvf
);

2579 
	`START_TIMING
(
wrôe_sysˇŒ_t
, 
wrôe_sysˇŒ_time
);

2581 
exãndFûeRëu∫
 = 
_nvp_fûe›s
->
	`PWRITE
(
fûe
, 
buf
, 
Àn_to_wrôe
, 
wrôe_off£t
);

2582 
	`END_TIMING
(
wrôe_sysˇŒ_t
, 
wrôe_sysˇŒ_time
);

2584 
num_posix_wrôe
++;

2585 
posix_wrôe_size
 +
exãndFûeRëu∫
;

2586 
num_m„n˚
++;

2587 
num_wrôe_n⁄ãmp‹Æ
++;

2588 
_nvp_wr_exãnded
++;

2589 
nvf
->
node
->
Àngth
 +
exãndFûeRëu∫
;

2590 
nvf
->
node
->
åue_Àngth
 +
exãndFûeRëu∫
;

2591 
nvf
->
node
->
åue_Àngth_f‹_ªad
 +
exãndFûeRëu∫
;

2594 
Àn_to_wrôe
 -
exãndFûeRëu∫
;

2595 
wrôe_cou¡
 +
exãndFûeRëu∫
;

2596 
wrôe_off£t
 +
exãndFûeRëu∫
;

2597 
buf
 +
exãndFûeRëu∫
;

2599 
	`END_TIMING
(
nvp_do_pwrôe_≠≥nd_t
, 
nvp_do_pwrôe_≠≥nd_time
);

2610 
	`END_TIMING
(
nvp_do_pwrôe_t
, 
nvp_do_pwrôe_time
);

2611  
wrôe_cou¡
;

2612 
	}
}

2614 
	$_nvp_ã°_övÆid©e_node
(
NVFûe
* 
nvf
)

2616 
NVNode
* 
node
 = 
nvf
->node;

2618 
	`DEBUG
("munmappingÅemporarily diabled...\n");

2622 
	`SANITYCHECK
(
node
!=
NULL
);

2624 
	`±hªad_•ö_lock
(&
node_lookup_lock
[(Ë(
	`±hªad_£lf
(Ë% 
NUM_NODE_LISTS
)]);

2625 
	`NVP_LOCK_NODE_WR
(
nvf
);

2626 
node
->
ª„ªn˚
--;

2627 
	`NVP_UNLOCK_NODE_WR
(
nvf
);

2628 i‡(
node
->
ª„ªn˚
 == 0) {

2629 
	`NVP_LOCK_NODE_WR
(
nvf
);

2630 
ödex
 = 
nvf
->
£rü o
 % 1024;

2631 
_nvp_öo_lookup
[
ödex
] = 0;

2633 
	`nvp_˛ónup_node
(
nvf
->
node
, 0, 1);

2634 
node
->
£rü o
 = 0;

2635 
	`NVP_UNLOCK_NODE_WR
(
nvf
);

2637 
	`±hªad_•ö_u∆ock
(&
node_lookup_lock
[(Ë(
	`±hªad_£lf
(Ë% 
NUM_NODE_LISTS
)]);

2639 
	}
}

2641 
RETT_SEEK64
 
	$_nvp_do_£ek64
(
INTF_SEEK64
, 
NVFûe
 *
nvf
)

2643 
	`CHECK_RESOLVE_FILEOPS
(
_nvp_
);

2645 
	`DEBUG
("_nvp_do_seek64\n");

2649 
	`DEBUG
("_nvp_do_seek64: fileÜen %li, mapÜen %li, current offset %li, "

2651 
nvf
->
node
->
Àngth
,Çvf->node->
m≠Àngth
, *nvf->
off£t
,

2652 
off£t
, 
whí˚
);

2654 
whí˚
)

2656 
SEEK_SET
:

2657 if(
off£t
 < 0)

2659 
	`DEBUG
("offset out ofÑange (wouldÑesult in "

2661 
î∫o
 = 
EINVAL
;

2664 *(
nvf
->
off£t
) = offset ;

2667  *(
nvf
->
off£t
);

2669 
SEEK_CUR
:

2670 if((*(
nvf
->
off£t
) + offset) < 0)

2672 
	`DEBUG
("offset out ofÑange (wouldÑesult in "

2674 
î∫o
 = 
EINVAL
;

2677 *(
nvf
->
off£t
) += offset ;

2678  *(
nvf
->
off£t
);

2680 
SEEK_END
:

2681 if–
nvf
->
node
->
Àngth
 + 
off£t
 < 0 )

2683 
	`DEBUG
("offset out ofÑange (wouldÑesult in "

2685 
î∫o
 = 
EINVAL
;

2689 *(
nvf
->
off£t
Ënvf->
node
->
Àngth
 + offset;

2690  *(
nvf
->
off£t
);

2693 
	`DEBUG
("Invalid whenceÖarameter.\n");

2694 
î∫o
 = 
EINVAL
;

2698 
	`as£π
(0);

2700 
	}
}

2702 
ssize_t
 
	$_nvp_check_ªad_size_vÆid
(
size_t
 
cou¡
)

2704 if(
cou¡
 == 0)

2706 
	`DEBUG
("RequestedáÑead of 0Üength. NoÖroblem\n");

2709 if(
cou¡
 < 0)

2711 
	`DEBUG
("Reque°edÑód o‡√g©ivêbyã†(%li)\n", 
cou¡
);

2712 
î∫o
 = 
EINVAL
;

2716  
cou¡
;

2717 
	}
}

2719 
ssize_t
 
	$_nvp_check_wrôe_size_vÆid
(
size_t
 
cou¡
)

2721 if(
cou¡
 == 0)

2723 
	`DEBUG
("Requestedá write of 0 bytes. NoÖroblem\n");

2727 if(((sig√d )
cou¡
) < 0)

2729 
	`DEBUG
("Requestedá write of %li < 0 bytes.\n",

2730 (sig√d )
cou¡
);

2731 
î∫o
 = 
EINVAL
;

2735  
cou¡
;

2736 
	}
}

2741 
RETT_MKSTEMP
 
	$_nvp_MKSTEMP
(
INTF_MKSTEMP
)

2743 
	`CHECK_RESOLVE_FILEOPS
(
_nvp_
);

2745 * 
suffix
 = 
fûe
 + 
	`°æí
(file) - 6;

2747 
	`DEBUG
("CÆÀd _nvp_mk°em∞wôhÅem∂©ê%s; makögáÇew fûíame...\n", 
fûe
);

2749 if(
suffix
 =
NULL
) {

2750 
	`DEBUG
("InvÆidÅem∂©ê°rög (%sË∑s£dÅÿmk°emp\n", 
fûe
);

2751 
î∫o
 = 
EINVAL
;

2757 
i
;

2758 
suc˚ss
 = 0;

2759 
i
=0; i<1000000; i++)

2761 
	`•rötf
(
suffix
, "%.6i", 
i
);

2763 
fs
 = 
	`ac˚ss
(
fûe
, 
F_OK
);

2765 if(
fs
 == 0) {

2766 
suc˚ss
 = 1;

2771 if(!
suc˚ss
) {

2772 
	`DEBUG
("Noávailable fileÇames!\n");

2776 
	`DEBUG
("Gíî©ed fûíamê%s. CÆlög (ªguœrË›í...\n", 
fûe
);

2778  
	`›í
(
fûe
, 
O_CREAT
 | 
O_EXCL
, 0600);

2779 
	}
}

2781 
RETT_CLOSE
 
	$_nvp_REAL_CLOSE
(
INTF_CLOSE
, 
öo_t
 
£rü o
, 
async_fûe_˛osög
) {

2783 
RETT_CLOSE
 
ªsu…
;

2784 
	`CHECK_RESOLVE_FILEOPS
(
_nvp_
);

2785 
ö°rumíèti⁄_ty≥
 
node_lookup_lock_time
, 
nvnode_lock_time
, 
˛o£_sysˇŒ_time
, 
c›y_to_™⁄_poﬁ_time
, 
c›y_to_mm≠_ˇche_time
, 
give_up_node_time
;

2786 
˝uid
;

2787 
node_li°_idx
;

2789 
	`DEBUG
("_nvp_CLOSE(%i)\n", 
fûe
);

2795 
NVFûe
* 
nvf
 = &
_nvp_fd_lookup
[
fûe
];

2796 
node_li°_idx
 = 
nvf
->
node
->
‰ì_li°_idx
;

2798 
num_˛o£
++;

2800 i‡(
nvf
->
posix
) {

2801 
nvf
->
vÆid
 = 0;

2802 
nvf
->
posix
 = 0;

2803 
	`NVP_LOCK_NODE_WR
(
nvf
);

2804 
nvf
->
node
->
ª„ªn˚
--;

2805 
	`NVP_UNLOCK_NODE_WR
(
nvf
);

2806 i‡(
nvf
->
node
->
ª„ªn˚
 == 0) {

2807 
nvf
->
node
->
£rü o
 = 0;

2808 
ödex
 = 
nvf
->
£rü o
 % 1024;

2809 
_nvp_öo_lookup
[
ödex
] = 0;

2810 
	`push_ö_°ack
(1, 0, 
nvf
->
node
->
ödex_ö_‰ì_li°
, 
node_li°_idx
);

2812 
nvf
->
£rü o
 = 0;

2813 
	`DEBUG
("CÆ»posix CLOSE f‹ fd %d\n", 
nvf
->
fd
);

2814 
ªsu…
 = 
_nvp_fûe›s
->
	`CLOSE
(
CALL_CLOSE
);

2817  
ªsu…
;

2820 #i‡
ANON_MEM_HANDLE


2821 
˝uid
 = 
	`GET_CPUID
();

2822 
	`fsync_Êush_⁄_fsync
(
nvf
, 
˝uid
, 1, 0);

2832 #i‡
PRINT_DEBUG_MSGS


2833 
	`¥ötf
("%s:ácquúögÇodêlooku∞lock, index = %d,Åhªad = %lu\n", 
__func__
, 
node_li°_idx
, 
	`±hªad_£lf
());

2834 
	`fÊush
(
NULL
);

2838 
	`±hªad_•ö_lock
(&
node_lookup_lock
[
node_li°_idx
]);

2840 #i‡
PRINT_DEBUG_MSGS


2841 
	`¥ötf
("%s:ácquúedÇodêlooku∞lock, index = %d\n", 
__func__
, 
node_li°_idx
);

2842 
	`fÊush
(
NULL
);

2845 if(
nvf
->
vÆid
 == 0) {

2846 
	`±hªad_•ö_u∆ock
(&
node_lookup_lock
[
node_li°_idx
]);

2850 if(
nvf
->
node
->
ª„ªn˚
 <= 0) {

2851 
	`±hªad_•ö_u∆ock
(&
node_lookup_lock
[
node_li°_idx
]);

2855 if(
nvf
->
node
->
£rü o
 != serialno) {

2856 
	`±hªad_•ö_u∆ock
(&
node_lookup_lock
[
node_li°_idx
]);

2862 
	`NVP_LOCK_NODE_WR
(
nvf
);

2864 
nvf
->
node
->
ª„ªn˚
--;

2865 
	`NVP_UNLOCK_NODE_WR
(
nvf
);

2867 i‡(
nvf
->
node
->
ª„ªn˚
 == 0) {

2868 
nvf
->
node
->
£rü o
 = 0;

2871 
	`push_ö_°ack
(1, 0, 
nvf
->
node
->
ödex_ö_‰ì_li°
, 
node_li°_idx
);

2875 i‡(
async_fûe_˛osög
) {

2876 
nvf
->
node
->
async_fûe_˛o£
 = 1;

2879 
	`±hªad_•ö_u∆ock
(&
node_lookup_lock
[
node_li°_idx
]);

2882 
	`NVP_LOCK_FD_WR
(
nvf
);

2883 
	`NVP_CHECK_NVF_VALID_WR
(
nvf
);

2885 
	`NVP_LOCK_NODE_WR
(
nvf
);

2889 if(
nvf
->
vÆid
 == 0) {

2890 
	`NVP_UNLOCK_NODE_WR
(
nvf
);

2891 
	`NVP_UNLOCK_FD_WR
(
nvf
);

2895 if(
nvf
->
node
->
ª„ªn˚
 < 0) {

2896 
	`NVP_UNLOCK_NODE_WR
(
nvf
);

2897 
	`NVP_UNLOCK_FD_WR
(
nvf
);

2901 if(
nvf
->
£rü o
 != serialno) {

2902 
	`NVP_UNLOCK_NODE_WR
(
nvf
);

2903 
	`NVP_UNLOCK_FD_WR
(
nvf
);

2908 
nvf
->
vÆid
 = 0;

2911 i‡(
nvf
->
node
->
ª„ªn˚
 == 0) {

2914 
	`nvp_add_to_öode_m≠pög
(
nvf
->
node
,Çvf->
£rü o
);

2916 
nvf
->
node
->
backup_£rü o
 = 0;

2918 
ödex
 = 
nvf
->
£rü o
 % 1024;

2919 
_nvp_öo_lookup
[
ödex
] = 0;

2920 
	`DEBUG
("Clo£ CÀ™u∞nodêf‹ %d\n", 
fûe
);

2922 
	`GLOBAL_LOCK_WR
();

2923 if(
nvf
->
node
->
™⁄ymous_roŸ
) {

2926 
	`nvp_å™s„r_to_‰ì_™⁄ymous_poﬁ
(
nvf
->
node
->
™⁄ymous_roŸ
,Çvf->node->
™⁄ymous_off£t_°¨t
,Çvf->node->
™⁄ymous_off£t_íd
,Çvf->node->
™⁄ymous_roŸ_dúty_°¨t
,Çvf->node->
™⁄ymous_roŸ_dúty_íd
,Çvf->node);

2930 
nvf
->
node
->
async_fûe_˛o£
 = 0;

2931 
	`GLOBAL_UNLOCK_WR
();

2933 
	`nvp_˛ónup_node
(
nvf
->
node
, 0, 0);

2938 
nvf
->
£rü o
 = 0;

2940 
	`NVP_UNLOCK_NODE_WR
(
nvf
);

2941 
	`NVP_UNLOCK_FD_WR
(
nvf
);

2945 
ªsu…
 = 
_nvp_fûe›s
->
	`CLOSE
(
CALL_CLOSE
);

2949  
ªsu…
;

2951 
	}
}

2953 
RETT_OPEN
 
	$_nvp_OPEN
(
INTF_OPEN
)

2956 
ªsu…
;

2957 #i‡
BG_CLOSING


2958 
˛o£d_fûedesc
 = -1, 
fd
 = -1, 
hash_ödex
 = -1;

2959 #i‡
SEQ_LIST
 || 
RAND_LIST


2960 
Clo£dFûes
 *
˛f
 = 
NULL
;

2962 
InodeClo£dFûe
 *
tbl
 = 
NULL
;

2965 
ö°rumíèti⁄_ty≥
 
›í_time
, 
˛f_lock_time
, 
nvnode_lock_time
;

2967 
	`START_TIMING
(
›í_t
, 
›í_time
);

2969 #i‡
PASS_THROUGH_CALLS


2970 
num_›í
++;

2971 i‡(
	`FLAGS_INCLUDE
(
oÊag
,
O_CREAT
))

2973 
va_li°
 
¨g
;

2974 
	`va_°¨t
(
¨g
, 
oÊag
);

2975 
mode
 = 
	`va_¨g
(
¨g
, );

2976 
	`va_íd
(
¨g
);

2979 
ªsu…
 = 
_nvp_fûe›s
->
	`OPEN
(
∑th
, 
oÊag
 & (~
O_APPEND
), 
mode
);

2981 
ªsu…
 = 
_nvp_fûe›s
->
	`OPEN
(
∑th
, 
oÊag
 & (~
O_APPEND
));

2984 if(
ªsu…
<0)

2986 
	`DEBUG
("_nvp_OPEN->%s_OPEN failed: %s\n",

2987 
_nvp_fûe›s
->
«me
, 
	`°ªº‹
(
î∫o
));

2989 
	`DEBUG_FILE
("%s: o≥¿Áûed!,Çum_fûes_˛o£d = %lu, \n", 
__func__
, 
num_fûes_˛o£d
);

2991 
	`END_TIMING
(
›í_t
, 
›í_time
);

2992  
ªsu…
;

2995 
	`END_TIMING
(
›í_t
, 
›í_time
);

2996  
ªsu…
;

2999 
	`CHECK_RESOLVE_FILEOPS
(
_nvp_
);

3001 if(
∑th
==
NULL
) {

3002 
	`DEBUG
("InvalidÖath.\n");

3003 
î∫o
 = 
EINVAL
;

3004 
	`END_TIMING
(
›í_t
, 
›í_time
);

3008 
	`DEBUG
("_nvp_OPEN(%s)\n", 
∑th
);

3009 
num_›í
++;

3011 
	`DEBUG
("AttemptingÅo _nvp_OPENÅhe file \"%s\" withÅhe following "

3012 "Êag†(0x%X): ", 
∑th
, 
oÊag
);

3019 i‡(
	`FLAGS_INCLUDE
(
oÊag
,
O_WRONLY
)) {

3020 
oÊag
 |
O_RDONLY
;

3023 if((
oÊag
&
O_RDWR
)||((oÊag&
O_RDONLY
)&&(oÊag&
O_WRONLY
))) {

3024 
	`DEBUG_P
("O_RDWR ");

3025 } if(
	`FLAGS_INCLUDE
(
oÊag
, 
O_RDONLY
)) {

3026 
	`DEBUG_P
("O_RDONLY ");

3033 
	`DUMP_FLAGS
(
oÊag
,
O_APPEND
);

3034 
	`DUMP_FLAGS
(
oÊag
,
O_CREAT
);

3035 
	`DUMP_FLAGS
(
oÊag
,
O_TRUNC
);

3036 
	`DUMP_FLAGS
(
oÊag
,
O_EXCL
);

3037 
	`DUMP_FLAGS
(
oÊag
,
O_SYNC
);

3038 
	`DUMP_FLAGS
(
oÊag
,
O_ASYNC
);

3039 
	`DUMP_FLAGS
(
oÊag
,
O_DSYNC
);

3040 
	`DUMP_FLAGS
(
oÊag
,
O_FSYNC
);

3041 
	`DUMP_FLAGS
(
oÊag
,
O_RSYNC
);

3042 
	`DUMP_FLAGS
(
oÊag
,
O_NOCTTY
);

3043 
	`DUMP_FLAGS
(
oÊag
,
O_NDELAY
);

3044 
	`DUMP_FLAGS
(
oÊag
,
O_NONBLOCK
);

3045 
	`DUMP_FLAGS
(
oÊag
,
O_DIRECTORY
);

3046 
	`DUMP_FLAGS
(
oÊag
,
O_LARGEFILE
);

3047 
	`DUMP_FLAGS
(
oÊag
,
O_NOATIME
);

3048 
	`DUMP_FLAGS
(
oÊag
,
O_DIRECT
);

3049 
	`DUMP_FLAGS
(
oÊag
,
O_NOFOLLOW
);

3050 
	`DEBUG_P
("\n");

3052 
°©
 
fûe_°
;

3055 
NVNode
* 
node
 = 
NULL
;

3057 #i‡
BG_CLOSING


3058 i‡(
async_˛o£_íabÀ
) {

3059 if(
num_fûes_˛o£d
 >800 || (
™⁄_mem_˛o£d_fûes
 >= ((5ULL) * 1024 * 1024 * 1024))) {

3060 
ASYNC_CLOSING
 = 0;

3061 
	`checkAndA˘iv©eBgThªad
();

3070 i‡(
	`FLAGS_INCLUDE
(
oÊag
,
O_CREAT
))

3072 
va_li°
 
¨g
;

3073 
	`va_°¨t
(
¨g
, 
oÊag
);

3074 
mode
 = 
	`va_¨g
(
¨g
, );

3075 
	`va_íd
(
¨g
);

3078 
ªsu…
 = 
	`sysˇŒ
(334, 
∑th
, 
oÊag
 & (~
O_APPEND
), 
mode
, &
fûe_°
.
°_öo
, &fûe_°.
°_size
);

3081 
ªsu…
 = 
	`sysˇŒ
(334, 
∑th
, 
oÊag
 & (~
O_APPEND
), 0666, &
fûe_°
.
°_öo
, &fûe_°.
°_size
);

3092 if(
ªsu…
<0)

3094 
	`DEBUG
("_nvp_OPEN->%s_OPEN failed: %s\n",

3095 
_nvp_fûe›s
->
«me
, 
	`°ªº‹
(
î∫o
));

3097 
	`DEBUG_FILE
("_nvp_OPEN->%s_OPEN failed: %s\n",

3098 
_nvp_fûe›s
->
«me
, 
	`°ªº‹
(
î∫o
));

3099 
	`END_TIMING
(
›í_t
, 
›í_time
);

3101  
ªsu…
;

3104 
	`SANITYCHECK
(&
_nvp_fd_lookup
[
ªsu…
] !
NULL
);

3106 
NVFûe
* 
nvf
 = 
NULL
;

3108 #i‡
BG_CLOSING


3109 i‡(
async_˛o£_íabÀ
)

3110 
	`checkAndA˘iv©eBgThªad
();

3111 
	`GLOBAL_LOCK_CLOSE_WR
();

3112 
hash_ödex
 = 
fûe_°
.
°_öo
 % 
TOTAL_CLOSED_INODES
;

3113 #i‡
SEQ_LIST
 || 
RAND_LIST


3114 
˛f
 = &
_nvp_˛o£d_fûes
[
hash_ödex
];

3116 #i‡
PRINT_CONTENTION_MSGS


3117 
	`¥ötf
("%s:ácquúögÜock f‹ cl‡íåy = %d,Åhªad id = %lu\n", 
__func__
, 
hash_ödex
, 
	`±hªad_£lf
());

3118 
	`fÊush
(
NULL
);

3122 
	`LRU_NODE_LOCK_WR
(
˛f
);

3125 
fd
 = 
	`ªmove_‰om_£q_li°_hash
(
˛f
, 
fûe_°
.
°_öo
);

3127 
tbl
 = &
öode_to_˛o£d_fûe
[
hash_ödex
];

3128 
	`NVP_LOCK_HASH_TABLE_WR
(
tbl
);

3129 
fd
 = 
	`ªmove_‰om_Ãu_li°_hash
(
fûe_°
.
°_öo
, 0);

3131 if(
fd
 >= 0) {

3132 i‡((
oÊag
 & 
O_RDWR
Ë|| 
	`FLAGS_INCLUDE
(oÊag, 
O_RDONLY
)) {

3133 
num_˛o£
++;

3134 
˛o£d_fûedesc
 = 
fd
;

3135 
	`__©omic_„tch_sub
(&
num_fûes_˛o£d
, 1, 
__ATOMIC_SEQ_CST
);

3136 #i‡
SEQ_LIST
 || 
RAND_LIST


3138 #i‡
PRINT_CONTENTION_MSGS


3139 
	`MSG
("%s:ÑñósögÜock f‹ cl‡íåy = %d,Åhªad id = %lu\n", 
__func__
, 
hash_ödex
, 
	`±hªad_£lf
());

3141 
	`LRU_NODE_UNLOCK_WR
(
˛f
);

3143 
	`NVP_UNLOCK_HASH_TABLE_WR
(
tbl
);

3145 
	`GLOBAL_UNLOCK_CLOSE_WR
();

3147 
_nvp_fûe›s
->
	`CLOSE
(
ªsu…
);

3148 
ªsu…
 = 
˛o£d_fûedesc
;

3149 
nvf
 = &
_nvp_fd_lookup
[
ªsu…
];

3150 
node
 = 
nvf
->node;

3151 
	`__©omic_„tch_sub
(&
™⁄_mem_˛o£d_fûes
, 
nvf
->
node
->
™⁄_mem_u£d
, 
__ATOMIC_SEQ_CST
);

3152 
	`NVP_LOCK_FD_WR
(
nvf
);

3154 
	`NVP_LOCK_NODE_WR
(
nvf
);

3156 
nvf
->
vÆid
 = 0;

3157 
öôülize_nvf
;

3161 #i‡
SEQ_LIST
 || 
RAND_LIST


3162 
	`LRU_NODE_UNLOCK_WR
(
˛f
);

3164 
	`NVP_UNLOCK_HASH_TABLE_WR
(
tbl
);

3166 
	`GLOBAL_UNLOCK_CLOSE_WR
();

3172 
nvf
 = &
_nvp_fd_lookup
[
ªsu…
];

3174 
	`DEBUG_FILE
("_nvp_OPEN succeeded forÖath %s: fd %iÑeturned. "

3175 "fûlög i¿fûêöfo\n", 
∑th
, 
ªsu…
);

3177 
	`NVP_LOCK_FD_WR
(
nvf
);

3180 if(
nvf
->
vÆid
)

3182 
	`DEBUG_FILE
("Thîêi†Æªadyá fûê›í wôhÅh© FD (%i)!\n", 
ªsu…
);

3183 
	`as£π
(0);

3184 
	`END_TIMING
(
›í_t
, 
›í_time
);

3185  
ªsu…
;

3206 if(
node
 =
NULL
)

3213 
node
 = 
	`nvp_gë_node
(
∑th
, &
fûe_°
, 
ªsu…
);

3214 
	`NVP_LOCK_WR
(
node
->
lock
);

3217 #i‡
BG_CLOSING


3218 
öôülize_nvf
:

3220 
nvf
->
fd
 = 
ªsu…
;

3221 
nvf
->
node
 =Çode;

3222 
nvf
->
posix
 = 0;

3223 
nvf
->
£rü o
 = 
fûe_°
.
°_öo
;

3236 if((
oÊag
 & 
O_RDWR
)||((oÊag & 
O_RDONLY
Ë&& (oÊag & 
O_WRONLY
))) {

3237 
	`DEBUG
("oÊag (%iË•ecifõ†O_RDWR f‹ fd %i\n", 
oÊag
, 
ªsu…
);

3238 
nvf
->
ˇnRód
 = 1;

3239 
nvf
->
ˇnWrôe
 = 1;

3240 } if(
oÊag
&
O_WRONLY
) {

3241 
	`DEBUG
("oÊag (%iË•ecifõ†O_WRONLY f‹ fd %i\n", 
oÊag
,

3242 
ªsu…
);

3246 
nvf
->
ˇnRód
 = 1;

3247 
nvf
->
ˇnWrôe
 = 1;

3252 } if(
	`FLAGS_INCLUDE
(
oÊag
, 
O_RDONLY
)) {

3253 
	`DEBUG
("oflag (%i) specifies O_RDONLY for fd %i\n",

3254 
oÊag
, 
ªsu…
);

3255 
nvf
->
ˇnRód
 = 1;

3256 
nvf
->
ˇnWrôe
 = 0;

3258 
	`DEBUG_FILE
("FileÖermissions don't includeÑead or write!\n");

3259 
nvf
->
ˇnRód
 = 0;

3260 
nvf
->
ˇnWrôe
 = 0;

3261 
	`as£π
(0);

3264 if(
	`FLAGS_INCLUDE
(
oÊag
, 
O_APPEND
)) {

3265 
nvf
->
≠≥nd
 = 1;

3267 
nvf
->
≠≥nd
 = 0;

3270 
	`SANITYCHECK
(
nvf
->
node
 !
NULL
);

3272 if(
	`FLAGS_INCLUDE
(
oÊag
, 
O_TRUNC
Ë&& 
nvf
->
node
->
Àngth
)

3274 
	`DEBUG
("We just openedá file with O_TRUNCÅhat wasálready "

3276 
nvf
->
node
->
Àngth
);

3277 
nvf
->
node
->
Àngth
 = 0;

3280 
nvf
->
posix
 = 0;

3281 
nvf
->
debug
 = 0;

3284 i‡(
∑th
[0] == '/' &&Öath[1] == 's'

3285 && 
∑th
[2] == 'y' &&Öath[3] == 's') {

3286 
nvf
->
posix
 = 1;

3287 
	`DEBUG_FILE
("A Posix P©h: %s\n", 
∑th
);

3291 i‡(
∑th
[29] == 'l' &&Öath[30] == 'o' &&Öath[31] == 'g') {

3292 
nvf
->
debug
 = 1;

3295 
nvf
->
off£t
 = (
size_t
*)
	`ˇŒoc
(1, ());

3296 *
nvf
->
off£t
 = 0;

3298 if(
	`FLAGS_INCLUDE
(
oÊag
, 
O_DIRECT
Ë&& (
DO_ALIGNMENT_CHECKS
)) {

3299 
nvf
->
Æig√d
 = 1;

3301 
nvf
->
Æig√d
 = 0;

3304 
nvf
->
vÆid
 = 1;

3306 
	`NVP_UNLOCK_NODE_WR
(
nvf
);

3307 
	`NVP_UNLOCK_FD_WR
(
nvf
);

3309 
î∫o
 = 0;

3310 
	`END_TIMING
(
›í_t
, 
›í_time
);

3312 
	`DEBUG_FILE
("%s: Rëu∫ög fd = %d\n", 
__func__
, 
nvf
->
fd
);

3313  
nvf
->
fd
;

3314 
	}
}

3316 #ifde‡
TRACE_FP_CALLS


3324 
RETT_FOPEN
 
	$_nvp_FOPEN
(
INTF_FOPEN
)

3326 
oÊag
 = 0;

3327 
fd
 = -1;

3328 
RETT_FOPEN
 
Â
 = 
NULL
;

3331 #i‡
PASS_THROUGH_CALLS


3332 
num_›í
++;

3333 
Â
 = 
_nvp_fûe›s
->
	`FOPEN
(
∑th
, 
mode
);

3334  
Â
;

3337 i‡(!
	`°rcmp
(
mode
,"w+") || !strcmp(mode,"a+")) {

3338 
oÊag
 |
O_RDWR
;

3339 
oÊag
 |
O_CREAT
;

3341 i‡(!
	`°rcmp
(
mode
,"r+"))

3342 
oÊag
 |
O_RDWR
;

3343 i‡(!
	`°rcmp
(
mode
, "w") || !strcmp(mode, "a")) {

3344 
oÊag
 |
O_WRONLY
;

3345 
oÊag
 |
O_CREAT
;

3346 } i‡(!
	`°rcmp
(
mode
, "r"))

3347 
oÊag
 |
O_RDONLY
;

3349 
	`ERROR
("%s: unknow¿modê%s\n", 
__func__
, 
mode
);

3350 
	`as£π
(0);

3353 i‡(
mode
[0] == 'a')

3354 
oÊag
 |
O_APPEND
;

3356 i‡(
	`FLAGS_INCLUDE
(
oÊag
,
O_CREAT
))

3357 
fd
 = 
	`_nvp_OPEN
(
∑th
, 
oÊag
, 0666);

3359 
fd
 = 
	`_nvp_OPEN
(
∑th
, 
oÊag
);

3361 
Â
 = 
	`fd›í
(
fd
, 
mode
);

3362 i‡(!
Â
) {

3363 
	`ERROR
("%s: fd›í faûed!Éº‹ = %s, fd = %d, modê%s\n", 
__func__
, 
	`°ªº‹
(
î∫o
), 
fd
, 
mode
);

3364 
	`fÊush
(
NULL
);

3365 
	`as£π
(0);

3368  
Â
;

3369 
	}
}

3371 
RETT_FOPEN64
 
	$_nvp_FOPEN64
(
INTF_FOPEN64
) {

3374 
	}
}

3378 
RETT_CLOSE
 
	$_nvp_CLOSE
(
INTF_CLOSE
)

3380 
RETT_CLOSE
 
ªsu…
;

3381 
öo_t
 
£rü o
;

3382 
NVFûe
* 
nvf
 = 
NULL
;

3383 
ö°rumíèti⁄_ty≥
 
˛o£_time
;

3385 
	`START_TIMING
(
˛o£_t
, 
˛o£_time
);

3387 #i‡
PASS_THROUGH_CALLS


3388 
num_˛o£
++;

3389 
ªsu…
 = 
_nvp_fûe›s
->
	`CLOSE
(
CALL_CLOSE
);

3391 
	`END_TIMING
(
˛o£_t
, 
˛o£_time
);

3393  
ªsu…
;

3396 i‡(!
async_˛o£_íabÀ
)

3397 
sync_˛o£_bg_íabÀd
;

3399 #i‡
BG_CLOSING


3400 
	`CHECK_RESOLVE_FILEOPS
(
_nvp_
);

3401 
ö°rumíèti⁄_ty≥
 
˛f_lock_time
;

3402 
¥evious_˛o£d_fûedesc
 = -1;

3403 
öo_t
 
¥evious_˛o£d_£rü o
 = 0, 
°Æe_£rü o
 = 0;

3404 
˝uid
, 
°Æe_fd
 = -1;

3405 
hash_ödex
 = -1;

3406 
node_li°_idx
 = 0;

3407 #i‡
SEQ_LIST
 || 
RAND_LIST


3408 
Clo£dFûes
 *
˛f
 = 
NULL
;

3410 
InodeClo£dFûe
 *
tbl
 = 
NULL
;

3413 
	`DEBUG
("_nvp_CLOSE(%i)\n", 
fûe
);

3417 
nvf
 = &
_nvp_fd_lookup
[
fûe
];

3418 
node_li°_idx
 = 
nvf
->
node
->
‰ì_li°_idx
;

3420 i‡(
nvf
->
posix
) {

3421 
nvf
->
vÆid
 = 0;

3422 
nvf
->
posix
 = 0;

3423 
	`NVP_LOCK_NODE_WR
(
nvf
);

3424 
nvf
->
node
->
ª„ªn˚
--;

3425 
	`NVP_UNLOCK_NODE_WR
(
nvf
);

3426 i‡(
nvf
->
node
->
ª„ªn˚
 == 0) {

3427 
nvf
->
node
->
£rü o
 = 0;

3428 
ödex
 = 
nvf
->
£rü o
 % 1024;

3429 
_nvp_öo_lookup
[
ödex
] = 0;

3430 
	`push_ö_°ack
(1, 0, 
nvf
->
node
->
ödex_ö_‰ì_li°
, 
node_li°_idx
);

3432 
nvf
->
£rü o
 = 0;

3433 
	`DEBUG
("CÆ»posix CLOSE f‹ fd %d\n", 
nvf
->
fd
);

3434 
ªsu…
 = 
_nvp_fûe›s
->
	`CLOSE
(
CALL_CLOSE
);

3436 
	`END_TIMING
(
˛o£_t
, 
˛o£_time
);

3438  
ªsu…
;

3441 
£rü o
 = 
nvf
->
node
->serialno;

3442 
	`GLOBAL_LOCK_CLOSE_WR
();

3444 
hash_ödex
 = 
£rü o
 % 
TOTAL_CLOSED_INODES
;

3446 #i‡
SEQ_LIST
 || 
RAND_LIST


3447 
˛f
 = &
_nvp_˛o£d_fûes
[
hash_ödex
];

3449 #i‡
PRINT_CONTENTION_MSGS


3450 
	`¥ötf
("%s:ácquúögÜock f‹ cl‡íåy = %d,Åhªad id = %lu\n", 
__func__
, 
hash_ödex
, 
	`±hªad_£lf
());

3451 
	`fÊush
(
NULL
);

3455 
	`LRU_NODE_LOCK_WR
(
˛f
);

3458 
tbl
 = &
öode_to_˛o£d_fûe
[
hash_ödex
];

3459 
	`NVP_LOCK_HASH_TABLE_WR
(
tbl
);

3461 
˝uid
 = 
	`GET_CPUID
();

3462 
	`NVP_LOCK_NODE_RD
(
nvf
, 
˝uid
);

3464 if(
nvf
->
node
->
ª„ªn˚
 == 1) {

3465 
	`NVP_UNLOCK_NODE_RD
(
nvf
, 
˝uid
);

3466 
	`__©omic_„tch_add
(&
™⁄_mem_˛o£d_fûes
, 
nvf
->
node
->
™⁄_mem_u£d
, 
__ATOMIC_SEQ_CST
);

3468 #i‡
SEQ_LIST
 || 
RAND_LIST


3469 
°Æe_fd
 = 
	`ö£π_ö_£q_li°
(
˛f
, &
°Æe_£rü o
, 
fûe
, 
£rü o
);

3471 
°Æe_fd
 = 
	`ö£π_ö_Ãu_li°
(
fûe
, 
£rü o
, &
°Æe_£rü o
);

3473 if(
°Æe_fd
 >0 && 
°Æe_£rü o
 > 0) {

3474 
¥evious_˛o£d_fûedesc
 = 
°Æe_fd
;

3475 
¥evious_˛o£d_£rü o
 = 
°Æe_£rü o
;

3478 if(
¥evious_˛o£d_fûedesc
 != -1) {

3479 
	`_nvp_REAL_CLOSE
(
¥evious_˛o£d_fûedesc
, 
¥evious_˛o£d_£rü o
, 1);

3482 
	`__©omic_„tch_add
(&
num_fûes_˛o£d
, 1, 
__ATOMIC_SEQ_CST
);

3484 #i‡
SEQ_LIST
 || 
RAND_LIST


3485 #i‡
PRINT_CONTENTION_MSGS


3486 
	`¥ötf
("%s:ÑñósögÜock f‹ cl‡íåy = %d,Åhªad id = %lu\n", 
__func__
, 
hash_ödex
, 
	`±hªad_£lf
());

3487 
	`fÊush
(
NULL
);

3489 
	`LRU_NODE_UNLOCK_WR
(
˛f
);

3491 
	`NVP_UNLOCK_HASH_TABLE_WR
(
tbl
);

3493 
	`GLOBAL_UNLOCK_CLOSE_WR
();

3495 
	`END_TIMING
(
˛o£_t
, 
˛o£_time
);

3500 
	`NVP_UNLOCK_NODE_RD
(
nvf
, 
˝uid
);

3501 #i‡
SEQ_LIST
 || 
RAND_LIST


3502 
	`LRU_NODE_UNLOCK_WR
(
˛f
);

3504 
	`NVP_UNLOCK_HASH_TABLE_WR
(
tbl
);

3506 
	`GLOBAL_UNLOCK_CLOSE_WR
();

3508 
nvf
 = &
_nvp_fd_lookup
[
fûe
];

3509 
£rü o
 = 
nvf
->
node
->serialno;

3511 
ªsu…
 = 
	`_nvp_REAL_CLOSE
(
CALL_CLOSE
, 
£rü o
, 0);

3513 
	`END_TIMING
(
˛o£_t
, 
˛o£_time
);

3515  
ªsu…
;

3517 
sync_˛o£_bg_íabÀd
:

3519 
nvf
 = &
_nvp_fd_lookup
[
fûe
];

3521 i‡(
fûe
 == 0 || file == 1 || file == 2) {

3522 
nvf
->
vÆid
 = 0;

3523 
nvf
->
£rü o
 = 0;

3524 
ªsu…
 = 
_nvp_fûe›s
->
	`CLOSE
(
CALL_CLOSE
);

3525 
	`END_TIMING
(
˛o£_t
, 
˛o£_time
);

3526  
ªsu…
;

3529 
£rü o
 = 
nvf
->
node
->serialno;

3530 
ªsu…
 = 
	`_nvp_REAL_CLOSE
(
CALL_CLOSE
, 
£rü o
, 0);

3532 
	`END_TIMING
(
˛o£_t
, 
˛o£_time
);

3533  
ªsu…
;

3534 
	}
}

3536 
RETT_OPENAT
 
	$_nvp_OPENAT
(
INTF_OPENAT
) {

3537  
_nvp_fûe›s
->
	`OPENAT
(
CALL_OPENAT
);

3538 
	}
}

3540 
RETT_EXECVE
 
	$_nvp_EXECVE
(
INTF_EXECVE
) {

3542 
exec_Àdgî_fd
 = -1, 
i
 = 0;

3543 
off£t_ö_m≠
 = 0;

3549 
i
 = 0; i < 1024; i++) {

3550 i‡(
_nvp_fd_lookup
[
i
].
off£t
 !
NULL
)

3551 
execve_fd_∑ssög
[
i
] = *(
_nvp_fd_lookup
[i].
off£t
);

3553 
execve_fd_∑ssög
[
i
] = 0;

3556 
exec_Àdgî_fd
 = 
	`shm_›í
("exec-Àdgî", 
O_RDWR
 | 
O_CREAT
, 
S_IRUSR
 | 
S_IWUSR
);

3557 i‡(
exec_Àdgî_fd
 == -1) {

3558 
	`¥ötf
("%s: %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3559 
	`as£π
(0);

3562 
ªs
 = 
_nvp_fûe›s
->
	`TRUNC64
(
exec_Àdgî_fd
, (10*1024*1024));

3563 i‡(
ªs
 == -1) {

3564 
	`¥ötf
("%s: fåunˇã faûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3565 
	`as£π
(0);

3568 *
shm_¨ó
 = 
	`mm≠
(
NULL
, 10*1024*1024, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
exec_Àdgî_fd
, 0);

3569 i‡(
shm_¨ó
 =
NULL
) {

3570 
	`¥ötf
("%s: mm≠ faûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3571 
	`as£π
(0);

3574 i‡(
	`mem˝y
(
shm_¨ó
 + 
off£t_ö_m≠
, 
_nvp_fd_lookup
, 1024 * (
NVFûe
)Ë=
NULL
) {

3575 
	`¥ötf
("%s: mem˝y o‡fdÜooku∞Áûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3576 
	`as£π
(0);

3579 
off£t_ö_m≠
 +(1024 * (
NVFûe
));

3581 i‡(
	`mem˝y
(
shm_¨ó
 + 
off£t_ö_m≠
, 
execve_fd_∑ssög
, 1024 * ()Ë=
NULL
) {

3582 
	`¥ötf
("%s: mem˝y o‡execvêoff£àÁûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3583 
	`as£π
(0);

3586 
off£t_ö_m≠
 += (1024 * ());

3589 i‡(
	`mem˝y
(
shm_¨ó
 + 
off£t_ö_m≠
, 
_nvp_node_lookup
[0], 1024*(
NVNode
)Ë=
NULL
) {

3590 
	`¥ötf
("%s: mem˝y o‡nodêlooku∞Áûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3591 
	`as£π
(0);

3594 
off£t_ö_m≠
 +(1024*(
NVNode
));

3596 i‡(
	`mem˝y
(
shm_¨ó
 + 
off£t_ö_m≠
, 
_nvp_öo_lookup
, 1024 * ()Ë=
NULL
) {

3597 
	`¥ötf
("%s: mem˝y o‡öÿlooku∞Áûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3598 
	`as£π
(0);

3601 
off£t_ö_m≠
 += (1024 * ());

3603 i‡(
	`mem˝y
(
shm_¨ó
 + 
off£t_ö_m≠
, 
_nvp_‰ì_node_li°
[0], 1024*(
SèckNode
)Ë=
NULL
) {

3604 
	`¥ötf
("%s: mem˝y o‡‰ìÇodêli° faûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3605 
	`as£π
(0);

3608 
off£t_ö_m≠
 +(1024 * (
SèckNode
));

3611  
_nvp_fûe›s
->
	`EXECVE
(
CALL_EXECVE
);

3613 
	}
}

3615 
RETT_EXECVP
 
	$_nvp_EXECVP
(
INTF_EXECVP
) {

3617 
exec_Àdgî_fd
 = -1, 
i
 = 0;

3618 
off£t_ö_m≠
 = 0;

3620 
i
 = 0; i < 1024; i++) {

3621 i‡(
_nvp_fd_lookup
[
i
].
off£t
 !
NULL
)

3622 
execve_fd_∑ssög
[
i
] = *(
_nvp_fd_lookup
[i].
off£t
);

3624 
execve_fd_∑ssög
[
i
] = 0;

3627 
exec_Àdgî_fd
 = 
	`shm_›í
("exec-Àdgî", 
O_RDWR
 | 
O_CREAT
, 
S_IRUSR
 | 
S_IWUSR
);

3628 i‡(
exec_Àdgî_fd
 == -1) {

3629 
	`¥ötf
("%s: %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3630 
	`as£π
(0);

3633 
ªs
 = 
_nvp_fûe›s
->
	`TRUNC64
(
exec_Àdgî_fd
, (10*1024*1024));

3634 i‡(
ªs
 == -1) {

3635 
	`¥ötf
("%s: fåunˇã faûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3636 
	`as£π
(0);

3639 *
shm_¨ó
 = 
	`mm≠
(
NULL
, 10*1024*1024, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
exec_Àdgî_fd
, 0);

3640 i‡(
shm_¨ó
 =
NULL
) {

3641 
	`¥ötf
("%s: mm≠ faûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3642 
	`as£π
(0);

3645 i‡(
	`mem˝y
(
shm_¨ó
 + 
off£t_ö_m≠
, 
_nvp_fd_lookup
, 1024 * (
NVFûe
)Ë=
NULL
) {

3646 
	`¥ötf
("%s: mem˝y o‡fdÜooku∞Áûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3647 
	`as£π
(0);

3650 
off£t_ö_m≠
 +(1024 * (
NVFûe
));

3652 i‡(
	`mem˝y
(
shm_¨ó
 + 
off£t_ö_m≠
, 
execve_fd_∑ssög
, 1024 * ()Ë=
NULL
) {

3653 
	`¥ötf
("%s: mem˝y o‡execvêoff£àÁûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3654 
	`as£π
(0);

3657 
off£t_ö_m≠
 += (1024 * ());

3660 i‡(
	`mem˝y
(
shm_¨ó
 + 
off£t_ö_m≠
, 
_nvp_node_lookup
[0], 1024*(
NVNode
)Ë=
NULL
) {

3661 
	`¥ötf
("%s: mem˝y o‡nodêlooku∞Áûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3662 
	`as£π
(0);

3665 
off£t_ö_m≠
 +(1024*(
NVNode
));

3667 i‡(
	`mem˝y
(
shm_¨ó
 + 
off£t_ö_m≠
, 
_nvp_öo_lookup
, 1024 * ()Ë=
NULL
) {

3668 
	`¥ötf
("%s: mem˝y o‡öÿlooku∞Áûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3669 
	`as£π
(0);

3672 
off£t_ö_m≠
 += (1024 * ());

3674 i‡(
	`mem˝y
(
shm_¨ó
 + 
off£t_ö_m≠
, 
_nvp_‰ì_node_li°
[0], 1024*(
SèckNode
)Ë=
NULL
) {

3675 
	`¥ötf
("%s: mem˝y o‡‰ìÇodêli° faûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3676 
	`as£π
(0);

3679 
off£t_ö_m≠
 +(1024 * (
SèckNode
));

3682  
_nvp_fûe›s
->
	`EXECVP
(
CALL_EXECVP
);

3683 
	}
}

3685 
RETT_EXECV
 
	$_nvp_EXECV
(
INTF_EXECV
) {

3687 
exec_Àdgî_fd
 = -1, 
i
 = 0;

3688 
off£t_ö_m≠
 = 0;

3690 
i
 = 0; i < 1024; i++) {

3691 i‡(
_nvp_fd_lookup
[
i
].
off£t
 !
NULL
)

3692 
execve_fd_∑ssög
[
i
] = *(
_nvp_fd_lookup
[i].
off£t
);

3694 
execve_fd_∑ssög
[
i
] = 0;

3697 
exec_Àdgî_fd
 = 
	`shm_›í
("exec-Àdgî", 
O_RDWR
 | 
O_CREAT
, 
S_IRUSR
 | 
S_IWUSR
);

3698 i‡(
exec_Àdgî_fd
 == -1) {

3699 
	`¥ötf
("%s: %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3700 
	`as£π
(0);

3703 
ªs
 = 
_nvp_fûe›s
->
	`TRUNC64
(
exec_Àdgî_fd
, (10*1024*1024));

3704 i‡(
ªs
 == -1) {

3705 
	`¥ötf
("%s: fåunˇã faûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3706 
	`as£π
(0);

3709 *
shm_¨ó
 = 
	`mm≠
(
NULL
, 10*1024*1024, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
exec_Àdgî_fd
, 0);

3710 i‡(
shm_¨ó
 =
NULL
) {

3711 
	`¥ötf
("%s: mm≠ faûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3712 
	`as£π
(0);

3715 i‡(
	`mem˝y
(
shm_¨ó
 + 
off£t_ö_m≠
, 
_nvp_fd_lookup
, 1024 * (
NVFûe
)Ë=
NULL
) {

3716 
	`¥ötf
("%s: mem˝y o‡fdÜooku∞Áûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3717 
	`as£π
(0);

3720 
off£t_ö_m≠
 +(1024 * (
NVFûe
));

3722 i‡(
	`mem˝y
(
shm_¨ó
 + 
off£t_ö_m≠
, 
execve_fd_∑ssög
, 1024 * ()Ë=
NULL
) {

3723 
	`¥ötf
("%s: mem˝y o‡execvêoff£àÁûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3724 
	`as£π
(0);

3727 
off£t_ö_m≠
 += (1024 * ());

3730 i‡(
	`mem˝y
(
shm_¨ó
 + 
off£t_ö_m≠
, 
_nvp_node_lookup
[0], 1024*(
NVNode
)Ë=
NULL
) {

3731 
	`¥ötf
("%s: mem˝y o‡nodêlooku∞Áûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3732 
	`as£π
(0);

3735 
off£t_ö_m≠
 +(1024*(
NVNode
));

3737 i‡(
	`mem˝y
(
shm_¨ó
 + 
off£t_ö_m≠
, 
_nvp_öo_lookup
, 1024 * ()Ë=
NULL
) {

3738 
	`¥ötf
("%s: mem˝y o‡öÿlooku∞Áûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3739 
	`as£π
(0);

3742 
off£t_ö_m≠
 += (1024 * ());

3744 i‡(
	`mem˝y
(
shm_¨ó
 + 
off£t_ö_m≠
, 
_nvp_‰ì_node_li°
[0], 1024*(
SèckNode
)Ë=
NULL
) {

3745 
	`¥ötf
("%s: mem˝y o‡‰ìÇodêli° faûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3746 
	`as£π
(0);

3749 
off£t_ö_m≠
 +(1024 * (
SèckNode
));

3752  
_nvp_fûe›s
->
	`EXECV
(
CALL_EXECV
);

3753 
	}
}

3755 
RETT_EXECL
 
	$_nvp_EXECL
(
INTF_EXECL
) {

3757 
exec_Àdgî_fd
 = -1, 
i
 = 0;

3758 
off£t_ö_m≠
 = 0;

3759 c⁄° *
¨gv1
 = 
NULL
;

3760 c⁄° *
¨gv2
 = 
NULL
;

3762 
va_li°
 
¨gli°
;

3763 
	`va_°¨t
(
¨gli°
, 
¨g
);

3764 
¨gv1
 = 
	`va_¨g
(
¨gli°
, const *);

3765 
¨gv2
 = 
	`va_¨g
(
¨gli°
, const *);

3766 
	`va_íd
(
¨gli°
);

3769 
	`DEBUG_FILE
("%s:árgumíà1 = %s\n", 
__func__
, 
¨gv1
);

3770 
	`DEBUG_FILE
("%s:árgumíà2 = %s\n", 
__func__
, 
¨gv2
);

3772 
i
 = 0; i < 1024; i++) {

3773 i‡(
_nvp_fd_lookup
[
i
].
off£t
 !
NULL
)

3774 
execve_fd_∑ssög
[
i
] = *(
_nvp_fd_lookup
[i].
off£t
);

3776 
execve_fd_∑ssög
[
i
] = 0;

3779 
exec_Àdgî_fd
 = 
	`shm_›í
("exec-Àdgî", 
O_RDWR
 | 
O_CREAT
, 
S_IRUSR
 | 
S_IWUSR
);

3780 i‡(
exec_Àdgî_fd
 == -1) {

3781 
	`¥ötf
("%s: %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3782 
	`as£π
(0);

3785 
ªs
 = 
_nvp_fûe›s
->
	`TRUNC64
(
exec_Àdgî_fd
, (10*1024*1024));

3786 i‡(
ªs
 == -1) {

3787 
	`¥ötf
("%s: fåunˇã faûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3788 
	`as£π
(0);

3791 *
shm_¨ó
 = 
	`mm≠
(
NULL
, 10*1024*1024, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
exec_Àdgî_fd
, 0);

3792 i‡(
shm_¨ó
 =
NULL
) {

3793 
	`¥ötf
("%s: mm≠ faûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3794 
	`as£π
(0);

3797 i‡(
	`mem˝y
(
shm_¨ó
 + 
off£t_ö_m≠
, 
_nvp_fd_lookup
, 1024 * (
NVFûe
)Ë=
NULL
) {

3798 
	`¥ötf
("%s: mem˝y o‡fdÜooku∞Áûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3799 
	`as£π
(0);

3802 
off£t_ö_m≠
 +(1024 * (
NVFûe
));

3804 i‡(
	`mem˝y
(
shm_¨ó
 + 
off£t_ö_m≠
, 
execve_fd_∑ssög
, 1024 * ()Ë=
NULL
) {

3805 
	`¥ötf
("%s: mem˝y o‡execvêoff£àÁûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3806 
	`as£π
(0);

3809 
off£t_ö_m≠
 += (1024 * ());

3812 i‡(
	`mem˝y
(
shm_¨ó
 + 
off£t_ö_m≠
, 
_nvp_node_lookup
[0], 1024*(
NVNode
)Ë=
NULL
) {

3813 
	`¥ötf
("%s: mem˝y o‡nodêlooku∞Áûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3814 
	`as£π
(0);

3817 
off£t_ö_m≠
 +(1024*(
NVNode
));

3819 i‡(
	`mem˝y
(
shm_¨ó
 + 
off£t_ö_m≠
, 
_nvp_öo_lookup
, 1024 * ()Ë=
NULL
) {

3820 
	`¥ötf
("%s: mem˝y o‡öÿlooku∞Áûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3821 
	`as£π
(0);

3824 
off£t_ö_m≠
 += (1024 * ());

3826 i‡(
	`mem˝y
(
shm_¨ó
 + 
off£t_ö_m≠
, 
_nvp_‰ì_node_li°
[0], 1024*(
SèckNode
)Ë=
NULL
) {

3827 
	`¥ötf
("%s: mem˝y o‡‰ìÇodêli° faûed. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

3828 
	`as£π
(0);

3831 
off£t_ö_m≠
 +(1024 * (
SèckNode
));

3834  
_nvp_fûe›s
->
	`EXECL
(
CALL_EXECL
, 
¨gv1
, 
¨gv2
, (*Ë
NULL
);

3835 
	}
}

3840 #ifde‡
TRACE_FP_CALLS


3841 
RETT_FCLOSE
 
	$_nvp_FCLOSE
(
INTF_FCLOSE
)

3843 
	`CHECK_RESOLVE_FILEOPS
(
_nvp_
);

3844 
RETT_FCLOSE
 
ªsu…
;

3845 
fd
 = -1;

3846 
ö°rumíèti⁄_ty≥
 
˛o£_time
;

3848 
	`START_TIMING
(
˛o£_t
, 
˛o£_time
);

3850 #i‡
PASS_THROUGH_CALLS


3851 
ªsu…
 = 
_nvp_fûe›s
->
	`FCLOSE
(
CALL_FCLOSE
);

3852 
	`END_TIMING
(
˛o£_t
, 
˛o£_time
);

3853  
ªsu…
;

3856 
fd
 = 
	`fûío
(
Â
);

3857 
ªsu…
 = 
	`_nvp_CLOSE
(
fd
);

3858  
ªsu…
;

3859 
	}
}

3861 
RETT_FREAD
 
	$_nvp_FREAD
(
INTF_FREAD
)

3863 
	`DEBUG
("_nvp_READ %d\n", 
	`fûío
(
Â
));

3864 
RETT_READ
 
ªsu…
;

3865 
ö°rumíèti⁄_ty≥
 
ªad_time
;

3867 
	`START_TIMING
(
ªad_t
, 
ªad_time
);

3869 #i‡
PASS_THROUGH_CALLS


3870 
num_ªad
++;

3871 
ªsu…
 = 
_nvp_fûe›s
->
	`FREAD
(
CALL_FREAD
);

3872 
	`END_TIMING
(
ªad_t
, 
ªad_time
);

3873  
ªsu…
;

3879 
NVFûe
* 
nvf
 = &
_nvp_fd_lookup
[
	`fûío
(
Â
)];

3881 i‡(
nvf
->
posix
) {

3882 
	`DEBUG
("CÆ»posix READ f‹ fd %d\n", 
nvf
->
fd
);

3883 
ªsu…
 = 
_nvp_fûe›s
->
	`FREAD
(
CALL_FREAD
);

3884 
ªad_size
 +
ªsu…
;

3885 
num_posix_ªad
++;

3886 
posix_ªad_size
 +
ªsu…
;

3887  
ªsu…
;

3890 
ªsu…
 = 
	`_nvp_check_ªad_size_vÆid
(
Àngth
);

3891 i‡(
ªsu…
 <= 0) {

3892  
ªsu…
;

3895 
˝uid
 = 
	`GET_CPUID
();

3897 
	`NVP_LOCK_FD_RD
(
nvf
, 
˝uid
);

3898 
	`NVP_CHECK_NVF_VALID_WR
(
nvf
);

3899 
	`NVP_LOCK_NODE_RD
(
nvf
, 
˝uid
);

3901 
ªsu…
 = 
	`_nvp_do_¥ód
(
	`fûío
(
Â
), 
buf
, 
Àngth
*
nmemb
,

3902 
	`__sync_„tch_™d_add
(
nvf
->
off£t
, 
Àngth
), 0, 
˝uid
,Çvf);

3904 
	`NVP_UNLOCK_NODE_RD
(
nvf
, 
˝uid
);

3906 if(
ªsu…
 =
Àngth
) {

3907 
	`DEBUG
("PREAD succeeded:Éxtending offset from %liÅo %li\n",

3908 *
nvf
->
off£t
 - 
ªsu…
, *nvf->offset);

3910 i‡(
ªsu…
 <= 0){

3911 
	`DEBUG
("_nvp_READ: PREAD failed;Çot changing offset. "

3912 "‘ëu∫ed %i)\n", 
ªsu…
);

3914 
	`__sync_„tch_™d_sub
(
nvf
->
off£t
, 
Àngth
);

3916 
	`DEBUG
("_nvp_READ: PREAD failed; Not fullyÑead. "

3917 "‘ëu∫ed %i)\n", 
ªsu…
);

3919 
	`__sync_„tch_™d_sub
(
nvf
->
off£t
, 
Àngth
 - 
ªsu…
);

3922 
	`NVP_UNLOCK_FD_RD
(
nvf
, 
˝uid
);

3924 
num_ªad
++;

3925 
ªad_size
 +
ªsu…
;

3927  
ªsu…
;

3928 
	}
}

3931 
RETT_READ
 
	$_nvp_READ
(
INTF_READ
)

3933 
	`DEBUG
("_nvp_READ %d\n", 
fûe
);

3934 
num_ªad
++;

3935 
RETT_READ
 
ªsu…
;

3936 
ö°rumíèti⁄_ty≥
 
ªad_time
;

3937 
pid
, 
µid
;

3939 
	`START_TIMING
(
ªad_t
, 
ªad_time
);

3941 #i‡
PASS_THROUGH_CALLS


3942 
ªsu…
 = 
_nvp_fûe›s
->
	`READ
(
CALL_READ
);

3943 
	`END_TIMING
(
ªad_t
, 
ªad_time
);

3944  
ªsu…
;

3950 
NVFûe
* 
nvf
 = &
_nvp_fd_lookup
[
fûe
];

3952 if(
nvf
->
posix
) {

3953 
	`DEBUG
("CÆ»posix READ f‹ fd %d\n", 
nvf
->
fd
);

3954 
ªsu…
 = 
_nvp_fûe›s
->
	`READ
(
CALL_READ
);

3955 
ªad_size
 +
ªsu…
;

3956 
num_posix_ªad
++;

3957 
posix_ªad_size
 +
ªsu…
;

3958 
	`END_TIMING
(
ªad_t
, 
ªad_time
);

3959  
ªsu…
;

3962 
ªsu…
 = 
	`_nvp_check_ªad_size_vÆid
(
Àngth
);

3963 i‡(
ªsu…
 <= 0) {

3964 
	`END_TIMING
(
ªad_t
, 
ªad_time
);

3965  
ªsu…
;

3968 
˝uid
 = 
	`GET_CPUID
();

3970 
	`NVP_LOCK_FD_RD
(
nvf
, 
˝uid
);

3971 
	`NVP_CHECK_NVF_VALID_WR
(
nvf
);

3972 
	`NVP_LOCK_NODE_RD
(
nvf
, 
˝uid
);

3974 
ªsu…
 = 
	`_nvp_do_¥ód
(
CALL_READ
,

3975 
	`__sync_„tch_™d_add
(
nvf
->
off£t
, 
Àngth
), 0, 
˝uid
,Çvf);

3977 
	`NVP_UNLOCK_NODE_RD
(
nvf
, 
˝uid
);

3979 if(
ªsu…
 =
Àngth
) {

3980 
	`DEBUG
("PREAD succeeded:Éxtending offset from %liÅo %li\n",

3981 *
nvf
->
off£t
 - 
ªsu…
, *nvf->offset);

3983 i‡(
ªsu…
 <= 0){

3984 
	`DEBUG
("_nvp_READ: PREAD failed;Çot changing offset. "

3985 "‘ëu∫ed %i)\n", 
ªsu…
);

3987 
	`__sync_„tch_™d_sub
(
nvf
->
off£t
, 
Àngth
);

3989 
	`DEBUG
("_nvp_READ: PREAD failed; Not fullyÑead. "

3990 "‘ëu∫ed %i)\n", 
ªsu…
);

3992 
	`__sync_„tch_™d_sub
(
nvf
->
off£t
, 
Àngth
 - 
ªsu…
);

3995 
	`NVP_UNLOCK_FD_RD
(
nvf
, 
˝uid
);

3997 
ªad_size
 +
ªsu…
;

3999 
	`END_TIMING
(
ªad_t
, 
ªad_time
);

4000  
ªsu…
;

4001 
	}
}

4004 #ifde‡
TRACE_FP_CALLS


4005 
RETT_FWRITE
 
	$_nvp_FWRITE
(
INTF_FWRITE
)

4007 
	`DEBUG
("_nvp_WRITE %d\n", 
	`fûío
(
Â
));

4008 
num_wrôe
++;

4009 
RETT_FWRITE
 
ªsu…
;

4010 
ö°rumíèti⁄_ty≥
 
wrôe_time
;

4012 
	`DEBUG_FILE
("%s: CÆlög fwrôêwôh f∞%p, fd = %d,Üígth = %lu,Çmemb = %d\n", 
__func__
, 
Â
, 
	`fûío
(Â), 
Àngth
, 
nmemb
);

4014 
	`START_TIMING
(
wrôe_t
, 
wrôe_time
);

4016 #i‡
PASS_THROUGH_CALLS


4018 
ªsu…
 = 
_nvp_fûe›s
->
	`WRITE
(
	`fûío
(
Â
), 
buf
, (
Àngth
*
nmemb
));

4019 
	`DEBUG_FILE
("%s: Resu… o‡thêwrôê%d\n", 
__func__
, 
ªsu…
);

4020 
wrôe_size
 +
ªsu…
;

4021 
	`END_TIMING
(
wrôe_t
, 
wrôe_time
);

4022  
ªsu…
;

4029 i‡(
	`fûío
(
Â
) == 1) {

4030 
ªsu…
 = 
_nvp_fûe›s
->
	`WRITE
(
	`fûío
(
Â
), 
buf
, (
Àngth
*
nmemb
));

4031 
	`DEBUG_FILE
("%s: Resu… o‡thêwrôê%d\n", 
__func__
, 
ªsu…
);

4032 
wrôe_size
 +
ªsu…
;

4033 
num_posix_wrôe
++;

4034 
posix_wrôe_size
 +
ªsu…
;

4035 
	`END_TIMING
(
wrôe_t
, 
wrôe_time
);

4036  
ªsu…
;

4039 
NVFûe
* 
nvf
 = &
_nvp_fd_lookup
[
	`fûío
(
Â
)];

4041 i‡(
nvf
->
posix
) {

4042 
	`DEBUG
("CÆ»posix WRITE f‹ fd %d\n", 
nvf
->
fd
);

4043 
ªsu…
 = 
_nvp_fûe›s
->
	`FWRITE
(
CALL_FWRITE
);

4044 
wrôe_size
 +
ªsu…
;

4045 
num_posix_wrôe
++;

4046 
posix_wrôe_size
 +
ªsu…
;

4047 
	`END_TIMING
(
wrôe_t
, 
wrôe_time
);

4048  
ªsu…
;

4051 
˝uid
 = 
	`GET_CPUID
();

4053 
ªsu…
 = 
	`_nvp_check_wrôe_size_vÆid
(
Àngth
);

4054 i‡(
ªsu…
 <= 0) {

4055 
	`END_TIMING
(
wrôe_t
, 
wrôe_time
);

4056  
ªsu…
;

4059 
	`NVP_LOCK_FD_RD
(
nvf
, 
˝uid
);

4060 
	`NVP_CHECK_NVF_VALID_WR
(
nvf
);

4061 
	`NVP_LOCK_NODE_RD
(
nvf
, 
˝uid
);

4063 
ªsu…
 = 
	`_nvp_do_pwrôe
(
	`fûío
(
Â
), 
buf
, 
Àngth
*
nmemb
,

4064 
	`__sync_„tch_™d_add
(
nvf
->
off£t
, 
Àngth
), 0, 
˝uid
,Çvf);

4066 
	`NVP_UNLOCK_NODE_RD
(
nvf
, 
˝uid
);

4068 if(
ªsu…
 >= 0)

4070 if(
nvf
->
≠≥nd
)

4072 
	`DEBUG
("PWRITE succeededándáppend ==Årue. "

4074 
	`as£π
(
	`_nvp_do_£ek64
(
nvf
->
fd
, 0, 
SEEK_END
,Çvf)

4075 !(
RETT_SEEK64
)-1);

4079 
	`DEBUG
("PWRITE succeeded:Éxtending offset "

4081 *
nvf
->
off£t
 - 
ªsu…
, *nvf->offset);

4085 
	`DEBUG
("_nvp_WRITE: PWRITE failed;Çot changing offset. "

4086 "‘ëu∫ed %i)\n", 
ªsu…
);

4089 
	`DEBUG_FILE
("AboutÅoÑeturn from _nvp_WRITE withÑet val %i (errno %i). "

4091 
ªsu…
, 
î∫o
, 
nvf
->
node
->
Àngth
,Çvf->
off£t
);

4093 
	`NVP_UNLOCK_FD_RD
(
nvf
, 
˝uid
);

4094 
wrôe_size
 +
ªsu…
;

4095 
	`END_TIMING
(
wrôe_t
, 
wrôe_time
);

4096  
ªsu…
;

4097 
	}
}

4100 #ifde‡
TRACE_FP_CALLS


4101 
RETT_FSEEK
 
	$_nvp_FSEEK
(
INTF_FSEEK
)

4103 
RETT_WRITE
 
ªsu…
;

4104 
fd
 = -1;

4106 
fd
 = 
	`fûío
(
Â
);

4107 
ªsu…
 = 
	`_nvp_SEEK
(
fd
, 
off£t
, 
whí˚
);

4108  
ªsu…
;

4109 
	}
}

4112 #ifde‡
TRACE_FP_CALLS


4113 
RETT_FTELL
 
	$_nvp_FTELL
(
INTF_FTELL
)

4115 
RETT_FTELL
 
ªsu…
;

4116 
fd
 = -1;

4117 
NVFûe
 *
nvf
 = 
NULL
;

4119 
fd
 = 
	`fûío
(
Â
);

4120 
nvf
 = &
_nvp_fd_lookup
[
fd
];

4122 
ªsu…
 = 
	`_nvp_SEEK
(
fd
, *(
nvf
->
off£t
), 
SEEK_CUR
);

4123  
ªsu…
;

4124 
	}
}

4127 #ifde‡
TRACE_FP_CALLS


4128 
RETT_FTELLO
 
	$_nvp_FTELLO
(
INTF_FTELLO
)

4130 
RETT_FTELLO
 
ªsu…
;

4132 
ªsu…
 = 
	`_nvp_FTELL
(
CALL_FTELLO
);

4133  
ªsu…
;

4134 
	}
}

4137 
RETT_WRITE
 
	$_nvp_WRITE
(
INTF_WRITE
)

4139 
	`DEBUG
("_nvp_WRITE %d\n", 
fûe
);

4140 
num_wrôe
++;

4141 
RETT_WRITE
 
ªsu…
;

4142 
ö°rumíèti⁄_ty≥
 
wrôe_time
, 
wrôe_sysˇŒ_time
;

4144 
	`START_TIMING
(
wrôe_t
, 
wrôe_time
);

4146 #i‡
PASS_THROUGH_CALLS


4147 
ªsu…
 = 
_nvp_fûe›s
->
	`WRITE
(
CALL_WRITE
);

4148 
wrôe_size
 +
ªsu…
;

4149 
	`END_TIMING
(
wrôe_t
, 
wrôe_time
);

4150  
ªsu…
;

4156 
NVFûe
* 
nvf
 = &
_nvp_fd_lookup
[
fûe
];

4158 i‡(
nvf
->
posix
) {

4159 
	`DEBUG
("CÆ»posix WRITE f‹ fd %d\n", 
nvf
->
fd
);

4160 
ªsu…
 = 
_nvp_fûe›s
->
	`WRITE
(
CALL_WRITE
);

4161 
wrôe_size
 +
ªsu…
;

4162 
num_posix_wrôe
++;

4163 
posix_wrôe_size
 +
ªsu…
;

4164 
	`END_TIMING
(
wrôe_t
, 
wrôe_time
);

4165  
ªsu…
;

4168 
˝uid
 = 
	`GET_CPUID
();

4170 
ªsu…
 = 
	`_nvp_check_wrôe_size_vÆid
(
Àngth
);

4171 i‡(
ªsu…
 <= 0) {

4172 
	`END_TIMING
(
wrôe_t
, 
wrôe_time
);

4173  
ªsu…
;

4176 
	`NVP_LOCK_FD_RD
(
nvf
, 
˝uid
);

4177 
	`NVP_CHECK_NVF_VALID_WR
(
nvf
);

4178 
	`NVP_LOCK_NODE_RD
(
nvf
, 
˝uid
);

4181 #i‡!
ANON_MEM_HANDLE


4182 i‡((*(
nvf
->
off£t
Ë+ 
Àngth
Ë>Çvf->
node
->
åue_Àngth
) {

4184 
_nvp_wr_tŸÆ
++;

4186 
	`NVP_UNLOCK_NODE_RD
(
nvf
, 
˝uid
);

4187 
	`NVP_LOCK_NODE_WR
(
nvf
);

4189 
nvf
->
node
->
Àngth
 = *“vf->
off£t
) +Üength;

4190 
nvf
->
node
->
åue_Àngth
 = *“vf->
off£t
Ë+ 
Àngth
;

4191 
nvf
->
node
->
åue_Àngth_f‹_ªad
 = *“vf->
off£t
Ë+ 
Àngth
;

4193 
	`START_TIMING
(
wrôe_sysˇŒ_t
, 
wrôe_sysˇŒ_time
);

4195 
ªsu…
 = 
_nvp_fûe›s
->
	`PWRITE
(
CALL_WRITE
, 
	`__sync_„tch_™d_add
(
nvf
->
off£t
, 
Àngth
));

4197 
	`END_TIMING
(
wrôe_sysˇŒ_t
, 
wrôe_sysˇŒ_time
);

4199 
num_posix_wrôe
++;

4200 
posix_wrôe_size
 +
ªsu…
;

4201 
num_m„n˚
++;

4202 
num_wrôe_n⁄ãmp‹Æ
++;

4203 
_nvp_wr_exãnded
++;

4205 
	`NVP_UNLOCK_NODE_WR
(
nvf
);

4206 
	`NVP_UNLOCK_FD_RD
(
nvf
, 
˝uid
);

4208 
	`END_TIMING
(
wrôe_t
, 
wrôe_time
);

4209  
ªsu…
;

4213 
ªsu…
 = 
	`_nvp_do_pwrôe
(
CALL_WRITE
,

4214 
	`__sync_„tch_™d_add
(
nvf
->
off£t
, 
Àngth
), 0, 
˝uid
,Çvf);

4215 
	`NVP_UNLOCK_NODE_RD
(
nvf
, 
˝uid
);

4216 if(
ªsu…
 >= 0)

4218 if(
nvf
->
≠≥nd
)

4220 
	`DEBUG
("PWRITE succeededándáppend ==Årue. "

4222 
	`as£π
(
	`_nvp_do_£ek64
(
nvf
->
fd
, 0, 
SEEK_END
,Çvf)

4223 !(
RETT_SEEK64
)-1);

4227 
	`DEBUG
("PWRITE succeeded:Éxtending offset "

4229 *
nvf
->
off£t
 - 
ªsu…
, *nvf->offset);

4232 
wrôe_size
 +
ªsu…
;

4235 
	`DEBUG
("AboutÅoÑeturn from _nvp_WRITE withÑet val %i (errno %i). "

4237 
ªsu…
, 
î∫o
, 
nvf
->
node
->
Àngth
,Çvf->
off£t
,

4238 
nvf
->
node
->
m≠Àngth
);

4240 
	`NVP_UNLOCK_FD_RD
(
nvf
, 
˝uid
);

4242 
	`END_TIMING
(
wrôe_t
, 
wrôe_time
);

4243  
ªsu…
;

4244 
	}
}

4246 
RETT_PREAD
 
	$_nvp_PREAD
(
INTF_PREAD
)

4248 
	`CHECK_RESOLVE_FILEOPS
(
_nvp_
);

4249 
	`DEBUG
("_nvp_PREAD %d\n", 
fûe
);

4250 
num_ªad
++;

4251 
ö°rumíèti⁄_ty≥
 
ªad_time
;

4252 
RETT_PREAD
 
ªsu…
;

4254 
	`START_TIMING
(
¥ód_t
, 
ªad_time
);

4256 #i‡
PASS_THROUGH_CALLS


4257 
ªsu…
 = 
_nvp_fûe›s
->
	`PREAD
(
CALL_PREAD
);

4259 
	`END_TIMING
(
¥ód_t
, 
ªad_time
);

4260  
ªsu…
;

4266 
NVFûe
* 
nvf
 = &
_nvp_fd_lookup
[
fûe
];

4268 i‡(
nvf
->
posix
) {

4269 
	`DEBUG
("CÆ»posix PREAD f‹ fd %d\n", 
nvf
->
fd
);

4270 
ªsu…
 = 
_nvp_fûe›s
->
	`PREAD
(
CALL_PREAD
);

4271 
ªad_size
 +
ªsu…
;

4272 
num_posix_ªad
++;

4273 
posix_ªad_size
 +
ªsu…
;

4275 
	`END_TIMING
(
¥ód_t
, 
ªad_time
);

4276  
ªsu…
;

4279 
ªsu…
 = 
	`_nvp_check_ªad_size_vÆid
(
cou¡
);

4280 i‡(
ªsu…
 <= 0) {

4281 
	`END_TIMING
(
¥ód_t
, 
ªad_time
);

4282  
ªsu…
;

4285 
˝uid
 = 
	`GET_CPUID
();

4287 
	`NVP_LOCK_FD_RD
(
nvf
, 
˝uid
);

4288 
	`NVP_CHECK_NVF_VALID
(
nvf
);

4289 
	`NVP_LOCK_NODE_RD
(
nvf
, 
˝uid
);

4291 
ªsu…
 = 
	`_nvp_do_¥ód
(
CALL_PREAD
, 0, 
˝uid
, 
nvf
);

4293 
	`NVP_UNLOCK_NODE_RD
(
nvf
, 
˝uid
);

4294 
	`NVP_UNLOCK_FD_RD
(
nvf
, 
˝uid
);

4296 
ªad_size
 +
ªsu…
;

4298 
	`END_TIMING
(
¥ód_t
, 
ªad_time
);

4299  
ªsu…
;

4300 
	}
}

4302 
RETT_PWRITE
 
	$_nvp_PWRITE
(
INTF_PWRITE
)

4304 
	`CHECK_RESOLVE_FILEOPS
(
_nvp_
);

4305 
	`DEBUG
("_nvp_PWRITE %d\n", 
fûe
);

4306 
num_wrôe
++;

4307 
ö°rumíèti⁄_ty≥
 
wrôe_time
;

4308 
RETT_PWRITE
 
ªsu…
;

4310 
	`START_TIMING
(
pwrôe_t
, 
wrôe_time
);

4312 #i‡
PASS_THROUGH_CALLS


4313 
ªsu…
 = 
_nvp_fûe›s
->
	`PWRITE
(
CALL_PWRITE
);

4315 
wrôe_size
 +
ªsu…
;

4316 
	`END_TIMING
(
pwrôe_t
, 
wrôe_time
);

4317  
ªsu…
;

4323 
NVFûe
* 
nvf
 = &
_nvp_fd_lookup
[
fûe
];

4325 i‡(
nvf
->
posix
) {

4326 
	`DEBUG
("CÆ»posix PWRITE f‹ fd %d\n", 
nvf
->
fd
);

4327 
ªsu…
 = 
_nvp_fûe›s
->
	`PWRITE
(
CALL_PWRITE
);

4328 
wrôe_size
 +
ªsu…
;

4329 
num_posix_wrôe
++;

4330 
posix_wrôe_size
 +
ªsu…
;

4331 
	`END_TIMING
(
pwrôe_t
, 
wrôe_time
);

4332  
ªsu…
;

4335 
ªsu…
 = 
	`_nvp_check_wrôe_size_vÆid
(
cou¡
);

4336 i‡(
ªsu…
 <= 0) {

4337 
	`END_TIMING
(
pwrôe_t
, 
wrôe_time
);

4338  
ªsu…
;

4340 
˝uid
 = 
	`GET_CPUID
();

4341 
	`NVP_LOCK_FD_RD
(
nvf
, 
˝uid
);

4342 
	`NVP_CHECK_NVF_VALID
(
nvf
);

4343 
	`NVP_LOCK_NODE_RD
(
nvf
, 
˝uid
);

4345 
ssize_t
 
avaûabÀ_Àngth
 = (
nvf
->
node
->
Àngth
Ë- 
off£t
;

4362 
ªsu…
 = 
	`_nvp_do_pwrôe
(
CALL_PWRITE
, 0, 
˝uid
, 
nvf
);

4363 
	`NVP_UNLOCK_NODE_RD
(
nvf
, 
˝uid
);

4365 
	`NVP_UNLOCK_FD_RD
(
nvf
, 
˝uid
);

4367 
wrôe_size
 +
ªsu…
;

4369 
	`END_TIMING
(
pwrôe_t
, 
wrôe_time
);

4370  
ªsu…
;

4371 
	}
}

4374 
RETT_SEEK
 
	$_nvp_SEEK
(
INTF_SEEK
)

4376 
	`DEBUG
("_nvp_SEEK\n");

4378  
	`_nvp_SEEK64
(
CALL_SEEK
);

4379 
	}
}

4381 
RETT_SEEK64
 
	$_nvp_SEEK64
(
INTF_SEEK64
)

4384 
	`CHECK_RESOLVE_FILEOPS
(
_nvp_
);

4385 
ö°rumíèti⁄_ty≥
 
£ek_time
;

4386 
RETT_SEEK64
 
ªt
 = 0;

4387 
	`DEBUG
("_nvp_SEEK64 %d\n", 
fûe
);

4389 
	`START_TIMING
(
£ek_t
, 
£ek_time
);

4391 #i‡
PASS_THROUGH_CALLS


4392 
ªt
 = 
_nvp_fûe›s
->
	`SEEK64
(
CALL_SEEK
);

4393 
	`END_TIMING
(
£ek_t
, 
£ek_time
);

4394  
ªt
;

4397 
NVFûe
* 
nvf
 = &
_nvp_fd_lookup
[
fûe
];

4399 i‡(
nvf
->
posix
) {

4400 
	`DEBUG
("CÆ»posix SEEK64 f‹ fd %d\n", 
nvf
->
fd
);

4401 
	`END_TIMING
(
£ek_t
, 
£ek_time
);

4402 
ªt
 = 
_nvp_fûe›s
->
	`SEEK64
(
CALL_SEEK64
);

4404 
	`END_TIMING
(
£ek_t
, 
£ek_time
);

4405  
ªt
;

4408 
˝uid
 = 
	`GET_CPUID
();

4410 
	`NVP_LOCK_FD_WR
(
nvf
);

4411 
	`NVP_CHECK_NVF_VALID_WR
(
nvf
);

4412 
	`NVP_LOCK_NODE_RD
(
nvf
, 
˝uid
);

4414 
	`DEBUG_FILE
("%s: CÆlög sìk wôh fûê%d, off£à%lu, whí˚ = %d\n", 
__func__
, 
fûe
, 
off£t
, 
whí˚
);

4415 
RETT_SEEK64
 
ªsu…
 = 
	`_nvp_do_£ek64
(
CALL_SEEK64
, 
nvf
);

4417 
	`NVP_UNLOCK_NODE_RD
(
nvf
, 
˝uid
);

4418 
	`NVP_UNLOCK_FD_WR
(
nvf
);

4420 
	`END_TIMING
(
£ek_t
, 
£ek_time
);

4421  
ªsu…
;

4422 
	}
}

4424 
RETT_TRUNC
 
	$_nvp_TRUNC
(
INTF_TRUNC
)

4426 
	`CHECK_RESOLVE_FILEOPS
(
_nvp_
);

4428 #i‡
PASS_THROUGH_CALLS


4429  
_nvp_fûe›s
->
	`TRUNC
(
CALL_TRUNC
);

4432 
	`DEBUG
("_nvp_TRUNC\n");

4434  
	`_nvp_TRUNC64
(
CALL_TRUNC
);

4435 
	}
}

4437 
RETT_TRUNC64
 
	$_nvp_TRUNC64
(
INTF_TRUNC64
)

4439 
i
 = 0;

4440 
	`CHECK_RESOLVE_FILEOPS
(
_nvp_
);

4442 #i‡
PASS_THROUGH_CALLS


4443  
_nvp_fûe›s
->
	`TRUNC64
(
CALL_TRUNC
);

4446 
	`DEBUG
("_nvp_TRUNC64\n");

4448 
NVFûe
* 
nvf
 = &
_nvp_fd_lookup
[
fûe
];

4450 i‡(
nvf
->
posix
) {

4451 
	`DEBUG
("CÆ»posix TRUNC64 f‹ fd %d\n", 
nvf
->
fd
);

4452  
_nvp_fûe›s
->
	`TRUNC64
(
CALL_TRUNC64
);

4455 
˝uid
 = 
	`GET_CPUID
();

4456 
	`NVP_LOCK_FD_RD
(
nvf
, 
˝uid
);

4457 
	`NVP_CHECK_NVF_VALID
(
nvf
);

4458 
	`NVP_LOCK_NODE_WR
(
nvf
);

4460 if(!
nvf
->
ˇnWrôe
) {

4461 
	`DEBUG
("FDÇŸ o≥¿f‹ wrôög: %i\n", 
fûe
);

4462 
î∫o
 = 
EINVAL
;

4463 
	`NVP_UNLOCK_NODE_WR
(
nvf
);

4464 
	`NVP_UNLOCK_FD_RD
(
nvf
, 
˝uid
);

4468 if(
Àngth
 =
nvf
->
node
->length)

4470 
	`DEBUG
("_nvp_TRUNC64:ÑequestedÜength wasÅhe sameás old "

4471 "Àngth (%li).\n", 
nvf
->
node
->
Àngth
);

4472 
	`NVP_UNLOCK_NODE_WR
(
nvf
);

4473 
	`NVP_UNLOCK_FD_RD
(
nvf
, 
˝uid
);

4477 
	`DO_MSYNC
(
nvf
);

4479 
ªsu…
 = 
_nvp_fûe›s
->
	`TRUNC64
(
CALL_TRUNC64
);

4481 if(
ªsu…
 != 0)

4483 
	`ERROR
("%s->TRUNC64 failed (returned %li,Ñequested %li): %s\n",

4484 
_nvp_fûe›s
->
«me
, 
ªsu…
, 
Àngth
, 
	`°ªº‹
(
î∫o
));

4485 
	`as£π
(0);

4488 if(
Àngth
 > 
nvf
->
node
->length)

4490 
	`DEBUG_FILE
("TRUNC64Éxtended file from %liÅo %li\n",

4491 
nvf
->
node
->
Àngth
,Üength);

4495 
	`DEBUG_FILE
("TRUNC64 shortened file from %liÅo %li\n",

4496 
nvf
->
node
->
Àngth
,Üength);

4499 
nvf
->
node
->
Àngth
 =Üength;

4500 
nvf
->
node
->
åue_Àngth
 = 
Àngth
;

4501 
nvf
->
node
->
åue_Àngth_f‹_ªad
 = 
Àngth
;

4502 
nvf
->
node
->
roŸ_dúty_num
 = 0;

4504 
i
=
nvf
->
node
->
™⁄ymous_roŸ_dúty_°¨t
; i<Úvf->node->
™⁄ymous_roŸ_dúty_íd
; i++) {

4505 
nvf
->
node
->
™⁄ymous_off£t_íd
[
i
] = 0;

4506 
nvf
->
node
->
™⁄ymous_off£t_°¨t
[
i
] = 
UINT32_MAX
;

4509 
i
=0; i<1024; i++) {

4510 
nvf
->
node
->
roŸ
[
i
] = 0;

4513 i‡(*(
nvf
->
off£t
Ë>Çvf->
node
->
åue_Àngth
)

4514 *(
nvf
->
off£t
Ënvf->
node
->
åue_Àngth
;

4516 
	`DO_MSYNC
(
nvf
);

4518 
	`NVP_UNLOCK_NODE_WR
(
nvf
);

4519 
	`NVP_UNLOCK_FD_RD
(
nvf
, 
˝uid
);

4521  
ªsu…
;

4522 
	}
}

4524 
RETT_READV
 
	$_nvp_READV
(
INTF_READV
)

4526 
	`CHECK_RESOLVE_FILEOPS
(
_nvp_
);

4528 
	`DEBUG
("CALL: _nvp_READV\n");

4532 
Áû
 = 0;

4534 
i
;

4535 
i
=0; i<
iov˙t
; i++)

4537 
Áû
 |
	`_nvp_READ
(
fûe
, 
iov
[
i
].
iov_ba£
, iov[i].
iov_Àn
);

4538 if(
Áû
) { ; }

4541 if(
Áû
 != 0) {

4542 
	`DEBUG
("_nvp_READV faûed o¿iov %i\n", 
i
);

4547 
	}
}

4549 
RETT_WRITEV
 
	$_nvp_WRITEV
(
INTF_WRITEV
)

4551 
	`CHECK_RESOLVE_FILEOPS
(
_nvp_
);

4553 
	`DEBUG
("CALL: _nvp_WRITEV\n");

4557 
Áû
 = 0;

4559 
i
;

4560 
i
=0; i<
iov˙t
; i++)

4562 
Áû
 |
	`_nvp_WRITE
(
fûe
, 
iov
[
i
].
iov_ba£
, iov[i].
iov_Àn
);

4563 if(
Áû
) { ; }

4566 if(
Áû
 != 0) {

4567 
	`DEBUG
("_nvp_WRITEV faûed o¿iov %i\n", 
i
);

4572 
	}
}

4574 
RETT_FCNTL
 
	$_nvp_FCNTL
(
INTF_FCNTL
)

4576 
	`DEBUG
("%s: f˙é cÆÀd. Fd = %d\n", 
__func__
, 
fûe
);

4577 
NVFûe
 *
nvf
 = 
NULL
;

4578 
ªsu…
 = 0;

4580 
va_li°
 
¨g
;

4581 
	`va_°¨t
(
¨g
, 
cmd
);

4582 
¨g3
 = 
	`va_¨g
(
¨g
, );

4583 
	`va_íd
(
¨g
);

4585 #i‡
PASS_THROUGH_CALLS


4586 
ªsu…
 = 
_nvp_fûe›s
->
	`FCNTL
(
fûe
, 
cmd
, 
¨g3
);

4587  
ªsu…
;

4589 
nvf
 = &
_nvp_fd_lookup
[
fûe
];

4590 i‡(
nvf
->
fd
 == 0)

4591 
nvf
->
fd
 = 
fûe
;

4593 
ªsu…
 = 
_nvp_fûe›s
->
	`FCNTL
(
fûe
, 
cmd
, 
¨g3
);

4594 i‡(
ªsu…
 == -1) {

4595 
	`DEBUG_FILE
("%s:Çeg©ivêªsu…. Eº = %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

4597 
	}
}

4600 
RETT_DUP
 
	$_nvp_DUP
(
INTF_DUP
)

4604 
	`DEBUG
("_nvp_DUP(" 
PFFS_DUP
 ")\n", 
CALL_DUP
);

4606 #i‡
PASS_THROUGH_CALLS


4607  
_nvp_fûe›s
->
	`DUP
(
CALL_DUP
);

4611 if(
fûe
 < 0) {

4612  
_nvp_fûe›s
->
	`DUP
(
CALL_DUP
);

4616 
NVFûe
* 
nvf
 = &
_nvp_fd_lookup
[
fûe
];

4618 
	`NVP_LOCK_FD_WR
(
nvf
);

4619 
	`NVP_CHECK_NVF_VALID_WR
(
nvf
);

4620 
	`NVP_LOCK_NODE_WR
(
nvf
);

4622 
ªsu…
 = 
_nvp_fûe›s
->
	`DUP
(
CALL_DUP
);

4624 if(
ªsu…
 < 0)

4626 
	`DEBUG
("CallÅo _nvp_DUP->%s->DUP failed: %s\n",

4627 
_nvp_fûe›s
->
«me
, 
	`°ªº‹
(
î∫o
));

4628 
	`NVP_UNLOCK_NODE_WR
(
nvf
);

4629 
	`NVP_UNLOCK_FD_WR
(
nvf
);

4630  
ªsu…
;

4633 
NVFûe
* 
nvf2
 = &
_nvp_fd_lookup
[
ªsu…
];

4635 
nvf
->
vÆid
 = 0;

4636 
nvf2
->
vÆid
 = 0;

4638 i‡(
nvf
->
posix
) {

4639 
	`DEBUG
("CÆ»posix DUP f‹ fd %d\n", 
nvf
->
fd
);

4640 
nvf2
->
posix
 = 
nvf
->posix;

4641 
	`NVP_UNLOCK_NODE_WR
(
nvf
);

4642 
	`NVP_UNLOCK_FD_WR
(
nvf
);

4643  
ªsu…
;

4646 
	`NVP_LOCK_FD_WR
(
nvf2
);

4648 if(
nvf2
->
vÆid
) {

4649 
	`ERROR
("fd %òwa†Æªady i¿u£!\n", 
ªsu…
);

4650 
	`as£π
(!
nvf2
->
vÆid
);

4655 
nvf2
->
fd
 = 
ªsu…
;

4656 
nvf2
->
off£t
 = 
nvf
->offset;

4657 
nvf2
->
ˇnRód
 = 
nvf
->canRead;

4658 
nvf2
->
ˇnWrôe
 = 
nvf
->canWrite;

4659 
nvf2
->
≠≥nd
 = 
nvf
->append;

4660 
nvf2
->
Æig√d
 = 
nvf
->aligned;

4661 
nvf2
->
£rü o
 = 
nvf
->serialno;

4662 
nvf2
->
node
 = 
nvf
->node;

4663 
nvf2
->
posix
 = 
nvf
->posix;

4665 
	`SANITYCHECK
(
nvf2
->
node
 !
NULL
);

4667 
nvf
->
node
->
ª„ªn˚
++;

4668 
nvf
->
vÆid
 = 1;

4669 
nvf2
->
vÆid
 = 1;

4671 
	`DO_MSYNC
(
nvf
);

4672 
	`DO_MSYNC
(
nvf2
);

4674 
	`NVP_UNLOCK_NODE_WR
(
nvf
);

4675 
	`NVP_UNLOCK_FD_WR
(
nvf
);

4676 
	`NVP_UNLOCK_FD_WR
(
nvf2
);

4678  
nvf2
->
fd
;

4679 
	}
}

4681 
RETT_DUP2
 
	$_nvp_DUP2
(
INTF_DUP2
)

4683 
	`CHECK_RESOLVE_FILEOPS
(
_nvp_
);

4684 
	`DEBUG
("_nvp_DUP2(" 
PFFS_DUP2
 ")\n", 
CALL_DUP2
);

4686 #i‡
PASS_THROUGH_CALLS


4687  
_nvp_fûe›s
->
	`DUP2
(
CALL_DUP2
);

4690 if(
fûe
<0) {

4691  
_nvp_fûe›s
->
	`DUP
(
CALL_DUP
);

4694 if(
fd2
<0) {

4695 
	`DEBUG
("Invalid fd2\n");

4696 
î∫o
 = 
EBADF
;

4700 if(
fûe
 =
fd2
)

4702 
	`DEBUG
("I≈uà™d ouçuàfûe†wîêthêßmê(%i)\n", 
fûe
);

4703  
fûe
;

4706 
NVFûe
* 
nvf
 = &
_nvp_fd_lookup
[
fûe
];

4707 
NVFûe
* 
nvf2
 = &
_nvp_fd_lookup
[
fd2
];

4709 i‡(
nvf
->
posix
) {

4710 
	`DEBUG
("CÆ»posix DUP2 f‹ fd %d\n", 
nvf
->
fd
);

4711 
nvf2
->
posix
 = 
nvf
->posix;

4712 
ªsu…
 = 
_nvp_fûe›s
->
	`DUP2
(
CALL_DUP2
);

4713 
nvf2
->
fd
 = 
ªsu…
;

4714  
ªsu…
;

4719 if(
fûe
 > 
fd2
)

4721 
	`NVP_LOCK_FD_WR
(
nvf
);

4722 
	`NVP_LOCK_FD_WR
(
nvf2
);

4724 
	`NVP_LOCK_FD_WR
(
nvf2
);

4725 
	`NVP_LOCK_FD_WR
(
nvf
);

4728 if–(!
nvf
->
vÆid
)||(!
nvf2
->valid) ) {

4729 
î∫o
 = 
EBADF
;

4730 
	`DEBUG
("InvÆid FD1 %ò‹ FD2 %i\n", 
fûe
, 
fd2
);

4735 if(
nvf
->
node
 =
nvf2
->node || !nvf2->node) {

4736 
	`NVP_LOCK_NODE_WR
(
nvf
);

4738 if(
nvf
->
node
 > 
nvf2
->node) {

4739 
	`NVP_LOCK_NODE_WR
(
nvf
);

4740 
	`NVP_LOCK_NODE_WR
(
nvf2
);

4742 
	`NVP_LOCK_NODE_WR
(
nvf2
);

4743 
	`NVP_LOCK_NODE_WR
(
nvf
);

4747 
ªsu…
 = 
_nvp_fûe›s
->
	`DUP2
(
CALL_DUP2
);

4749 if(
ªsu…
 < 0)

4751 
	`DEBUG
("_nvp_DUP2 failedÅo %s->DUP2(%i, %i) "

4752 "‘ëu∫ed %i): %s\n", 
_nvp_fûe›s
->
«me
, 
fûe
,

4753 
fd2
, 
ªsu…
, 
	`°ªº‹
(
î∫o
));

4754 
	`NVP_UNLOCK_NODE_WR
(
nvf
);

4755 if(
nvf
->
node
 !
nvf2
->nodeË{ 
	`NVP_UNLOCK_NODE_WR
(nvf2); }

4756 
	`NVP_UNLOCK_FD_WR
(
nvf
);

4757 
	`NVP_UNLOCK_FD_WR
(
nvf2
);

4758  
ªsu…
;

4765 
nvf2
->
vÆid
 = 0;

4767 if(
nvf2
->
node
 && 
nvf
->nodê!nvf2->nodeË{ 
	`NVP_UNLOCK_NODE_WR
(nvf2); }

4769 
	`_nvp_ã°_övÆid©e_node
(
nvf2
);

4771 if(
ªsu…
 !
fd2
)

4773 
	`WARNING
("result of _nvp_DUP2(%i, %i) didn'tÑeturnÅhe fd2 "

4777 
fûe
, 
fd2
, 
ªsu…
, fd2);

4778 
	`as£π
(0);

4780 
	`NVP_UNLOCK_FD_WR
(
nvf2
);

4782 
nvf2
 = &
_nvp_fd_lookup
[
ªsu…
];

4784 
	`NVP_LOCK_FD_WR
(
nvf2
);

4786 if(
nvf2
->
vÆid
)

4788 
	`DEBUG
("%s->DUP2ÑeturnedáÑesult which corresponds "

4790 "ªtu∫ed %i\n", 
_nvp_fûe›s
->
«me
,

4791 
fûe
, 
fd2
, 
ªsu…
);

4792 
	`as£π
(0);

4796 
nvf2
->
fd
 = 
ªsu…
;

4797 
nvf2
->
off£t
 = 
nvf
->offset;

4798 
nvf2
->
ˇnRód
 = 
nvf
->canRead;

4799 
nvf2
->
ˇnWrôe
 = 
nvf
->canWrite;

4800 
nvf2
->
≠≥nd
 = 
nvf
->append;

4801 
nvf2
->
Æig√d
 = 
nvf
->aligned;

4802 
nvf2
->
£rü o
 = 
nvf
->serialno;

4803 
nvf2
->
node
 = 
nvf
->node;

4804 
nvf2
->
node
->
ª„ªn˚
++;

4805 
nvf2
->
vÆid
 = 
nvf
->valid;

4806 
nvf2
->
posix
 = 
nvf
->posix;

4808 
	`SANITYCHECK
(
nvf2
->
node
 !
NULL
);

4809 
	`SANITYCHECK
(
nvf2
->
vÆid
);

4811 
	`DEBUG
("fd2 shouldÇow match fd1. "

4814 
	`NVP_CHECK_NVF_VALID_WR
(
nvf2
);

4816 
	`DO_MSYNC
(
nvf
);

4817 
	`DO_MSYNC
(
nvf2
);

4819 
	`NVP_UNLOCK_NODE_WR
(
nvf
);

4820 
	`NVP_UNLOCK_FD_WR
(
nvf2
);

4821 
	`NVP_UNLOCK_FD_WR
(
nvf
);

4823  
nvf2
->
fd
;

4824 
	}
}

4826 
RETT_IOCTL
 
	$_nvp_IOCTL
(
INTF_IOCTL
)

4828 
	`CHECK_RESOLVE_FILEOPS
(
_nvp_
);

4830 
	`DEBUG
("CALL: _nvp_IOCTL\n");

4832 
va_li°
 
¨g
;

4833 
	`va_°¨t
(
¨g
, 
ªque°
);

4834 * 
thúd
 = 
	`va_¨g
(
¨g
, *);

4836 
RETT_IOCTL
 
ªsu…
 = 
_nvp_fûe›s
->
	`IOCTL
(
fûe
, 
ªque°
, 
thúd
);

4838  
ªsu…
;

4839 
	}
}

4841 
RETT_UNLINK
 
	$_nvp_UNLINK
(
INTF_UNLINK
)

4843 
°©
 
fûe_°
;

4844 
ödex
;

4845 
InodeToM≠pög
* 
m≠pögToBeRemoved
;

4846 
ö°rumíèti⁄_ty≥
 
u∆ök_time
, 
˛f_lock_time
;

4847 
RETT_UNLINK
 
ªsu…
 = 0;

4849 
	`START_TIMING
(
u∆ök_t
, 
u∆ök_time
);

4851 #i‡
PASS_THROUGH_CALLS


4852 
num_u∆ök
++;

4853 
ªsu…
 = 
_nvp_fûe›s
->
	`UNLINK
(
CALL_UNLINK
);

4854 
	`END_TIMING
(
u∆ök_t
, 
u∆ök_time
);

4855  
ªsu…
;

4858 #i‡
BG_CLOSING


4859 
hash_ödex
 = -1, 
˛o£d_fûedesc
 = -1, 
°Æe_fd
 = 0;

4860 
öo_t
 
˛o£d_£rü o
 = 0;

4861 #i‡
SEQ_LIST
 || 
RAND_LIST


4862 
Clo£dFûes
 *
˛f
 = 
NULL
;

4864 
InodeClo£dFûe
 *
tbl
 = 
NULL
;

4868 
num_°©
++;

4869 
num_u∆ök
++;

4872 
	`CHECK_RESOLVE_FILEOPS
(
_nvp_
);

4873 
	`DEBUG
("CALL: _nvp_UNLINK\n");

4875 i‡(
	`°©
(
∑th
, &
fûe_°
) == 0) {

4876 
ödex
 = 
fûe_°
.
°_öo
 % 1024;

4877 #i‡
BG_CLOSING


4878 
	`GLOBAL_LOCK_CLOSE_WR
();

4879 
hash_ödex
 = 
fûe_°
.
°_öo
 % 
TOTAL_CLOSED_INODES
;

4880 #i‡
SEQ_LIST
 || 
RAND_LIST


4881 
˛f
 = &
_nvp_˛o£d_fûes
[
hash_ödex
];

4883 #i‡
PRINT_CONTENTION_MSGS


4884 
	`¥ötf
("%s:ácquúögÜock f‹ cl‡íåy = %d,Åhªad id = %lu\n", 
__func__
, 
hash_ödex
, 
	`±hªad_£lf
());

4885 
	`fÊush
(
NULL
);

4888 
	`LRU_NODE_LOCK_WR
(
˛f
);

4891 
°Æe_fd
 = 
	`ªmove_‰om_£q_li°_hash
(
˛f
, 
fûe_°
.
°_öo
);

4893 
tbl
 = &
öode_to_˛o£d_fûe
[
hash_ödex
];

4894 
	`NVP_LOCK_HASH_TABLE_WR
(
tbl
);

4895 
°Æe_fd
 = 
	`ªmove_‰om_Ãu_li°_hash
(
fûe_°
.
°_öo
, 0);

4897 if(
°Æe_fd
 >= 0) {

4898 
˛o£d_fûedesc
 = 
°Æe_fd
;

4899 
˛o£d_£rü o
 = 
fûe_°
.
°_öo
;

4901 if(!
	`_nvp_REAL_CLOSE
(
˛o£d_fûedesc
, 
˛o£d_£rü o
, 1))

4902 
	`__©omic_„tch_sub
(&
num_fûes_˛o£d
, 1, 
__ATOMIC_SEQ_CST
);

4905 #i‡
SEQ_LIST
 || 
RAND_LIST


4906 #i‡
PRINT_CONTENTION_MSGS


4907 
	`¥ötf
("%s:ÑñósögÜock f‹ cl‡íåy = %d,Åhªad id = %lu\n", 
__func__
, 
hash_ödex
, 
	`±hªad_£lf
());

4908 
	`fÊush
(
NULL
);

4910 
	`LRU_NODE_UNLOCK_WR
(
˛f
);

4912 
	`NVP_UNLOCK_HASH_TABLE_WR
(
tbl
);

4914 
	`GLOBAL_UNLOCK_CLOSE_WR
();

4917 
m≠pögToBeRemoved
 = &
_nvp_öo_m≠pög
[
ödex
];

4919 if(
fûe_°
.
°_öo
 =
m≠pögToBeRemoved
->
£rü o
 && m≠pögToBeRemoved->
roŸ_dúty_num
) {

4920 
	`nvp_‰ì_båì
(
m≠pögToBeRemoved
->
roŸ
, m≠pögToBeRemoved->
mîkÀ_roŸ
, m≠pögToBeRemoved->
height
, m≠pögToBeRemoved->
roŸ_dúty_ˇche
, m≠pögToBeRemoved->
roŸ_dúty_num
, m≠pögToBeRemoved->
tŸÆ_dúty_mm≠s
);

4922 
m≠pögToBeRemoved
->
£rü o
 = 0;

4926 
ªsu…
 = 
_nvp_fûe›s
->
	`UNLINK
(
CALL_UNLINK
);

4928 
	`END_TIMING
(
u∆ök_t
, 
u∆ök_time
);

4930  
ªsu…
;

4931 
	}
}

4933 
RETT_UNLINKAT
 
	$_nvp_UNLINKAT
(
INTF_UNLINKAT
)

4935 
	`CHECK_RESOLVE_FILEOPS
(
_nvp_
);

4937 
	`DEBUG
("CALL: _nvp_UNLINKAT\n");

4939 
RETT_UNLINKAT
 
ªsu…
 = 
_nvp_fûe›s
->
	`UNLINKAT
(
CALL_UNLINKAT
);

4941  
ªsu…
;

4942 
	}
}

4944 
RETT_FSYNC
 
	$_nvp_FSYNC
(
INTF_FSYNC
)

4946 
	`CHECK_RESOLVE_FILEOPS
(
_nvp_
);

4947 
RETT_FSYNC
 
ªsu…
 = 0;

4948 
˝uid
 = -1;

4949 
ö°rumíèti⁄_ty≥
 
fsync_time
;

4951 
	`START_TIMING
(
fsync_t
, 
fsync_time
);

4953 #i‡
PASS_THROUGH_CALLS


4954 
num_fsync
++;

4955 
ªsu…
 = 
_nvp_fûe›s
->
	`FSYNC
(
fûe
);

4956 
	`END_TIMING
(
fsync_t
, 
fsync_time
);

4961 
˝uid
 = 
	`GET_CPUID
();

4962 
NVFûe
* 
nvf
 = &
_nvp_fd_lookup
[
fûe
];

4965 
	`FSYNC_FSYNC
(
nvf
, 
˝uid
, 0, 0);

4966 
num_fsync
++;

4968 
	`END_TIMING
(
fsync_t
, 
fsync_time
);

4970  
ªsu…
;

4971 
	}
}

4973 
RETT_FDSYNC
 
	$_nvp_FDSYNC
(
INTF_FDSYNC
)

4975 
	`CHECK_RESOLVE_FILEOPS
(
_nvp_
);

4976 
RETT_FDSYNC
 
ªsu…
 = 0;

4977 
˝uid
 = -1;

4978 
ö°rumíèti⁄_ty≥
 
fsync_time
;

4980 
	`START_TIMING
(
fsync_t
, 
fsync_time
);

4982 #i‡
PASS_THROUGH_CALLS


4983 
num_fsync
++;

4984 
ªsu…
 = 
_nvp_fûe›s
->
	`FSYNC
(
fûe
);

4985 
	`END_TIMING
(
fsync_t
, 
fsync_time
);

4989 
NVFûe
* 
nvf
 = &
_nvp_fd_lookup
[
fûe
];

4991 
˝uid
 = 
	`GET_CPUID
();

4992 
	`FSYNC_FSYNC
(
nvf
, 
˝uid
, 0, 1);

4993 
num_fsync
++;

4995 
	`END_TIMING
(
fsync_t
, 
fsync_time
);

4997  
ªsu…
;

4998 
	}
}

	@fileops_nvp.h

3 #i‚de‡
__NV_FILEOPS_H_


4 
	#__NV_FILEOPS_H_


	)

6 
	~"nv_comm⁄.h
"

7 
	~"nvp_lock.h
"

8 
	~"liblfds711/öc/liblfds711.h
"

10 
	#ENV_NV_FOP
 "NVP_NV_FOP"

	)

12 
	#_NVP_USE_DEFAULT_FILEOPS
 
NULL


	)

15 
RETT_CLOSE
 
_nvp_REAL_CLOSE
(
INTF_CLOSE
, 
öo_t
 
£rü o
, 
async_fûe_˛osög
);

19 
	sNVFûe


21 
	mNVP_LOCK_DECL
;

22 vﬁ©ûê
boﬁ
 
	mvÆid
;

23 
	mfd
;

24 vﬁ©ûê
size_t
* 
	moff£t
;

25 
boﬁ
 
	mˇnRód
;

26 
boﬁ
 
	mˇnWrôe
;

27 
boﬁ
 
	m≠≥nd
;

28 
boﬁ
 
	mÆig√d
;

29 
öo_t
 
	m£rü o
;

30 
NVNode
* 
	mnode
;

31 
boﬁ
 
	mposix
;

32 
boﬁ
 
	mdebug
;

33 
	m∑ddög
[200];

36 
	sNVNode


38 
öo_t
 
	m£rü o
;

39 
öo_t
 
	mbackup_£rü o
;

40 
	mNVP_LOCK_DECL
;

42 
	måue_Àngth
;

43 
	måue_Àngth_f‹_ªad
;

44 vﬁ©ûê
size_t
 
	mÀngth
;

45 vﬁ©ûê
size_t
 
	mm≠Àngth
;

46 *
	mroŸ
;

47 *
	m™⁄ymous_roŸ
;

48 *
	m™⁄ymous_off£t_°¨t
;

49 *
	m™⁄ymous_off£t_íd
;

50 *
	mmîkÀ_roŸ
;

52 
	m‰ì_li°_idx
;

53 
	masync_fûe_˛o£
;

54 
	m™⁄ymous_roŸ_dúty_°¨t
;

55 
	m™⁄ymous_roŸ_dúty_íd
;

56 
	mnum_Æloc_™⁄_mm≠s
;

57 *
	mroŸ_dúty_ˇche
;

58 
	mroŸ_dúty_num
;

59 
	mtŸÆ_dúty_mm≠s
;

60 
	mheight
;

61 vﬁ©ûê
	mª„ªn˚
;

62 
	misRoŸSë
;

63 
	misAn⁄M≠Re£t
;

64 
uöt64_t
 
	m™⁄_mem_u£d
;

65 vﬁ©ûê
	musögAn⁄Mem
;

66 
	mödex_ö_‰ì_li°
;

71 
	sbackupRoŸs
 {

72 *
	mroŸ
;

73 *
	m™⁄ymous_roŸ
;

74 *
	m™⁄ymous_off£t_°¨t
;

75 *
	m™⁄ymous_off£t_íd
;

76 *
	mmîkÀ_roŸ
;

77 *
	mroŸ_dúty_ˇche
;

80 
	s‰ì_™⁄_poﬁ


82 
lfds711_queue_umm_ñemít
 
	mqe
;

83 
	maddr
;

86 
	sInodeToM≠pög


88 
öo_t
 
	m£rü o
;

89 *
	mroŸ
;

90 *
	mmîkÀ_roŸ
;

92 *
	mroŸ_dúty_ˇche
;

93 
	mroŸ_dúty_num
;

94 
	mtŸÆ_dúty_mm≠s
;

95 
	mheight
;

96 
	mbuf„r
[16];

101 
	#ASYNC_CLOSING
 
async_˛o£_íabÀ


	)

102 
	#SEQ_LIST
 0

	)

103 
	#RAND_LIST
 1

	)

104 
	#DIRTY_TRACKING
 1

	)

105 
	#NUM_NODE_LISTS
 1

	)

106 
	#PRINT_DEBUG_MSGS
 0

	)

107 
	#PRINT_CONTENTION_MSGS
 0

	)

108 
	#TOTAL_CLOSED_INODES
 4096

	)

110 vﬁ©ûê
	gasync_˛o£_íabÀ
;

111 
	gnum_async_˛o£
;

113 
	#GLOBAL_LOCKING
 0

	)

114 #i‡
GLOBAL_LOCKING


116 
	#GLOBAL_LOCK_WR
(Ë{
	`±hªad_•ö_lock
(&
globÆ_lock
);}

	)

117 
	#GLOBAL_UNLOCK_WR
(Ë{
	`±hªad_•ö_u∆ock
(&
globÆ_lock
);}

	)

121 
	#GLOBAL_LOCK_WR
(Ë{()(
globÆ_lock
);}

	)

122 
	#GLOBAL_UNLOCK_WR
(Ë{()(
globÆ_lock
);}

	)

125 
	#GLOBAL_CLOSE_LOCKING
 0

	)

126 #i‡
GLOBAL_CLOSE_LOCKING


128 
	#GLOBAL_LOCK_CLOSE_WR
(Ë{
	`±hªad_•ö_lock
(&
globÆ_lock_˛o£d_fûes
);}

	)

129 
	#GLOBAL_UNLOCK_CLOSE_WR
(Ë{
	`±hªad_•ö_u∆ock
(&
globÆ_lock_˛o£d_fûes
);}

	)

133 
	#GLOBAL_LOCK_CLOSE_WR
(Ë{()(
globÆ_lock_˛o£d_fûes
);}

	)

134 
	#GLOBAL_UNLOCK_CLOSE_WR
(Ë{()(
globÆ_lock_˛o£d_fûes
);}

	)

137 
	#LRU_HEAD_LOCKING
 0

	)

138 #i‡
LRU_HEAD_LOCKING


140 
	#LRU_LOCK_HEAD_WR
(Ë{
	`±hªad_•ö_lock
(&
globÆ_lock_Ãu_hód
);}

	)

141 
	#LRU_UNLOCK_HEAD_WR
(Ë{
	`±hªad_•ö_u∆ock
(&
globÆ_lock_Ãu_hód
);}

	)

145 
	#LRU_LOCK_HEAD_WR
(Ë{()(
globÆ_lock_Ãu_hód
);}

	)

146 
	#LRU_UNLOCK_HEAD_WR
(Ë{()(
globÆ_lock_Ãu_hód
);}

	)

149 
	#LRU_NODE_LOCKING
 1

	)

150 #i‡
LRU_NODE_LOCKING


152 
	#LRU_NODE_LOCK_WR
(
˙ode
Ë
	`NVP_LOCK_WR
(˙ode->
lock
)

	)

153 
	#LRU_NODE_UNLOCK_WR
(
˙ode
Ë
	`NVP_LOCK_UNLOCK_WR
(˙ode->
lock
)

	)

157 
	#LRU_NODE_LOCK_WR
(
˙ode
Ë{()(˙ode->
lock
);}

	)

158 
	#LRU_NODE_UNLOCK_WR
(
˙ode
Ë{()(˙ode->
lock
);}

	)

161 
	#HASH_TABLE_LOCKING
 0

	)

162 #i‡
HASH_TABLE_LOCKING


164 
	#NVP_LOCK_HASH_TABLE_RD
(
tbl
, 
˝uid
Ë
	`NVP_LOCK_RD
—bl->
lock
, cpuid)

	)

165 
	#NVP_UNLOCK_HASH_TABLE_RD
(
tbl
, 
˝uid
Ë
	`NVP_LOCK_UNLOCK_RD
—bl->
lock
, cpuid)

	)

166 
	#NVP_LOCK_HASH_TABLE_WR
(
tbl
Ë
	`NVP_LOCK_WR
—bl->
lock
)

	)

167 
	#NVP_UNLOCK_HASH_TABLE_WR
(
tbl
Ë
	`NVP_LOCK_UNLOCK_WR
—bl->
lock
)

	)

171 
	#NVP_LOCK_HASH_TABLE_RD
(
tbl
, 
˝uid
Ë{()(˝uid);}

	)

172 
	#NVP_UNLOCK_HASH_TABLE_RD
(
tbl
, 
˝uid
Ë{()(˝uid);}

	)

173 
	#NVP_LOCK_HASH_TABLE_WR
(
tbl
Ë{()—bl->
lock
);}

	)

174 
	#NVP_UNLOCK_HASH_TABLE_WR
(
tbl
Ë{()—bl->
lock
);}

	)

177 
	#STACK_LOCKING
 0

	)

178 #i‡
STACK_LOCKING


180 
	#STACK_LOCK_WR
(Ë{
	`±hªad_•ö_lock
(&
°ack_lock
);}

	)

181 
	#STACK_UNLOCK_WR
(Ë{
	`±hªad_•ö_u∆ock
(&
°ack_lock
);}

	)

185 
	#STACK_LOCK_WR
(Ë{()(
°ack_lock
);}

	)

186 
	#STACK_UNLOCK_WR
(Ë{()(
°ack_lock
);}

	)

189 
	#CLOSE_LOCKING
 0

	)

190 #i‡
CLOSE_LOCKING


192 
	#NVP_LOCK_CLOSE_RD
(
˛f
, 
˝uid
Ë
	`NVP_LOCK_RD
(˛f->
lock
, cpuid)

	)

193 
	#NVP_UNLOCK_CLOSE_RD
(
˛f
, 
˝uid
Ë
	`NVP_LOCK_UNLOCK_RD
(˛f->
lock
, cpuid)

	)

194 
	#NVP_LOCK_CLOSE_WR
(
˛f
Ë
	`NVP_LOCK_WR
(˛f->
lock
)

	)

195 
	#NVP_UNLOCK_CLOSE_WR
(
˛f
Ë
	`NVP_LOCK_UNLOCK_WR
(˛f->
lock
)

	)

199 
	#NVP_LOCK_CLOSE_RD
(
˛f
, 
˝uid
Ë{()(˝uid);}

	)

200 
	#NVP_UNLOCK_CLOSE_RD
(
˛f
, 
˝uid
Ë{()(˝uid);}

	)

201 
	#NVP_LOCK_CLOSE_WR
(
˛f
Ë{()(˛f->
lock
);}

	)

202 
	#NVP_UNLOCK_CLOSE_WR
(
˛f
Ë{()(˛f->
lock
);}

	)

205 
	#FD_LOCKING
 1

	)

206 #i‡
FD_LOCKING


208 
	#NVP_LOCK_FD_RD
(
nvf
, 
˝uid
Ë
	`NVP_LOCK_RD
“vf->
lock
, cpuid)

	)

209 
	#NVP_UNLOCK_FD_RD
(
nvf
, 
˝uid
Ë
	`NVP_LOCK_UNLOCK_RD
“vf->
lock
, cpuid)

	)

210 
	#NVP_LOCK_FD_WR
(
nvf
Ë
	`NVP_LOCK_WR
–nvf->
lock
)

	)

211 
	#NVP_UNLOCK_FD_WR
(
nvf
Ë
	`NVP_LOCK_UNLOCK_WR
“vf->
lock
)

	)

215 
	#NVP_LOCK_FD_RD
(
nvf
, 
˝uid
Ë{()(˝uid);}

	)

216 
	#NVP_UNLOCK_FD_RD
(
nvf
, 
˝uid
Ë{()(˝uid);}

	)

217 
	#NVP_LOCK_FD_WR
(
nvf
Ë{()“vf->
lock
);}

	)

218 
	#NVP_UNLOCK_FD_WR
(
nvf
Ë{()“vf->
lock
);}

	)

221 
	#NODE_LOCKING
 1

	)

222 #i‡
NODE_LOCKING


224 
	#NVP_LOCK_NODE_RD
(
nvf
, 
˝uid
Ë
	`NVP_LOCK_RD
“vf->
node
->
lock
, cpuid)

	)

225 
	#NVP_UNLOCK_NODE_RD
(
nvf
, 
˝uid
Ë
	`NVP_LOCK_UNLOCK_RD
“vf->
node
->
lock
, cpuid)

	)

226 
	#NVP_LOCK_NODE_WR
(
nvf
Ë
	`NVP_LOCK_WR
–nvf->
node
->
lock
)

	)

227 
	#NVP_UNLOCK_NODE_WR
(
nvf
Ë
	`NVP_LOCK_UNLOCK_WR
“vf->
node
->
lock
)

	)

231 
	#NVP_LOCK_NODE_RD
(
nvf
, 
˝uid
Ë{()(˝uid);}

	)

232 
	#NVP_UNLOCK_NODE_RD
(
nvf
, 
˝uid
Ë{()(˝uid);}

	)

233 
	#NVP_LOCK_NODE_WR
(
nvf
Ë{()“vf->
node
->
lock
);}

	)

234 
	#NVP_UNLOCK_NODE_WR
(
nvf
Ë{()“vf->
node
->
lock
);}

	)

239 
	#IS_ERR
(
x
Ë(()(xË>()-4095)

	)

241 
	#MAP_SIZE
 16

	)

243 #i‡
MAP_SIZE
 == 512

244 
	#MAX_MMAP_SIZE
 536870912

	)

245 #ñi‡
MAP_SIZE
 == 256

246 
	#MAX_MMAP_SIZE
 268435456

	)

247 #ñi‡
MAP_SIZE
 == 128

248 
	#MAX_MMAP_SIZE
 134217728

	)

249 #ñi‡
MAP_SIZE
 == 64

250 
	#MAX_MMAP_SIZE
 67108864

	)

251 #ñi‡
MAP_SIZE
 == 32

252 
	#MAX_MMAP_SIZE
 33554432

	)

253 #ñi‡
MAP_SIZE
 == 16

254 
	#MAX_MMAP_SIZE
 16777216

	)

255 #ñi‡
MAP_SIZE
 == 8

256 
	#MAX_MMAP_SIZE
 8388608

	)

257 #ñi‡
MAP_SIZE
 == 4

258 
	#MAX_MMAP_SIZE
 4194304

	)

259 #ñi‡
MAP_SIZE
 == 2

260 
	#MAX_MMAP_SIZE
 2097152

	)

262 
	#MAX_MMAP_SIZE
 536870912

	)

265 
	#ANON_MAP_SIZE
 16

	)

267 #i‡
ANON_MAP_SIZE
 == 512

268 
	#ANON_MAX_MMAP_SIZE
 536870912

	)

269 #ñi‡
ANON_MAP_SIZE
 == 256

270 
	#ANON_MAX_MMAP_SIZE
 268435456

	)

271 #ñi‡
ANON_MAP_SIZE
 == 128

272 
	#ANON_MAX_MMAP_SIZE
 134217728

	)

273 #ñi‡
ANON_MAP_SIZE
 == 64

274 
	#ANON_MAX_MMAP_SIZE
 67108864

	)

275 #ñi‡
ANON_MAP_SIZE
 == 32

276 
	#ANON_MAX_MMAP_SIZE
 33554432

	)

277 #ñi‡
ANON_MAP_SIZE
 == 16

278 
	#ANON_MAX_MMAP_SIZE
 16777216

	)

279 #ñi‡
ANON_MAP_SIZE
 == 8

280 
	#ANON_MAX_MMAP_SIZE
 8388608

	)

281 #ñi‡
ANON_MAP_SIZE
 == 4

282 
	#ANON_MAX_MMAP_SIZE
 4194304

	)

283 #ñi‡
ANON_MAP_SIZE
 == 2

284 
	#ANON_MAX_MMAP_SIZE
 2097152

	)

286 
	#ANON_MAX_MMAP_SIZE
 536870912

	)

293 
	#ALIGN_MMAP_DOWN
(
addr
Ë(◊ddrË& ~(
MAX_MMAP_SIZE
 - 1))

	)

295 
	#DO_ALIGNMENT_CHECKS
 0

	)

297 
	#DO_MSYNC
(
nvf
Ëdo{ \

	)

298 
DEBUG
("NOT doingá msync\n"); }0)

309 
	#NOSANITYCHECK
 1

	)

310 #i‡
NOSANITYCHECK


311 
	#SANITYCHECK
(
x
)

	)

313 
	#SANITYCHECK
(
x
Ëif(
	`UNLIKELY
(!(x))Ë{ 
	`ERROR
("NVP_SANITY("#x"ËÁûed!\n"); 
	`exô
(101); 
	}

	)
}

316 
	#NVP_CHECK_NVF_VALID
(
nvf
Ëdo{ \

	)

317 if(
UNLIKELY
(!
nvf
->
vÆid
)) { \

318 
DEBUG
("InvÆid fûêdes¸ùt‹: %i\n", 
fûe
); \

319 
	gî∫o
 = 0; \

324 
DEBUG
("thi†fun˘i⁄ i†›î©ög o¿nodê%p\n", 
nvf
->
node
); \

325 
SANITYCHECKNVF
(
nvf
); \

326 
DO_MSYNC
(
nvf
); \

330 
	#NVP_CHECK_NVF_VALID_WR
(
nvf
Ëdo{ \

	)

331 if(
	`UNLIKELY
(!
nvf
->
vÆid
)) { \

332 
	`DEBUG
("InvÆid fûêdes¸ùt‹: %i\n", 
fûe
); \

333 
î∫o
 = 0; \

338 
	`DEBUG
("thi†fun˘i⁄ i†›î©ög o¿nodê%p\n", 
nvf
->
node
); \

339 
	`SANITYCHECKNVF
(
nvf
); \

340 
	`DO_MSYNC
(
nvf
); \

342 
	}
} 0)

344 
	#SANITYCHECKNVF
(
nvf
Ë\

	)

345 
	`SANITYCHECK
(
nvf
->
vÆid
); \

346 
	`SANITYCHECK
(
nvf
->
node
 !
NULL
); \

347 
	`SANITYCHECK
(
nvf
->
fd
 >= 0); \

348 
	`SANITYCHECK
(
nvf
->
fd
 < 
OPEN_MAX
); \

349 
	`SANITYCHECK
(
nvf
->
off£t
 !
NULL
); \

350 
	`SANITYCHECK
(*
nvf
->
off£t
 >= 0); \

351 
	`SANITYCHECK
(
nvf
->
node
->
Àngth
 >=0); \

352 
	`SANITYCHECK
(
nvf
->
node
->
m≠Àngth
 >nvf->node->
Àngth
); \

353 
	`SANITYCHECK
(
nvf
->
node
->
d©a
 !
NULL
)

	@lru_cache.c

1 
	~"Ãu_ˇche.h
"

4 
	$ö£π_ö_£q_li°
(
Clo£dFûes
 *
node
, 
öo_t
 *
°Æe_£rü o
, 
fd
, ino_à
£rü o
) {

6 
°Æe_fd
 = -1;

8 i‡(
node
->
fd
 != -1) {

9 
°Æe_fd
 = 
node
->
fd
;

10 *
°Æe_£rü o
 = 
node
->
£rü o
;

13 
node
->
fd
 = fd;

14 
node
->
£rü o
 = serialno;

16  
°Æe_fd
;

17 
	}
}

23 
	$ö£π_ö_Ãu_li°
(
fd
, 
öo_t
 
£rü o
, ino_à*
°Æe_£rü o
) {

25 
Clo£dFûes
 *
node
 = 
NULL
;

26 
Clo£dFûes
 *
node_to_be_ªmoved
 = 
NULL
;

27 
°Æe_fd
 = -1;

28 
hash_ödex
 = -1;

29 
idx_ö_‰ì_li°
 = -1;

31 
	`LRU_LOCK_HEAD_WR
();

33 
idx_ö_‰ì_li°
 = 
	`p›_‰om_°ack
(0, 1, -1);

34 i‡(
idx_ö_‰ì_li°
 != -1) {

36 
node
 = (
Clo£dFûes
 *)&
_nvp_˛o£d_fûes
[
idx_ö_‰ì_li°
];

37 
node
->
fd
 = fd;

38 
node
->
£rü o
 = serialno;

39 
node
->
ödex_ö_‰ì_li°
 = 
idx_ö_‰ì_li°
;

40 
node
->
√xt_˛o£d_fûe
 = -1;

41 
node
->
¥ev_˛o£d_fûe
 = -1;

43 i‡(
Ãu_hód
 == -1) {

44 
Ãu_hód
 = 
node
->
ödex_ö_‰ì_li°
;

45 
Ãu_èû
 = 
node
->
ödex_ö_‰ì_li°
;

46 
Ãu_èû_£rü o
 = 
node
->
£rü o
;

47 } i‡(
Ãu_èû
 == -1) {

48 
Ãu_èû
 = 
Ãu_hód
;

49 
Ãu_èû_£rü o
 = 
_nvp_˛o£d_fûes
[
Ãu_èû
].
£rü o
;

51 
node
->
√xt_˛o£d_fûe
 = 
Ãu_hód
;

52 
_nvp_˛o£d_fûes
[
Ãu_hód
].
¥ev_˛o£d_fûe
 = 
node
->
ödex_ö_‰ì_li°
;

53 
Ãu_hód
 = 
node
->
ödex_ö_‰ì_li°
;

56 
hash_ödex
 = 
£rü o
 % 1024;

58 i‡(
öode_to_˛o£d_fûe
[
hash_ödex
].
ödex
 != -1) {

59 
node_to_be_ªmoved
 = (
Clo£dFûes
 *)&
_nvp_˛o£d_fûes
[
öode_to_˛o£d_fûe
[
hash_ödex
].
ödex
];

60 
°Æe_fd
 = 
	`ªmove_‰om_Ãu_li°_hash
(
node_to_be_ªmoved
->
£rü o
, 1);

61 *
°Æe_£rü o
 = 
node_to_be_ªmoved
->
£rü o
;

64 
öode_to_˛o£d_fûe
[
hash_ödex
].
ödex
 = 
node
->
ödex_ö_‰ì_li°
;

67 
	`LRU_UNLOCK_HEAD_WR
();

69  
°Æe_fd
;

70 
	}
}

75 
	$ªmove_‰om_Ãu_li°_hash
(
öo_t
 
£rü o
, 
lock_hñd
) {

77 
hash_ödex
 = -1, 
fd
 = -1, 
¥ev_node_idx
 = -1, 
√xt_node_idx
 = -1;

78 
Clo£dFûes
 *
node
 = 
NULL
, *
¥ev_node
 = NULL, *
√xt_node
 = NULL;

79 
lock_£t
 = 0;

81 
hash_ödex
 = 
£rü o
 % 1024;

83 i‡(!
lock_hñd
) {

84 
	`LRU_LOCK_HEAD_WR
();

85 
lock_£t
 = 1;

88 i‡(
öode_to_˛o£d_fûe
[
hash_ödex
].
ödex
 != -1) {

90 
node
 = (
Clo£dFûes
 *)&
_nvp_˛o£d_fûes
[
öode_to_˛o£d_fûe
[
hash_ödex
].
ödex
];

92 i‡(
node
->
£rü o
 == serialno) {

94 
¥ev_node_idx
 = 
node
->
¥ev_˛o£d_fûe
;

95 
√xt_node_idx
 = 
node
->
√xt_˛o£d_fûe
;

96 i‡(
¥ev_node_idx
 >= 0) {

97 
¥ev_node
 = (
Clo£dFûes
 *)&
_nvp_˛o£d_fûes
[
¥ev_node_idx
];

100 i‡(
√xt_node_idx
 >= 0) {

101 
√xt_node
 = (
Clo£dFûes
 *)&
_nvp_˛o£d_fûes
[
√xt_node_idx
];

104 
fd
 = 
node
->fd;

106 i‡(
¥ev_node_idx
 != -1)

107 
¥ev_node
->
√xt_˛o£d_fûe
 = 
√xt_node_idx
;

108 i‡(
√xt_node_idx
 != -1)

109 
√xt_node
->
¥ev_˛o£d_fûe
 = 
¥ev_node_idx
;

110 i‡(
node
->
ödex_ö_‰ì_li°
 =
Ãu_hód
) {

111 
Ãu_hód
 = 
node
->
√xt_˛o£d_fûe
;

112 
_nvp_˛o£d_fûes
[
Ãu_hód
].
¥ev_˛o£d_fûe
 = -1;

114 i‡(
node
->
ödex_ö_‰ì_li°
 =
Ãu_èû
) {

115 
Ãu_èû
 = 
node
->
¥ev_˛o£d_fûe
;

116 
Ãu_èû_£rü o
 = 
_nvp_˛o£d_fûes
[
Ãu_èû
].
£rü o
;

117 
_nvp_˛o£d_fûes
[
Ãu_èû
].
√xt_˛o£d_fûe
 = -1;

120 
node
->
¥ev_˛o£d_fûe
 = -1;

121 
node
->
√xt_˛o£d_fûe
 = -1;

122 
node
->
fd
 = -1;

123 
node
->
£rü o
 = 0;

125 if(!
lock_hñd
) {

126 
	`LRU_UNLOCK_HEAD_WR
();

127 
lock_£t
 = 0;

130 
öode_to_˛o£d_fûe
[
hash_ödex
].
ödex
 = -1;

131 
	`push_ö_°ack
(0, 1, 
node
->
ödex_ö_‰ì_li°
, -1);

135 if(!
lock_hñd
 && 
lock_£t
) {

136 
	`LRU_UNLOCK_HEAD_WR
();

137 
lock_£t
 = 0;

140  
fd
;

141 
	}
}

146 
	$ªmove_‰om_Ãu_li°_pﬁicy
(
öo_t
 *
£rü o
) {

148 
hash_ödex
 = -1;

149 
öo_t
 
loˇl_£rü o
 = 0;

150 
fd
 = -1;

151 
Clo£dFûes
 *
node
 = 
NULL
;

153 
	`LRU_LOCK_HEAD_WR
();

155 
node
 = (
Clo£dFûes
 *)&
_nvp_˛o£d_fûes
[
Ãu_èû
];

157 
loˇl_£rü o
 = 
node
->
£rü o
;

158 
hash_ödex
 = 
loˇl_£rü o
 % 1024;

160 
Ãu_èû
 = 
node
->
¥ev_˛o£d_fûe
;

161 i‡(
Ãu_èû
 != -1) {

162 
Ãu_èû_£rü o
 = 
_nvp_˛o£d_fûes
[
Ãu_èû
].
£rü o
;

163 
_nvp_˛o£d_fûes
[
Ãu_èû
].
√xt_˛o£d_fûe
 = -1;

165 
Ãu_èû_£rü o
 = 0;

167 
fd
 = 
node
->fd;

168 *
£rü o
 = 
loˇl_£rü o
;

170 
node
->
√xt_˛o£d_fûe
 = -1;

171 
node
->
¥ev_˛o£d_fûe
 = -1;

172 
node
->
fd
 = -1;

173 
node
->
£rü o
 = 0;

175 
öode_to_˛o£d_fûe
[
hash_ödex
].
ödex
 = -1;

176 
	`push_ö_°ack
(0, 1, 
node
->
ödex_ö_‰ì_li°
, -1);

178 
	`LRU_UNLOCK_HEAD_WR
();

180  
fd
;

181 
	}
}

186 
	$ªmove_‰om_£q_li°
(
Clo£dFûes
 *
node
, 
öo_t
 *
£rü o
) {

188 
fd
 = -1;

190 
fd
 = 
node
->fd;

191 *
£rü o
 = 
node
->serialno;

193 
node
->
√xt_˛o£d_fûe
 = -1;

194 
node
->
¥ev_˛o£d_fûe
 = -1;

195 
node
->
fd
 = -1;

196 
node
->
£rü o
 = 0;

198  
fd
;

199 
	}
}

202 
	$ªmove_‰om_£q_li°_hash
(
Clo£dFûes
 *
node
, 
öo_t
 
£rü o
) {

204 
fd
 = -1;

206 if(
node
->
£rü o
 == serialno) {

207 
fd
 = 
node
->fd;

208 
node
->
√xt_˛o£d_fûe
 = -1;

209 
node
->
¥ev_˛o£d_fûe
 = -1;

210 
node
->
fd
 = -1;

211 
node
->
£rü o
 = 0;

214  
fd
;

215 
	}
}

	@lru_cache.h

1 #i‚de‡
LEDGER_SRC_LRU_H_


2 
	#LEDGER_SRC_LRU_H_


	)

4 
	~"fûe›s_nvp.h
"

5 
	~"°ack.h
"

6 
	~<°d©omic.h
>

11 
	sClo£dFûes
 {

12 
	mNVP_LOCK_DECL
;

13 
	mfd
;

14 
öo_t
 
	m£rü o
;

15 
	mödex_ö_‰ì_li°
;

16 
	m√xt_˛o£d_fûe
;

17 
	m¥ev_˛o£d_fûe
;

20 
	sInodeClo£dFûe
 {

21 
	mNVP_LOCK_DECL
;

22 
	mödex
;

28 
InodeClo£dFûe
 *
	göode_to_˛o£d_fûe
;

29 
©omic_uöt_Á°64_t
 
	g™⁄_mem_˛o£d_fûes
;

30 
©omic_uöt_Á°64_t
 
	g™⁄_mem_Æloˇãd
;

31 
©omic_uöt_Á°64_t
 
	gnum_fûes_˛o£d
;

32 
±hªad_•ölock_t
 
	gglobÆ_lock_Ãu_hód
;

37 
Clo£dFûes
 *
	g_nvp_˛o£d_fûes
;

38 
	gÃu_hód
;

39 
	gÃu_èû
;

40 
	gÃu_èû_£rü o
;

42 
ö£π_ö_£q_li°
(
Clo£dFûes
 *
node
, 
öo_t
 *
°Æe_£rü o
, 
fd
, ino_à
£rü o
);

43 
ö£π_ö_Ãu_li°
(
fd
, 
öo_t
 
£rü o
, ino_à*
°Æe_£rü o
);

44 
ªmove_‰om_Ãu_li°_hash
(
öo_t
 
£rü o
, 
lock_hñd
);

45 
ªmove_‰om_Ãu_li°_pﬁicy
(
öo_t
 *
£rü o
);

46 
ªmove_‰om_£q_li°
(
Clo£dFûes
 *
node
, 
öo_t
 *
£rü o
);

47 
ªmove_‰om_£q_li°_hash
(
Clo£dFûes
 *
node
, 
öo_t
 
£rü o
);

	@merkleLogicalBtree.h

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<m©h.h
>

5 
	~<öây≥s.h
>

6 
	~<time.h
>

7 
	~<sys/time.h
>

8 
	~<sys/sysˇŒ.h
>

9 
	~<uni°d.h
>

10 
	~"fûe›s_nvp.h
"

14 
	#BITMAP_PER_INDEX_NUM_CACHELINES
 64

	)

16 
	#SIZE_OF_CACHELINE
 64

	)

19 #i‡
MAP_SIZE
 == 512

20 
	#LEVEL0_NUM_CHILDREN
 8

	)

21 
	#LEVEL1_NUM_CHILDREN
 8

	)

22 
	#LEVEL2_NUM_CHILDREN
 4

	)

23 
	#LEVEL0_BIT_CACHELINE_COVERAGE
 131072

	)

24 
	#LEVEL1_BIT_CACHELINE_COVERAGE
 16384

	)

25 
	#LEVEL2_BIT_CACHELINE_COVERAGE
 4096

	)

26 
	#LEAF_BUFFER
 131072

	)

27 #ñi‡
MAP_SIZE
 == 256

28 
	#LEVEL0_NUM_CHILDREN
 4

	)

29 
	#LEVEL1_NUM_CHILDREN
 8

	)

30 
	#LEVEL2_NUM_CHILDREN
 4

	)

31 
	#LEVEL0_BIT_CACHELINE_COVERAGE
 65536

	)

32 
	#LEVEL1_BIT_CACHELINE_COVERAGE
 16384

	)

33 
	#LEVEL2_BIT_CACHELINE_COVERAGE
 4096

	)

34 
	#LEAF_BUFFER
 65536

	)

35 #ñi‡
MAP_SIZE
 == 128

36 
	#LEVEL0_NUM_CHILDREN
 8

	)

37 
	#LEVEL1_NUM_CHILDREN
 4

	)

38 
	#LEVEL0_BIT_CACHELINE_COVERAGE
 32768

	)

39 
	#LEVEL1_BIT_CACHELINE_COVERAGE
 4096

	)

40 
	#LEAF_BUFFER
 32768

	)

41 #ñi‡
MAP_SIZE
 == 64

42 
	#LEVEL0_NUM_CHILDREN
 4

	)

43 
	#LEVEL1_NUM_CHILDREN
 4

	)

44 
	#LEVEL0_BIT_CACHELINE_COVERAGE
 16384

	)

45 
	#LEVEL1_BIT_CACHELINE_COVERAGE
 4096

	)

46 
	#LEAF_BUFFER
 16384

	)

47 #ñi‡
MAP_SIZE
 == 32

48 
	#LEVEL0_NUM_CHILDREN
 2

	)

49 
	#LEVEL1_NUM_CHILDREN
 4

	)

50 
	#LEVEL0_BIT_CACHELINE_COVERAGE
 8192

	)

51 
	#LEVEL1_BIT_CACHELINE_COVERAGE
 4096

	)

52 
	#LEAF_BUFFER
 8192

	)

53 #ñi‡
MAP_SIZE
 == 16

54 
	#LEVEL0_NUM_CHILDREN
 4

	)

55 
	#LEVEL0_BIT_CACHELINE_COVERAGE
 4096

	)

56 
	#LEAF_BUFFER
 4096

	)

57 #ñi‡
MAP_SIZE
 == 8

58 
	#LEAF_BUFFER
 2048

	)

59 #ñi‡
MAP_SIZE
 == 4

60 
	#LEAF_BUFFER
 1024

	)

61 #ñi‡
MAP_SIZE
 == 2

62 
	#LEAF_BUFFER
 512

	)

65 
	#LEAF_PER_INDEX_CACHELINE_COVERAGE
 64

	)

66 
	#DEFAULT_PAGE_SIZE
 4096

	)

67 
	#SIZE_OF_NODE
 336

	)

68 
	#NODE_BUFFER
 
DEFAULT_PAGE_SIZE
 - 
SIZE_OF_NODE


	)

70 
	smîkÀBåìLóf
 {

71 
uöt64_t
 
	mbôm≠s
[
LEAF_BUFFER
];

74 
	smîkÀBåìNode
 {

75 
uöt64_t
 
	mÀvñ0
;

76 
uöt64_t
 
	mÀvñ1
[8];

77 
uöt64_t
 
	mÀvñ2
[32];

78 
mîkÀBåìLóf
 *
	mÀaf
;

79 
uöt8_t
 
	mbuf„r
[
NODE_BUFFER
];

83 
¸óãTªe
(
mîkÀBåìNode
 **
node
);

84 
¥ötTªe
(
mîkÀBåìNode
 *
node
);

85 
modifyBm≠
(
mîkÀBåìNode
 *
roŸ
, 
uöt64_t
 
off£t
, uöt64_à
size
);

86 
uöt64_t
 
åavî£Tªe
(
mîkÀBåìNode
 *
roŸ
, 
mm≠_°¨t_addr
);

87 
uöt64_t
 
mö
(uöt64_à
vÆ1
, uöt64_à
vÆ2
);

89 
ölöe
 
	$_bôã°™d£t
(*
a
, 
b
) {

90 
	`asm
("bt†%1,%0" : "+m" (*
a
Ë: "r" (
b
));

92 
	}
}

94 
uöt64_t
 
	$mö
(
uöt64_t
 
vÆ1
, uöt64_à
vÆ2
) {

96 if(
vÆ1
 <
vÆ2
)

97  
vÆ1
;

98  
vÆ2
;

99 
	}
}

101 
	$¸óãTªe
(
mîkÀBåìNode
 **
node
) {

103 
i
;

106 *
node
 = (
mîkÀBåìNode
 *Ë
	`mÆloc
((merkleBtreeNode));

109 (*
node
)->
Àvñ0
 = 0;

110 
i
=0; i<8; i++)

111 (*
node
)->
Àvñ1
[
i
] = 0;

112 
i
=0; i<32; i++)

113 (*
node
)->
Àvñ2
[
i
] = 0;

116 (*
node
)->
Àaf
 = (
mîkÀBåìLóf
 *Ë
	`mÆloc
((merkleBtreeLeaf));

119 
i
=0; i<
LEAF_BUFFER
; i++)

120 ((*
node
)->
Àaf
)->
bôm≠s
[
i
] = 0;

121 
	}
}

123 
	$¥ötTªe
(
mîkÀBåìNode
 *
roŸ
) {

125 
uöt64_t
 
i
, 
d©a
, 
ödex
;

127 if(
roŸ
 =
NULL
)

130 
mîkÀBåìNode
 *
node
 = 
roŸ
;

132 
	`¥ötf
("---------------------------------------------\n");

133 
	`¥ötf
("level0 stats: \n");

135 
uöt64_t
 
num_dúty_bôs
 = 0;

136 
ödex
 = 0;

137 
d©a
 = 
node
->
Àvñ0
;

138 
	`__buûtö_p›cou¡Œ
(
d©a
)) {

139 
	`asm
("bsfq %0, %0" : "Ù" (
ödex
Ë: "0" (
d©a
));

141 
d©a
 &= data - 1;

144 
	`¥ötf
("Numbî o‡dúty bô†%d\n", 
	`__buûtö_p›cou¡Œ
(
node
->
Àvñ0
));

146 
	`¥ötf
("---------------------------------------------\n");

148 #ifde‡
LEVEL1_NUM_CHILDREN


150 
	`¥ötf
("level1 stats: \n");

151 
num_dúty_bôs
 = 0;

152 
i
=0; i<
LEVEL1_NUM_CHILDREN
; i++) {

153 
num_dúty_bôs
 +
	`__buûtö_p›cou¡Œ
(
node
->
Àvñ1
[
i
]);

154 
ödex
 = 0;

155 
d©a
 = 
node
->
Àvñ1
[
i
];

156 
	`__buûtö_p›cou¡Œ
(
d©a
)) {

157 
	`asm
("bsfq %0, %0" : "Ù" (
ödex
Ë: "0" (
d©a
));

159 
d©a
 &= data - 1;

163 
	`¥ötf
("Numbî o‡dúty bô†%lu\n", 
num_dúty_bôs
);

165 
	`¥ötf
("---------------------------------------------\n");

168 #ifde‡
LEVEL2_NUM_CHILDREN


170 
	`¥ötf
("level2 stats: \n");

171 
num_dúty_bôs
 = 0;

172 
i
=0; i<
LEVEL1_NUM_CHILDREN
*
LEVEL2_NUM_CHILDREN
; i++) {

173 
num_dúty_bôs
 +
	`__buûtö_p›cou¡Œ
(
node
->
Àvñ2
[
i
]);

174 
ödex
 = 0;

175 
d©a
 = 
node
->
Àvñ2
[
i
];

176 
	`__buûtö_p›cou¡Œ
(
d©a
)) {

177 
	`asm
("bsfq %0, %0" : "Ù" (
ödex
Ë: "0" (
d©a
));

179 
d©a
 &= data - 1;

183 
	`¥ötf
("Numbî o‡dúty bô†%lu\n", 
num_dúty_bôs
);

185 
	`¥ötf
("---------------------------------------------\n");

189 
	`¥ötf
("leaf stats: \n");

190 
num_dúty_bôs
 = 0;

191 
i
=0; i<
LEAF_BUFFER
; i++)

192 
num_dúty_bôs
 +
	`__buûtö_p›cou¡Œ
((
node
->
Àaf
)->
bôm≠s
[
i
]);

194 
	`¥ötf
("Numbî o‡dúty bô†%lu\n", 
num_dúty_bôs
);

196 
	`¥ötf
("---------------------------------------------\n");

197 
	}
}

201 
	$modifyBm≠
(
mîkÀBåìNode
 *
roŸ
, 
uöt64_t
 
off£t
, uöt64_à
size
) {

203 
i
;

204 
uöt64_t
 
num_dúty_bôs_ö_ödex
;

205 
bmask
;

207 
uöt64_t
 
numCachñöes
 = (uöt64_tË
size
 / 
SIZE_OF_CACHELINE
;

211 
uöt64_t
 
°¨tCachñöeNumbî
 = (uöt64_tË(
off£t
 / 
SIZE_OF_CACHELINE
);

212 
uöt64_t
 
ídCachñöeNumbî
 = (uöt64_tË((
off£t
 + 
size
 - 1Ë/ 
SIZE_OF_CACHELINE
);

214 #ifde‡
LEVEL0_NUM_CHILDREN


216 
uöt64_t
 
Àvñ0_°¨t_dúty_bô
 = (uöt64_tË(
°¨tCachñöeNumbî
 / 
LEVEL0_BIT_CACHELINE_COVERAGE
);

217 
uöt64_t
 
Àvñ0_íd_dúty_bô
 = (uöt64_tË(
ídCachñöeNumbî
 / 
LEVEL0_BIT_CACHELINE_COVERAGE
);

218 
uöt64_t
 
Àvñ0_num_dúty_bôs
 = 
Àvñ0_íd_dúty_bô
 - 
Àvñ0_°¨t_dúty_bô
 + 1;

222 
bmask
 = 0;

223 if(
Àvñ0_num_dúty_bôs
 == 64) {

224 
bmask
 = 
UINT64_MAX
;

225 
roŸ
->
Àvñ0
 |
bmask
;

226 
Àvñ0_num_dúty_bôs
 = 0;

229 if(
Àvñ0_num_dúty_bôs
 >= 32) {

230 
bmask
 |
UINT32_MAX
;

231 
bmask
 = bmask << (32-(
Àvñ0_°¨t_dúty_bô
));

232 
roŸ
->
Àvñ0
 |
bmask
;

233 
Àvñ0_°¨t_dúty_bô
 += 32;

234 
Àvñ0_num_dúty_bôs
 -= 32;

238 
i
=0; i<
Àvñ0_num_dúty_bôs
; i++)

239 
	`_bôã°™d£t
(&
roŸ
->
Àvñ0
, 63-
Àvñ0_°¨t_dúty_bô
-
i
);

242 #ifde‡
LEVEL1_NUM_CHILDREN


244 
uöt64_t
 
Àvñ1_°¨t_dúty_bô
 = (uöt64_tË(
°¨tCachñöeNumbî
 / 
LEVEL1_BIT_CACHELINE_COVERAGE
);

245 
uöt64_t
 
Àvñ1_íd_dúty_bô
 = (uöt64_tË(
ídCachñöeNumbî
 / 
LEVEL1_BIT_CACHELINE_COVERAGE
);

246 
uöt64_t
 
Àvñ1_num_dúty_bôs
 = 
Àvñ1_íd_dúty_bô
 - 
Àvñ1_°¨t_dúty_bô
 + 1;

247 
uöt64_t
 
Àvñ1_°¨t_dúty_ödex
 = 
Àvñ1_°¨t_dúty_bô
 / 64;

248 
uöt64_t
 
Àvñ1_íd_dúty_ödex
 = 
Àvñ1_íd_dúty_bô
 / 64;

249 
uöt64_t
 
Àvñ1_°¨t_dúty_bô_ö_ödex
 = 
Àvñ1_°¨t_dúty_bô
 - 
Àvñ1_°¨t_dúty_ödex
*64;

250 
uöt64_t
 
num_bôs_ö_ödex
;

252 
Àvñ1_°¨t_dúty_ödex
 < 
Àvñ1_íd_dúty_ödex
) {

253 
num_bôs_ö_ödex
 = (
Àvñ1_°¨t_dúty_ödex
+1)*64-
Àvñ1_°¨t_dúty_bô
;

255 
bmask
 = 0;

256 if(
num_bôs_ö_ödex
 == 64) {

257 
roŸ
->
Àvñ1
[
Àvñ1_°¨t_dúty_ödex
] |
UINT64_MAX
;

258 
num_bôs_ö_ödex
 = 0;

259 
Àvñ1_num_dúty_bôs
 -= 64;

260 
Àvñ1_°¨t_dúty_bô
 += 64;

263 if(
num_bôs_ö_ödex
 >= 32) {

264 
bmask
 |
UINT32_MAX
;

265 
bmask
 = bmask << (32-(
Àvñ1_°¨t_dúty_bô_ö_ödex
));

266 
roŸ
->
Àvñ1
[
Àvñ1_°¨t_dúty_ödex
] |
bmask
;

267 
Àvñ1_°¨t_dúty_bô
 += 32;

268 
Àvñ1_num_dúty_bôs
 -= 32;

269 
num_bôs_ö_ödex
 -= 32;

273 
i
=0; i<
num_bôs_ö_ödex
; i++)

274 
	`_bôã°™d£t
(&
roŸ
->
Àvñ1
[
Àvñ1_°¨t_dúty_ödex
], 63-(
Àvñ1_°¨t_dúty_bô_ö_ödex
+
i
));

276 
Àvñ1_°¨t_dúty_ödex
++;

277 
Àvñ1_°¨t_dúty_bô
 +
num_bôs_ö_ödex
;

278 
Àvñ1_num_dúty_bôs
 -
num_bôs_ö_ödex
;

279 
Àvñ1_°¨t_dúty_bô_ö_ödex
 = 0;

282 
bmask
 = 0;

284 if(
Àvñ1_num_dúty_bôs
 == 64) {

285 
roŸ
->
Àvñ1
[
Àvñ1_°¨t_dúty_ödex
] |
UINT64_MAX
;

286 
Àvñ1_num_dúty_bôs
 -= 64;

287 
Àvñ1_°¨t_dúty_bô
 += 64;

290 if(
Àvñ1_num_dúty_bôs
 >= 32) {

291 
bmask
 |
UINT32_MAX
;

292 
bmask
 = bmask << (32-(
Àvñ1_°¨t_dúty_bô_ö_ödex
));

293 
roŸ
->
Àvñ1
[
Àvñ1_°¨t_dúty_ödex
] |
bmask
;

294 
Àvñ1_°¨t_dúty_bô
 += 32;

295 
Àvñ1_num_dúty_bôs
 -= 32;

298 
uöt64_t
 
ef„˘ive_ödex
 = 
Àvñ1_°¨t_dúty_bô
 - 
Àvñ1_°¨t_dúty_ödex
*64;

301 
i
=0; i<
Àvñ1_num_dúty_bôs
; i++)

302 
	`_bôã°™d£t
(&
roŸ
->
Àvñ1
[
Àvñ1_°¨t_dúty_ödex
], 63-(
ef„˘ive_ödex
+
i
));

307 #ifde‡
LEVEL2_NUM_CHILDREN


309 
uöt64_t
 
Àvñ2_°¨t_dúty_bô
 = (uöt64_tË(
°¨tCachñöeNumbî
 / 
LEVEL2_BIT_CACHELINE_COVERAGE
);

310 
uöt64_t
 
Àvñ2_íd_dúty_bô
 = (uöt64_tË(
ídCachñöeNumbî
 / 
LEVEL2_BIT_CACHELINE_COVERAGE
);

311 
uöt64_t
 
Àvñ2_num_dúty_bôs
 = 
Àvñ2_íd_dúty_bô
 - 
Àvñ2_°¨t_dúty_bô
 + 1;

313 
uöt64_t
 
Àvñ2_°¨t_dúty_ödex
 = 
Àvñ2_°¨t_dúty_bô
 / 64;

314 
uöt64_t
 
Àvñ2_íd_dúty_ödex
 = 
Àvñ2_íd_dúty_bô
 / 64;

315 
uöt64_t
 
Àvñ2_°¨t_dúty_bô_ö_ödex
 = 
Àvñ2_°¨t_dúty_bô
 - 
Àvñ2_°¨t_dúty_ödex
*64;

320 
Àvñ2_°¨t_dúty_ödex
 < 
Àvñ2_íd_dúty_ödex
) {

321 
bmask
 = 0;

322 
num_bôs_ö_ödex
 = (
Àvñ2_°¨t_dúty_ödex
+1)*64-
Àvñ2_°¨t_dúty_bô
;

323 if(
num_bôs_ö_ödex
 == 64) {

324 
roŸ
->
Àvñ2
[
Àvñ2_°¨t_dúty_ödex
] |
UINT64_MAX
;

325 
num_bôs_ö_ödex
 = 0;

326 
Àvñ2_num_dúty_bôs
 -= 64;

327 
Àvñ2_°¨t_dúty_bô
 += 64;

330 if(
num_bôs_ö_ödex
 >= 32) {

331 
bmask
 |
UINT32_MAX
;

332 
bmask
 = bmask << (32-(
Àvñ2_°¨t_dúty_bô_ö_ödex
));

333 
roŸ
->
Àvñ2
[
Àvñ2_°¨t_dúty_ödex
] |
bmask
;

334 
Àvñ2_°¨t_dúty_bô
 += 32;

335 
Àvñ2_num_dúty_bôs
 -= 32;

336 
num_bôs_ö_ödex
 -= 32;

339 
i
=0; i<
num_bôs_ö_ödex
; i++)

340 
	`_bôã°™d£t
(&
roŸ
->
Àvñ2
[
Àvñ2_°¨t_dúty_ödex
], 63-(
Àvñ2_°¨t_dúty_bô_ö_ödex
+
i
));

342 
Àvñ2_°¨t_dúty_ödex
++;

343 
Àvñ2_°¨t_dúty_bô
 +
num_bôs_ö_ödex
;

344 
Àvñ2_num_dúty_bôs
 -
num_bôs_ö_ödex
;

345 
Àvñ2_°¨t_dúty_bô_ö_ödex
 = 0;

348 
bmask
 = 0;

350 if(
Àvñ2_num_dúty_bôs
 == 64) {

351 
roŸ
->
Àvñ2
[
Àvñ2_°¨t_dúty_ödex
] |
UINT64_MAX
;

352 
Àvñ2_num_dúty_bôs
 -= 64;

353 
Àvñ2_°¨t_dúty_bô
 += 64;

356 if(
Àvñ2_num_dúty_bôs
 >= 32) {

357 
bmask
 |
UINT32_MAX
;

358 
bmask
 = bmask << (32-(
Àvñ2_°¨t_dúty_bô_ö_ödex
));

359 
roŸ
->
Àvñ2
[
Àvñ2_°¨t_dúty_ödex
] |
bmask
;

360 
Àvñ2_°¨t_dúty_bô
 += 32;

361 
Àvñ2_num_dúty_bôs
 -= 32;

364 
ef„˘ive_ödex
 = 
Àvñ2_°¨t_dúty_bô
 - 
Àvñ2_°¨t_dúty_ödex
*64;

367 
i
=0; i<
Àvñ2_num_dúty_bôs
; i++)

368 
	`_bôã°™d£t
(&
roŸ
->
Àvñ2
[
Àvñ2_°¨t_dúty_ödex
], 63-(
ef„˘ive_ödex
+
i
));

372 
mîkÀBåìLóf
 *
Àaf
 = 
roŸ
->leaf;

373 
uöt64_t
 
Àaf_°¨t_dúty_ödex
 = (uöt64_tË(
°¨tCachñöeNumbî
 / 
LEAF_PER_INDEX_CACHELINE_COVERAGE
);

374 
uöt64_t
 
Àaf_°¨t_dúty_bô_ö_ödex
 = (uöt64_tË(
°¨tCachñöeNumbî
 - (
Àaf_°¨t_dúty_ödex
 * 
LEAF_PER_INDEX_CACHELINE_COVERAGE
));

376 
numCachñöes
 != 0) {

377 
num_dúty_bôs_ö_ödex
 = 
	`mö
(64-
Àaf_°¨t_dúty_bô_ö_ödex
, 
numCachñöes
);

378 
bmask
 = 0;

379 if(
num_dúty_bôs_ö_ödex
 == 64) {

380 
bmask
 = 
UINT64_MAX
;

381 
Àaf
->
bôm≠s
[
Àaf_°¨t_dúty_ödex
] |
bmask
;

382 
num_dúty_bôs_ö_ödex
 = 0;

383 
numCachñöes
 -= 64;

386 if(
num_dúty_bôs_ö_ödex
 >= 32) {

387 
bmask
 = 
UINT32_MAX
;

388 
bmask
 = bmask << (32-
Àaf_°¨t_dúty_bô_ö_ödex
);

389 
Àaf
->
bôm≠s
[
Àaf_°¨t_dúty_ödex
] |
bmask
;

390 
num_dúty_bôs_ö_ödex
 -= 32;

391 
Àaf_°¨t_dúty_bô_ö_ödex
 += 32;

392 
numCachñöes
 -= 32;

397 
i
=0; i<
num_dúty_bôs_ö_ödex
; i++)

398 
	`_bôã°™d£t
(&
Àaf
->
bôm≠s
[
Àaf_°¨t_dúty_ödex
], 63-
Àaf_°¨t_dúty_bô_ö_ödex
-
i
);

400 
numCachñöes
 -
num_dúty_bôs_ö_ödex
;

401 
Àaf_°¨t_dúty_ödex
++;

402 
Àaf_°¨t_dúty_bô_ö_ödex
 = 0;

405 
	}
}

407 
uöt64_t
 
	$åavî£Tªe
(
mîkÀBåìNode
 *
roŸ
, 
mm≠_°¨t_addr
) {

409 
uöt64_t
 
i
,
j
;

410 
uöt64_t
 
dútyCachñöes
 = 0;

411 
uöt64_t
 
ödex
,
d©a
;

412 
uöt64_t
 
ef„˘ive_ödex
;

414 #ifde‡
LEVEL1_NUM_CHILDREN


415 
uöt8_t
 
Àvñ0_dúty_chûdªn
[
LEVEL1_NUM_CHILDREN
];

416 #ñi‡
deföed
 
LEVEL0_NUM_CHILDREN


417 
uöt8_t
 
Àvñ0_dúty_chûdªn
[2048];

419 #ifde‡
LEVEL0_NUM_CHILDREN


420 
uöt8_t
 
Àvñ0_tŸÆ_dúty_chûdªn
 = 0;

424 
ödex
 = 0;

425 
d©a
 = 
roŸ
->
Àvñ0
;

426 
	`__buûtö_p›cou¡Œ
(
d©a
)) {

427 
	`asm
("bsfq %0, %0" : "Ù" (
ödex
Ë: "0" (
d©a
));

428 
ef„˘ive_ödex
 = 63-
ödex
;

430 if((
Àvñ0_tŸÆ_dúty_chûdªn
 =0Ë|| (
Àvñ0_dúty_chûdªn
[Àvñ0_tŸÆ_dúty_chûdªn-1] !
ef„˘ive_ödex
/8)) {

431 
Àvñ0_dúty_chûdªn
[
Àvñ0_tŸÆ_dúty_chûdªn
] = (
ef„˘ive_ödex
)/8;

432 
Àvñ0_tŸÆ_dúty_chûdªn
++;

434 
d©a
 &= data - 1;

435 
roŸ
->
Àvñ0
 &=Ñoot->level0 - 1;

439 #ifde‡
LEVEL2_NUM_CHILDREN


441 
uöt64_t
 
Àvñ1_dúty_chûdªn
[
LEVEL1_NUM_CHILDREN
*
LEVEL2_NUM_CHILDREN
];

442 
uöt64_t
 
Àvñ1_tŸÆ_dúty_chûdªn
 = 0;

444 
i
=0; i<
Àvñ0_tŸÆ_dúty_chûdªn
; i++) {

445 
ödex
 = 0;

446 
d©a
 = 
roŸ
->
Àvñ1
[
Àvñ0_dúty_chûdªn
[
i
]];

447 
	`__buûtö_p›cou¡Œ
(
d©a
)) {

448 
	`asm
("bsfq %0, %0" : "Ù" (
ödex
Ë: "0" (
d©a
));

449 
ef„˘ive_ödex
 = (63-
ödex
Ë+ (
Àvñ0_dúty_chûdªn
[
i
] * 64);

450 if((
Àvñ1_tŸÆ_dúty_chûdªn
 =0Ë|| (
Àvñ1_dúty_chûdªn
[Àvñ1_tŸÆ_dúty_chûdªn-1] !
ef„˘ive_ödex
/16)) {

451 
Àvñ1_dúty_chûdªn
[
Àvñ1_tŸÆ_dúty_chûdªn
] = 
ef„˘ive_ödex
/16;

452 
Àvñ1_tŸÆ_dúty_chûdªn
++;

454 
d©a
 &= data - 1;

455 
roŸ
->
Àvñ1
[
Àvñ0_dúty_chûdªn
[
i
]] &=Ñoot->level1[level0_dirty_children[i]] - 1;

459 #ñi‡
deföed
 
LEVEL0_NUM_CHILDREN


461 
uöt64_t
 
Àvñ1_dúty_chûdªn
[2048];

462 
uöt64_t
 
Àvñ1_tŸÆ_dúty_chûdªn
 = 0;

463 
i
=0; i<
Àvñ0_tŸÆ_dúty_chûdªn
; i++) {

464 
Àvñ1_dúty_chûdªn
[
i
] = 
Àvñ0_dúty_chûdªn
[i];

465 
Àvñ1_tŸÆ_dúty_chûdªn
++;

469 #ifde‡
LEVEL2_NUM_CHILDREN


471 
uöt64_t
 
Àvñ2_dúty_chûdªn
[2048];

472 
uöt64_t
 
Àvñ2_tŸÆ_dúty_chûdªn
 = 0;

474 
i
=0; i<
Àvñ1_tŸÆ_dúty_chûdªn
; i++) {

475 
ödex
 = 0;

476 
d©a
 = 
roŸ
->
Àvñ2
[
Àvñ1_dúty_chûdªn
[
i
]];

477 
	`__buûtö_p›cou¡Œ
(
d©a
)) {

478 
	`asm
("bsfq %0, %0" : "Ù" (
ödex
Ë: "0" (
d©a
));

479 
ef„˘ive_ödex
 = (63-
ödex
Ë+ (
Àvñ1_dúty_chûdªn
[
i
] * 64);

480 
Àvñ2_dúty_chûdªn
[
Àvñ2_tŸÆ_dúty_chûdªn
] = 
ef„˘ive_ödex
;

481 
Àvñ2_tŸÆ_dúty_chûdªn
++;

482 
d©a
 &= data - 1;

483 
roŸ
->
Àvñ2
[
Àvñ1_dúty_chûdªn
[
i
]] &=Ñoot->level2[level1_dirty_children[i]] - 1;

488 #ñi‡
deföed
 
LEVEL0_NUM_CHILDREN


490 
uöt64_t
 
Àvñ2_dúty_chûdªn
[2048];

491 
uöt64_t
 
Àvñ2_tŸÆ_dúty_chûdªn
 = 0;

492 
i
=0; i<
Àvñ1_tŸÆ_dúty_chûdªn
; i++) {

493 
Àvñ2_dúty_chûdªn
[
i
] = 
Àvñ1_dúty_chûdªn
[i];

494 
Àvñ2_tŸÆ_dúty_chûdªn
++;

499 
mîkÀBåìLóf
 *
Àaf
 = 
roŸ
->leaf;

500 
uöt64_t
 
Àaf_dúty_ödex
[
LEAF_BUFFER
];

501 
uöt64_t
 
Àaf_tŸÆ_dúty_ödexes
 = 0;

503 #ifde‡
LEVEL0_NUM_CHILDREN


505 
i
=0; i<
Àvñ2_tŸÆ_dúty_chûdªn
; i++) {

506 
j
=0; j<64; j++) {

507 
d©a
 = 
Àaf
->
bôm≠s
[
Àvñ2_dúty_chûdªn
[
i
]*64+
j
];

508 if(
d©a
) {

509 
Àaf_dúty_ödex
[
Àaf_tŸÆ_dúty_ödexes
] = (
Àvñ2_dúty_chûdªn
[
i
]*64)+
j
;

510 
Àaf_tŸÆ_dúty_ödexes
++;

517 
i
=0; i<
Àaf_tŸÆ_dúty_ödexes
; i++) {

518 if(
Àaf
->
bôm≠s
[
Àaf_dúty_ödex
[
i
]] =
UINT64_MAX
) {

519 
Àaf
->
bôm≠s
[
Àaf_dúty_ödex
[
i
]] = 0;

523 
	`do_cÊush›t_Àn
((*)(
mm≠_°¨t_addr
 + (
Àaf_dúty_ödex
[
i
] * 4096)), 4096);

524 
dútyCachñöes
 += 64;

526 
ödex
 = 0;

527 
d©a
 = 
Àaf
->
bôm≠s
[
Àaf_dúty_ödex
[
i
]];

528 
	`__buûtö_p›cou¡Œ
(
d©a
)) {

529 
	`asm
("bsfq %0, %0" : "Ù" (
ödex
Ë: "0" (
d©a
));

530 
ef„˘ive_ödex
 = 63-
ödex
;

531 
d©a
 &= data - 1;

532 
Àaf
->
bôm≠s
[
Àaf_dúty_ödex
[
i
]] &=Üeaf->bitmaps[leaf_dirty_index[i]] - 1;

534 
	`do_cÊush›t_Àn
((*)(
mm≠_°¨t_addr
 + (
Àaf_dúty_ödex
[
i
] * 4096Ë+ (
ef„˘ive_ödex
 * 64)), 64);

535 
dútyCachñöes
++;

542 
Àaf_tŸÆ_dúty_ödexes
 = 
LEAF_BUFFER
;

543 
i
=0; i<
Àaf_tŸÆ_dúty_ödexes
; i++) {

544 if(
Àaf
->
bôm≠s
[
i
] =
UINT64_MAX
) {

545 
Àaf
->
bôm≠s
[
i
] = 0;

549 
	`do_cÊush›t_Àn
((*)(
mm≠_°¨t_addr
 + (
i
 * 4096)), 4096);

550 
dútyCachñöes
 += 64;

552 
ödex
 = 0;

553 
d©a
 = 
Àaf
->
bôm≠s
[
i
];

554 
	`__buûtö_p›cou¡Œ
(
d©a
)) {

555 
	`asm
("bsfq %0, %0" : "Ù" (
ödex
Ë: "0" (
d©a
));

556 
ef„˘ive_ödex
 = 63-
ödex
;

557 
d©a
 &= data - 1;

558 
Àaf
->
bôm≠s
[
i
] &=Üeaf->bitmaps[i] - 1;

560 
	`do_cÊush›t_Àn
((*)(
mm≠_°¨t_addr
 + (
i
 * 4096Ë+ (
ef„˘ive_ödex
 * 64)), 64);

561 
dútyCachñöes
++;

568  
dútyCachñöes
;

569 
	}
}

572 
	$åavî£TªeSequítül
(
mîkÀBåìNode
 *
roŸ
) {

574 
uöt64_t
 
i
,
j
;

575 
mîkÀBåìLóf
 *
Àaf
 = 
roŸ
->leaf;

576 
uöt64_t
 
dútyCachñöes
 = 0;

578 
i
=0; i<
LEAF_BUFFER
; i++) {

579 if(
Àaf
->
bôm≠s
[
i
] != 0) {

580 if(
Àaf
->
bôm≠s
[
i
] =
UINT64_MAX
)

581 
dútyCachñöes
 += 64;

583 
j
=0; j<
BITMAP_PER_INDEX_NUM_CACHELINES
; j++) {

584 if(
Àaf
->
bôm≠s
[
i
] & (1UL << (63UL-
j
)))

585 
dútyCachñöes
++;

591 
	`¥ötf
("Dúty cachñöe†%lu\n", 
dútyCachñöes
);

592 
	}
}

	@nv_common.h

3 #i‚de‡
__NV_COMMON_H_


4 
	#__NV_COMMON_H_


	)

6 #i‚de‡
__˝lu•lus


10 
	#_GNU_SOURCE


	)

12 
	~<sys/ty≥s.h
>

13 
	~<sys/sockë.h
>

14 
	~<°döt.h
>

15 
	~<°dlib.h
>

16 
	~<sys/°©.h
>

17 
	~<uni°d.h
>

18 
	~<f˙é.h
>

19 
	~<°rög.h
>

20 
	~<°dio.h
>

21 
	~<sys/mm™.h
>

22 
	~<î∫o.h
>

23 
	~<°d¨g.h
>

24 
	~<°ddef.h
>

25 
	~<sys/uio.h
>

26 
	~<dlf˙.h
>

27 
	~<°döt.h
>

28 
	~<sched.h
>

29 
	~<˘y≥.h
>

30 
	~"debug.h
"

32 
	~"boo°/¥ïro˚ss‹/£q/f‹_óch.hµ
"

35 
	#MIN
(
X
,
Y
Ë(((X)<(Y))?(X):(Y))

	)

36 
	#MAX
(
X
,
Y
Ë(((X)>(Y))?(X):(Y))

	)

39 
	#LIKELY
(
x
Ë
	`__buûtö_ex≥˘
((x),1)

	)

40 
	#UNLIKELY
(
x
Ë
	`__buûtö_ex≥˘
((x),0)

	)

42 
	#as£π
(
x
Ëif(
	`UNLIKELY
(!(x))Ë{ 
	`ERROR
("NVP_ASSERT("#x"ËÁûed!\n"); 
	`exô
(100); }

	)

45 
	#MK_STR
(
¨g
Ë#¨g

	)

46 
	#MK_STR2
(
x
Ë
	`MK_STR
(x)

	)

47 
	#MK_STR3
(
x
Ë
	`MK_STR2
(x)

	)

49 
	#MACRO_WRAP
(
a
Ë
	)
a

50 
	#MACRO_CAT
(
a
, 
b
Ë
	`MACRO_WRAP
◊##b)

	)

54 
	#MONETA_CHAR_DEVICE_PATH
 "/dev/m⁄ëaCåœ"

	)

55 
	#SDSSD_CHAR_DEVICE_PATH
 "/dev/m⁄ëaCåœ"

	)

56 
	#MONETA_BLOCK_DEVICE_PATH
 "/dev/m⁄ëØ"

	)

57 
	#SDSSD_BLOCK_DEVICE_PATH
 "/dev/m⁄ëØ"

	)

59 
	#ST_MONETA_DEVICE_ID
 252

	)

60 
	#ST_SDSSD_DEVICE_ID
 252

	)

61 
	#ST_SDSSD_BANKSHOT_DEVICE_ID
 251

	)

63 #i‚de‡
__˝lu•lus


64 
	tboﬁ
;

65 
	#Ál£
 0

	)

66 
	#åue
 1

	)

69 
FILE
* 
_nvp_¥öt_fd
;

70 
	gexecv_d⁄e
;

73 
	#MAX_FILEOPS
 32

	)

82 
	#OPS_FINITEPARAMS_64
 (
TRUNC64
Ë(
SEEK64
)

	)

83 
	#OPS_64
 
	`OPS_FINITEPARAMS
 (
OPEN64
)

	)

85 
	#TRACE_FP_CALLS
 1

	)

87 #ifde‡
TRACE_FP_CALLS


89 
	#ALLOPS_FINITEPARAMS_WPAREN
 (
READ
Ë(
FREAD
Ë(
WRITE
Ë(
FWRITE
Ë(
FSEEK
Ë(
FTELL
Ë(
FTELLO
Ë(
CLOSE
Ë(
FCLOSE
Ë(
SEEK
Ë(
TRUNC
Ë(
DUP
Ë(
DUP2
Ë(
FORK
Ë(
READV
Ë(
WRITEV
Ë(
PIPE
Ë
	`OPS_FINITEPARAMS_64
 (
PREAD
Ë(
PWRITE
Ë(
FSYNC
Ë(
FDSYNC
Ë(
SOCKET
Ë(
ACCEPT
Ë(
UNLINK
Ë(
UNLINKAT
)

	)

91 
	#ALLOPS_WPAREN
 (
OPEN
Ë(
OPENAT
Ë(
EXECVE
Ë(
EXECVP
Ë(
EXECV
Ë(
EXECL
Ë(
FOPEN
Ë(
FCNTL
Ë(
FOPEN64
Ë(
IOCTL
Ë
ALLOPS_FINITEPARAMS_WPAREN


	)

92 
	#SHM_WPAREN
 (
SHM_COPY
)

	)

97 
	#ALLOPS_FINITEPARAMS_WPAREN
 (
READ
Ë(
WRITE
Ë(
CLOSE
Ë(
SEEK
Ë(
TRUNC
Ë(
DUP
Ë(
DUP2
Ë(
FORK
Ë(
READV
Ë(
WRITEV
Ë(
PIPE
Ë
	`OPS_FINITEPARAMS_64
 (
PREAD
Ë(
PWRITE
Ë(
FSYNC
Ë(
FDSYNC
Ë(
SOCKET
Ë(
ACCEPT
Ë(
UNLINK
Ë(
UNLINKAT
)

	)

99 
	#ALLOPS_WPAREN
 (
OPEN
Ë(
OPENAT
Ë(
EXECVE
Ë(
EXECVP
Ë(
EXECV
Ë(
EXECL
Ë(
FCNTL
Ë(
IOCTL
Ë
ALLOPS_FINITEPARAMS_WPAREN


	)

100 
	#SHM_WPAREN
 (
SHM_COPY
)

	)

104 
	#FILEOPS_WITH_FD
 (
READ
Ë(
WRITE
Ë(
SEEK
Ë(
TRUNC
Ë(
READV
Ë(
WRITEV
Ë(
TRUNC64
Ë(
SEEK64
Ë(
PREAD
Ë(
PWRITE
Ë(
FSYNC
Ë(
FDSYNC
)

	)

106 #ifde‡
TRACE_FP_CALLS


107 
	#FILEOPS_WITH_FP
 (
FREAD
Ë(
FWRITE
Ë(
FSEEK
Ë(
FTELL
Ë(
FTELLO
)

	)

111 
	#FILEOPS_WITHOUT_FD
 (
FORK
)

	)

112 
	#FILEOPS_PIPE
 (
PIPE
)

	)

117 
	~<uni°d.h
>

118 
	~<f˙é.h
>

119 
	~<°rög.h
>

120 
	~<î∫o.h
>

121 
	~<time.h
>

124 
	#CHECK_RESOLVE_FILEOPS_OLDVERSION
(
NAME
Ëdo{ \

	)

125 if(
UNLIKELY
(
NAME
##
fûe›s
==
NULL
)) { \

126 if(
NAME
##
ªsﬁve_fûe›s
()!=0){ \

127 
ERROR
("Couldn'tÑesolve " #NAME "!\n"); \

132 
	#CHECK_RESOLVE_FILEOPS
(
NAME
Ëdo{ \

	)

133 if(
	`UNLIKELY
(
NAME
##
fûe›s
==
NULL
)) { \

134 
	`MSG
("TriedÅo use "#NAME" fileops, butÅhey weren't initialized! BLARG\n"); \

135 
	`MSG
("%s:Ñesﬁvög fûe›s\n", 
__func__
); \

136 
NAME
##
	`öô
(); \

137 
NAME
##
	`ªsﬁve_fûe›s
("hub(posix,nvp(posix))"); \

139 
	}
} 0)

162 
	#ADD_FUNCTP
(
FUNCT
, 
¥efix
Ë
fo
->FUNCT =Öªfix##FUNCT;

	)

163 
	#ADD_FUNCTP_IWRAP
(
r
, 
d©a
, 
ñem
Ë
	`ADD_FUNCTP
”Àm, d©a)

	)

165 
	#INIT_FILEOPS_P
(
NAME
, 
PREFIX
Ë\

	)

166 
Fûe›s_p
* 
fo
 = (Fûe›s_p*Ë
	`ˇŒoc
(1, (Fileops_p)); \

167 
fo
->
«me
 = 
NAME
; \

168 
fo
->
ªsﬁve
 = 
PREFIX
##
ªsﬁve_fûe›s
; \

169 
	`BOOST_PP_SEQ_FOR_EACH
(
ADD_FUNCTP_IWRAP
, 
PREFIX
, 
ALLOPS_WPAREN
); \

170 
	`BOOST_PP_SEQ_FOR_EACH
(
ADD_FUNCTP_IWRAP
, 
PREFIX
, 
SHM_WPAREN
); \

171 
	`_hub_add_fûe›
(
fo
);

174 
	#MODULE_REGISTRATION_F
(
NAME
, 
PREFIX
, ...Ë\

	)

175 
OPEN_MAX
; \

176 
Fûe›s_p
* 
PREFIX
##
fûe›s
; \

177 
PREFIX
##
	`ªsﬁve_fûe›s
(*); \

178 
PREFIX
##
	$öô
(Ë
	`__©åibuã__
((
c⁄°ru˘‹
)); \

179 
PREFIX
##
	$öô
() { \

180 
	`DEBUG
("Inôülizög " 
NAME
 "_init\n"); \

181 
PREFIX
##
fûe›s
 = 
NULL
; \

182 
	`INIT_FILEOPS_P
(
NAME
, 
PREFIX
); \

183 if(
OPEN_MAX
<1) { \

184 
OPEN_MAX
 = 
	`sysc⁄f
(
_SC_OPEN_MAX
); \

185 
OPEN_MAX
 = 1024; \

186 
	`DEBUG
("Maximum simu…™eou†›í fûes: %i\n", 
OPEN_MAX
); \

188 
__VA_ARGS__
 \

189 
	}
} \

190 
	gPREFIX
##
	$ªsﬁve_fûe›s
(* 
åì
) { \

191 
PREFIX
##
fûe›s
 = 
	`deÁu…_ªsﬁve_fûe›s
(
åì
, 
NAME
); \

192 if(
PREFIX
##
fûe›s
) {  0; } \

194 
	`ERROR
("FaûedÅÿªsﬁvê"
NAME
" fileops\n"); \

197 
	}
}

200 
Fûe›s_p
* 
deÁu…_ªsﬁve_fûe›s
(* 
åì
, * 
«me
);

202 
	~"debug.h
"

206 
	#FLAGS_INCLUDE
(
Êags
, 
x
Ë((Êags&x)||(x==0))

	)

207 
	#DUMP_FLAGS
(
Êags
, 
x
Ëdo{ if(
	`FLAGS_INCLUDE
(Êags, x)Ë{ 
	`DEBUG_P
("%s(0x%XË",#x,x); } }0)

	)

209 
	#WEAK_ALIAS
(
a
Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
◊)))

	)

214 
	#ALIAS_OPEN
 
›í


	)

215 
	#ALIAS_OPENAT
 
›í©


	)

216 
	#ALIAS_EXECVE
 
execve


	)

217 
	#ALIAS_EXECVP
 
execvp


	)

218 
	#ALIAS_EXECV
 
execv


	)

219 
	#ALIAS_EXECL
 
exe˛


	)

221 #ifde‡
TRACE_FP_CALLS


222 
	#ALIAS_FOPEN
 
f›í


	)

223 
	#ALIAS_FOPEN64
 
f›í64


	)

225 
	#ALIAS_FREAD
 
‰ód


	)

226 
	#ALIAS_FWRITE
 
fwrôe


	)

227 
	#ALIAS_FSEEK
 
f£ek


	)

228 
	#ALIAS_FTELL
 
·ñl


	)

229 
	#ALIAS_FTELLO
 
·ñlo


	)

230 
	#ALIAS_FCLOSE
 
f˛o£


	)

233 
	#ALIAS_READ
 
ªad


	)

234 
	#ALIAS_WRITE
 
wrôe


	)

235 
	#ALIAS_SEEK
 
l£ek


	)

236 
	#ALIAS_CLOSE
 
˛o£


	)

237 
	#ALIAS_TRUNC
 
·runˇã


	)

238 
	#ALIAS_DUP
 
dup


	)

239 
	#ALIAS_DUP2
 
dup2


	)

240 
	#ALIAS_FORK
 
f‹k


	)

241 
	#ALIAS_MMAP
 
mm≠


	)

242 
	#ALIAS_READV
 
ªadv


	)

243 
	#ALIAS_WRITEV
 
wrôev


	)

244 
	#ALIAS_FCNTL
 
f˙é


	)

245 
	#ALIAS_PIPE
 
pùe


	)

246 
	#ALIAS_IOCTL
 
io˘l


	)

247 
	#ALIAS_MUNMAP
 
munm≠


	)

248 
	#ALIAS_MSYNC
 
msync


	)

249 
	#ALIAS_CLONE
 
__˛⁄e


	)

250 
	#ALIAS_PREAD
 
¥ód64


	)

251 
	#ALIAS_PWRITE
 
pwrôe64


	)

253 
	#ALIAS_FSYNC
 
fsync


	)

254 
	#ALIAS_FDSYNC
 
fd©async


	)

255 
	#ALIAS_TRUNC64
 
·runˇã64


	)

256 
	#ALIAS_OPEN64
 
›í64


	)

257 
	#ALIAS_SEEK64
 
l£ek64


	)

258 
	#ALIAS_MMAP64
 
mm≠64


	)

259 
	#ALIAS_MKSTEMP
 
mk°emp64


	)

260 
	#ALIAS_ACCEPT
 
ac˚±


	)

261 
	#ALIAS_SOCKET
 
sockë


	)

262 
	#ALIAS_UNLINK
 
u∆ök


	)

263 
	#ALIAS_UNLINKAT
 
u∆ök©


	)

266 
	#RETT_OPEN
 

	)

267 
	#RETT_OPENAT
 

	)

268 
	#RETT_EXECVE
 

	)

269 
	#RETT_EXECVP
 

	)

270 
	#RETT_EXECV
 

	)

271 
	#RETT_EXECL
 

	)

272 
	#RETT_SHM_COPY
 

	)

274 #ifde‡
TRACE_FP_CALLS


275 
	#RETT_FOPEN
 
FILE
*

	)

276 
	#RETT_FOPEN64
 
FILE
*

	)

278 
	#RETT_FWRITE
 
size_t


	)

279 
	#RETT_FSEEK
 

	)

280 
	#RETT_FTELL
 

	)

281 
	#RETT_FTELLO
 
off_t


	)

282 
	#RETT_FCLOSE
 

	)

285 
	#RETT_READ
 
ssize_t


	)

286 
	#RETT_FREAD
 
size_t


	)

287 
	#RETT_WRITE
 
ssize_t


	)

288 
	#RETT_SEEK
 
off_t


	)

289 
	#RETT_CLOSE
 

	)

290 
	#RETT_TRUNC
 

	)

291 
	#RETT_DUP
 

	)

292 
	#RETT_DUP2
 

	)

293 
	#RETT_FORK
 
pid_t


	)

294 
	#RETT_MMAP
 *

	)

295 
	#RETT_READV
 
ssize_t


	)

296 
	#RETT_WRITEV
 
ssize_t


	)

297 
	#RETT_FCNTL
 

	)

298 
	#RETT_PIPE
 

	)

299 
	#RETT_IOCTL
 

	)

300 
	#RETT_MUNMAP
 

	)

301 
	#RETT_MSYNC
 

	)

302 
	#RETT_CLONE
 

	)

303 
	#RETT_PREAD
 
ssize_t


	)

304 
	#RETT_PWRITE
 
ssize_t


	)

306 
	#RETT_FSYNC
 

	)

307 
	#RETT_FDSYNC
 

	)

308 
	#RETT_TRUNC64
 

	)

309 
	#RETT_OPEN64
 

	)

310 
	#RETT_SEEK64
 
off64_t


	)

311 
	#RETT_MMAP64
 *

	)

312 
	#RETT_MKSTEMP
 

	)

313 
	#RETT_ACCEPT
 

	)

314 
	#RETT_SOCKET
 

	)

315 
	#RETT_UNLINK
 

	)

316 
	#RETT_UNLINKAT
 

	)

320 
	#INTF_NVP_OPEN
 c⁄° * 
∑th
, 
oÊag
, *
öode_mode
, ...

	)

321 
	#INTF_OPEN
 c⁄° *
∑th
, 
oÊag
, ...

	)

322 
	#INTF_OPENAT
 
dúfd
, c⁄° * 
∑th
, 
oÊag
, ...

	)

323 
	#INTF_EXECVE
 c⁄° *
fûíame
, *c⁄° 
¨gv
[], *c⁄° 
ívp
[]

	)

324 
	#INTF_EXECVP
 c⁄° *
fûe
, *c⁄° 
¨gv
[]

	)

325 
	#INTF_EXECV
 c⁄° *
∑th
, *c⁄° 
¨gv
[]

	)

326 
	#INTF_EXECL
 c⁄° *
∑th
, c⁄° *
¨g
, ...

	)

327 
	#INTF_SHM_COPY
 

	)

329 #ifde‡
TRACE_FP_CALLS


331 
	#INTF_NVP_FOPEN
 c⁄° * 
__ª°ri˘
 
∑th
, c⁄° * __ª°ri˘ 
mode
, *
öode_mode


	)

332 
	#INTF_FOPEN
 c⁄° * 
__ª°ri˘
 
∑th
, c⁄° * __ª°ri˘ 
mode


	)

333 
	#INTF_FOPEN64
 c⁄° * 
__ª°ri˘
 
∑th
, c⁄° * __ª°ri˘ 
mode


	)

335 
	#INTF_FREAD
 * 
__ª°ri˘
 
buf
, 
size_t
 
Àngth
, size_à
nmemb
, 
FILE
* __ª°ri˘ 
Â


	)

336 
	#INTF_FWRITE
 c⁄° * 
__ª°ri˘
 
buf
, 
size_t
 
Àngth
, size_à
nmemb
, 
FILE
* __ª°ri˘ 
Â


	)

337 
	#INTF_FSEEK
 
FILE
* 
Â
, 
off£t
, 
whí˚


	)

338 
	#INTF_FTELL
 
FILE
* 
Â


	)

339 
	#INTF_FTELLO
 
FILE
* 
Â


	)

340 
	#INTF_FCLOSE
 
FILE
* 
Â


	)

344 
	#INTF_READ
 
fûe
, * 
buf
, 
size_t
 
Àngth


	)

345 
	#INTF_WRITE
 
fûe
, c⁄° * 
buf
, 
size_t
 
Àngth


	)

346 
	#INTF_SEEK
 
fûe
, 
off_t
 
off£t
, 
whí˚


	)

347 
	#INTF_CLOSE
 
fûe


	)

348 
	#INTF_TRUNC
 
fûe
, 
off_t
 
Àngth


	)

349 
	#INTF_DUP
 
fûe


	)

350 
	#INTF_DUP2
 
fûe
, 
fd2


	)

351 
	#INTF_FORK
 

	)

352 
	#INTF_MMAP
 *
addr
, 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
, 
fûe
, 
off_t
 
off


	)

353 
	#INTF_READV
 
fûe
, c⁄° 
iovec
 *
iov
, 
iov˙t


	)

354 
	#INTF_WRITEV
 
fûe
, c⁄° 
iovec
 *
iov
, 
iov˙t


	)

355 
	#INTF_FCNTL
 
fûe
, 
cmd
, ...

	)

356 
	#INTF_PIPE
 
fûe
[2]

	)

357 
	#INTF_IOCTL
 
fûe
, 
ªque°
, ...

	)

358 
	#INTF_MUNMAP
 *
addr
, 
size_t
 
Àn


	)

359 
	#INTF_MSYNC
 *
addr
, 
size_t
 
Àn
, 
Êags


	)

360 
	#INTF_CLONE
 (*
‚
)(*
a
), *
chûd_°ack
, 
Êags
, *
¨g


	)

361 
	#INTF_PREAD
 
fûe
, *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t


	)

362 
	#INTF_PWRITE
 
fûe
, c⁄° *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t


	)

364 
	#INTF_FSYNC
 
fûe


	)

365 
	#INTF_FDSYNC
 
fûe


	)

366 
	#INTF_TRUNC64
 
fûe
, 
off64_t
 
Àngth


	)

367 
	#INTF_OPEN64
 c⁄° * 
∑th
, 
oÊag
, ...

	)

368 
	#INTF_SEEK64
 
fûe
, 
off64_t
 
off£t
, 
whí˚


	)

369 
	#INTF_MMAP64
 *
addr
, 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
, 
fûe
, 
off64_t
 
off


	)

370 
	#INTF_MKSTEMP
 * 
fûe


	)

371 
	#INTF_ACCEPT
 
fûe
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí


	)

372 
	#INTF_SOCKET
 
domaö
, 
ty≥
, 
¥Ÿocﬁ


	)

373 
	#INTF_UNLINK
 c⁄° * 
∑th


	)

374 
	#INTF_UNLINKAT
 
dúfd
, c⁄° * 
∑th
, 
Êags


	)

378 
	#CALL_OPEN
 
∑th
, 
oÊag


	)

379 
	#CALL_OPENAT
 
dúfd
, 
∑th
, 
oÊag


	)

380 
	#CALL_EXECVE
 
fûíame
, 
¨gv
, 
ívp


	)

381 
	#CALL_EXECVP
 
fûe
, 
¨gv


	)

382 
	#CALL_EXECV
 
∑th
, 
¨gv


	)

383 
	#CALL_EXECL
 
∑th
, 
¨g


	)

385 #ifde‡
TRACE_FP_CALLS


387 
	#CALL_FOPEN
 
∑th
, 
mode


	)

388 
	#CALL_FOPEN64
 
∑th
, 
mode


	)

390 
	#CALL_FREAD
 
buf
, 
Àngth
, 
nmemb
, 
Â


	)

391 
	#CALL_FWRITE
 
buf
, 
Àngth
, 
nmemb
, 
Â


	)

392 
	#CALL_FSEEK
 
Â
, 
off£t
, 
whí˚


	)

393 
	#CALL_FTELL
 
Â


	)

394 
	#CALL_FTELLO
 
Â


	)

395 
	#CALL_FCLOSE
 
Â


	)

399 
	#CALL_IOCTL
 
fûe
, 
ªque°


	)

400 
	#CALL_READ
 
fûe
, 
buf
, 
Àngth


	)

401 
	#CALL_WRITE
 
fûe
, 
buf
, 
Àngth


	)

402 
	#CALL_SEEK
 
fûe
, 
off£t
, 
whí˚


	)

403 
	#CALL_CLOSE
 
fûe


	)

404 
	#CALL_TRUNC
 
fûe
, 
Àngth


	)

405 
	#CALL_DUP
 
fûe


	)

406 
	#CALL_DUP2
 
fûe
, 
fd2


	)

407 
	#CALL_FORK


	)

408 
	#CALL_MMAP
 
addr
, 
Àn
, 
¥Ÿ
, 
Êags
, 
fûe
, 
off


	)

409 
	#CALL_READV
 
fûe
, 
iov
, 
iov˙t


	)

410 
	#CALL_WRITEV
 
fûe
, 
iov
, 
iov˙t


	)

411 
	#CALL_FCNTL
 
fûe
, 
cmd


	)

412 
	#CALL_PIPE
 
fûe


	)

413 
	#CALL_MUNMAP
 
addr
, 
Àn


	)

414 
	#CALL_MSYNC
 
addr
, 
Àn
, 
Êags


	)

415 
	#CALL_CLONE
 
‚
, 
chûd_°ack
, 
Êags
, 
¨g


	)

416 
	#CALL_PREAD
 
fûe
, 
buf
, 
cou¡
, 
off£t


	)

417 
	#CALL_PWRITE
 
fûe
, 
buf
, 
cou¡
, 
off£t


	)

419 
	#CALL_FSYNC
 
fûe


	)

420 
	#CALL_FDSYNC
 
fûe


	)

421 
	#CALL_TRUNC64
 
CALL_TRUNC


	)

422 
	#CALL_OPEN64
 
CALL_OPEN


	)

423 
	#CALL_SEEK64
 
CALL_SEEK


	)

424 
	#CALL_MMAP64
 
CALL_MMAP


	)

425 
	#CALL_MKSTEMP
 
fûe


	)

426 
	#CALL_ACCEPT
 
fûe
, 
addr
, 
addæí


	)

427 
	#CALL_SOCKET
 
domaö
, 
ty≥
, 
¥Ÿocﬁ


	)

428 
	#CALL_UNLINK
 
∑th


	)

429 
	#CALL_UNLINKAT
 
dúfd
, 
∑th
, 
Êags


	)

432 
	#PFFS_OPEN
 "%s, %i"

	)

433 
	#PFFS_OPENAT
 "%i, %s, %i"

	)

434 
	#PFFS_EXECVE
 "%s, %s, %s"

	)

435 
	#PFFS_EXECVP
 "%s, %s"

	)

436 
	#PFFS_EXECV
 "%s, %s"

	)

437 
	#PFFS_EXECL
 "%s, %s"

	)

438 
	#PFFS_SHM_COPY
 ""

	)

440 #ifde‡
TRACE_FP_CALLS


442 
	#PFFS_FOPEN
 "%s, %s"

	)

443 
	#PFFS_FOPEN64
 "%s, %s"

	)

445 
	#PFFS_FREAD
 "%p, %i, %i, %p"

	)

446 
	#PFFS_FWRITE
 "%p, %i, %i, %p"

	)

447 
	#PFFS_FSEEK
 "%p, %i, %i"

	)

448 
	#PFFS_FTELL
 "%p"

	)

449 
	#PFFS_FTELLO
 "%p"

	)

450 
	#PFFS_FCLOSE
 "%p"

	)

454 
	#PFFS_READ
 "%i, %p, %i"

	)

455 
	#PFFS_WRITE
 "%i, %p, %i"

	)

456 
	#PFFS_SEEK
 "%i, %i, %i"

	)

457 
	#PFFS_CLOSE
 "%i"

	)

458 
	#PFFS_TRUNC
 "%i, %i"

	)

459 
	#PFFS_DUP
 "%i"

	)

460 
	#PFFS_DUP2
 "%i, %i"

	)

461 
	#PFFS_FORK
 ""

	)

462 
	#PFFS_MMAP
 "%p, %i, %i, %i, %i"

	)

463 
	#PFFS_READV
 "%i, %p, %i"

	)

464 
	#PFFS_WRITEV
 "%i, %p, %i"

	)

465 
	#PFFS_FCNTL
 "%i, %i"

	)

466 
	#PFFS_PIPE
 "%p"

	)

467 
	#PFFS_IOCTL
 "%i, %i"

	)

468 
	#PFFS_MUNMAP
 "%p, %i"

	)

469 
	#PFFS_MSYNC
 "%p, %i, %i"

	)

470 
	#PFFS_CLONE
 "%p, %p, %i, %p"

	)

471 
	#PFFS_PREAD
 "%i, %p, %i, %i"

	)

472 
	#PFFS_PWRITE
 "%i, %p, %i, %i"

	)

474 
	#PFFS_FSYNC
 "%i"

	)

475 
	#PFFS_FDSYNC
 "%i"

	)

476 
	#PFFS_TRUNC64
 "%i, %i"

	)

477 
	#PFFS_OPEN64
 "%s, %i"

	)

478 
	#PFFS_SEEK64
 "%i, %i, %i"

	)

479 
	#PFFS_MMAP64
 "%p, %i, %i, %i, %i"

	)

480 
	#PFFS_MKSTEMP
 "%s"

	)

481 
	#PFFS_ACCEPT
 "%d, %p, %p"

	)

482 
	#PFFS_SOCKET
 "%d, %d, %d"

	)

483 
	#PFFS_UNLINK
 "%s"

	)

484 
	#PFFS_UNLINKAT
 "%d, %s, %d"

	)

488 
	#STD_OPEN
 
__›í


	)

489 
	#STD_OPENAT
 
__›í©


	)

490 
	#STD_EXECVE
 
__execve


	)

491 
	#STD_EXECVP
 
__execvp


	)

492 
	#STD_EXECV
 
__execv


	)

493 
	#STD_EXECL
 
__exe˛


	)

495 #ifde‡
TRACE_FP_CALLS


497 
	#STD_FOPEN
 
__f›í


	)

498 
	#STD_FOPEN64
 
__f›í64


	)

500 
	#STD_FREAD
 
__‰ód


	)

501 
	#STD_FWRITE
 
__fwrôe


	)

502 
	#STD_FSEEK
 
__f£ek


	)

503 
	#STD_FTELL
 
__·ñl


	)

504 
	#STD_FTELLO
 
__·ñlo


	)

505 
	#STD_FCLOSE
 
__f˛o£


	)

509 
	#STD_OPEN64
 
__›í64


	)

510 
	#STD_READ
 
__ªad


	)

511 
	#STD_WRITE
 
__wrôe


	)

512 
	#STD_SEEK
 
__l£ek


	)

513 
	#STD_SEEK64
 
__l£ek64


	)

514 
	#STD_CLOSE
 
__˛o£


	)

515 
	#STD_TRUNC
 
__·runˇã


	)

516 
	#STD_TRUNC64
 
__·runˇã64


	)

517 
	#STD_DUP
 
__dup


	)

518 
	#STD_DUP2
 
__dup2


	)

519 
	#STD_FORK
 
__f‹k


	)

520 
	#STD_MMAP
 
__mm≠


	)

521 
	#STD_MMAP64
 
__mm≠64


	)

522 
	#STD_READV
 
__ªadv


	)

523 
	#STD_WRITEV
 
__wrôev


	)

524 
	#STD_FCNTL
 
__f˙é


	)

525 
	#STD_PIPE
 
__pùe


	)

526 
	#STD_IOCTL
 
__io˘l


	)

527 
	#STD_MUNMAP
 
__munm≠


	)

528 
	#STD_MSYNC
 
__libc_msync


	)

529 
	#STD_CLONE
 
__˛⁄e


	)

530 
	#STD_PREAD
 
__¥ód


	)

531 
	#STD_PWRITE
 
__pwrôe64


	)

533 
	#STD_FSYNC
 
__fsync


	)

534 
	#STD_FDSYNC
 
__fdsync


	)

535 
	#STD_MKSTEMP
 
__mk°emp


	)

536 
	#STD_UNLINK
 
__u∆ök


	)

537 
	#STD_UNLINKAT
 
__u∆ök©


	)

540 
	#STD_DECL
(
FUNCT
Ë
RETT_
##FUNCT 
STD_
##
	`FUNCT
 ( 
INTF_
##FUNCT ) ;

	)

541 
	#STD_DECL_IWRAP
(
r
, 
d©a
, 
ñem
Ë
	`STD_DECL
”Àm)

	)

545 
	sFûe›s_p
 {

546 * 
	m«me
;

547 (*
	mªsﬁve
) (*);

549 
	#ADD_FILEOP
(
›
Ë
RETT_
##
	`›
 (* o∞Ë–
INTF_
##› ) ;

	)

550 
	#ADD_FILEOP_IWRAP
(
r
, 
d©a
, 
ñem
Ë
	`ADD_FILEOP
”Àm)

	)

551 
BOOST_PP_SEQ_FOR_EACH
(
ADD_FILEOP_IWRAP
, 
∂a˚hﬁdî
, 
ALLOPS_WPAREN
);

552 
BOOST_PP_SEQ_FOR_EACH
(
ADD_FILEOP_IWRAP
, 
∂a˚hﬁdî
, 
SHM_WPAREN
);

559 
_hub_add_fûe›
(
Fûe›s_p
* 
fo
);

560 
Fûe›s_p
* 
_hub_föd_fûe›
(c⁄° * 
«me
);

562 
_hub_ªsﬁve_Æl_fûe›s
(* 
åì
);

566 
Fûe›s_p
** 
ªsﬁve_n_fûe›s
(* 
åì
, * 
«me
, 
cou¡
);

571 
	#DECLARE_AND_ALIAS_FUNCS
(
FUNCT
, 
¥efix
Ë\

	)

572 
	gRETT_
##
FUNCT
 
	g¥efix
##FUNCT(
INTF_
##FUNCT); \

573 
	gRETT_
##
FUNCT
 
	gALIAS_
##FUNCT(
INTF_
##FUNCTË
WEAK_ALIAS
(
MK_STR
(
¥efix
##FUNCT));

574 
	#DECLARE_AND_ALIAS_FUNCTS_IWRAP
(
r
, 
d©a
, 
ñem
Ë
	`DECLARE_AND_ALIAS_FUNCS
”Àm, d©a)

	)

579 
	#DECLARE_WITHOUT_ALIAS_FUNCS
(
FUNCT
, 
¥efix
Ë\

	)

580 
	gRETT_
##
FUNCT
 
	g¥efix
##FUNCT(
INTF_
##FUNCT);

581 
	#DECLARE_WITHOUT_ALIAS_OPEN_FUNCS
(
FUNCT
, 
¥efix
Ë\

	)

582 
	gRETT_
##
FUNCT
 
	g¥efix
##FUNCT(
INTF_NVP_
##FUNCT);

583 
	#DECLARE_WITHOUT_ALIAS_FUNCTS_IWRAP
(
r
, 
d©a
, 
ñem
Ë
	`DECLARE_WITHOUT_ALIAS_FUNCS
”Àm, d©a)

	)

584 
	#DECLARE_WITHOUT_ALIAS_FUNCTS_OPEN_IWRAP
(
r
, 
d©a
, 
ñem
Ë
	`DECLARE_WITHOUT_ALIAS_OPEN_FUNCS
”Àm, d©a)

	)

590 
	#WRAP_NOT_IMPLEMENTED
(
›
, 
¥efix
Ë\

	)

591 
	gRETT_
##
›
 
	g¥efix
##› ( 
INTF_
##op ) { \

592 
DEBUG
("CALL: " 
MK_STR
(
¥efix
##
›
) "Çot implemented!\n"); \

593 
as£π
(0); \

595 
	#WRAP_NOT_IMPLEMENTED_IWRAP
(
r
, 
d©a
, 
ñem
Ë
	`WRAP_NOT_IMPLEMENTED
”Àm, d©a)

	)

597 
	#RESOLVE_TWO_FILEOPS
(
MODULENAME
, 
OP1
, 
OP2
Ë\

	)

598 
DEBUG
("Resﬁvög moduÀ "
MODULENAME
": wantsÅwo fileops.\n"); \

599 
Fûe›s_p
** 
	gªsu…
 = 
ªsﬁve_n_fûe›s
(
åì
, 
MODULENAME
, 2); \

600 
	gOP1
 = 
ªsu…
[0]; \

601 
	gOP2
 = 
ªsu…
[1]; \

602 if(
	gOP1
 =
NULL
) { \

603 
ERROR
("FailedÅoÑesolve "#OP1"\n"); \

604 
as£π
(0); \

606 
DEBUG
(
MODULENAME
"("#OP1"ËªsﬁvedÅÿ%s\n", 
OP1
->
«me
); \

608 if(
	gOP2
 =
NULL
) { \

609 
ERROR
("FailedÅoÑesolve "#OP2"\n"); \

610 
as£π
(0); \

612 
DEBUG
(
MODULENAME
"("#OP2"ËªsﬁvedÅÿ%s\n", 
OP2
->
«me
); \

	@nvp_lock.h

8 
	#˝uid
(
func
,
ax
,
bx
,
cx
,
dx
)\

	)

9 
__asm__
 
__vﬁ©ûe__
 ("cpuid":\

10 "˜" (
ax
), "=b" (
bx
), "=c" (
cx
), "=d" (
dx
Ë: "a" (
func
));

12 
ölöe
 
	$_nvp_gë_˝uid
()

14 
uöt32_t
 
óx
=0;

15 
uöt32_t
 
ebx
=0;

16 
uöt32_t
 
ecx
=1;

17 
uöt32_t
 
edx
=0;

19 
	`˝uid
(0x0B, 
óx
,
ebx
,
ecx
,
edx
);

21 
id
 = (((
edx
&1)<<3) + ((edx>>4)&1) + (edx&0xe));

23  
id
;

24 
	}
}

26 
ölöe
 
	$ªtu∫_zîo
()

29 
	}
}

31 #i‚de‡
USE_PTHREAD_LOCK


32 
	#USE_PTHREAD_LOCK
 1

	)

35 #i‚de‡
USE_SCHED_GETCPU


36 
	#USE_SCHED_GETCPU
 1

	)

39 #if 
USE_SINGLE_LOCK


40 
	#GET_CPUID
 
ªtu∫_zîo


	)

41 #ñif 
USE_SCHED_GETCPU


42 
	#GET_CPUID
 
sched_gë˝u


	)

44 
	#GET_CPUID
 
_nvp_gë_˝uid


	)

47 #if 
USE_SINGLE_LOCK


48 
	#NVP_NUM_LOCKS
 2

	)

50 
	#NVP_NUM_LOCKS
 8

	)

55 #if 
USE_PTHREAD_LOCK


57 
	#NVP_LOCK_DECL
 
±hªad_rwlock_t
 
lock
[
NVP_NUM_LOCKS
]

	)

59 
	#NVP_LOCK_INIT
(
lock
Ë{ 
ôî
; ôî=0; iãr<
NVP_NUM_LOCKS
; iãr++Ë{ 
	`±hªad_rwlock_öô
(&lock[ôî], 
NULL
); } }

	)

61 
	#NVP_EXTENT_LOCK_DECL
 
±hªad_rwlock_t
 
exã¡_lock


	)

63 
	#NVP_LOCK_INIT_EXTENT_LOCK
(
lock
Ë{ 
	`±hªad_rwlock_öô
(&lock, 
NULL
); }

	)

65 
	#NVP_LOCK_DO_CHECKING
 1

	)

66 #i‡
NVP_LOCK_DO_CHECKING


67 
	#NVP_LOCK_CHECK
(
°©emít
Ë{ \

	)

68 
	gªsu…
 = 
°©emít
; \

69 if(
	gªsu…
) { \

70 
ERROR
("FailedÅoÖerformÜock operation (see followingÉrror message)\n"); \

71 
PRINT_ERROR_NAME
(
ªsu…
); \

72 
as£π
(0); \

76 
	#NVP_LOCK_CHECK
(
°©emít
Ë
	)
statement

79 
	#SANITY
 
as£π


	)

82 
	#NVP_LOCK_RD
(
lock
, 
˝uid
Ë\

	)

83 
SANITY
(
˝uid
<(
NVP_NUM_LOCKS
/2)); \

84 
DEBUG
("NVP_RDLOCKÑeque°ed o¿CPU %i,Üock %p\n", 
˝uid
, &
lock
); \

85 
NVP_LOCK_CHECK
(
±hªad_rwlock_rdlock
(&
lock
[
˝uid
*2])); \

86 
DEBUG
("NVP_RDLOCKácquúed o¿CPU %i,Üock %p\n", 
˝uid
, &
lock
)

88 
	#NVP_LOCK_UNLOCK_RD
(
lock
, 
˝uid
Ë\

	)

89 
DEBUG
("Rñósög NVP_RDLOCK o¿CPU %i,Üock %p\n", 
˝uid
, &
lock
); \

90 
SANITY
(
˝uid
<(
NVP_NUM_LOCKS
/2)); \

91 
NVP_LOCK_CHECK
(
±hªad_rwlock_u∆ock
(&
lock
[
˝uid
*2])); \

92 
DEBUG
("NVP_RDLOCKÑñó£d o¿CPU %i,Üock %p\n", 
˝uid
, &
lock
)

95 
	#NVP_LOCK_WR
(
lock
Ë{ 
ôî
; \

	)

96 
DEBUG
("NVP_WRLOCKÑeque°ed o¿˝u %i,Üock %p\n", 
GET_CPUID
(), &
lock
); \

97 
	gôî
=0; iãr<
	gNVP_NUM_LOCKS
; iter+=2) { \

98 
NVP_LOCK_CHECK
(
±hªad_rwlock_wæock
(&
lock
[
ôî
])); \

100 
DEBUG
("NVP_WRLOCKácquúed o¿˝u %i,Üock %p\n", 
GET_CPUID
(), &
lock
); \

103 
	#NVP_LOCK_UNLOCK_WR
(
lock
Ë{ 
ôî
; \

	)

104 
DEBUG
("NVP_WRLOCKÑñósög o¿˝u %i,Üock %p\n", 
GET_CPUID
(), &
lock
); \

105 
	gôî
=0; iãr<
	gNVP_NUM_LOCKS
; iter+=2) { \

106 
NVP_LOCK_CHECK
(
±hªad_rwlock_u∆ock
(&
lock
[
ôî
])); \

108 
DEBUG
("NVP_WRLOCKÑñó£d o¿˝u %i,Üock %p\n", 
GET_CPUID
(), &
lock
); \

111 
	#NVP_LOCK_EXTENT_TREE
(
lock
Ë\

	)

112 
NVP_LOCK_CHECK
(
±hªad_rwlock_wæock
(&
lock
));

114 
	#NVP_UNLOCK_EXTENT_TREE
(
lock
Ë\

	)

115 
NVP_LOCK_CHECK
(
±hªad_rwlock_u∆ock
(&
lock
));

123 
	#WR_HELD
 (1 << 30)

	)

125 
	#NVP_LOCK_DECL
 
uöt32_t
 
lock
[
NVP_NUM_LOCKS
 * 16]

	)

127 
	#NVP_LOCK_INIT
(
lock
Ë{ 
ôî
; ôî=0; iãr<
NVP_NUM_LOCKS
 * 16; iãr++Ë{Üock[ôî] = 0; } }

	)

129 
	#NVP_EXTENT_LOCK_DECL
 
uöt32_t
 
exã¡_lock


	)

131 
	#NVP_LOCK_INIT_EXTENT_LOCK
(
lock
Ë{Üock = 0; }

	)

133 
	#NVP_LOCK_CHECK
(
°©emít
Ë
	)
statement

135 
	#SANITY
 
as£π


	)

137 
	#NVP_LOCK_RD
(
lock
, 
˝uid
Ë\

	)

138 
SANITY
(
˝uid
<(
NVP_NUM_LOCKS
/2)); \

139 
DEBUG
("NVP_RDLOCKÑeque°ed o¿CPU %i,Üock %p\n", 
˝uid
, &
lock
); \

140 
__sync_„tch_™d_add
(&
lock
[
˝uid
 * 2 * 16], 1Ë>
WR_HELD
) \

141 
__sync_„tch_™d_sub
(&
lock
[
˝uid
 * 2 * 16], 1); \

142 
DEBUG
("NVP_RDLOCKácquúed o¿CPU %i,Üock %p\n", 
˝uid
, &
lock
)

144 
	#NVP_LOCK_UNLOCK_RD
(
lock
, 
˝uid
Ë\

	)

145 
DEBUG
("NVP_RDLOCKÑñósög o¿CPU %i,Üock %p\n", 
˝uid
, &
lock
); \

146 
SANITY
(
˝uid
<(
NVP_NUM_LOCKS
/2)); \

147 
__sync_„tch_™d_sub
(&
lock
[
˝uid
 * 2 * 16], 1); \

148 
DEBUG
("NVP_RDLOCKÑñó£d o¿CPU %i,Üock %p\n", 
˝uid
, &
lock
)

151 
	#NVP_LOCK_WR
(
lock
Ë{ 
ôî
; \

	)

152 
DEBUG
("NVP_WRLOCKÑeque°ed o¿˝u %i,Üock %p\n", 
GET_CPUID
(), &
lock
); \

153 
	gôî
=0; iãr<
	gNVP_NUM_LOCKS
; iter+=2) { \

154 !
__sync_boﬁ_com∑ª_™d_sw≠
(&
lock
[
ôî
 * 16], 0, 
WR_HELD
)) \

157 
DEBUG
("NVP_WRLOCKácquúed o¿˝u %i,Üock %p\n", 
GET_CPUID
(), &
lock
); \

160 
	#NVP_LOCK_UNLOCK_WR
(
lock
Ë{ 
ôî
; \

	)

161 
DEBUG
("NVP_WRLOCKÑñósög o¿˝u %i,Üock %p\n", 
GET_CPUID
(), &
lock
); \

162 
	gôî
=0; iãr<
	gNVP_NUM_LOCKS
; iter+=2) { \

163 
__sync_„tch_™d_sub
(&
lock
[
ôî
 * 16], 
WR_HELD
); \

165 
DEBUG
("NVP_WRLOCKÑñó£d o¿˝u %i,Üock %p\n", 
GET_CPUID
(), &
lock
); \

168 
	#NVP_LOCK_EXTENT_TREE
(
lock
Ë\

	)

169 !
__sync_boﬁ_com∑ª_™d_sw≠
(&
lock
, 0, 
WR_HELD
)) \

172 
	#NVP_UNLOCK_EXTENT_TREE
(
lock
Ë\

	)

173 
__sync_„tch_™d_sub
(&
lock
, 
WR_HELD
);

	@nvp_mman.h

1 #i‚de‡
LEDGER_SRC_MMAN_H_


2 
	#LEDGER_SRC_MMAN_H_


	)

6 
	~<emmöåö.h
>

7 
	~"≥rf_dñay/add_dñay.h
"

20 
	#CLFLUSH_SIZE
 64

	)

21 
	#_mm_˛Êush›t
(
addr
)\

	)

22 
asm
 vﬁ©ûe("˛Êush›à%0" : "+m" (*(vﬁ©ûê*)(
addr
)))

24 
ölöe
 
	$do_cÊush_Àn
(vﬁ©ûê* 
addr
, 
size_t
 
Àngth
)

28 
size_t
 
i
;

30 
i
 = 0; i < 
Àngth
; i +
CLFLUSH_SIZE
) {

33 
	`_mm_˛Êush
((c⁄°*)(
addr
 + 
i
));

37 
	}
}

40 
ölöe
 
	$do_cÊush›t_Àn
(vﬁ©ûê* 
addr
, 
size_t
 
Àngth
)

43 
size_t
 
i
;

44 
i
 = 0; i < 
Àngth
; i +
CLFLUSH_SIZE
) {

45 
	`_mm_˛Êush›t
((*)(
addr
 + 
i
));

46 #i‡
NVM_DELAY


47 
	`≥rfmodñ_add_dñay
(0, 
CLFLUSH_SIZE
);

50 
	}
}

	@nvp_printf.c

9 #i‚de‡
__NVP_XIL_PRINTF_C_


10 
	#__NVP_XIL_PRINTF_C_


	)

12 
	~<˘y≥.h
>

13 
	~<°rög.h
>

14 
	~<°d¨g.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<dlf˙.h
>

17 
	~<as£π.h
>

18 
	~<°dio.h
>

19 
	~<±hªad.h
>

20 
	~<uni°d.h
>

21 
	~<°dlib.h
>

22 
	~<î∫o.h
>

23 
	~<°döt.h
>

24 
	~"debug.h
"

26 
FILE
 * 
	g_xû_¥ötf_fûe
;

28 
FILE
* 
	g_nvp_¥öt_fd
;

31 
¥ötSåög
(*
s
);

34 
±hªad_muãx_t
 
	g__debug_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

36 
	gmax_Àn
 = 0;

37 
	gpos
 = 0;

38 * 
	goutbuf
 = 
NULL
;

40 
	$¸ush_outbuf
()

42 
	`mem£t
(
outbuf
, '\0', 
max_Àn
);

43 
pos
=0;

44 
	}
}

46 
	$Êush_outbuf
()

48 
	`size_t
 (*
glibc_fwrôe
Ë–c⁄° * 
±r
, 
size_t
 
size
, size_à
cou¡
, 
FILE
 * 
°ªam
 ) = 
NULL
;

50 if(
glibc_fwrôe
==
NULL
) {

51 * 
libc_so
 = 
	`dl›í
("/lib/x86_64-löux-gnu/libc.so.6", 
RTLD_LAZY
|
RTLD_LOCAL
);

52 if(!
libc_so
Ë{ 
	`as£π
(0); }

53 * 
glcw
 = 
	`dlsym
(
libc_so
, "fwrite");

54 if(!
glcw
Ë{ 
	`as£π
(0); }

55 
glibc_fwrôe
 = (
	`size_t
 (*Ë–c⁄° * 
±r
, 
size_t
 
size
, size_à
cou¡
, 
FILE
 * 
°ªam
 ))
glcw
;

56 
	`as£π
(
glibc_fwrôe
!=
NULL
);

58 
î∫o_hﬁdî
 = 
î∫o
;

59 
ªt
;

60 
ªt_cou¡
 = 0;

62 
ªt
 = 
	`glibc_fwrôe
–
outbuf
, 
pos
, 1, 
_xû_¥ötf_fûe
);

63 
ªt_cou¡
++;

64 } (
ªt
!=1Ë&& (
ªt_cou¡
 < 20));

66 if(
ªt
!=1) {

68 
	`¥ötSåög
("ERROR:Çvp_printf.c: glibc_fwriteÑeturned something otherÅhan 1!\n");

69 
ªt
 != 1) {}

70 
	`as£π
(0);

72 
î∫o
 = 
î∫o_hﬁdî
;

73 
	`fÊush
(
_xû_¥ötf_fûe
);

74 
pos
=0;

75 
	}
}

77 
	$outbyã
 (
c
)

79 if(
pos
 >
max_Àn
-1) {

80 
max_Àn
 *= 2;

81 
outbuf
 = (*Ë
	`ªÆloc
(outbuf, 
max_Àn
);

82 
	`mem£t
(
outbuf
+
pos
, '\0', 
max_Àn
-pos);

85 
outbuf
[
pos
] = 
c
;

86 
pos
++;

87 
	}
}

89 
	$¥ötSåög
(*
s
){

90 
i
 = 0;

91 
s
[
i
]) {

92 
	`outbyã
(
s
[
i
]);

93 
i
++;

95 
	}
}

100 
	s∑øms_s
 {

101 
	mÀn
;

102 
	mnum1
;

103 
	mnum2
;

104 
	m∑d_ch¨a˘î
;

105 
	mdo_∑ddög
;

106 
	mÀ·_Êag
;

107 } 
	t∑øms_t
;

117 (*
	tfunc_±r
)(
	tc
);

124 
	$∑ddög
–c⁄° 
l_Êag
, 
∑øms_t
 *
∑r
)

126 
i
;

128 i‡(
∑r
->
do_∑ddög
 && 
l_Êag
 && (∑r->
Àn
 <Ö¨->
num1
))

129 
i
=
∑r
->
Àn
; i<∑r->
num1
; i++)

130 
	`outbyã
–
∑r
->
∑d_ch¨a˘î
);

131 
	}
}

138 
	$outs
(
ch¨±r
 
Õ
, 
∑øms_t
 *
∑r
)

141 if(
Õ
 =
NULL
) {Üp = "(null)"; }

142 
∑r
->
Àn
 = 
	`°æí
–
Õ
);

143 
	`∑ddög
–!(
∑r
->
À·_Êag
),Öar);

146 *
Õ
 && (
∑r
->
num2
)--)

147 
	`outbyã
–*
Õ
++);

152 
	`∑ddög
–
∑r
->
À·_Êag
,Öar);

153 
	}
}

161 
	$ouäum
–c⁄° 
n
, c⁄° 
ba£
, 
∑øms_t
 *
∑r
)

163 
ch¨±r
 
˝
;

164 
√g©ive
;

165 
outbuf
[32];

166 c⁄° 
digôs
[] = "0123456789ABCDEF";

167 
num
;

170 i‡(
ba£
 =10 && 
n
 < 0L) {

171 
√g©ive
 = 1;

172 
num
 = -(
n
);

175 
num
 = (
n
);

176 
√g©ive
 = 0;

180 
˝
 = 
outbuf
;

182 *
˝
++ = 
digôs
[()(
num
 % 
ba£
)];

183 } (
num
 /
ba£
) > 0);

184 i‡(
√g©ive
)

185 *
˝
++ = '-';

186 *
˝
-- = 0;

190 
∑r
->
Àn
 = 
	`°æí
(
outbuf
);

191 
	`∑ddög
–!(
∑r
->
À·_Êag
),Öar);

192 
˝
 >
outbuf
)

193 
	`outbyã
–*
˝
--);

194 
	`∑ddög
–
∑r
->
À·_Êag
,Öar);

195 
	}
}

202 
	$gënum
–
ch¨±r
* 
löï
)

204 
n
;

205 
ch¨±r
 
˝
;

207 
n
 = 0;

208 
˝
 = *
löï
;

209 
	`isdigô
(*
˝
))

210 
n
 =Ç*10 + ((*
˝
++) - '0');

211 *
löï
 = 
˝
;

212 (
n
);

213 
	}
}

230 
	$xû_¥ötf
–
FILE
 * 
fûe
, c⁄° 
ch¨±r
 
˘æ1
, ...)

232 
	`±hªad_muãx_lock
(&
__debug_muãx
);

234 
_xû_¥ötf_fûe
 = 
fûe
;

237 
l⁄g_Êag
;

238 
dŸ_Êag
;

240 
∑øms_t
 
∑r
;

242 
ch
;

243 
va_li°
 
¨gp
;

244 
ch¨±r
 
˘æ
 = 
˘æ1
;

246 
	`va_°¨t
–
¨gp
, 
˘æ1
);

249 if(
outbuf
 =
NULL
) {

250 
max_Àn
 = 512;

251 
outbuf
 = (*Ë
	`ˇŒoc
(
max_Àn
, ());

254 
	`¸ush_outbuf
();

256  ; *
˘æ
; ctrl++) {

260 i‡(*
˘æ
 != '%') {

261 
	`outbyã
(*
˘æ
);

266 
dŸ_Êag
 = 
l⁄g_Êag
 = 
∑r
.
À·_Êag
 =Ö¨.
do_∑ddög
 = 0;

267 
∑r
.
∑d_ch¨a˘î
 = ' ';

268 
∑r
.
num2
=32767;

270 
åy_√xt
:

271 
ch
 = *(++
˘æ
);

273 i‡(
	`isdigô
(
ch
)) {

274 i‡(
dŸ_Êag
)

275 
∑r
.
num2
 = 
	`gënum
(&
˘æ
);

277 i‡(
ch
 == '0')

278 
∑r
.
∑d_ch¨a˘î
 = '0';

280 
∑r
.
num1
 = 
	`gënum
(&
˘æ
);

281 
∑r
.
do_∑ddög
 = 1;

283 
˘æ
--;

284 
åy_√xt
;

287 
	`tﬁowî
(
ch
)) {

289 
	`outbyã
( '%');

293 
∑r
.
À·_Êag
 = 1;

297 
dŸ_Êag
 = 1;

301 
l⁄g_Êag
 = 1;

307 i‡(
l⁄g_Êag
 || 
ch
 == 'D') {

308 
	`ouäum
–
	`va_¨g
(
¨gp
, ), 10L, &
∑r
);

312 
	`ouäum
–
	`va_¨g
(
¨gp
, ), 10L, &
∑r
);

316 
	`outbyã
('0');

317 
	`outbyã
('x');

319 
	`ouäum
(()
	`va_¨g
(
¨gp
, ), 16L, &
∑r
);

323 
	`outs
–
	`va_¨g
–
¨gp
, 
ch¨±r
), &
∑r
);

327 
	`outbyã
–
	`va_¨g
–
¨gp
, ));

331 *
˘æ
) {

333 
	`outbyã
( 0x07);

336 
	`outbyã
( 0x08);

339 
	`outbyã
( 0x0D);

342 
	`outbyã
( 0x0D);

343 
	`outbyã
( 0x0A);

346 
	`outbyã
–*
˘æ
);

349 
˘æ
++;

356 
	`¥ötSåög
("Illegal format character: '");

357 
t
[2];

358 
t
[1] = 0;

359 
t
[0] = 
ch
;

360 
	`¥ötSåög
(
t
);

361 
	`¥ötSåög
("'. Good bye.\n");

362 
	`as£π
(0);

366 
åy_√xt
;

368 
	`va_íd
–
¨gp
);

370 
	`Êush_outbuf
();

372 
	`±hªad_muãx_u∆ock
(&
__debug_muãx
);

374 
	}
}

381 
	#MK_STR
(
x
Ë#x

	)

383 #i‚de‡
_NVP_PRINT_ERROR_NAME_FDEF_


384 
	#_NVP_PRINT_ERROR_NAME_FDEF_


	)

385 
	$_nvp_¥öt_îr‹_«me
(
î∫oö
)

387 
	`BOOST_PP_LIST_FOR_EACH
(
ERROR_IF_PRINT
, 
î∫oö
, 
ERROR_NAMES_LIST
)

388 
	}
}

	@perf_delay/add_delay.h

1 #i‚de‡
LEDGER_PERF_DELAY_ADD_DELAY_H_


2 
	#LEDGER_PERF_DELAY_ADD_DELAY_H


	)

7 
	~<f˙é.h
>

8 
	~<°rög.h
>

9 
	~<sys/mm™.h
>

10 
	~<sys/°©.h
>

12 
	~"utû.h
"

14 #ifde‡
__˝lu•lus


19 
	#_CPUFREQ
 3600LLU

	)

21 
	#NS2CYCLE
(
__ns
Ë(((__nsË* 
_CPUFREQ
Ë/ 1000)

	)

22 
	#CYCLE2NS
(
__cy˛es
Ë(((__cy˛esË* 1000Ë/ 
_CPUFREQ
)

	)

24 
	#BANDWIDTH_MONITOR_NS
 10000

	)

25 
	#SEC_TO_NS
(
x
Ë(x * 1000000000UL)

	)

27 
	#ENABLE_PERF_MODEL


	)

28 
	#ENABLE_BANDWIDTH_MODEL


	)

32 
uöt32_t
 
SCM_EXTRA_READ_LATENCY_NS
 = 150;

36 
uöt32_t
 
SCM_WBARRIER_LATENCY_NS
 = 0;

39 
uöt32_t
 
SCM_BANDWIDTH_MB
 = 8000;

41 
uöt32_t
 
DRAM_BANDWIDTH_MB
 = 63000;

43 
uöt64_t
 
b™dwidth_c⁄sum±i⁄
;

44 
uöt64_t
 
m⁄ô‹_°¨t
 = 0, 
m⁄ô‹_íd
 = 0, 
now
 = 0;

46 
±hªad_muãx_t
 
mlfs_nvm_muãx
;

48 
ölöe
 
PERSISTENT_BARRIER
()

50 
asm
 volatile ("sfence\n" : : );

55 
ölöe
 
emuœã_œãncy_ns
(
ns
)

57 
uöt64_t
 
cy˛es
, 
°¨t
, 
°›
;

59 
°¨t
 = 
asm_rdts˝
();

60 
cy˛es
 = 
NS2CYCLE
(
ns
);

70 
°›
 = 
asm_rdts˝
();

71 } 
°›
 - 
°¨t
 < 
cy˛es
);

75 
≥rfmodñ_add_dñay
(
ªad
, 
size_t
 
size
)

77 #ifde‡
ENABLE_PERF_MODEL


78 
uöt32_t
 
exåa_œãncy
;

81 #ifde‡
ENABLE_PERF_MODEL


82 i‡(
ªad
) {

83 
exåa_œãncy
 = 
SCM_EXTRA_READ_LATENCY_NS
;

85 #ifde‡
ENABLE_BANDWIDTH_MODEL


89 
exåa_œãncy
 = ()
size
 *

90 (1 - ()(((Ë
SCM_BANDWIDTH_MB
)/1000) /

91 ((()
DRAM_BANDWIDTH_MB
)/1000)Ë/ ((()
SCM_BANDWIDTH_MB
)/1000);

94 
exåa_œãncy
 = 0;

98 
emuœã_œãncy_ns
(
exåa_œãncy
);

104 
≥rfmodñ_add_dñay
(
ªad
, 
size_t
 
size
)

106 #ifde‡
ENABLE_PERF_MODEL


107 
uöt32_t
 
exåa_œãncy
;

108 
uöt32_t
 
do_b™dwidth_dñay
;

122 
now
 = 
asm_rdts˝
();

124 i‡(
now
 >
m⁄ô‹_íd
) {

125 
m⁄ô‹_°¨t
 = 
now
;

126 
m⁄ô‹_íd
 = 
m⁄ô‹_°¨t
 + 
NS2CYCLE
(
BANDWIDTH_MONITOR_NS
);

127 
b™dwidth_c⁄sum±i⁄
 = 0;

130 i‡(
__sync_add_™d_„tch
(&
b™dwidth_c⁄sum±i⁄
, 
size
) >=

131 ((
SCM_BANDWIDTH_MB
 << 20Ë/ (
SEC_TO_NS
(1ULË/ 
BANDWIDTH_MONITOR_NS
)))

132 
do_b™dwidth_dñay
 = 1;

134 
do_b™dwidth_dñay
 = 0;

136 i‡(
ªad
) {

137 
exåa_œãncy
 = 
SCM_EXTRA_READ_LATENCY_NS
;

139 
exåa_œãncy
 = 
SCM_WBARRIER_LATENCY_NS
;

142 i‡(
do_b™dwidth_dñay
) {

146 
exåa_œãncy
 +()
size
 *

147 (1 - ()(((Ë
SCM_BANDWIDTH_MB
)/1000) /

148 ((()
DRAM_BANDWIDTH_MB
)/1000)Ë/ ((()
SCM_BANDWIDTH_MB
)/1000);

149 
±hªad_muãx_lock
(&
mlfs_nvm_muãx
);

150 
emuœã_œãncy_ns
(
exåa_œãncy
);

151 
±hªad_muãx_u∆ock
(&
mlfs_nvm_muãx
);

153 
emuœã_œãncy_ns
(
exåa_œãncy
);

160 #ifde‡
__˝lu•lus


	@perf_delay/util.h

1 #i‚de‡
_UTIL_H_


2 
	#_UTIL_H_


	)

4 #ifde‡
__GNUC__


5 
	#TYPEOF
(
x
Ë(
	`__ty≥of__
(x))

	)

7 
	#TYPEOF
(
x
)

	)

10 #i‡
deföed
(
__i386__
)

12 
ölöe
 
	$asm_rdtsc
()

14 
x
;

15 
__asm__
 vﬁ©ûê(".byã 0x0f, 0x31" : "=A" (
x
));

16  
x
;

17 
	}
}

19 
ölöe
 
	$asm_rdts˝
()

21 
hi
, 
lo
;

22 
__asm__
 
	`__vﬁ©ûe__
 ("rdts˝" : "˜"(
lo
), "=d"(
hi
)::"ecx");

23  ( ()
lo
)|–(()
hi
)<<32 );

25 
	}
}

26 #ñi‡
deföed
(
__x86_64__
)

28 
ölöe
 
	$asm_rdtsc
()

30 
hi
, 
lo
;

31 
__asm__
 
	`__vﬁ©ûe__
 ("rdtsc" : "˜"(
lo
), "=d"(
hi
));

32  ( ()
lo
)|–(()
hi
)<<32 );

33 
	}
}

35 
ölöe
 
	$asm_rdts˝
()

37 
hi
, 
lo
;

38 
__asm__
 
	`__vﬁ©ûe__
 ("rdts˝" : "˜"(
lo
), "=d"(
hi
)::"rcx");

39  ( ()
lo
)|–(()
hi
)<<32 );

40 
	}
}

	@perfcount.h

1 #i‚de‡
PERF_COUNT_STATS_H


2 
	#PERF_COUNT_STATS_H


	)

4 
	#MAX_CPUS
 16

	)

6 
	~<°dio.h
>

7 
	~<°döt.h
>

9 
uöt64_t
 
	ttimög_t
;

11 
	#MY_ALIGNED
 
	`__©åibuã__
 ((
	`__Æig√d__
(256)))

	)

13 
	svm_timög_°©
 {

14 
timög_t
 
	mcou¡
;

15 
timög_t
 
	mtŸÆ_time
;

16 } 
	gMY_ALIGNED
;

18 
vm_timög_°©
 
	t°©_≥r_˝u
[
MAX_CPUS
];

20 
ölöe
 
timög_t
 
	$gëcy˛es
() {

21 
uöt32_t
 
lo
, 
hi
;

22 
__asm__
 
	`__vﬁ©ûe__
 (

26 
__asm__
 
	`__vﬁ©ûe__
 ("rdtsc" : "˜" (
lo
), "=d" (
hi
));

27  (
uöt64_t
)
hi
 << 32 | 
lo
;

28 
	}
}

30 
	#˝uid
(
func
,
ax
,
bx
,
cx
,
dx
)\

	)

31 
__asm__
 
__vﬁ©ûe__
 ("cpuid":\

32 "˜" (
ax
), "=b" (
bx
), "=c" (
cx
), "=d" (
dx
Ë: "a" (
func
));

34 
ölöe
 
	$gë_˝uid
() {

35 
uöt32_t
 
óx
=0;

36 
uöt32_t
 
ebx
=0;

37 
uöt32_t
 
ecx
=1;

38 
uöt32_t
 
edx
=0;

40 
	`˝uid
(0x0B, 
óx
,
ebx
,
ecx
,
edx
);

42 
id
 = (((
edx
&1)<<3) + ((edx>>4)&1) + (edx&0xe));

43  
id
;

44 
	}
}

46 
	#≥rf_˛ór_°©
(
s
Ë{ \

	)

47 
	gi
; \

48 
	gi
=0; i<
	gMAX_CPUS
; i++) { \

49 
	gs
[
i
].
	gcou¡
 = 0; \

50 
	gs
[
i
].
	gtŸÆ_time
 = 0; \

54 
ölöe
 
vm_timög_°©
 
	$≥rf_c⁄dí£_°©
(
°©_≥r_˝u
 
s
) {

55 
vm_timög_°©
 
ªsu…
;

56 
ªsu…
.
cou¡
 = 0;

57 
ªsu…
.
tŸÆ_time
 = 0;

58 
i
;

59 
i
=0; i<
MAX_CPUS
; i++) {

60 
ªsu…
.
cou¡
 +
s
[
i
].count;

61 
ªsu…
.
tŸÆ_time
 +
s
[
i
].total_time;

63  
ªsu…
;

64 
	}
}

67 
	#≥rf_°¨t_timög
 
gëcy˛es


	)

70 
	#≥rf_íd_timög
(
s
, 
°¨t_time
Ë{ \

	)

71 
timög_t
 
	gíd_time
 = 
gëcy˛es
(); \

72 
	g˝u
 = 
gë_˝uid
(); \

73 i‡–
	gíd_time
 > 
	g°¨t_time
 ) { \

74 
	gs
[
˝u
].
	gcou¡
++; \

75 
	gs
[
˝u
].
	gtŸÆ_time
 +
íd_time
 - 
°¨t_time
; \

81 
	#≥rf_ö¸emít_cou¡
(
s
Ës[
	`gë_˝uid
()].
cou¡
++

	)

83 
ölöe
 
	$≥rf_¥öt_°©
(
FILE
* 
fd
, 
°©_≥r_˝u
 
s
, c⁄° * 
«me
)

85 if(
«me
 == 0) {

86 
«me
 = "NO_NAME_GIVEN";

89 
vm_timög_°©
 
ªsu…
 = 
	`≥rf_c⁄dí£_°©
(
s
);

91 
cy˛es_≥r_cou¡
 = (()
ªsu…
.
tŸÆ_time
)/((Ïesu….
cou¡
);

93 
	`Ârötf
(
fd
, "FinishedÅiming \"%s\": %luÑesults in %lu cycles: "

95 
«me
, 
ªsu…
.
cou¡
,Ñesu….
tŸÆ_time
,

96 
cy˛es_≥r_cou¡
,

97 
cy˛es_≥r_cou¡
/2261L);

98 
	}
}

	@stack.c

1 
	~"°ack.h
"

3 
	$push_ö_°ack
(
‰ì_node_li°
, 
‰ì_Ãu_li°
, 
idx_ö_li°
, 
li°_idx
) {

5 i‡(
‰ì_Ãu_li°
)

6 
	`STACK_LOCK_WR
();

8 i‡(
‰ì_node_li°
) {

9 
_nvp_‰ì_node_li°
[
li°_idx
][
idx_ö_li°
].
‰ì_bô
 = 1;

10 
_nvp_‰ì_node_li°
[
li°_idx
][
idx_ö_li°
].
√xt_‰ì_idx
 = 
_nvp_‰ì_node_li°_hód
[list_idx];

11 
_nvp_‰ì_node_li°_hód
[
li°_idx
] = 
idx_ö_li°
;

12 } i‡(
‰ì_Ãu_li°
) {

13 
_nvp_‰ì_Ãu_li°
[
idx_ö_li°
].
‰ì_bô
 = 1;

14 
_nvp_‰ì_Ãu_li°
[
idx_ö_li°
].
√xt_‰ì_idx
 = 
_nvp_‰ì_Ãu_li°_hód
;

15 
_nvp_‰ì_Ãu_li°_hód
 = 
idx_ö_li°
;

17 i‡(
‰ì_Ãu_li°
)

18 
	`STACK_UNLOCK_WR
();

22 i‡(
‰ì_Ãu_li°
)

23 
	`STACK_UNLOCK_WR
();

24 
	}
}

27 
	$p›_‰om_°ack
(
‰ì_node_li°
, 
‰ì_Ãu_li°
, 
li°_idx
) {

29 
idx_ö_li°
 = -1;

30 
ˇndid©e
 = -1;

32 i‡(
‰ì_Ãu_li°
)

33 
	`STACK_LOCK_WR
();

35 i‡(
‰ì_node_li°
) {

36 
_nvp_‰ì_node_li°
[
li°_idx
][
_nvp_‰ì_node_li°_hód
[li°_idx]].
‰ì_bô
 != 1 && _nvp_free_node_list_head[list_idx] != -1) {

38 if(
ˇndid©e
 =-1 && 
_nvp_node_lookup
[
li°_idx
][
_nvp_‰ì_node_li°_hód
[li°_idx]].
ª„ªn˚
 == 0)

39 
ˇndid©e
 = 
_nvp_‰ì_node_li°_hód
[
li°_idx
];

41 
_nvp_‰ì_node_li°_hód
[
li°_idx
] = 
_nvp_‰ì_node_li°
[li°_idx][_nvp_‰ì_node_li°_hód[li°_idx]].
√xt_‰ì_idx
;

44 i‡(
_nvp_‰ì_node_li°_hód
[
li°_idx
] == -1)

45 
ˇndid©e_lookup
;

47 i‡(
_nvp_‰ì_node_li°
[
li°_idx
][
_nvp_‰ì_node_li°_hód
[li°_idx]].
‰ì_bô
 == 1) {

48 
idx_ö_li°
 = 
_nvp_‰ì_node_li°_hód
[
li°_idx
];

49 
_nvp_‰ì_node_li°
[
li°_idx
][
idx_ö_li°
].
‰ì_bô
 = 0;

50 
_nvp_‰ì_node_li°_hód
[
li°_idx
] = 
_nvp_‰ì_node_li°
[li°_idx][
idx_ö_li°
].
√xt_‰ì_idx
;

51 
out
;

54 } i‡(
‰ì_Ãu_li°
) {

55 
_nvp_‰ì_Ãu_li°
[
_nvp_‰ì_Ãu_li°_hód
].
‰ì_bô
 != 1 && _nvp_free_lru_list_head != -1)

56 
_nvp_‰ì_Ãu_li°_hód
 = 
_nvp_‰ì_Ãu_li°
[_nvp_‰ì_Ãu_li°_hód].
√xt_‰ì_idx
;

58 i‡(
_nvp_‰ì_Ãu_li°_hód
 == -1)

61 
idx_ö_li°
 = 
_nvp_‰ì_Ãu_li°_hód
;

62 
_nvp_‰ì_Ãu_li°
[
idx_ö_li°
].
‰ì_bô
 = 0;

63 
_nvp_‰ì_Ãu_li°_hód
 = 
_nvp_‰ì_Ãu_li°
[
idx_ö_li°
].
√xt_‰ì_idx
;

65 
out
;

68 
ˇndid©e_lookup
:

69 i‡(
ˇndid©e
 != -1) {

70 
_nvp_‰ì_node_li°
[
li°_idx
][
ˇndid©e
].
‰ì_bô
 = 0;

71 
_nvp_‰ì_node_li°_hód
[
li°_idx
] = 
_nvp_‰ì_node_li°
[li°_idx][
ˇndid©e
].
√xt_‰ì_idx
;

74 
idx_ö_li°
 = 
ˇndid©e
;

76 
out
:

77 i‡(
‰ì_Ãu_li°
)

78 
	`STACK_UNLOCK_WR
();

80  
idx_ö_li°
;

81 
	}
}

	@stack.h

1 #i‚de‡
LEDGER_SRC_STACK_H_


2 
	#LEDGER_SRC_STACK_H_


	)

4 
	~"fûe›s_nvp.h
"

9 
	sSèckNode
 {

10 
	m‰ì_bô
;

11 
	m√xt_‰ì_idx
;

14 
	s°ack_Ãu_lock‰ì
 {

15 
lfds711_°ack_ñemít
 
	m£_Ãu
;

21 
SèckNode
 *
	g_nvp_‰ì_node_li°
[
NUM_NODE_LISTS
];

22 
SèckNode
 *
	g_nvp_‰ì_Ãu_li°
;

23 
	g_nvp_‰ì_node_li°_hód
[
NUM_NODE_LISTS
];

24 
	g_nvp_‰ì_Ãu_li°_hód
;

25 
NVNode
 *
	g_nvp_node_lookup
[
NUM_NODE_LISTS
];

26 
backupRoŸs
 *
	g_nvp_backup_roŸs
[
NUM_NODE_LISTS
];

27 
±hªad_•ölock_t
 
	g°ack_lock
;

29 
push_ö_°ack
(
‰ì_node_li°
, 
‰ì_Ãu_li°
, 
idx_ö_li°
, 
li°_idx
);

30 
p›_‰om_°ack
(
‰ì_node_li°
, 
‰ì_Ãu_li°
, 
li°_idx
);

	@storage.h

1 #i‚de‡
_STORAGE_H_


2 
	#_STORAGE_H_


	)

4 
	~"globÆ/globÆ.h
"

5 
	~"•dk/sync.h
"

9 
	s°‹age_›î©i⁄s


11 
	muöt8_t
 *(*
	möô
)(
uöt8_t
 
	mdev
, *
	mdev_∑th
);

12 (*
	mªad
)(
uöt8_t
 
	mdev
, uöt8_à*
	mbuf
, 
addr_t
 
	mblockno
, 
uöt32_t
 
	mio_size
);

13 (*
	mªad_u«lig√d
)(
uöt8_t
 
	mdev
, uöt8_à*
	mbuf
, 
addr_t
 
	mblockno
, 
uöt32_t
 
	moff£t
,

14 
uöt32_t
 
	mio_size
);

15 (*
	mwrôe
)(
uöt8_t
 
	mdev
, uöt8_à*
	mbuf
, 
addr_t
 
	mblockno
, 
uöt32_t
 
	mio_size
);

16 (*
	mwrôe_u«lig√d
)(
uöt8_t
 
	mdev
, uöt8_à*
	mbuf
, 
addr_t
 
	mblockno
, 
uöt32_t
 
	moff£t
,

17 
uöt32_t
 
	mio_size
);

18 (*
	mîa£
)(
uöt8_t
 
	mdev
, 
addr_t
 
	mblockno
, 
uöt32_t
 
	mio_size
);

19 (*
	mcommô
)(
uöt8_t
 
	mdev
);

20 (*
	mwaô_io
)(
uöt8_t
 
	mdev
, 
	mi§ód
);

21 (*
	mªadahód
)(
uöt8_t
 
	mdev
, 
addr_t
 
	mblockno
, 
uöt32_t
 
	mio_size
);

22 (*
	mexô
)(
uöt8_t
 
	mdev
);

25 #ifde‡
__˝lu•lus


40 
uöt64_t
 
dev_size
[
g_n_devi˚s
 + 1] = {0, 21474836480UL, 128849018880UL, 193273528320UL, 2147483648UL};

42 
°‹age_›î©i⁄s
 
°‹age_dax
;

43 
°‹age_›î©i⁄s
 
°‹age_•dk
;

44 
°‹age_›î©i⁄s
 
°‹age_hdd
;

47 
uöt8_t
 *
ømdisk_öô
(uöt8_à
dev
, *
dev_∑th
);

48 
ømdisk_ªad
(
uöt8_t
 
dev
, uöt8_à*
buf
, 
addr_t
 
blockno
, 
uöt32_t
 
io_size
);

49 
ømdisk_wrôe
(
uöt8_t
 
dev
, uöt8_à*
buf
, 
addr_t
 
blockno
, 
uöt32_t
 
io_size
);

50 
ømdisk_îa£
(
uöt8_t
 
dev
, 
uöt32_t
 
blockno
, 
addr_t
 
io_size
);

51 
ømdisk_exô
(
uöt8_t
 
dev
);

54 
uöt8_t
 *
pmem_öô
(uöt8_à
dev
, *
dev_∑th
);

55 
pmem_ªad
(
uöt8_t
 
dev
, uöt8_à*
buf
, 
addr_t
 
blockno
, 
uöt32_t
 
io_size
);

56 
pmem_wrôe
(
uöt8_t
 
dev
, uöt8_à*
buf
, 
addr_t
 
blockno
, 
uöt32_t
 
io_size
);

57 
pmem_wrôe_u«lig√d
(
uöt8_t
 
dev
, uöt8_à*
buf
, 
addr_t
 
blockno
, 
uöt32_t
 
off£t
,

58 
uöt32_t
 
io_size
);

59 
pmem_îa£
(
uöt8_t
 
dev
, 
addr_t
 
blockno
, 
uöt32_t
 
io_size
);

60 
pmem_exô
(
uöt8_t
 
dev
);

63 
uöt8_t
 *
dax_öô
(uöt8_à
dev
, *
dev_∑th
);

64 
dax_ªad
(
uöt8_t
 
dev
, uöt8_à*
buf
, 
addr_t
 
blockno
, 
uöt32_t
 
io_size
);

65 
dax_ªad_u«lig√d
(
uöt8_t
 
dev
, uöt8_à*
buf
, 
addr_t
 
blockno
, 
uöt32_t
 
off£t
,

66 
uöt32_t
 
io_size
);

67 
dax_wrôe
(
uöt8_t
 
dev
, uöt8_à*
buf
, 
addr_t
 
blockno
, 
uöt32_t
 
io_size
);

68 
dax_wrôe_u«lig√d
(
uöt8_t
 
dev
, uöt8_à*
buf
, 
addr_t
 
blockno
, 
uöt32_t
 
off£t
,

69 
uöt32_t
 
io_size
);

70 
dax_îa£
(
uöt8_t
 
dev
, 
addr_t
 
blockno
, 
uöt32_t
 
io_size
);

71 
dax_commô
(
uöt8_t
 
dev
);

72 
dax_exô
(
uöt8_t
 
dev
);

75 
uöt8_t
 *
•dk_öô
(uöt8_à
dev
, *
dev_∑th
);

76 
•dk_ªad
(
uöt8_t
 
dev
, uöt8_à*
buf
, 
addr_t
 
blockno
, 
uöt32_t
 
io_size
);

77 
•dk_wrôe
(
uöt8_t
 
dev
, uöt8_à*
buf
, 
addr_t
 
blockno
, 
uöt32_t
 
io_size
);

78 
•dk_îa£
(
uöt8_t
 
dev
, 
addr_t
 
blockno
, 
uöt32_t
 
io_size
);

79 
•dk_waô_io
(
uöt8_t
 
dev
, 
i§ód
);

80 
•dk_ªadahód
(
uöt8_t
 
dev
, 
addr_t
 
blockno
, 
uöt32_t
 
io_size
);

81 
•dk_exô
(
uöt8_t
 
dev
);

84 
uöt8_t
 *
hdd_öô
(uöt8_à
dev
, *
dev_∑th
);

85 
hdd_ªad
(
uöt8_t
 
dev
, uöt8_à*
buf
, 
addr_t
 
blockno
, 
uöt32_t
 
io_size
);

86 
hdd_wrôe
(
uöt8_t
 
dev
, uöt8_à*
buf
, 
addr_t
 
blockno
, 
uöt32_t
 
io_size
);

87 
hdd_commô
(
uöt8_t
 
dev
);

88 
hdd_îa£
(
uöt8_t
 
dev
, 
addr_t
 
blockno
, 
uöt32_t
 
io_size
);

89 
hdd_waô_io
(
uöt8_t
 
dev
);

90 
hdd_ªadahód
(
uöt8_t
 
dev
, 
addr_t
 
blockno
, 
uöt32_t
 
io_size
);

91 
hdd_exô
(
uöt8_t
 
dev
);

93 
uöt64_t
 *
b™dwidth_c⁄sum±i⁄
;

95 #ifde‡
__˝lu•lus


	@thread_handle.h

1 #i‚de‡
__NV_THREAD_HANDLER_H_


2 
	#__NV_THREAD_HANDLER_H_


	)

4 
	~<±hªad.h
>

5 
	~<°d©omic.h
>

6 
	~"fûe›s_nvp.h
"

7 
	~"Ãu_ˇche.h
"

8 
	~"timîs.h
"

10 
±hªad_t
 
	gbgthªad
;

11 
±hªad_c⁄d_t
 
	gbgsig«l
;

12 
±hªad_muãx_t
 
	gmu
;

19 
uöt64_t
 
	glim_™⁄_mem_˛o£d
;

20 
uöt64_t
 
	glim_num_fûes
;

21 
uöt64_t
 
	glim_™⁄_mem
;

22 
	grun_background_thªad
;

23 
	g°¨ãd_bgthªad
;

24 
	gexô_bgthªad
;

25 
	gˇŒedBgThªad
;

26 
	gwaôög_f‹_sig«l
;

27 
	g˛ónup
;

29 
±hªad_•ölock_t
 
	gglobÆ_lock_˛o£d_fûes
;

30 
±hªad_•ölock_t
 
	gglobÆ_lock
;

32 
	$bgClo£Fûes
(
maö_thªad
) {

34 
ö°rumíèti⁄_ty≥
 
˛f_lock_time
, 
bg_thªad_time
;

35 
˛o£d_fûedesc
 = -1;

36 
öo_t
 
˛o£d_£rü o
 = 0;

37 #i‡
SEQ_LIST
 || 
RAND_LIST


38 
Clo£dFûes
 *
˛f
 = 
NULL
;

39 
i
=0;

41 
InodeClo£dFûe
 *
tbl
 = 
NULL
;

42 
hash_ödex
 = -1;

45 
	`START_TIMING
(
bg_thªad_t
, 
bg_thªad_time
);

47 
	`GLOBAL_LOCK_CLOSE_WR
();

49 #i‡
SEQ_LIST


50 
i
 = 0; i < 1024; i++) {

51 i‡(!
num_fûes_˛o£d
)

54 
˛f
 = &
_nvp_˛o£d_fûes
[
i
];

55 
	`LRU_NODE_LOCK_WR
(
˛f
);

57 
˛o£d_fûedesc
 = 
	`ªmove_‰om_£q_li°
(
˛f
, &
˛o£d_£rü o
);

58 i‡(!
	`_nvp_REAL_CLOSE
(
˛o£d_fûedesc
, 
˛o£d_£rü o
, 1)) {

59 
	`__©omic_„tch_sub
(&
num_fûes_˛o£d
, 1, 
__ATOMIC_SEQ_CST
);

62 
	`LRU_NODE_UNLOCK_WR
(
˛f
);

65 #ñi‡
RAND_LIST


66 
num_fûes_˛o£d
) {

67 i‡(
™⁄_mem_˛o£d_fûes
 <(500*1024*1024Ë&& !
˛ónup
) {

69 
ASYNC_CLOSING
 = 1;

72 
i
 = 
	`ønd
(Ë% 
TOTAL_CLOSED_INODES
;

73 
˛f
 = &
_nvp_˛o£d_fûes
[
i
];

75 i‡(
˛f
->
fd
 == -1)

78 #i‡
PRINT_CONTENTION_MSGS


79 
	`¥ötf
("%s:ácquúögÜock f‹ cl‡íåy = %d\n", 
__func__
, 
i
);

80 
	`fÊush
(
NULL
);

82 
	`START_TIMING
(
˛f_lock_t
, 
˛f_lock_time
);

83 
	`LRU_NODE_LOCK_WR
(
˛f
);

84 
	`END_TIMING
(
˛f_lock_t
, 
˛f_lock_time
);

86 
˛o£d_fûedesc
 = 
	`ªmove_‰om_£q_li°
(
˛f
, &
˛o£d_£rü o
);

88 i‡(!
	`_nvp_REAL_CLOSE
(
˛o£d_fûedesc
, 
˛o£d_£rü o
, 1)) {

89 
	`__©omic_„tch_sub
(&
num_fûes_˛o£d
, 1, 
__ATOMIC_SEQ_CST
);

90 i‡(!
maö_thªad
)

91 
num_async_˛o£
++;

94 #i‡
PRINT_CONTENTION_MSGS


95 
	`¥ötf
("%s:ÑñósögÜock f‹ cl‡íåy = %d\n", 
__func__
, 
i
);

96 
	`fÊush
(
NULL
);

98 
	`LRU_NODE_UNLOCK_WR
(
˛f
);

101 
num_fûes_˛o£d
) {

102 
hash_ödex
 = 
Ãu_èû_£rü o
 % 1024;

103 
tbl
 = &
öode_to_˛o£d_fûe
[
hash_ödex
];

104 
	`NVP_LOCK_HASH_TABLE_WR
(
tbl
);

106 i‡(
Ãu_èû_£rü o
 =0 || 
tbl
->
ödex
 == -1) {

107 
	`NVP_UNLOCK_HASH_TABLE_WR
(
tbl
);

111 i‡(
™⁄_mem_˛o£d_fûes
 <(500*1024*1024Ë&& !
˛ónup
) {

112 
	`NVP_UNLOCK_HASH_TABLE_WR
(
tbl
);

116 
˛o£d_fûedesc
 = 
	`ªmove_‰om_Ãu_li°_pﬁicy
(&
˛o£d_£rü o
);

118 i‡(!
	`_nvp_REAL_CLOSE
(
˛o£d_fûedesc
, 
˛o£d_£rü o
, 1)) {

119 
	`__©omic_„tch_sub
(&
num_fûes_˛o£d
, 1, 
__ATOMIC_SEQ_CST
);

122 
	`NVP_UNLOCK_HASH_TABLE_WR
(
tbl
);

127 
	`GLOBAL_UNLOCK_CLOSE_WR
();

129 
	`END_TIMING
(
bg_thªad_t
, 
bg_thªad_time
);

131 
run_background_thªad
 = 0;

132 
	}
}

134 *
	$bgThªadWøµî
() {

136 
°¨t
:

137 
	`±hªad_muãx_lock
(&
mu
);

139 
waôög_f‹_sig«l
 = 1;

140 !
run_background_thªad
) {

141 
	`±hªad_c⁄d_waô
(&
bgsig«l
, &
mu
);

144 
waôög_f‹_sig«l
 = 0;

146 
	`±hªad_muãx_u∆ock
(&
mu
);

148 
	`bgClo£Fûes
(0);

150 if(!
exô_bgthªad
)

151 
°¨t
;

153 
°¨ãd_bgthªad
 = 0;

155  
NULL
;

156 
	}
}

158 
	$a˘iv©eBgThªad
() {

160 
	`±hªad_muãx_lock
(&
mu
);

162 
run_background_thªad
 = 1;

163 
	`±hªad_c⁄d_sig«l
(&
bgsig«l
);

165 
	`±hªad_muãx_u∆ock
(&
mu
);

168 
	}
}

170 
	$°¨tBgThªad
() {

172 i‡(!
°¨ãd_bgthªad
) {

173 
°¨ãd_bgthªad
 = 1;

174 
	`±hªad_¸óã
(&
bgthªad
, 
NULL
, &
bgThªadWøµî
, NULL);

176 
	}
}

178 
	$waôF‹BgThªad
() {

179 if(
°¨ãd_bgthªad
) {

180 
	`±hªad_joö
(
bgthªad
, 
NULL
);

182 
	}
}

184 
	$ˇn˚lBgThªad
() {

185 if(
°¨ãd_bgthªad
) {

186 
	`±hªad_ˇn˚l
(
bgthªad
);

187 
	`±hªad_ã°ˇn˚l
();

189 
	}
}

191 
	$öôEnvF‹Bg
() {

192 
	`±hªad_c⁄d_öô
(&
bgsig«l
, 
NULL
);

193 
	`±hªad_muãx_öô
(&
mu
, 
NULL
);

194 
	}
}

196 
	$checkAndA˘iv©eBgThªad
() {

198 if(
run_background_thªad
)

202 if(
™⁄_mem_˛o£d_fûes
 > 
lim_™⁄_mem_˛o£d
 || 
num_fûes_˛o£d
 > 
lim_num_fûes
 || 
˛ónup
) {

203 
ˇŒedBgThªad
++;

204 
	`a˘iv©eBgThªad
();

207 
	}
}

	@timers.h

1 #i‚de‡
_LEDGER_TIMERS_H_


2 
	#_LEDGER_TIMERS_H_


	)

4 
	~<sys/time.h
>

5 
	~<°rög.h
>

6 
	~<time.h
>

7 
	~<°d©omic.h
>

8 
	~"debug.h
"

10 
	eö°rumíèti⁄_v¨s
 {

11 
	m›í_t
,

12 
	m˛o£_t
,

13 
	m¥ód_t
,

14 
	mpwrôe_t
,

15 
	mªad_t
,

16 
	mwrôe_t
,

17 
	mwrôe_sysˇŒ_t
,

18 
	mnvp_do_pwrôe_t
,

19 
	mnvp_do_pwrôe_°¨t_t
,

20 
	mnvp_do_pwrôe_ovîwrôe_t
,

21 
	mnvp_do_pwrôe_≠≥nd_t
,

22 
	mnvp_do_pwrôe_lo›_t
,

23 
	m£ek_t
,

24 
	mfsync_t
,

25 
	mu∆ök_t
,

26 
	mbg_thªad_t
,

27 
	m˛f_lock_t
,

28 
	mnode_lookup_lock_t
,

29 
	mnvnode_lock_t
,

30 
	m™⁄_mem_queue_t
,

31 
	mgë_m≠_t
,

32 
	mc›y_d©a_t
,

33 
	m˛o£_sysˇŒ_t
,

34 
	mc›y_to_™⁄_poﬁ_t
,

35 
	mc›y_to_mm≠_ˇche_t
,

36 
	mgive_up_node_t
,

37 
	mINSTRUMENT_NUM
,

40 
©omic_uöt_Àa°64_t
 
	gIn°ru°©s
[
INSTRUMENT_NUM
];

41 c⁄° *
	gIn°ru¥öt
[
INSTRUMENT_NUM
] =

72 
time•ec
 
	tö°rumíèti⁄_ty≥
;

74 
	#INSTRUMENT_CALLS
 1

	)

77 
	#INITIALIZE_TIMERS
() \

79 
i
; \

80 
i
 = 0; i < 
INSTRUMENT_NUM
; i++) \

81 
In°ru°©s
[
i
] = 0; \

83 

	)

84 #i‡
INSTRUMENT_CALLS


86 
	#START_TIMING
(
«me
, 
°¨t
) \

88 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
°¨t
); \

89 }

	)

91 
	#END_TIMING
(
«me
, 
°¨t
) \

93 
ö°rumíèti⁄_ty≥
 
íd
; \

94 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
íd
); \

95 
	`__©omic_„tch_add
(&
In°ru°©s
[
«me
], (
íd
.
tv_£c
 - 
°¨t
.tv_£cË* 1000000000 + (íd.
tv_n£c
 - sèπ.tv_n£c), 
__ATOMIC_SEQ_CST
); \

96 }

	)

98 
	#PRINT_TIME
() \

100 
i
; \

101 
	`RESULT_FILE
("====================== NVP TIMING stats: ======================\n"); \

102 
i
=0; i<
INSTRUMENT_NUM
; i++) { \

103 i‡(
In°ru°©s
[
i
] != 0) { \

104 
	`MSG
("%s:Åiming = %luÇanoseconds\n", \

105 
In°ru¥öt
[
i
], 
In°ru°©s
[i]); \

106 
	`RESULT_FILE
("%s:Åiming = %luÇanoseconds\n", \

107 
In°ru¥öt
[
i
], 
In°ru°©s
[i]); \

110 }

	)

115 
	#START_TIMING
(
«me
, 
°¨t
Ë{()(°¨t);}

	)

116 
	#END_TIMING
(
«me
, 
°¨t
Ë{()(°¨t);}

	)

117 
	#PRINT_TIME
(Ë{()(
In°ru°©s
[0]);}

	)

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


119 #unde‡
°©ic_as£π


120 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/boost/preprocessor/list/for_each.hpp

1 #/* 
C›yright
 (
C
) 2001

2 #* 
Hou£m¨que
 
Oy


3 #* 
hâp
:

5 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


6 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


7 #* 
hâp
:

9 #
#/* 
Revi£d
 
by
 
Paul
 
Mís⁄ides
 (2002) */

11 #
#/* 
Sì
 
hâp
:

13 #
#i‚de‡
BOOST_PREPROCESSOR_LIST_FOR_EACH_HPP


15 
	#BOOST_PREPROCESSOR_LIST_FOR_EACH_HPP


	)

16 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

18 
	~<boo°/¥ïro˚ss‹/li°/f‹_óch_i.hµ
>

19 
	~<boo°/¥ïro˚ss‹/tu∂e/ñem.hµ
>

20 
	~<boo°/¥ïro˚ss‹/tu∂e/ªm.hµ
>

21 #
#/* 
BOOST_PP_LIST_FOR_EACH
 */

23 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_EDG
()

25 
	#BOOST_PP_LIST_FOR_EACH
(
ma¸o
, 
d©a
, 
li°
Ë
	`BOOST_PP_LIST_FOR_EACH_I
(
BOOST_PP_LIST_FOR_EACH_O
, (ma¸o, d©a),Üi°)

	)

27 
	#BOOST_PP_LIST_FOR_EACH
(
ma¸o
, 
d©a
, 
li°
Ë
	`BOOST_PP_LIST_FOR_EACH_X
(ma¸o, d©a,Üi°)

	)

28 
	#BOOST_PP_LIST_FOR_EACH_X
(
ma¸o
, 
d©a
, 
li°
Ë
	`BOOST_PP_LIST_FOR_EACH_I
(
BOOST_PP_LIST_FOR_EACH_O
, (ma¸o, d©a),Üi°)

	)

30 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_EDG
()

32 
	#BOOST_PP_LIST_FOR_EACH_O
(
r
, 
md
, 
i
, 
ñem
Ë
	`BOOST_PP_LIST_FOR_EACH_O_D
‘, 
	`BOOST_PP_TUPLE_ELEM
(2, 0, md), BOOST_PP_TUPLE_ELEM(2, 1, md),ÉÀm)

	)

34 
	#BOOST_PP_LIST_FOR_EACH_O
(
r
, 
md
, 
i
, 
ñem
Ë
	`BOOST_PP_LIST_FOR_EACH_O_I
‘, 
BOOST_PP_TUPLE_REM_2
 md,ÉÀm)

	)

35 
	#BOOST_PP_LIST_FOR_EACH_O_I
(
r
, 
im
, 
ñem
Ë
	`BOOST_PP_LIST_FOR_EACH_O_D
‘, im,ÉÀm)

	)

37 
#deföê
	#BOOST_PP_LIST_FOR_EACH_O_D
(
r
, 
m
, 
d
, 
ñem
Ë
	`m
‘, d,ÉÀm)

	)

39 #
#/* 
BOOST_PP_LIST_FOR_EACH_R
 */

41 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_EDG
()

43 
	#BOOST_PP_LIST_FOR_EACH_R
(
r
, 
ma¸o
, 
d©a
, 
li°
Ë
	`BOOST_PP_LIST_FOR_EACH_I_R
‘, 
BOOST_PP_LIST_FOR_EACH_O
, (ma¸o, d©a),Üi°)

	)

45 
	#BOOST_PP_LIST_FOR_EACH_R
(
r
, 
ma¸o
, 
d©a
, 
li°
Ë
	`BOOST_PP_LIST_FOR_EACH_R_X
‘, ma¸o, d©a,Üi°)

	)

46 
	#BOOST_PP_LIST_FOR_EACH_R_X
(
r
, 
ma¸o
, 
d©a
, 
li°
Ë
	`BOOST_PP_LIST_FOR_EACH_I_R
‘, 
BOOST_PP_LIST_FOR_EACH_O
, (ma¸o, d©a),Üi°)

	)

	@/usr/include/boost/preprocessor/seq/for_each.hpp

3 #* (
C
Ë
C›yright
 
Paul
 
Mís⁄ides
 2002.

4 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


5 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


6 #* 
hâp
:

9 #
#/* 
Sì
 
hâp
:

11 #
#i‚de‡
BOOST_PREPROCESSOR_SEQ_FOR_EACH_HPP


13 
	#BOOST_PREPROCESSOR_SEQ_FOR_EACH_HPP


	)

14 
#ö˛udê
	~<boo°/¥ïro˚ss‹/¨ôhmëic/dec.hµ
>

16 
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

17 
	~<boo°/¥ïro˚ss‹/ª≥tôi⁄/f‹.hµ
>

18 
	~<boo°/¥ïro˚ss‹/£q/£q.hµ
>

19 
	~<boo°/¥ïro˚ss‹/£q/size.hµ
>

20 
	~<boo°/¥ïro˚ss‹/tu∂e/ñem.hµ
>

21 
	~<boo°/¥ïro˚ss‹/tu∂e/ªm.hµ
>

22 #
#/* 
BOOST_PP_SEQ_FOR_EACH
 */

24 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_EDG
()

26 
	#BOOST_PP_SEQ_FOR_EACH
(
ma¸o
, 
d©a
, 
£q
Ë
	`BOOST_PP_FOR
((ma¸o, d©a, 
	`£q
 (
nû
)), 
BOOST_PP_SEQ_FOR_EACH_P
, 
BOOST_PP_SEQ_FOR_EACH_O
, 
BOOST_PP_SEQ_FOR_EACH_M
)

	)

28 
	#BOOST_PP_SEQ_FOR_EACH
(
ma¸o
, 
d©a
, 
£q
Ë
	`BOOST_PP_SEQ_FOR_EACH_D
(ma¸o, d©a, seq)

	)

29 
	#BOOST_PP_SEQ_FOR_EACH_D
(
ma¸o
, 
d©a
, 
£q
Ë
	`BOOST_PP_FOR
((ma¸o, d©a, 
	`£q
 (
nû
)), 
BOOST_PP_SEQ_FOR_EACH_P
, 
BOOST_PP_SEQ_FOR_EACH_O
, 
BOOST_PP_SEQ_FOR_EACH_M
)

	)

31 
#deföê
	#BOOST_PP_SEQ_FOR_EACH_P
(
r
, 
x
Ë
	`BOOST_PP_DEC
(
	`BOOST_PP_SEQ_SIZE
(
	`BOOST_PP_TUPLE_ELEM
(3, 2, x)))

	)

33 #
#i‡
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_STRICT
()

35 
	#BOOST_PP_SEQ_FOR_EACH_O
(
r
, 
x
Ë
BOOST_PP_SEQ_FOR_EACH_O_I
 
	)
x

37 
	#BOOST_PP_SEQ_FOR_EACH_O
(
r
, 
x
Ë
	`BOOST_PP_SEQ_FOR_EACH_O_I
(
	`BOOST_PP_TUPLE_ELEM
(3, 0, x), BOOST_PP_TUPLE_ELEM(3, 1, x), BOOST_PP_TUPLE_ELEM(3, 2, x))

	)

39 
#deföê
	#BOOST_PP_SEQ_FOR_EACH_O_I
(
ma¸o
, 
d©a
, 
£q
Ë(ma¸o, d©a, 
	`BOOST_PP_SEQ_TAIL
(£q))

	)

41 #
#i‡
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_STRICT
()

43 
	#BOOST_PP_SEQ_FOR_EACH_M
(
r
, 
x
Ë
	`BOOST_PP_SEQ_FOR_EACH_M_IM
‘, 
BOOST_PP_TUPLE_REM_3
 x)

	)

44 
	#BOOST_PP_SEQ_FOR_EACH_M_IM
(
r
, 
im
Ë
	`BOOST_PP_SEQ_FOR_EACH_M_I
‘, im)

	)

46 
	#BOOST_PP_SEQ_FOR_EACH_M
(
r
, 
x
Ë
	`BOOST_PP_SEQ_FOR_EACH_M_I
‘, 
	`BOOST_PP_TUPLE_ELEM
(3, 0, x), BOOST_PP_TUPLE_ELEM(3, 1, x), BOOST_PP_TUPLE_ELEM(3, 2, x))

	)

48 
#deföê
	#BOOST_PP_SEQ_FOR_EACH_M_I
(
r
, 
ma¸o
, 
d©a
, 
£q
Ë
	`ma¸o
‘, d©a, 
	`BOOST_PP_SEQ_HEAD
(£q))

	)

50 #
#/* 
BOOST_PP_SEQ_FOR_EACH_R
 */

52 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_EDG
()

54 
	#BOOST_PP_SEQ_FOR_EACH_R
(
r
, 
ma¸o
, 
d©a
, 
£q
Ë
BOOST_PP_FOR_
 ## 
	`r
((ma¸o, d©a, 
	`£q
 (
nû
)), 
BOOST_PP_SEQ_FOR_EACH_P
, 
BOOST_PP_SEQ_FOR_EACH_O
, 
BOOST_PP_SEQ_FOR_EACH_M
)

	)

56 
	#BOOST_PP_SEQ_FOR_EACH_R
(
r
, 
ma¸o
, 
d©a
, 
£q
Ë
	`BOOST_PP_SEQ_FOR_EACH_R_I
‘, ma¸o, d©a, seq)

	)

57 
	#BOOST_PP_SEQ_FOR_EACH_R_I
(
r
, 
ma¸o
, 
d©a
, 
£q
Ë
BOOST_PP_FOR_
 ## 
	`r
((ma¸o, d©a, 
	`£q
 (
nû
)), 
BOOST_PP_SEQ_FOR_EACH_P
, 
BOOST_PP_SEQ_FOR_EACH_O
, 
BOOST_PP_SEQ_FOR_EACH_M
)

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/dlfcn.h

19 #i‚def 
_DLFCN_H


20 
	#_DLFCN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<bôs/dlf˙.h
>

30 #ifde‡
__USE_GNU


35 
	#RTLD_NEXT
 ((*Ë-1l)

	)

40 
	#RTLD_DEFAULT
 ((*Ë0)

	)

44 
	tLmid_t
;

47 
	#LM_ID_BASE
 0

	)

48 
	#LM_ID_NEWLM
 -1

	)

52 
__BEGIN_DECLS


56 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

60 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

64 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

65 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

67 #ifde‡
__USE_GNU


69 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

73 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

74 c⁄° *
__ª°ri˘
 
__«me
,

75 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

76 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

82 *
	$dÀº‹
 (Ë
__THROW
;

85 #ifde‡
__USE_GNU


90 c⁄° *
dli_‚ame
;

91 *
dli_fba£
;

92 c⁄° *
dli_¢ame
;

93 *
dli_ßddr
;

94 } 
	tDl_öfo
;

98 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

99 
__THROW
 
	`__n⁄nuŒ
 ((2));

102 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

103 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

111 
RTLD_DL_SYMENT
 = 1,

114 
RTLD_DL_LINKMAP
 = 2

123 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

124 
__ªque°
, *
__ª°ri˘
 
__¨g
)

125 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

131 
RTLD_DI_LMID
 = 1,

135 
RTLD_DI_LINKMAP
 = 2,

137 
RTLD_DI_CONFIGADDR
 = 3,

144 
RTLD_DI_SERINFO
 = 4,

145 
RTLD_DI_SERINFOSIZE
 = 5,

149 
RTLD_DI_ORIGIN
 = 6,

151 
RTLD_DI_PROFILENAME
 = 7,

152 
RTLD_DI_PROFILEOUT
 = 8,

157 
RTLD_DI_TLS_MODID
 = 9,

163 
RTLD_DI_TLS_DATA
 = 10,

165 
RTLD_DI_MAX
 = 10

173 *
dls_«me
;

174 
dls_Êags
;

175 } 
	tDl_£Ω©h
;

181 
size_t
 
dls_size
;

182 
dls_˙t
;

183 
Dl_£Ω©h
 
dls_£Ω©h
[1];

184 } 
	tDl_£röfo
;

188 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

77 
	~<bôs/°©.h
>

79 
	#S_IFMT
 
__S_IFMT


	)

80 
	#S_IFDIR
 
__S_IFDIR


	)

81 
	#S_IFCHR
 
__S_IFCHR


	)

82 
	#S_IFBLK
 
__S_IFBLK


	)

83 
	#S_IFREG
 
__S_IFREG


	)

84 #ifde‡
__S_IFIFO


85 
	#S_IFIFO
 
__S_IFIFO


	)

87 #ifde‡
__S_IFLNK


88 
	#S_IFLNK
 
__S_IFLNK


	)

90 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


91 
	#S_IFSOCK
 
__S_IFSOCK


	)

96 
	#S_ISUID
 
__S_ISUID


	)

97 
	#S_ISGID
 
__S_ISGID


	)

99 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


101 
	#S_ISVTX
 
__S_ISVTX


	)

104 
	#S_IRUSR
 
__S_IREAD


	)

105 
	#S_IWUSR
 
__S_IWRITE


	)

106 
	#S_IXUSR
 
__S_IEXEC


	)

108 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

110 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

111 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

112 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

114 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

116 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

117 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

118 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

120 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

123 #ifdef 
__USE_MISC


124 #i‚de‡
R_OK


127 
	#R_OK
 4

	)

128 
	#W_OK
 2

	)

129 
	#X_OK
 1

	)

130 
	#F_OK
 0

	)

135 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


136 
	#SEEK_SET
 0

	)

137 
	#SEEK_CUR
 1

	)

138 
	#SEEK_END
 2

	)

146 
f˙é
 (
__fd
, 
__cmd
, ...);

155 #i‚de‡
__USE_FILE_OFFSET64


156 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

158 #ifde‡
__REDIRECT


159 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

160 
	`__n⁄nuŒ
 ((1));

162 
	#›í
 
›í64


	)

165 #ifde‡
__USE_LARGEFILE64


166 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

169 #ifde‡
__USE_ATFILE


179 #i‚de‡
__USE_FILE_OFFSET64


180 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

181 
	`__n⁄nuŒ
 ((2));

183 #ifde‡
__REDIRECT


184 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

185 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

187 
	#›í©
 
›í©64


	)

190 #ifde‡
__USE_LARGEFILE64


191 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

192 
	`__n⁄nuŒ
 ((2));

201 #i‚de‡
__USE_FILE_OFFSET64


202 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

204 #ifde‡
__REDIRECT


205 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

206 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

208 
	#¸ót
 
¸ót64


	)

211 #ifde‡
__USE_LARGEFILE64


212 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

215 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

216 && !
deföed
 
__USE_POSIX
))

225 
	#F_ULOCK
 0

	)

226 
	#F_LOCK
 1

	)

227 
	#F_TLOCK
 2

	)

228 
	#F_TEST
 3

	)

230 #i‚de‡
__USE_FILE_OFFSET64


231 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

233 #ifde‡
__REDIRECT


234 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

236 
	#lockf
 
lockf64


	)

239 #ifde‡
__USE_LARGEFILE64


240 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

244 #ifde‡
__USE_XOPEN2K


247 #i‚de‡
__USE_FILE_OFFSET64


248 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

249 
__advi£
Ë
__THROW
;

251 #ifde‡
__REDIRECT_NTH


252 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

253 
__off64_t
 
__Àn
, 
__advi£
),

254 
posix_Ádvi£64
);

256 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

259 #ifde‡
__USE_LARGEFILE64


260 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

261 
__advi£
Ë
__THROW
;

269 #i‚de‡
__USE_FILE_OFFSET64


270 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

272 #ifde‡
__REDIRECT


273 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

274 
__off64_t
 
__Àn
),

275 
posix_ÁŒoˇã64
);

277 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

280 #ifde‡
__USE_LARGEFILE64


281 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

287 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

288 && 
deföed
 
__va_¨g_∑ck_Àn


289 
	~<bôs/f˙é2.h
>

292 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

4 
	~<löux/sysöfo.h
>

9 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

10 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/m©h-ve˘‹.h
>

35 
	~<bôs/huge_vÆ.h
>

36 #ifde‡
__USE_ISOC99


37 
	~<bôs/huge_vÆf.h
>

38 
	~<bôs/huge_vÆl.h
>

41 
	~<bôs/öf.h
>

44 
	~<bôs/«n.h
>

48 
	~<bôs/m©hdef.h
>

55 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

57 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

58 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

59 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

61 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

62 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

63 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

65 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

66 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

67 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

68 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

69 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

70 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

71 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

72 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

73 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

74 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

75 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

76 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

78 
	#_MdoubÀ_
 

	)

79 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

80 
	#__MATH_DECLARING_DOUBLE
 1

	)

81 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

82 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

83 
	~<bôs/m©hˇŒs.h
>

84 #unde‡
_MdoubÀ_


85 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


86 #unde‡
_MdoubÀ_END_NAMESPACE


87 #unde‡
__MATH_PRECNAME


88 #unde‡
__MATH_DECLARING_DOUBLE


90 #ifde‡
__USE_ISOC99


96 #i‚de‡
_MÊﬂt_


97 
	#_MÊﬂt_
 

	)

99 
	#_MdoubÀ_
 
_MÊﬂt_


	)

100 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

101 
	#__MATH_DECLARING_DOUBLE
 0

	)

102 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

103 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

104 
	~<bôs/m©hˇŒs.h
>

105 #unde‡
_MdoubÀ_


106 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


107 #unde‡
_MdoubÀ_END_NAMESPACE


108 #unde‡
__MATH_PRECNAME


109 #unde‡
__MATH_DECLARING_DOUBLE


111 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

112 || 
deföed
 
__LDBL_COMPAT
 \

113 || 
deföed
 
_LIBC_TEST


114 #ifde‡
__LDBL_COMPAT


116 #ifde‡
__USE_ISOC99


117 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

118 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

119 #ifde‡
__REDIRECT_NTH


120 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

121 
__∆dbl_√xâow¨df
)

122 
	`__©åibuã__
 ((
__c⁄°__
));

123 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

124 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

125 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

126 (
__x
, 
__y
),

127 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

131 #unde‡
__MATHDECL_1


132 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

133 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

134 
¨gs
, 
Æüs
)

	)

135 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

136 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

142 #i‚de‡
_Ml⁄g_doubÀ_


143 
	#_Ml⁄g_doubÀ_
 

	)

145 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

146 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

147 
	#__MATH_DECLARING_DOUBLE
 0

	)

148 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

149 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

150 
	#__MATH_DECLARE_LDOUBLE
 1

	)

151 
	~<bôs/m©hˇŒs.h
>

152 #unde‡
_MdoubÀ_


153 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


154 #unde‡
_MdoubÀ_END_NAMESPACE


155 #unde‡
__MATH_PRECNAME


156 #unde‡
__MATH_DECLARING_DOUBLE


161 #unde‡
__MATHDECL_1


162 #unde‡
__MATHDECL


163 #unde‡
__MATHCALL


166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
signgam
;

173 #ifde‡
__USE_ISOC99


211 
FP_NAN
 =

212 
	#FP_NAN
 0

	)

213 
FP_NAN
,

214 
FP_INFINITE
 =

215 
	#FP_INFINITE
 1

	)

216 
FP_INFINITE
,

217 
FP_ZERO
 =

218 
	#FP_ZERO
 2

	)

219 
FP_ZERO
,

220 
FP_SUBNORMAL
 =

221 
	#FP_SUBNORMAL
 3

	)

222 
FP_SUBNORMAL
,

223 
FP_NORMAL
 =

224 
	#FP_NORMAL
 4

	)

225 
FP_NORMAL


233 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

234 && !
deföed
 
__OPTIMIZE_SIZE__


235 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

236 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

237 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


238 
	#Â˛assify
(
x
) \

239 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

241 
	#Â˛assify
(
x
) \

242 ( (
x
) ==  () \

243 ? 
	`__Â˛assifyf
 (
x
) \

244 :  (
x
) ==  () \

245 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

249 #i‡
	`__GNUC_PREREQ
 (4,0)

250 
	#signbô
(
x
) \

251 ( (
x
) ==  () \

252 ? 
	`__buûtö_signbôf
 (
x
) \

253 :  (
x
) ==  () \

254 ? 
	`__buûtö_signbô
 (
x
Ë: 
	`__buûtö_signbôl
 (x))

	)

256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
	#signbô
(
x
) \

258 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

260 
	#signbô
(
x
) \

261 ( (
x
) ==  () \

262 ? 
	`__signbôf
 (
x
) \

263 :  (
x
) ==  () \

264 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

269 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


270 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

271 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


272 
	#isföôe
(
x
) \

273 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

275 
	#isföôe
(
x
) \

276 ( (
x
) ==  () \

277 ? 
	`__föôef
 (
x
) \

278 :  (
x
) ==  () \

279 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

283 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


284 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

286 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

291 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


292 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

293 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


294 
	#i¢™
(
x
) \

295 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

297 
	#i¢™
(
x
) \

298 ( (
x
) ==  () \

299 ? 
	`__i¢™f
 (
x
) \

300 :  (
x
) ==  () \

301 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

305 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


306 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

307 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


308 
	#isöf
(
x
) \

309 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

311 
	#isöf
(
x
) \

312 ( (
x
) ==  () \

313 ? 
	`__isöff
 (
x
) \

314 :  (
x
) ==  () \

315 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

319 
	#MATH_ERRNO
 1

	)

320 
	#MATH_ERREXCEPT
 2

	)

325 #i‚de‡
__FAST_MATH__


326 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

331 #ifde‡
__USE_GNU


333 #ifde‡
__NO_LONG_DOUBLE_MATH


334 
	#issig«lög
(
x
) \

335 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

337 
	#issig«lög
(
x
) \

338 ( (
x
) ==  () \

339 ? 
	`__issig«lögf
 (
x
) \

340 :  (
x
) ==  () \

341 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

345 #ifdef 
__USE_MISC


349 
_IEEE_
 = -1,

350 
_SVID_
,

351 
_XOPEN_
,

352 
_POSIX_
,

353 
_ISOC_


354 } 
	t_LIB_VERSION_TYPE
;

359 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

363 #ifde‡
__USE_MISC


369 #ifde‡
__˝lu•lus


370 
__ex˚±i⁄


372 
ex˚±i⁄


375 
ty≥
;

376 *
«me
;

377 
¨g1
;

378 
¨g2
;

379 
ªtvÆ
;

380 
	}
};

382 #ifde‡
__˝lu•lus


383 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

385 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

388 
	#X_TLOSS
 1.41484755040568800000e+16

	)

391 
	#DOMAIN
 1

	)

392 
	#SING
 2

	)

393 
	#OVERFLOW
 3

	)

394 
	#UNDERFLOW
 4

	)

395 
	#TLOSS
 5

	)

396 
	#PLOSS
 6

	)

399 
	#HUGE
 3.40282347e+38F

	)

403 #ifde‡
__USE_XOPEN


405 
	#MAXFLOAT
 3.40282347e+38F

	)

412 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


413 
	#M_E
 2.7182818284590452354

	)

414 
	#M_LOG2E
 1.4426950408889634074

	)

415 
	#M_LOG10E
 0.43429448190325182765

	)

416 
	#M_LN2
 0.69314718055994530942

	)

417 
	#M_LN10
 2.30258509299404568402

	)

418 
	#M_PI
 3.14159265358979323846

	)

419 
	#M_PI_2
 1.57079632679489661923

	)

420 
	#M_PI_4
 0.78539816339744830962

	)

421 
	#M_1_PI
 0.31830988618379067154

	)

422 
	#M_2_PI
 0.63661977236758134308

	)

423 
	#M_2_SQRTPI
 1.12837916709551257390

	)

424 
	#M_SQRT2
 1.41421356237309504880

	)

425 
	#M_SQRT1_2
 0.70710678118654752440

	)

431 #ifde‡
__USE_GNU


432 
	#M_El
 2.718281828459045235360287471352662498L

	)

433 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

434 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

435 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

436 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

437 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

438 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

439 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

440 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

441 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

442 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

443 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

444 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

451 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


452 
	#__NO_MATH_INLINES
 1

	)

455 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

462 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

463 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

464 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

465 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

466 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

467 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

471 #ifde‡
__USE_EXTERN_INLINES


472 
	~<bôs/m©hölöe.h
>

477 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

478 
	~<bôs/m©h-föôe.h
>

481 #ifde‡
__USE_ISOC99


485 #i‚de‡
isgª©î


486 
	#isgª©î
(
x
, 
y
) \

487 (
__exãnsi⁄__
 \

488 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

489 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

493 #i‚de‡
isgª©îequÆ


494 
	#isgª©îequÆ
(
x
, 
y
) \

495 (
__exãnsi⁄__
 \

496 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

497 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

501 #i‚de‡
i¶ess


502 
	#i¶ess
(
x
, 
y
) \

503 (
__exãnsi⁄__
 \

504 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

505 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

509 #i‚de‡
i¶es£quÆ


510 
	#i¶es£quÆ
(
x
, 
y
) \

511 (
__exãnsi⁄__
 \

512 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

513 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

517 #i‚de‡
i¶essgª©î


518 
	#i¶essgª©î
(
x
, 
y
) \

519 (
__exãnsi⁄__
 \

520 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

521 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

525 #i‚de‡
isun‹dîed


526 
	#isun‹dîed
(
u
, 
v
) \

527 (
__exãnsi⁄__
 \

528 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

529 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

534 
	g__END_DECLS


	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


85 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

98 
	#PTHREAD_MUTEX_INITIALIZER
 \

99 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

100 #ifde‡
__USE_GNU


101 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

102 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

103 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

105 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

113 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


116 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

119 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


125 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


126 #i‡
__WORDSIZE
 == 64

127 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

132 
	#PTHREAD_RWLOCK_INITIALIZER
 \

133 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

134 #ifde‡
__USE_GNU


135 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


136 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

137 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, \

138 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

140 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


141 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

142 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

143 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

145 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

146 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

147 0 } }

	)

157 
	mPTHREAD_INHERIT_SCHED
,

158 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

159 
	mPTHREAD_EXPLICIT_SCHED


160 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

167 
	mPTHREAD_SCOPE_SYSTEM
,

168 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

169 
	mPTHREAD_SCOPE_PROCESS


170 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

177 
	mPTHREAD_PROCESS_PRIVATE
,

178 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

179 
	mPTHREAD_PROCESS_SHARED


180 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

186 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

190 
	s_±hªad_˛ónup_buf„r


192 (*
	m__routöe
) (*);

193 *
	m__¨g
;

194 
	m__ˇn˚…y≥
;

195 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

201 
	mPTHREAD_CANCEL_ENABLE
,

202 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

203 
	mPTHREAD_CANCEL_DISABLE


204 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

208 
	mPTHREAD_CANCEL_DEFERRED
,

209 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

210 
	mPTHREAD_CANCEL_ASYNCHRONOUS


211 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

213 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

217 
	#PTHREAD_ONCE_INIT
 0

	)

220 #ifde‡
__USE_XOPEN2K


224 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

228 
__BEGIN_DECLS


233 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

234 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

235 *(*
__°¨t_routöe
) (*),

236 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

242 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

250 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

252 #ifde‡
__USE_GNU


255 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

263 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

264 c⁄° 
time•ec
 *
__ab°ime
);

271 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

275 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

278 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

279 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

287 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

294 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

295 *
__dëach°©e
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

299 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

300 
__dëach°©e
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 
size_t
 *
__gu¨dsize
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

311 
size_t
 
__gu¨dsize
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

317 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

322 c⁄° 
sched_∑øm
 *
__ª°ri˘


323 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

326 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


327 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

331 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

332 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


336 
__©å
, *
__ª°ri˘
 
__öhîô
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

340 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

341 
__öhîô
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

347 *
__ª°ri˘
 
__sc›e
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


356 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

363 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

364 *
__°ackaddr
)

365 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

368 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


369 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

370 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

375 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

376 
size_t
 
__°acksize
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1));

379 #ifde‡
__USE_XOPEN2K


381 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

382 **
__ª°ri˘
 
__°ackaddr
,

383 
size_t
 *
__ª°ri˘
 
__°acksize
)

384 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

389 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

390 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 #ifde‡
__USE_GNU


396 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

397 
size_t
 
__˝u£tsize
,

398 c⁄° 
˝u_£t_t
 *
__˝u£t
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

403 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

404 
size_t
 
__˝u£tsize
,

405 
˝u_£t_t
 *
__˝u£t
)

406 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

409 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1));

414 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

415 
__THROW
 
	`__n⁄nuŒ
 ((1));

420 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

430 c⁄° 
sched_∑øm
 *
__∑øm
)

431 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

435 *
__ª°ri˘
 
__pﬁicy
,

436 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

441 
__THROW
;

444 #ifde‡
__USE_GNU


446 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

447 
size_t
 
__buÊí
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

452 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 #ifde‡
__USE_UNIX98


458 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

461 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

464 #ifde‡
__USE_GNU


469 
	$±hªad_yõld
 (Ë
__THROW
;

474 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

475 c⁄° 
˝u_£t_t
 *
__˝u£t
)

476 
__THROW
 
	`__n⁄nuŒ
 ((3));

479 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

480 
˝u_£t_t
 *
__˝u£t
)

481 
__THROW
 
	`__n⁄nuŒ
 ((3));

494 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

495 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

506 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

510 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

513 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

518 
	`±hªad_ã°ˇn˚l
 ();

527 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

528 
__mask_was_ßved
;

529 } 
__ˇn˚l_jmp_buf
[1];

530 *
__∑d
[4];

531 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

534 #i‚de‡
__˛ónup_f˘_©åibuã


535 
	#__˛ónup_f˘_©åibuã


	)

540 
	s__±hªad_˛ónup_‰ame


542 (*
__ˇn˚l_routöe
) (*);

543 *
__ˇn˚l_¨g
;

544 
__do_ô
;

545 
__ˇn˚l_ty≥
;

548 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


549 #ifde‡
__˝lu•lus


551 ˛as†
	c__±hªad_˛ónup_˛ass


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

558 
public
:

559 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

560 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

561 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

562 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

563 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

564 &
__ˇn˚l_ty≥
); 
	}
}

565 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

575 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

577 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

581 
	#±hªad_˛ónup_p›
(
execuã
) \

582 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

583 } 0)

	)

585 #ifde‡
__USE_GNU


589 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

591 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

592 
__˛‰ame
.
	`__de„r
 ()

	)

597 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

598 
__˛‰ame
.
	`__ª°‹e
 (); \

599 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

600 } 0)

	)

607 
__exã∫_ölöe
 

608 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

610 i‡(
__‰ame
->
__do_ô
)

611 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

612 
	}
}

621 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

623 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

624 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

625 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

626 .
__do_ô
 = 1 };

	)

630 
	#±hªad_˛ónup_p›
(
execuã
) \

631 
__˛‰ame
.
__do_ô
 = (
execuã
); \

632 } 0)

	)

634 #ifde‡
__USE_GNU


638 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

640 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

641 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

642 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

643 .
__do_ô
 = 1 }; \

644 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

645 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

650 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

651 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

652 
__˛‰ame
.
__do_ô
 = (
execuã
); \

653 } 0)

	)

664 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

666 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

667 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

668 *
__ˇn˚l_¨g
 = (
¨g
); \

669 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

670 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

671 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

673 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

674 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

678 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

679 dÿ{

	)

680 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

681 
__˛ónup_f˘_©åibuã
;

685 
	#±hªad_˛ónup_p›
(
execuã
) \

688 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

689 i‡(
execuã
) \

690 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

691 } 0)

	)

692 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

693 
__˛ónup_f˘_©åibuã
;

695 #ifde‡
__USE_GNU


699 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

701 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

702 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

703 *
__ˇn˚l_¨g
 = (
¨g
); \

704 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

705 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

706 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

708 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

709 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

713 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

714 dÿ{

	)

715 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

716 
__˛ónup_f˘_©åibuã
;

721 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

724 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

725 i‡(
execuã
) \

726 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

727 
	}
} 0)

	)

728 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

729 
__˛ónup_f˘_©åibuã
;

733 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

734 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

735 #i‚de‡
SHARED


736 
	`__©åibuã__
 ((
__wók__
))

742 
__jmp_buf_èg
;

743 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

749 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

750 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

751 
__THROW
 
	`__n⁄nuŒ
 ((1));

754 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

755 
__THROW
 
	`__n⁄nuŒ
 ((1));

758 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

759 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

763 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

765 #ifde‡
__USE_XOPEN2K


767 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

768 c⁄° 
time•ec
 *
__ª°ri˘


769 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

773 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

778 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

779 
__ª°ri˘
 
__muãx
,

780 *
__ª°ri˘
 
__¥io˚ûög
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

785 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

786 
__¥io˚ûög
,

787 *
__ª°ri˘
 
__ﬁd_˚ûög
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

791 #ifde‡
__USE_XOPEN2K8


793 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1));

795 #ifde‡
__USE_GNU


796 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

797 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1));

810 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1));

814 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

815 
__ª°ri˘
 
__©å
,

816 *
__ª°ri˘
 
__psh¨ed
)

817 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__psh¨ed
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

824 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


826 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


827 
__©å
, *
__ª°ri˘
 
__köd
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

833 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

839 
__ª°ri˘
 
__©å
,

840 *
__ª°ri˘
 
__¥Ÿocﬁ
)

841 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

845 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

846 
__¥Ÿocﬁ
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1));

850 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

851 
__ª°ri˘
 
__©å
,

852 *
__ª°ri˘
 
__¥io˚ûög
)

853 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥io˚ûög
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

860 #ifde‡
__USE_XOPEN2K


862 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

863 *
__robu°√ss
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

865 #ifde‡
__USE_GNU


866 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

867 *
__robu°√ss
)

868 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

872 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

873 
__robu°√ss
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

875 #ifde‡
__USE_GNU


876 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

877 
__robu°√ss
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


888 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

889 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


890 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

893 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

894 
__THROW
 
	`__n⁄nuŒ
 ((1));

897 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

898 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

901 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

902 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

904 #ifde‡
__USE_XOPEN2K


906 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

907 c⁄° 
time•ec
 *
__ª°ri˘


908 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

912 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

916 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

917 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

919 #ifde‡
__USE_XOPEN2K


921 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

922 c⁄° 
time•ec
 *
__ª°ri˘


923 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

927 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

934 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

938 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

939 
__THROW
 
	`__n⁄nuŒ
 ((1));

942 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

943 
__ª°ri˘
 
__©å
,

944 *
__ª°ri˘
 
__psh¨ed
)

945 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

948 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

949 
__psh¨ed
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__¥ef
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

968 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

969 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

970 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

974 
__THROW
 
	`__n⁄nuŒ
 ((1));

977 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

978 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

981 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

982 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

989 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

990 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

991 
	`__n⁄nuŒ
 ((1, 2));

1000 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1002 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1003 
	`__n⁄nuŒ
 ((1, 2, 3));

1008 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1));

1012 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1013 
__THROW
 
	`__n⁄nuŒ
 ((1));

1016 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1017 
__ª°ri˘
 
__©å
,

1018 *
__ª°ri˘
 
__psh¨ed
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1022 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1023 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1025 #ifde‡
__USE_XOPEN2K


1027 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__˛ockid_t
 
__˛ock_id
)

1035 
__THROW
 
	`__n⁄nuŒ
 ((1));

1039 #ifde‡
__USE_XOPEN2K


1044 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1048 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1049 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1053 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1056 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1057 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1060 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1061 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1068 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1069 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1070 
__©å
, 
__cou¡
)

1071 
__THROW
 
	`__n⁄nuŒ
 ((1));

1074 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1079 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1083 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1084 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1088 
__THROW
 
	`__n⁄nuŒ
 ((1));

1091 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1092 
__ª°ri˘
 
__©å
,

1093 *
__ª°ri˘
 
__psh¨ed
)

1094 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1097 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1098 
__psh¨ed
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1111 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1112 (*
__de°r_fun˘i⁄
) (*))

1113 
__THROW
 
	`__n⁄nuŒ
 ((1));

1116 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1119 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1122 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1123 c⁄° *
__poöãr
Ë
__THROW
 ;

1126 #ifde‡
__USE_XOPEN2K


1128 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1129 
__˛ockid_t
 *
__˛ock_id
)

1130 
__THROW
 
	`__n⁄nuŒ
 ((2));

1145 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1146 (*
__∑ª¡
) (),

1147 (*
__chûd
Ë()Ë
__THROW
;

1150 #ifde‡
__USE_EXTERN_INLINES


1152 
__exã∫_ölöe
 

1153 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1155  
__thªad1
 =
__thªad2
;

1156 
	}
}

1159 
	g__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 #ifde‡
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_MISC


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_MISC


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #ifde‡
__USE_XOPEN2K8


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

166 #ifde‡
__USE_XOPEN


167 #ifde‡
__GNUC__


168 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

170 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

172 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

177 #ifde‡
__USE_MISC


184 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

187 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

190 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

193 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

197 #ifde‡
__USE_MISC


198 
	#NSIG
 
_NSIG


	)

201 #ifde‡
__USE_GNU


202 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

206 #ifde‡
__USE_MISC


207 
__sigh™dÀr_t
 
	tsig_t
;

210 #ifde‡
__USE_POSIX


213 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

226 
__THROW
 
	`__n⁄nuŒ
 ((1));

228 #ifde‡
__USE_GNU


230 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

233 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

234 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

237 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

238 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

243 
	~<bôs/siga˘i⁄.h
>

246 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

247 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

254 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

257 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

258 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

261 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

268 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 #ifde‡
__USE_POSIX199309


276 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

277 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

284 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

285 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

286 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

287 
	`__n⁄nuŒ
 ((1));

291 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

292 
__THROW
;

297 #ifde‡
__USE_MISC


301 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

302 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

306 
	~<bôs/sigc⁄ãxt.h
>

309 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

314 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


315 
	#__√ed_size_t


	)

316 
	~<°ddef.h
>

321 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

323 
	~<bôs/sig°ack.h
>

324 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


326 
	~<sys/uc⁄ãxt.h
>

332 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

333 
__THROW
 
__©åibuã_dïªˇãd__
;

337 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

338 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

342 #ifde‡
__USE_XOPEN_EXTENDED


346 
	$sighﬁd
 (
__sig
Ë
__THROW
;

349 
	$sigªl£
 (
__sig
Ë
__THROW
;

352 
	$sigign‹e
 (
__sig
Ë
__THROW
;

355 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

358 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


361 
	~<bôs/±hªadty≥s.h
>

362 
	~<bôs/sigthªad.h
>

369 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

371 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

375 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	$©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 #unde‡
memp˝y


644 #unde‡
__memp˝y


645 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

648 
__exã∫_Æways_ölöe
 *

649 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

650 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

652  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

653 
	}
}

658 
	g__END_DECLS


	@/usr/include/sys/mman.h

19 #i‚def 
_SYS_MMAN_H


20 
	#_SYS_MMAN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 #i‚de‡
__off_t_deföed


28 #i‚de‡
__USE_FILE_OFFSET64


29 
__off_t
 
	toff_t
;

31 
__off64_t
 
	toff_t
;

33 
	#__off_t_deföed


	)

36 #i‚de‡
__mode_t_deföed


37 
__mode_t
 
	tmode_t
;

38 
	#__mode_t_deföed


	)

41 
	~<bôs/mm™.h
>

44 
	#MAP_FAILED
 ((*Ë-1)

	)

46 
	g__BEGIN_DECLS


56 #i‚de‡
__USE_FILE_OFFSET64


57 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

58 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 * 
	`__REDIRECT_NTH
 (
mm≠
,

62 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

63 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

64 
mm≠64
);

66 
	#mm≠
 
mm≠64


	)

69 #ifde‡
__USE_LARGEFILE64


70 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

71 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

76 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

81 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

89 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

91 #ifde‡
__USE_MISC


94 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

96 #ifde‡
__USE_XOPEN2K


98 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

103 
	$mlock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

106 
	$mu∆ock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

111 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

115 
	$mu∆ockÆl
 (Ë
__THROW
;

117 #ifde‡
__USE_MISC


123 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

124 
__THROW
;

127 #ifde‡
__USE_GNU


133 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

134 
__Êags
, ...Ë
__THROW
;

138 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

139 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

144 
	`shm_›í
 (c⁄° *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

147 
	`shm_u∆ök
 (c⁄° *
__«me
);

149 
__END_DECLS


	@/usr/include/sys/socket.h

19 #i‚def 
_SYS_SOCKET_H


20 
	#_SYS_SOCKET_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


26 
	~<sys/uio.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

29 #ifde‡
__USE_GNU


31 
	~<bôs/sig£t.h
>

38 
	~<bôs/sockë.h
>

40 #ifde‡
__USE_MISC


43 
	sosockaddr


45 
	mß_Ámûy
;

46 
	mß_d©a
[14];

54 
	mSHUT_RD
 = 0,

55 
	#SHUT_RD
 
SHUT_RD


	)

56 
	mSHUT_WR
,

57 
	#SHUT_WR
 
SHUT_WR


	)

58 
	mSHUT_RDWR


59 
	#SHUT_RDWR
 
SHUT_RDWR


	)

68 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


69 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

70 
	#__CONST_SOCKADDR_ARG
 c⁄° 
sockaddr
 *

	)

74 
	#__SOCKADDR_ALLTYPES
 \

75 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

89 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

90 uni⁄ { 
	m__SOCKADDR_ALLTYPES


91 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

92 #unde‡
__SOCKADDR_ONETYPE


93 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëc⁄° ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

94 uni⁄ { 
	m__SOCKADDR_ALLTYPES


95 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

96 #unde‡
__SOCKADDR_ONETYPE


99 #ifde‡
__USE_GNU


101 
	smmsghdr


103 
msghdr
 
	mmsg_hdr
;

104 
	mmsg_Àn
;

113 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

119 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

120 
__fds
[2]Ë
__THROW
;

123 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

124 
__THROW
;

127 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

128 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

137 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

141 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

142 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

149 
ssize_t
 
	`£nd
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
, 
__Êags
);

156 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

163 
ssize_t
 
	`£ndto
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

164 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

165 
sockÀn_t
 
__addr_Àn
);

174 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

175 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

176 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

184 
ssize_t
 
	`£ndmsg
 (
__fd
, c⁄° 
msghdr
 *
__mesßge
,

185 
__Êags
);

187 #ifde‡
__USE_GNU


193 
	`£ndmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

194 
__vÀn
, 
__Êags
);

202 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

204 #ifde‡
__USE_GNU


210 
	`ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

211 
__vÀn
, 
__Êags
,

212 
time•ec
 *
__tmo
);

219 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

220 *
__ª°ri˘
 
__›tvÆ
,

221 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

226 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

227 c⁄° *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

233 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

243 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

244 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

246 #ifde‡
__USE_GNU


251 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

252 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

261 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

264 #ifde‡
__USE_XOPEN2K


266 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

270 #ifde‡
__USE_MISC


274 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

279 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


280 
	~<bôs/sockë2.h
>

283 
__END_DECLS


	@/usr/include/sys/stat.h

22 #i‚def 
_SYS_STAT_H


23 
	#_SYS_STAT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_ATFILE


30 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

33 #ifde‡
__USE_ATFILE


34 
	#__√ed_time•ec


	)

36 
	~<time.h
>

39 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


42 #i‚de‡
__dev_t_deföed


43 
__dev_t
 
	tdev_t
;

44 
	#__dev_t_deföed


	)

47 #i‚de‡
__gid_t_deföed


48 
__gid_t
 
	tgid_t
;

49 
	#__gid_t_deföed


	)

52 #i‚de‡
__öo_t_deföed


53 #i‚de‡
__USE_FILE_OFFSET64


54 
__öo_t
 
	töo_t
;

56 
__öo64_t
 
	töo_t
;

58 
	#__öo_t_deföed


	)

61 #i‚de‡
__mode_t_deföed


62 
__mode_t
 
	tmode_t
;

63 
	#__mode_t_deföed


	)

66 #i‚de‡
__∆ök_t_deföed


67 
__∆ök_t
 
	t∆ök_t
;

68 
	#__∆ök_t_deföed


	)

71 #i‚de‡
__off_t_deföed


72 #i‚de‡
__USE_FILE_OFFSET64


73 
__off_t
 
	toff_t
;

75 
__off64_t
 
	toff_t
;

77 
	#__off_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

86 #ifde‡
__USE_UNIX98


87 #i‚de‡
__blk˙t_t_deföed


88 #i‚de‡
__USE_FILE_OFFSET64


89 
__blk˙t_t
 
	tblk˙t_t
;

91 
__blk˙t64_t
 
	tblk˙t_t
;

93 
	#__blk˙t_t_deföed


	)

96 #i‚de‡
__blksize_t_deföed


97 
__blksize_t
 
	tblksize_t
;

98 
	#__blksize_t_deföed


	)

102 
	g__BEGIN_DECLS


104 
	~<bôs/°©.h
>

106 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


107 
	#S_IFMT
 
__S_IFMT


	)

108 
	#S_IFDIR
 
__S_IFDIR


	)

109 
	#S_IFCHR
 
__S_IFCHR


	)

110 
	#S_IFBLK
 
__S_IFBLK


	)

111 
	#S_IFREG
 
__S_IFREG


	)

112 #ifde‡
__S_IFIFO


113 
	#S_IFIFO
 
__S_IFIFO


	)

115 #ifde‡
__S_IFLNK


116 
	#S_IFLNK
 
__S_IFLNK


	)

118 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

119 && 
deföed
 
	g__S_IFSOCK


120 
	#S_IFSOCK
 
__S_IFSOCK


	)

126 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

128 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

129 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

130 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

131 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

132 #ifde‡
__S_IFIFO


133 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

135 #ifde‡
__S_IFLNK


136 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

139 #i‡
deföed
 
__USE_MISC
 && !deföed 
__S_IFLNK


140 
	#S_ISLNK
(
mode
Ë0

	)

143 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

144 && 
deföed
 
	g__S_IFSOCK


145 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

146 #ñi‡
deföed
 
__USE_XOPEN2K


147 
	#S_ISSOCK
(
mode
Ë0

	)

154 #ifdef 
__USE_POSIX199309


155 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

156 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

157 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

163 
	#S_ISUID
 
__S_ISUID


	)

164 
	#S_ISGID
 
__S_ISGID


	)

166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
	#S_ISVTX
 
__S_ISVTX


	)

171 
	#S_IRUSR
 
__S_IREAD


	)

172 
	#S_IWUSR
 
__S_IWRITE


	)

173 
	#S_IXUSR
 
__S_IEXEC


	)

175 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

177 #ifde‡
__USE_MISC


178 
	#S_IREAD
 
S_IRUSR


	)

179 
	#S_IWRITE
 
S_IWUSR


	)

180 
	#S_IEXEC
 
S_IXUSR


	)

183 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

184 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

185 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

187 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

189 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

190 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

191 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

193 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

196 #ifdef 
__USE_MISC


198 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

199 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

200 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

202 
	#S_BLKSIZE
 512

	)

206 #i‚de‡
__USE_FILE_OFFSET64


208 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

209 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

213 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

215 #ifde‡
__REDIRECT_NTH


216 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

217 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

218 
	`__n⁄nuŒ
 ((1, 2));

219 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

220 
	`__n⁄nuŒ
 ((2));

222 
	#°©
 
°©64


	)

223 
	#f°©
 
f°©64


	)

226 #ifde‡
__USE_LARGEFILE64


227 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

228 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

229 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

232 #ifde‡
__USE_ATFILE


236 #i‚de‡
__USE_FILE_OFFSET64


237 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

238 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

239 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

243 
°©
 *
__ª°ri˘
 
__buf
,

244 
__Êag
),

245 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

247 
	#f°©©
 
f°©©64


	)

251 #ifde‡
__USE_LARGEFILE64


252 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

253 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

254 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

258 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


259 #i‚de‡
__USE_FILE_OFFSET64


262 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

263 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

265 #ifde‡
__REDIRECT_NTH


266 
	`__REDIRECT_NTH
 (
l°©
,

267 (c⁄° *
__ª°ri˘
 
__fûe
,

268 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 
	#l°©
 
l°©64


	)

274 #ifde‡
__USE_LARGEFILE64


275 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

276 
°©64
 *
__ª°ri˘
 
__buf
)

277 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

283 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

284 
__THROW
 
	`__n⁄nuŒ
 ((1));

286 #ifde‡
__USE_MISC


290 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

295 #ifde‡
__USE_POSIX


296 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

299 #ifde‡
__USE_ATFILE


302 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

303 
__Êag
)

304 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

313 #ifdef 
__USE_GNU


316 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

320 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1));

323 #ifde‡
__USE_ATFILE


327 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

328 
__THROW
 
	`__n⁄nuŒ
 ((2));

334 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


335 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

336 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_ATFILE


342 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

343 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

349 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

350 
__THROW
 
	`__n⁄nuŒ
 ((1));

352 #ifde‡
__USE_ATFILE


356 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 #ifde‡
__USE_ATFILE


363 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

364 c⁄° 
time•ec
 
__times
[2],

365 
__Êags
)

366 
__THROW
 
	`__n⁄nuŒ
 ((2));

369 #ifde‡
__USE_XOPEN2K8


371 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

389 #i‚de‡
_STAT_VER


390 
	#_STAT_VER
 0

	)

392 #i‚de‡
_MKNOD_VER


393 
	#_MKNOD_VER
 0

	)

397 #i‚de‡
__USE_FILE_OFFSET64


398 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

399 
__THROW
 
	`__n⁄nuŒ
 ((3));

400 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

401 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

402 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

403 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

404 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

405 
°©
 *
__°©_buf
, 
__Êag
)

406 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

408 #ifde‡
__REDIRECT_NTH


409 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

410 
°©
 *
__°©_buf
), 
__fx°©64
)

411 
	`__n⁄nuŒ
 ((3));

412 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

413 
°©
 *
__°©_buf
), 
__x°©64
)

414 
	`__n⁄nuŒ
 ((2, 3));

415 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

416 
°©
 *
__°©_buf
), 
__lx°©64
)

417 
	`__n⁄nuŒ
 ((2, 3));

418 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

419 c⁄° *
__fûíame
,

420 
°©
 *
__°©_buf
, 
__Êag
),

421 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

424 
	#__fx°©
 
__fx°©64


	)

425 
	#__x°©
 
__x°©64


	)

426 
	#__lx°©
 
__lx°©64


	)

430 #ifde‡
__USE_LARGEFILE64


431 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

432 
__THROW
 
	`__n⁄nuŒ
 ((3));

433 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

434 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

435 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

436 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

437 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

438 
°©64
 *
__°©_buf
, 
__Êag
)

439 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

441 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

442 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

444 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

445 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

446 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

448 #ifde‡
__USE_EXTERN_INLINES


451 
__exã∫_ölöe
 

452 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

454  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

455 
	}
}

457 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


458 
__exã∫_ölöe
 

459 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

461  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

462 
	}
}

465 
__exã∫_ölöe
 

466 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

468  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

469 
	}
}

471 #ifde‡
__USE_ATFILE


472 
__exã∫_ölöe
 

473 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

474 
__Êag
))

476  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

477 
	}
}

480 #ifde‡
__USE_MISC


481 
__exã∫_ölöe
 

482 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

484  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

485 
	}
}

488 #ifde‡
__USE_ATFILE


489 
__exã∫_ölöe
 

490 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

491 
__dev_t
 
__dev
))

493  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

494 
	}
}

497 #i‡
deföed
 
__USE_LARGEFILE64
 \

498 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

499 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

500 
__exã∫_ölöe
 

501 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

503  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

504 
	}
}

506 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


507 
__exã∫_ölöe
 

508 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

510  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

511 
	}
}

514 
__exã∫_ölöe
 

515 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

517  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

518 
	}
}

520 #ifde‡
__USE_ATFILE


521 
__exã∫_ölöe
 

522 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

523 
__Êag
))

525  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

526 
	}
}

533 
	g__END_DECLS


	@/usr/include/sys/syscall.h

18 #i‚de‡
_SYSCALL_H


19 
	#_SYSCALL_H
 1

	)

24 
	~<asm/uni°d.h
>

26 #i‚de‡
_LIBC


31 
	~<bôs/sysˇŒ.h
>

	@/usr/include/sys/time.h

18 #i‚de‡
_SYS_TIME_H


19 
	#_SYS_TIME_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_time_t


	)

25 
	~<time.h
>

26 
	#__√ed_timevÆ


	)

27 
	~<bôs/time.h
>

29 
	~<sys/£À˘.h
>

31 #i‚de‡
__su£c⁄ds_t_deföed


32 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

33 
	#__su£c⁄ds_t_deföed


	)

37 
	g__BEGIN_DECLS


39 #ifde‡
__USE_GNU


41 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

42 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

43 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

44 }

	)

45 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

46 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

47 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

48 }

	)

52 #ifde‡
__USE_MISC


55 
	stimez⁄e


57 
	mtz_möuãswe°
;

58 
	mtz_d°time
;

61 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

63 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

71 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

72 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

74 #ifde‡
__USE_MISC


77 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

78 c⁄° 
timez⁄e
 *
__tz
)

79 
__THROW
;

85 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

86 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

91 
	e__ôimî_which


94 
ITIMER_REAL
 = 0,

95 
	#ITIMER_REAL
 
ITIMER_REAL


	)

97 
ITIMER_VIRTUAL
 = 1,

98 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

101 
ITIMER_PROF
 = 2

102 
	#ITIMER_PROF
 
ITIMER_PROF


	)

107 
	sôimîvÆ


110 
timevÆ
 
ô_öãrvÆ
;

112 
timevÆ
 
ô_vÆue
;

115 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


118 
__ôimî_which
 
	t__ôimî_which_t
;

120 
	t__ôimî_which_t
;

125 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

126 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

131 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

132 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

133 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

138 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

139 
__THROW
 
	`__n⁄nuŒ
 ((1));

141 #ifde‡
__USE_MISC


143 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

144 
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

150 #ifde‡
__USE_GNU


154 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

155 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

159 #ifde‡
__USE_MISC


162 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

163 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

164 
	#timîcmp
(
a
, 
b
, 
CMP
) \

165 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

166 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

167 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

168 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

170 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

171 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

172 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

174 ++(
ªsu…
)->
tv_£c
; \

175 (
ªsu…
)->
tv_u£c
 -= 1000000; \

177 
	}
} 0)

	)

178 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

180 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

181 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

182 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

183 --(
ªsu…
)->
tv_£c
; \

184 (
ªsu…
)->
tv_u£c
 += 1000000; \

186 } 0)

	)

189 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_MISC


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_MISC


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/sys/uio.h

18 #i‚de‡
_SYS_UIO_H


19 
	#_SYS_UIO_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

25 
	g__BEGIN_DECLS


28 
	~<bôs/uio.h
>

39 
ssize_t
 
	$ªadv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

40 
__wur
;

50 
ssize_t
 
	$wrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

51 
__wur
;

54 #ifde‡
__USE_MISC


55 #i‚de‡
__USE_FILE_OFFSET64


65 
ssize_t
 
	$¥ódv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

66 
__off_t
 
__off£t
Ë
__wur
;

77 
ssize_t
 
	$pwrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

78 
__off_t
 
__off£t
Ë
__wur
;

80 #ifde‡
__REDIRECT


81 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

82 
__cou¡
, 
__off64_t
 
__off£t
),

83 
¥ódv64
Ë
__wur
;

84 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

85 
__cou¡
, 
__off64_t
 
__off£t
),

86 
pwrôev64
Ë
__wur
;

88 
	#¥ódv
 
¥ódv64


	)

89 
	#pwrôev
 
pwrôev64


	)

93 #ifde‡
__USE_LARGEFILE64


103 
ssize_t
 
	$¥ódv64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

104 
__off64_t
 
__off£t
Ë
__wur
;

115 
ssize_t
 
	$pwrôev64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

116 
__off64_t
 
__off£t
Ë
__wur
;

120 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

389 
ssize_t
 
	$pwrôe_sync
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

390 
__off_t
 
__off£t
Ë
__wur
;

392 #ifde‡
__REDIRECT


393 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

394 
__off64_t
 
__off£t
),

395 
¥ód64
Ë
__wur
;

396 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

397 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

398 
pwrôe64
Ë
__wur
;

399 
ssize_t
 
	`__REDIRECT
 (
pwrôe_sync
, (
__fd
, c⁄° *
__buf
,

400 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

401 
pwrôe64_sync
Ë
__wur
;

404 
	#¥ód
 
¥ód64


	)

405 
	#pwrôe
 
pwrôe64


	)

406 
	#pwrôe_sync
 
pwrôe64_sync


	)

410 #ifde‡
__USE_LARGEFILE64


414 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

415 
__off64_t
 
__off£t
Ë
__wur
;

418 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

419 
__off64_t
 
__off£t
Ë
__wur
;

420 
ssize_t
 
	$pwrôe64_sync
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

421 
__off64_t
 
__off£t
Ë
__wur
;

429 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

431 #ifde‡
__USE_GNU


434 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

444 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

456 
	`¶ìp
 (
__£c⁄ds
);

458 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

459 || 
deföed
 
__USE_MISC


464 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

465 
__THROW
;

472 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

481 
	`∑u£
 ();

485 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

486 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


490 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

495 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

496 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

500 #ifde‡
__USE_ATFILE


503 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

504 
__gid_t
 
__group
, 
__Êag
)

505 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

509 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

511 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


513 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

523 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

525 #ifdef 
__USE_GNU


529 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

532 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

533 || 
deföed
 
__USE_MISC


537 *
	$gëwd
 (*
__buf
)

538 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

543 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

546 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

548 #ifde‡
__USE_GNU


551 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

555 **
__ívú⁄
;

556 #ifde‡
__USE_GNU


557 **
ívú⁄
;

563 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

564 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

566 #ifde‡
__USE_XOPEN2K8


569 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

570 
__THROW
 
	`__n⁄nuŒ
 ((2));

575 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

580 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

585 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

586 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

591 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

597 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #ifde‡
__USE_GNU


602 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

603 *c⁄° 
__ívp
[])

604 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

608 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


610 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

615 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

621 
	~<bôs/c⁄‚ame.h
>

624 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

625 
__THROW
 
	`__n⁄nuŒ
 ((1));

628 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

631 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

633 #ifdef 
__USE_POSIX2


635 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

640 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

643 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

646 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

649 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

650 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


651 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

658 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

660 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


672 
	$£çgΩ
 (Ë
__THROW
;

679 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

681 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


683 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

687 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

690 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

693 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

696 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

701 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

703 #ifdef 
__USE_GNU


705 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

712 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

714 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


717 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

720 #ifde‡
__USE_XOPEN2K


722 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

729 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

731 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


734 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

737 #ifde‡
__USE_XOPEN2K


739 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

742 #ifde‡
__USE_GNU


745 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

746 
__THROW
;

750 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

751 
__THROW
;

755 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

756 
__THROW
 
__wur
;

760 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

761 
__THROW
 
__wur
;

768 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

770 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

771 || 
deföed
 
__USE_MISC


776 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

782 *
	$ây«me
 (
__fd
Ë
__THROW
;

786 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

787 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

791 
	$ißây
 (
__fd
Ë
__THROW
;

793 #i‡
deföed
 
__USE_MISC
 \

794 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

797 
	$ây¶Ÿ
 (Ë
__THROW
;

802 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

803 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

805 #ifde‡
__USE_ATFILE


808 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

809 c⁄° *
__to
, 
__Êags
)

810 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

813 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


815 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

816 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

821 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

822 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

823 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

826 #ifde‡
__USE_ATFILE


828 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

829 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

832 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

833 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

834 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

838 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

840 #ifde‡
__USE_ATFILE


842 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

843 
__THROW
 
	`__n⁄nuŒ
 ((2));

847 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

851 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

854 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

861 *
	`gëlogö
 ();

862 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


869 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

872 #ifdef 
__USE_MISC


874 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

878 #ifdef 
__USE_POSIX2


882 
	#__√ed_gë›t


	)

883 
	~<gë›t.h
>

887 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


891 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

895 #i‡
deföed
 
__USE_MISC


898 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

903 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

909 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

910 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

911 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$vh™gup
 (Ë
__THROW
;

921 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

929 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

930 
size_t
 
__off£t
, 
__sˇÀ
)

931 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

941 *
	$gëu£rshñl
 (Ë
__THROW
;

942 
	$ídu£rshñl
 (Ë
__THROW
;

943 
	$£tu£rshñl
 (Ë
__THROW
;

949 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

953 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

956 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

960 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

968 
	`fsync
 (
__fd
);

971 #ifde‡
__USE_GNU


974 
	$syncfs
 (
__fd
Ë
__THROW
;

978 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


981 
	`gëho°id
 ();

984 
	$sync
 (Ë
__THROW
;

987 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


990 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

995 
	$gëdèbÀsize
 (Ë
__THROW
;

1001 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1004 #i‚de‡
__USE_FILE_OFFSET64


1005 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1008 #ifde‡
__REDIRECT_NTH


1009 
	`__REDIRECT_NTH
 (
åunˇã
,

1010 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1011 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1013 
	#åunˇã
 
åunˇã64


	)

1016 #ifde‡
__USE_LARGEFILE64


1017 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1018 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1023 #i‡
deföed
 
__USE_POSIX199309
 \

1024 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1027 #i‚de‡
__USE_FILE_OFFSET64


1028 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1030 #ifde‡
__REDIRECT_NTH


1031 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1032 
·runˇã64
Ë
__wur
;

1034 
	#·runˇã
 
·runˇã64


	)

1037 #ifde‡
__USE_LARGEFILE64


1038 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1044 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1045 || 
deföed
 
__USE_MISC


1049 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1055 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1059 #ifde‡
__USE_MISC


1070 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1075 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1087 
	#F_ULOCK
 0

	)

1088 
	#F_LOCK
 1

	)

1089 
	#F_TLOCK
 2

	)

1090 
	#F_TEST
 3

	)

1092 #i‚de‡
__USE_FILE_OFFSET64


1093 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1095 #ifde‡
__REDIRECT


1096 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1097 
lockf64
Ë
__wur
;

1099 
	#lockf
 
lockf64


	)

1102 #ifde‡
__USE_LARGEFILE64


1103 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1108 #ifde‡
__USE_GNU


1113 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1114 (
__exãnsi⁄__
 \

1115 ({ 
__ªsu…
; \

1116 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1117 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1118 
__ªsu…
; 
	}
}))

	)

1121 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1124 
fd©async
 (
__fûdes
);

1130 #ifdef 
__USE_XOPEN


1132 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1137 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1138 
__THROW
 
	`__n⁄nuŒ
 ((1));

1145 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1146 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1152 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1154 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1159 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1160 
	~<bôs/uni°d.h
>

1163 
__END_DECLS


	@liblfds711/inc/liblfds711.h

1 #i‚de‡
LIBLFDS711_H


4 
	#LIBLFDS711_H


	)

7 #¥agm®
w¨nög
–
push
 )

8 #¥agm®
w¨nög
–
dißbÀ
 : 4324 )

9 #¥agm®
¥eÁ°
–
dißbÀ
 : 28113 28182 28183, "blah" )

12 
	~"liblfds711/lfds711_p‹tög_ab°ø˘i⁄_œyî_compûî.h
"

13 
	~"liblfds711/lfds711_p‹tög_ab°ø˘i⁄_œyî_›î©ög_sy°em.h
"

14 
	~"liblfds711/lfds711_p‹tög_ab°ø˘i⁄_œyî_¥o˚ss‹.h
"

16 
	~"liblfds711/lfds711_¥ng.h
"

17 
	~"liblfds711/lfds711_misc.h
"

18 
	~"liblfds711/lfds711_båì_add⁄ly_unbÆ™˚d.h
"

19 
	~"liblfds711/lfds711_‰ìli°.h
"

20 
	~"liblfds711/lfds711_hash_add⁄ly.h
"

21 
	~"liblfds711/lfds711_li°_add⁄ly_söglylöked_‹dîed.h
"

22 
	~"liblfds711/lfds711_li°_add⁄ly_söglylöked_un‹dîed.h
"

23 
	~"liblfds711/lfds711_queue_bounded_m™y¥odu˚r_m™yc⁄sumî.h
"

24 
	~"liblfds711/lfds711_queue_bounded_sögÀ¥odu˚r_sögÀc⁄sumî.h
"

25 
	~"liblfds711/lfds711_queue_unbounded_m™y¥odu˚r_m™yc⁄sumî.h
"

26 
	~"liblfds711/lfds711_rögbuf„r.h
"

27 
	~"liblfds711/lfds711_°ack.h
"

30 #¥agm®
w¨nög
–
p›
 )

	@non_temporal.h

1 
	#_GNU_SOURCE


	)

2 
	~<sys/mm™.h
>

3 
	~<°dio.h
>

4 
	~<°rög.h
>

5 
	~<f˙é.h
>

6 
	~<°dlib.h
>

7 
	~<uni°d.h
>

8 
	~<î∫o.h
>

9 
	~<sys/mm™.h
>

10 
	~<m©h.h
>

11 
	~<°rög.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<löux/≥rf_evít.h
>

14 
	~<löux/hw_bªakpoöt.h
>

15 
	~<sys/io˘l.h
>

16 
	~<asm/uni°d.h
>

17 
	~<öây≥s.h
>

18 
	~<sched.h
>

19 
	~<sys/time.h
>

20 
	~<sys/ªsour˚.h
>

21 
	~<sys/°©.h
>

22 
	~<sys/¥˘l.h
>

23 
	~<sys/waô.h
>

24 
	~<as£π.h
>

25 
	~<sys/sysˇŒ.h
>

26 
	~<emmöåö.h
>

27 
	~"fûe›s_nvp.h
"

28 
	~"nvp_mm™.h
"

30 
	#CHUNK_SIZE_GRANULARITY
 64

	)

31 
	#CHUNK_SIZE
 128

	)

32 
	#CHUNK_SHIFT
 7

	)

33 
	#CHUNK_SHIFT_GRANULARITY
 6

	)

34 
	#CHUNK_MASK
 (
CHUNK_SIZE
 - 1)

	)

35 
	#CHUNK_MASK_GRANULARITY
 (
CHUNK_SIZE_GRANULARITY
 - 1)

	)

37 
	#DWORD_SIZE
 4

	)

38 
	#DWORD_SHIFT
 2

	)

39 
	#DWORD_MASK
 (
DWORD_SIZE
 - 1)

	)

41 
	#MOVNT_SIZE
 16

	)

42 
	#MOVNT_MASK
 (
MOVNT_SIZE
 - 1)

	)

43 
	#MOVNT_SHIFT
 4

	)

44 
	#FLUSH_ALIGN
 ((
uöçå_t
)64)

	)

45 
	#ALIGN_MASK
 (
FLUSH_ALIGN
 - 1)

	)

47 
	#MOVNT_THRESHOLD
 256

	)

48 
	#MOVNT_THRESHOLD_GRANULARITY
 64

	)

50 
size_t
 
	gMov¡_thªshﬁd
 = 
MOVNT_THRESHOLD
;

51 
size_t
 
	gMov¡_thªshﬁd_gønuœrôy
 = 
MOVNT_THRESHOLD_GRANULARITY
;

54 *
	gaddr
;

55 
timevÆ
 
	g°¨t
,
	gíd
;

56 
	gfd
;

59 
	$¥edøö_mem‹y_b¨rõr
()

61 
	`_mm_m„n˚
();

62 
	}
}

66 
	$Êush_dˇche_övÆid©e_›t
(c⁄° *
addr
, 
size_t
 
Àn
)

68 
uöçå_t
 
u±r
;

74 
u±r
 = (
uöçå_t
)
addr
 & ~(
FLUSH_ALIGN
 - 1);

75 
u±r
 < (
uöçå_t
)
addr
 + 
Àn
; u±∏+
FLUSH_ALIGN
) {

76 
	`_mm_˛Êush›t
((*)
u±r
);

78 
	}
}

85 
	$pmem_Êush
(c⁄° *
addr
, 
size_t
 
Àn
)

87 
	`¥ötf
("%s: hîe\n", 
__func__
);

88 
	`Êush_dˇche_övÆid©e_›t
(
addr
, 
Àn
);

89 
	}
}

93 
	$memmove_nodøö_mov¡_gønuœrôy
(*
pmemde°
, c⁄° *
§c
, 
size_t
 
Àn
)

95 
__m128i
 
xmm0
, 
xmm1
, 
xmm2
, 
xmm3
;

96 
size_t
 
i
;

97 
__m128i
 *
d
;

98 
__m128i
 *
s
;

99 *
de°1
 = 
pmemde°
;

100 
size_t
 
˙t
;

104 i‡(
Àn
 =0 || 
§c
 =
pmemde°
)

105  
pmemde°
;

107 i‡(
Àn
 < 
Mov¡_thªshﬁd_gønuœrôy
) {

108 
	`memmove
(
pmemde°
, 
§c
, 
Àn
);

109 
	`pmem_Êush
(
pmemde°
, 
Àn
);

110  
pmemde°
;

113 i‡((
uöçå_t
)
de°1
 - (uöçå_t)
§c
 >
Àn
) {

121 
˙t
 = (
uöt64_t
)
de°1
 & 
ALIGN_MASK
;

122 i‡(
˙t
 > 0) {

123 
˙t
 = 
FLUSH_ALIGN
 - cnt;

126 i‡(
˙t
 > 
Àn
)

127 
˙t
 = 
Àn
;

129 
uöt8_t
 *
d8
 = (uöt8_à*)
de°1
;

130 c⁄° 
uöt8_t
 *
s8
 = (uöt8_à*)
§c
;

131 
i
 = 0; i < 
˙t
; i++) {

132 *
d8
 = *
s8
;

133 
d8
++;

134 
s8
++;

136 
	`pmem_Êush
(
de°1
, 
˙t
);

137 
de°1
 = (*)de°1 + 
˙t
;

138 
§c
 = (*)§¯+ 
˙t
;

139 
Àn
 -
˙t
;

140 
	`¥ötf
("%s: hîêc›õd u±ÿÊushálig¿bound¨y\n", 
__func__
);

143 
d
 = (
__m128i
 *)
de°1
;

144 
s
 = (
__m128i
 *)
§c
;

146 
˙t
 = 
Àn
 >> 
CHUNK_SHIFT_GRANULARITY
;

147 
i
 = 0; i < 
˙t
; i++) {

148 
xmm0
 = 
	`_mm_lﬂdu_si128
(
s
);

149 
xmm1
 = 
	`_mm_lﬂdu_si128
(
s
 + 1);

150 
xmm2
 = 
	`_mm_lﬂdu_si128
(
s
 + 2);

151 
xmm3
 = 
	`_mm_lﬂdu_si128
(
s
 + 3);

152 
s
 += 4;

153 
	`_mm_°ªam_si128
(
d
, 
xmm0
);

154 
	`_mm_°ªam_si128
(
d
 + 1, 
xmm1
);

155 
	`_mm_°ªam_si128
(
d
 + 2, 
xmm2
);

156 
	`_mm_°ªam_si128
(
d
 + 3, 
xmm3
);

157 
d
 += 4;

161 
Àn
 &
CHUNK_MASK_GRANULARITY
;

162 i‡(
Àn
 != 0) {

163 
˙t
 = 
Àn
 >> 
MOVNT_SHIFT
;

164 
i
 = 0; i < 
˙t
; i++) {

165 
xmm0
 = 
	`_mm_lﬂdu_si128
(
s
);

166 
	`_mm_°ªam_si128
(
d
, 
xmm0
);

167 
s
++;

168 
d
++;

171 
Àn
 &
MOVNT_MASK
;

172 i‡(
Àn
 != 0) {

173 
˙t
 = 
Àn
 >> 
DWORD_SHIFT
;

174 
öt32_t
 *
d32
 = (öt32_à*)
d
;

175 
öt32_t
 *
s32
 = (öt32_à*)
s
;

176 
i
 = 0; i < 
˙t
; i++) {

177 
	`_mm_°ªam_si32
(
d32
, *
s32
);

178 
d32
++;

179 
s32
++;

181 
˙t
 = 
Àn
 & 
DWORD_MASK
;

182 
uöt8_t
 *
d8
 = (uöt8_à*)
d32
;

183 c⁄° 
uöt8_t
 *
s8
 = (uöt8_à*)
s32
;

185 
i
 = 0; i < 
˙t
; i++) {

186 *
d8
 = *
s8
;

187 
d8
++;

188 
s8
++;

190 
	`pmem_Êush
(
d32
, 
˙t
);

203 
de°1
 = (*)de°1 + 
Àn
;

204 
§c
 = (*)§¯+ 
Àn
;

206 
˙t
 = (
uöt64_t
)
de°1
 & 
ALIGN_MASK
;

207 i‡(
˙t
 > 0) {

209 i‡(
˙t
 > 
Àn
)

210 
˙t
 = 
Àn
;

212 
uöt8_t
 *
d8
 = (uöt8_à*)
de°1
;

213 c⁄° 
uöt8_t
 *
s8
 = (uöt8_à*)
§c
;

214 
i
 = 0; i < 
˙t
; i++) {

215 
d8
--;

216 
s8
--;

217 *
d8
 = *
s8
;

219 
	`pmem_Êush
(
d8
, 
˙t
);

220 
de°1
 = (*)de°1 - 
˙t
;

221 
§c
 = (*)§¯- 
˙t
;

222 
Àn
 -
˙t
;

225 
d
 = (
__m128i
 *)
de°1
;

226 
s
 = (
__m128i
 *)
§c
;

228 
˙t
 = 
Àn
 >> 
CHUNK_SHIFT_GRANULARITY
;

229 
i
 = 0; i < 
˙t
; i++) {

230 
xmm0
 = 
	`_mm_lﬂdu_si128
(
s
 - 1);

231 
xmm1
 = 
	`_mm_lﬂdu_si128
(
s
 - 2);

232 
xmm2
 = 
	`_mm_lﬂdu_si128
(
s
 - 3);

233 
	`_mm_°ªam_si128
(
d
 - 4, 
xmm3
);

234 
d
 -= 4;

238 
Àn
 &
CHUNK_MASK_GRANULARITY
;

239 i‡(
Àn
 != 0) {

240 
˙t
 = 
Àn
 >> 
MOVNT_SHIFT
;

241 
i
 = 0; i < 
˙t
; i++) {

242 
d
--;

243 
s
--;

244 
xmm0
 = 
	`_mm_lﬂdu_si128
(
s
);

245 
	`_mm_°ªam_si128
(
d
, 
xmm0
);

250 
Àn
 &
MOVNT_MASK
;

251 i‡(
Àn
 != 0) {

252 
˙t
 = 
Àn
 >> 
DWORD_SHIFT
;

253 
öt32_t
 *
d32
 = (öt32_à*)
d
;

254 
öt32_t
 *
s32
 = (öt32_à*)
s
;

255 
i
 = 0; i < 
˙t
; i++) {

256 
d32
--;

257 
s32
--;

258 
	`_mm_°ªam_si32
(
d32
, *
s32
);

261 
˙t
 = 
Àn
 & 
DWORD_MASK
;

262 
uöt8_t
 *
d8
 = (uöt8_à*)
d32
;

263 c⁄° 
uöt8_t
 *
s8
 = (uöt8_à*)
s32
;

265 
i
 = 0; i < 
˙t
; i++) {

266 
d8
--;

267 
s8
--;

268 *
d8
 = *
s8
;

270 
	`pmem_Êush
(
d8
, 
˙t
);

286  
pmemde°
;

287 
	}
}

293 
	$memmove_nodøö_mov¡
(*
pmemde°
, c⁄° *
§c
, 
size_t
 
Àn
)

295 
__m128i
 
xmm0
, 
xmm1
, 
xmm2
, 
xmm3
, 
xmm4
, 
xmm5
, 
xmm6
, 
xmm7
;

296 
size_t
 
i
;

297 
__m128i
 *
d
;

298 
__m128i
 *
s
;

299 *
de°1
 = 
pmemde°
;

300 
size_t
 
˙t
;

302 i‡(
Àn
 =0 || 
§c
 =
pmemde°
)

303  
pmemde°
;

305 i‡(
Àn
 < 
Mov¡_thªshﬁd
) {

306 
	`memmove
(
pmemde°
, 
§c
, 
Àn
);

307 
	`pmem_Êush
(
pmemde°
, 
Àn
);

308  
pmemde°
;

311 i‡((
uöçå_t
)
de°1
 - (uöçå_t)
§c
 >
Àn
) {

319 
	`¥ötf
("%s: i¿mo° comm⁄áªa\n", 
__func__
);

320 
˙t
 = (
uöt64_t
)
de°1
 & 
ALIGN_MASK
;

321 i‡(
˙t
 > 0) {

322 
˙t
 = 
FLUSH_ALIGN
 - cnt;

325 i‡(
˙t
 > 
Àn
)

326 
˙t
 = 
Àn
;

328 
uöt8_t
 *
d8
 = (uöt8_à*)
de°1
;

329 c⁄° 
uöt8_t
 *
s8
 = (uöt8_à*)
§c
;

330 
i
 = 0; i < 
˙t
; i++) {

331 *
d8
 = *
s8
;

332 
d8
++;

333 
s8
++;

335 
	`pmem_Êush
(
de°1
, 
˙t
);

336 
de°1
 = (*)de°1 + 
˙t
;

337 
§c
 = (*)§¯+ 
˙t
;

338 
Àn
 -
˙t
;

341 
d
 = (
__m128i
 *)
de°1
;

342 
s
 = (
__m128i
 *)
§c
;

344 
˙t
 = 
Àn
 >> 
CHUNK_SHIFT
;

345 
	`¥ötf
("%s: sèπög f‹Üo›\n", 
__func__
);

346 
i
 = 0; i < 
˙t
; i++) {

347 
	`¥ötf
("%s: i¿f‹Üo›\n", 
__func__
);

348 
xmm0
 = 
	`_mm_lﬂdu_si128
(
s
);

349 
xmm1
 = 
	`_mm_lﬂdu_si128
(
s
 + 1);

350 
xmm2
 = 
	`_mm_lﬂdu_si128
(
s
 + 2);

351 
xmm3
 = 
	`_mm_lﬂdu_si128
(
s
 + 3);

352 
xmm4
 = 
	`_mm_lﬂdu_si128
(
s
 + 4);

353 
xmm5
 = 
	`_mm_lﬂdu_si128
(
s
 + 5);

354 
xmm6
 = 
	`_mm_lﬂdu_si128
(
s
 + 6);

355 
xmm7
 = 
	`_mm_lﬂdu_si128
(
s
 + 7);

356 
s
 += 8;

357 
	`¥ötf
("%s: i¿mid o‡f‹Üo›\n", 
__func__
);

358 
	`_mm_°ªam_si128
(
d
, 
xmm0
);

359 
	`_mm_°ªam_si128
(
d
 + 1, 
xmm1
);

360 
	`_mm_°ªam_si128
(
d
 + 2, 
xmm2
);

361 
	`_mm_°ªam_si128
(
d
 + 3, 
xmm3
);

362 
	`_mm_°ªam_si128
(
d
 + 4, 
xmm4
);

363 
	`_mm_°ªam_si128
(
d
 + 5, 
xmm5
);

364 
	`_mm_°ªam_si128
(
d
 + 6, 
xmm6
);

365 
	`_mm_°ªam_si128
(
d
 + 7, 
xmm7
);

366 
	`¥ötf
("%s: i¿íd o‡f‹Üo›\n", 
__func__
);

367 
d
 += 8;

371 
Àn
 &
CHUNK_MASK
;

372 i‡(
Àn
 != 0) {

373 
˙t
 = 
Àn
 >> 
MOVNT_SHIFT
;

374 
i
 = 0; i < 
˙t
; i++) {

375 
xmm0
 = 
	`_mm_lﬂdu_si128
(
s
);

376 
	`_mm_°ªam_si128
(
d
, 
xmm0
);

377 
s
++;

378 
d
++;

381 
Àn
 &
MOVNT_MASK
;

382 i‡(
Àn
 != 0) {

383 
˙t
 = 
Àn
 >> 
DWORD_SHIFT
;

384 
öt32_t
 *
d32
 = (öt32_à*)
d
;

385 
öt32_t
 *
s32
 = (öt32_à*)
s
;

386 
i
 = 0; i < 
˙t
; i++) {

387 
	`_mm_°ªam_si32
(
d32
, *
s32
);

388 
d32
++;

389 
s32
++;

391 
˙t
 = 
Àn
 & 
DWORD_MASK
;

392 
uöt8_t
 *
d8
 = (uöt8_à*)
d32
;

393 c⁄° 
uöt8_t
 *
s8
 = (uöt8_à*)
s32
;

395 
i
 = 0; i < 
˙t
; i++) {

396 *
d8
 = *
s8
;

397 
d8
++;

398 
s8
++;

400 
	`pmem_Êush
(
d32
, 
˙t
);

413 
de°1
 = (*)de°1 + 
Àn
;

414 
§c
 = (*)§¯+ 
Àn
;

416 
˙t
 = (
uöt64_t
)
de°1
 & 
ALIGN_MASK
;

417 i‡(
˙t
 > 0) {

419 i‡(
˙t
 > 
Àn
)

420 
˙t
 = 
Àn
;

422 
uöt8_t
 *
d8
 = (uöt8_à*)
de°1
;

423 c⁄° 
uöt8_t
 *
s8
 = (uöt8_à*)
§c
;

424 
i
 = 0; i < 
˙t
; i++) {

425 
d8
--;

426 
s8
--;

427 *
d8
 = *
s8
;

429 
	`pmem_Êush
(
d8
, 
˙t
);

430 
de°1
 = (*)de°1 - 
˙t
;

431 
§c
 = (*)§¯- 
˙t
;

432 
Àn
 -
˙t
;

435 
d
 = (
__m128i
 *)
de°1
;

436 
s
 = (
__m128i
 *)
§c
;

438 
˙t
 = 
Àn
 >> 
CHUNK_SHIFT
;

439 
i
 = 0; i < 
˙t
; i++) {

440 
xmm0
 = 
	`_mm_lﬂdu_si128
(
s
 - 1);

441 
xmm1
 = 
	`_mm_lﬂdu_si128
(
s
 - 2);

442 
xmm2
 = 
	`_mm_lﬂdu_si128
(
s
 - 3);

443 
xmm3
 = 
	`_mm_lﬂdu_si128
(
s
 - 4);

444 
xmm4
 = 
	`_mm_lﬂdu_si128
(
s
 - 5);

445 
xmm5
 = 
	`_mm_lﬂdu_si128
(
s
 - 6);

446 
	`_mm_°ªam_si128
(
d
 - 7, 
xmm6
);

447 
	`_mm_°ªam_si128
(
d
 - 8, 
xmm7
);

448 
d
 -= 8;

452 
Àn
 &
CHUNK_MASK
;

453 i‡(
Àn
 != 0) {

454 
˙t
 = 
Àn
 >> 
MOVNT_SHIFT
;

455 
i
 = 0; i < 
˙t
; i++) {

456 
d
--;

457 
s
--;

458 
xmm0
 = 
	`_mm_lﬂdu_si128
(
s
);

459 
	`_mm_°ªam_si128
(
d
, 
xmm0
);

464 
Àn
 &
MOVNT_MASK
;

465 i‡(
Àn
 != 0) {

466 
˙t
 = 
Àn
 >> 
DWORD_SHIFT
;

467 
öt32_t
 *
d32
 = (öt32_à*)
d
;

468 
öt32_t
 *
s32
 = (öt32_à*)
s
;

469 
i
 = 0; i < 
˙t
; i++) {

470 
d32
--;

471 
s32
--;

472 
	`_mm_°ªam_si32
(
d32
, *
s32
);

475 
˙t
 = 
Àn
 & 
DWORD_MASK
;

476 
uöt8_t
 *
d8
 = (uöt8_à*)
d32
;

477 c⁄° 
uöt8_t
 *
s8
 = (uöt8_à*)
s32
;

479 
i
 = 0; i < 
˙t
; i++) {

480 
d8
--;

481 
s8
--;

482 *
d8
 = *
s8
;

484 
	`pmem_Êush
(
d8
, 
˙t
);

498 
	`¥edøö_mem‹y_b¨rõr
();

500  
pmemde°
;

501 
	}
}

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/asm/unistd.h

1 #i‚de‡
_ASM_X86_UNISTD_H


2 
	#_ASM_X86_UNISTD_H


	)

5 
	#__X32_SYSCALL_BIT
 0x40000000

	)

7 #ifde‡
__i386__


8 
	~<asm/uni°d_32.h
>

9 #ñi‡
deföed
(
__ILP32__
)

10 
	~<asm/uni°d_x32.h
>

12 
	~<asm/uni°d_64.h
>

	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/dlfcn.h

19 #i‚de‡
_DLFCN_H


24 
	#RTLD_LAZY
 0x00001

	)

25 
	#RTLD_NOW
 0x00002

	)

26 
	#RTLD_BINDING_MASK
 0x3

	)

27 
	#RTLD_NOLOAD
 0x00004

	)

28 
	#RTLD_DEEPBIND
 0x00008

	)

33 
	#RTLD_GLOBAL
 0x00100

	)

38 
	#RTLD_LOCAL
 0

	)

41 
	#RTLD_NODELETE
 0x01000

	)

43 #ifde‡
__USE_GNU


54 
	#DL_CALL_FCT
(
f˘p
, 
¨gs
) \

55 (
	`_dl_mcou¡_wøµî_check
 ((*Ë(
f˘p
)), (*(f˘p)Ë
¨gs
)

	)

57 
__BEGIN_DECLS


60 
	$_dl_mcou¡_wøµî_check
 (*
__£lÂc
Ë
__THROW
;

62 
__END_DECLS


	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/huge_val.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VAL
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

35 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

39 
	~<ídün.h
>

41 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

50 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

51 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VALF
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7f800000UL }).
__d
)

	)

39 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

48 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

49 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

20 #i‚de‡
_MATH_H


24 #i‡
__GNUC_PREREQ
(3,3)

25 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

26 #ñi‡
__GNUC_PREREQ
(2,96)

27 
	#HUGE_VALL
 (
__exãnsi⁄__
 0x1.0
p32767L
)

	)

30 
	#__HUGE_VALL_byãs
 { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 }

	)

32 
	#__huge_vÆl_t
 uni⁄ { 
__c
[12]; 
__ld
; }

	)

33 #ifde‡
__GNUC__


34 
	#HUGE_VALL
 (
__exãnsi⁄__
 \

35 ((
__huge_vÆl_t
Ë{ 
__c
: 
__HUGE_VALL_byãs
 }).
__ld
)

	)

37 
__huge_vÆl_t
 
	g__huge_vÆl
 = { 
__HUGE_VALL_byãs
 };

38 
	#HUGE_VALL
 (
__huge_vÆl
.
__ld
)

	)

	@/usr/include/bits/inf.h

19 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#INFINITY
 (
	`__buûtö_öff
())

	)

28 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/math-finite.h

19 #i‚de‡
_MATH_H


24 
__REDIRECT_NTH
 (
acos
, (), 
__acos_föôe
);

25 #ifde‡
__USE_ISOC99


26 
__REDIRECT_NTH
 (
acosf
, (), 
__acosf_föôe
);

27 #ifde‡
__MATH_DECLARE_LDOUBLE


28 #ifde‡
__NO_LONG_DOUBLE_MATH


29 
__REDIRECT_NTH
 (
aco¶
, (), 
__acos_föôe
);

31 
__REDIRECT_NTH
 (
aco¶
, (), 
__aco¶_föôe
);

36 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


38 
__REDIRECT_NTH
 (
acosh
, (), 
__acosh_föôe
);

40 #ifde‡
__USE_ISOC99


41 
__REDIRECT_NTH
 (
acoshf
, (), 
__acoshf_föôe
);

42 #ifde‡
__MATH_DECLARE_LDOUBLE


43 #ifde‡
__NO_LONG_DOUBLE_MATH


44 
__REDIRECT_NTH
 (
acoshl
, (), 
__acosh_föôe
);

46 
__REDIRECT_NTH
 (
acoshl
, (), 
__acoshl_föôe
);

52 
__REDIRECT_NTH
 (
asö
, (), 
__asö_föôe
);

53 #ifde‡
__USE_ISOC99


54 
__REDIRECT_NTH
 (
asöf
, (), 
__asöf_föôe
);

55 #ifde‡
__MATH_DECLARE_LDOUBLE


56 #ifde‡
__NO_LONG_DOUBLE_MATH


57 
__REDIRECT_NTH
 (
asöl
, (), 
__asö_föôe
);

59 
__REDIRECT_NTH
 (
asöl
, (), 
__asöl_föôe
);

65 
__REDIRECT_NTH
 (
©™2
, (, ), 
__©™2_föôe
);

66 #ifde‡
__USE_ISOC99


67 
__REDIRECT_NTH
 (
©™2f
, (, ), 
__©™2f_föôe
);

68 #ifde‡
__MATH_DECLARE_LDOUBLE


69 #ifde‡
__NO_LONG_DOUBLE_MATH


70 
__REDIRECT_NTH
 (
©™2l
, (, ),

71 
__©™2_föôe
);

73 
__REDIRECT_NTH
 (
©™2l
, (, ),

74 
__©™2l_föôe
);

79 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


81 
__REDIRECT_NTH
 (
©™h
, (), 
__©™h_föôe
);

83 #ifde‡
__USE_ISOC99


84 
__REDIRECT_NTH
 (
©™hf
, (), 
__©™hf_föôe
);

85 #ifde‡
__MATH_DECLARE_LDOUBLE


86 #ifde‡
__NO_LONG_DOUBLE_MATH


87 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™h_föôe
);

89 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™hl_föôe
);

95 
__REDIRECT_NTH
 (
cosh
, (), 
__cosh_föôe
);

96 #ifde‡
__USE_ISOC99


97 
__REDIRECT_NTH
 (
coshf
, (), 
__coshf_föôe
);

98 #ifde‡
__MATH_DECLARE_LDOUBLE


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
__REDIRECT_NTH
 (
coshl
, (), 
__cosh_föôe
);

102 
__REDIRECT_NTH
 (
coshl
, (), 
__coshl_föôe
);

108 
__REDIRECT_NTH
 (
exp
, (), 
__exp_föôe
);

109 #ifde‡
__USE_ISOC99


110 
__REDIRECT_NTH
 (
expf
, (), 
__expf_föôe
);

111 #ifde‡
__MATH_DECLARE_LDOUBLE


112 #ifde‡
__NO_LONG_DOUBLE_MATH


113 
__REDIRECT_NTH
 (
ex∂
, (), 
__exp_föôe
);

115 
__REDIRECT_NTH
 (
ex∂
, (), 
__ex∂_föôe
);

120 #ifde‡
__USE_GNU


122 
__REDIRECT_NTH
 (
exp10
, (), 
__exp10_föôe
);

123 
__REDIRECT_NTH
 (
exp10f
, (), 
__exp10f_föôe
);

124 #ifde‡
__MATH_DECLARE_LDOUBLE


125 #ifde‡
__NO_LONG_DOUBLE_MATH


126 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10_föôe
);

128 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10l_föôe
);

133 
__REDIRECT_NTH
 (
pow10
, (), 
__exp10_föôe
);

134 
__REDIRECT_NTH
 (
pow10f
, (), 
__exp10f_föôe
);

135 #ifde‡
__MATH_DECLARE_LDOUBLE


136 #ifde‡
__NO_LONG_DOUBLE_MATH


137 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10_föôe
);

139 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10l_föôe
);

144 #ifde‡
__USE_ISOC99


146 
__REDIRECT_NTH
 (
exp2
, (), 
__exp2_föôe
);

147 
__REDIRECT_NTH
 (
exp2f
, (), 
__exp2f_föôe
);

148 #ifde‡
__MATH_DECLARE_LDOUBLE


149 #ifde‡
__NO_LONG_DOUBLE_MATH


150 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2_föôe
);

152 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2l_föôe
);

158 
__REDIRECT_NTH
 (
fmod
, (, ), 
__fmod_föôe
);

159 #ifde‡
__USE_ISOC99


160 
__REDIRECT_NTH
 (
fmodf
, (, ), 
__fmodf_föôe
);

161 #ifde‡
__MATH_DECLARE_LDOUBLE


162 #ifde‡
__NO_LONG_DOUBLE_MATH


163 
__REDIRECT_NTH
 (
fmodl
, (, ),

164 
__fmod_föôe
);

166 
__REDIRECT_NTH
 (
fmodl
, (, ),

167 
__fmodl_föôe
);

172 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


174 
__REDIRECT_NTH
 (
hypŸ
, (, ), 
__hypŸ_föôe
);

176 #ifde‡
__USE_ISOC99


177 
__REDIRECT_NTH
 (
hypŸf
, (, ), 
__hypŸf_föôe
);

178 #ifde‡
__MATH_DECLARE_LDOUBLE


179 #ifde‡
__NO_LONG_DOUBLE_MATH


180 
__REDIRECT_NTH
 (
hypŸl
, (, ),

181 
__hypŸ_föôe
);

183 
__REDIRECT_NTH
 (
hypŸl
, (, ),

184 
__hypŸl_föôe
);

189 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


191 
__REDIRECT_NTH
 (
j0
, (), 
__j0_föôe
);

193 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


194 
__REDIRECT_NTH
 (
j0f
, (), 
__j0f_föôe
);

195 #ifde‡
__MATH_DECLARE_LDOUBLE


196 #ifde‡
__NO_LONG_DOUBLE_MATH


197 
__REDIRECT_NTH
 (
j0l
, (), 
__j0_föôe
);

199 
__REDIRECT_NTH
 (
j0l
, (), 
__j0l_föôe
);

204 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


206 
__REDIRECT_NTH
 (
y0
, (), 
__y0_föôe
);

208 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


209 
__REDIRECT_NTH
 (
y0f
, (), 
__y0f_föôe
);

210 #ifde‡
__MATH_DECLARE_LDOUBLE


211 #ifde‡
__NO_LONG_DOUBLE_MATH


212 
__REDIRECT_NTH
 (
y0l
, (), 
__y0_föôe
);

214 
__REDIRECT_NTH
 (
y0l
, (), 
__y0l_föôe
);

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


221 
__REDIRECT_NTH
 (
j1
, (), 
__j1_föôe
);

223 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


224 
__REDIRECT_NTH
 (
j1f
, (), 
__j1f_föôe
);

225 #ifde‡
__MATH_DECLARE_LDOUBLE


226 #ifde‡
__NO_LONG_DOUBLE_MATH


227 
__REDIRECT_NTH
 (
j1l
, (), 
__j1_föôe
);

229 
__REDIRECT_NTH
 (
j1l
, (), 
__j1l_föôe
);

234 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


236 
__REDIRECT_NTH
 (
y1
, (), 
__y1_föôe
);

238 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


239 
__REDIRECT_NTH
 (
y1f
, (), 
__y1f_föôe
);

240 #ifde‡
__MATH_DECLARE_LDOUBLE


241 #ifde‡
__NO_LONG_DOUBLE_MATH


242 
__REDIRECT_NTH
 (
y1l
, (), 
__y1_föôe
);

244 
__REDIRECT_NTH
 (
y1l
, (), 
__y1l_föôe
);

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


251 
__REDIRECT_NTH
 (
jn
, (, ), 
__jn_föôe
);

253 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


254 
__REDIRECT_NTH
 (
jnf
, (, ), 
__jnf_föôe
);

255 #ifde‡
__MATH_DECLARE_LDOUBLE


256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
__REDIRECT_NTH
 (
j∆
, (, ), 
__jn_föôe
);

259 
__REDIRECT_NTH
 (
j∆
, (, ), 
__j∆_föôe
);

264 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


266 
__REDIRECT_NTH
 (
yn
, (, ), 
__yn_föôe
);

268 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


269 
__REDIRECT_NTH
 (
ynf
, (, ), 
__ynf_föôe
);

270 #ifde‡
__MATH_DECLARE_LDOUBLE


271 #ifde‡
__NO_LONG_DOUBLE_MATH


272 
__REDIRECT_NTH
 (
y∆
, (, ), 
__yn_föôe
);

274 
__REDIRECT_NTH
 (
y∆
, (, ), 
__y∆_föôe
);

279 #ifde‡
__USE_MISC


281 
__REDIRECT_NTH
 (
lgamma_r
, (, *), 
__lgamma_r_föôe
);

282 #ifde‡
__USE_ISOC99


283 
__REDIRECT_NTH
 (
lgammaf_r
, (, *), 
__lgammaf_r_föôe
);

284 #ifde‡
__MATH_DECLARE_LDOUBLE


285 #ifde‡
__NO_LONG_DOUBLE_MATH


286 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

287 
__lgamma_r_föôe
);

289 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

290 
__lgammÆ_r_föôe
);

296 
__lgamma_r_föôe
 (, *);

297 
__lgammaf_r_föôe
 (, *);

298 #ifde‡
__NO_LONG_DOUBLE_MATH


299 
__REDIRECT_NTH
 (
__lgammÆ_r_föôe
, (, *),

300 
__lgamma_r_föôe
);

302 
__lgammÆ_r_föôe
 (, *);

305 #i‡((
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99
) \

306 && 
deföed
 
	g__exã∫_Æways_ölöe
)

308 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgamma
 (
__d
))

310 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


311  
	`__lgamma_r_föôe
 (
__d
, &
signgam
);

313 
__loˇl_signgam
 = 0;

314  
	`__lgamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

316 
	}
}

318 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__exã∫_Æways_ölöe


319 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammaf
 (
__d
))

321 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


322  
	`__lgammaf_r_föôe
 (
__d
, &
signgam
);

324 
__loˇl_signgam
 = 0;

325  
	`__lgammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

327 
	}
}

328 #ifde‡
__MATH_DECLARE_LDOUBLE


329 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammÆ
 (
__d
))

331 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


332  
	`__lgammÆ_r_föôe
 (
__d
, &
signgam
);

334 
__loˇl_signgam
 = 0;

335  
	`__lgammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

337 
	}
}

341 #i‡((
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)) \

342 && 
deföed
 
	g__exã∫_Æways_ölöe
)

344 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gamma
 (
__d
))

346  
	`__lgamma_r_föôe
 (
__d
, &
signgam
);

347 
	}
}

348 #ifde‡
__USE_ISOC99


349 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammaf
 (
__d
))

351  
	`__lgammaf_r_föôe
 (
__d
, &
signgam
);

352 
	}
}

353 #ifde‡
__MATH_DECLARE_LDOUBLE


354 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammÆ
 (
__d
))

356  
	`__lgammÆ_r_föôe
 (
__d
, &
signgam
);

357 
	}
}

363 
__REDIRECT_NTH
 (
log
, (), 
__log_föôe
);

364 #ifde‡
__USE_ISOC99


365 
__REDIRECT_NTH
 (
logf
, (), 
__logf_föôe
);

366 #ifde‡
__MATH_DECLARE_LDOUBLE


367 #ifde‡
__NO_LONG_DOUBLE_MATH


368 
__REDIRECT_NTH
 (
logl
, (), 
__log_föôe
);

370 
__REDIRECT_NTH
 (
logl
, (), 
__logl_föôe
);

376 
__REDIRECT_NTH
 (
log10
, (), 
__log10_föôe
);

377 #ifde‡
__USE_ISOC99


378 
__REDIRECT_NTH
 (
log10f
, (), 
__log10f_föôe
);

379 #ifde‡
__MATH_DECLARE_LDOUBLE


380 #ifde‡
__NO_LONG_DOUBLE_MATH


381 
__REDIRECT_NTH
 (
log10l
, (), 
__log10_föôe
);

383 
__REDIRECT_NTH
 (
log10l
, (), 
__log10l_föôe
);

388 #ifde‡
__USE_ISOC99


390 
__REDIRECT_NTH
 (
log2
, (), 
__log2_föôe
);

391 
__REDIRECT_NTH
 (
log2f
, (), 
__log2f_föôe
);

392 #ifde‡
__MATH_DECLARE_LDOUBLE


393 #ifde‡
__NO_LONG_DOUBLE_MATH


394 
__REDIRECT_NTH
 (
log2l
, (), 
__log2_föôe
);

396 
__REDIRECT_NTH
 (
log2l
, (), 
__log2l_föôe
);

402 
__REDIRECT_NTH
 (
pow
, (, ), 
__pow_föôe
);

403 #ifde‡
__USE_ISOC99


404 
__REDIRECT_NTH
 (
powf
, (, ), 
__powf_föôe
);

405 #ifde‡
__MATH_DECLARE_LDOUBLE


406 #ifde‡
__NO_LONG_DOUBLE_MATH


407 
__REDIRECT_NTH
 (
powl
, (, ),

408 
__pow_föôe
);

410 
__REDIRECT_NTH
 (
powl
, (, ),

411 
__powl_föôe
);

416 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


418 
__REDIRECT_NTH
 (
ªmaödî
, (, ), 
__ªmaödî_föôe
);

420 #ifde‡
__USE_ISOC99


421 
__REDIRECT_NTH
 (
ªmaödîf
, (, ), 
__ªmaödîf_föôe
);

422 #ifde‡
__MATH_DECLARE_LDOUBLE


423 #ifde‡
__NO_LONG_DOUBLE_MATH


424 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

425 
__ªmaödî_föôe
);

427 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

428 
__ªmaödîl_föôe
);

433 #i‡(
deföed
 
__USE_MISC
 \

434 || (
deföed
 
	g__USE_XOPEN_EXTENDED
 && !deföed 
	g__USE_XOPEN2K8
))

436 
__REDIRECT_NTH
 (
sˇlb
, (, ), 
__sˇlb_föôe
);

438 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


439 
__REDIRECT_NTH
 (
sˇlbf
, (, ), 
__sˇlbf_föôe
);

440 #ifde‡
__MATH_DECLARE_LDOUBLE


441 #ifde‡
__NO_LONG_DOUBLE_MATH


442 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

443 
__sˇlb_föôe
);

445 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

446 
__sˇlbl_föôe
);

452 
__REDIRECT_NTH
 (
söh
, (), 
__söh_föôe
);

453 #ifde‡
__USE_ISOC99


454 
__REDIRECT_NTH
 (
söhf
, (), 
__söhf_föôe
);

455 #ifde‡
__MATH_DECLARE_LDOUBLE


456 #ifde‡
__NO_LONG_DOUBLE_MATH


457 
__REDIRECT_NTH
 (
söhl
, (), 
__söh_föôe
);

459 
__REDIRECT_NTH
 (
söhl
, (), 
__söhl_föôe
);

465 
__REDIRECT_NTH
 (
sqπ
, (), 
__sqπ_föôe
);

466 #ifde‡
__USE_ISOC99


467 
__REDIRECT_NTH
 (
sqπf
, (), 
__sqπf_föôe
);

468 #ifde‡
__MATH_DECLARE_LDOUBLE


469 #ifde‡
__NO_LONG_DOUBLE_MATH


470 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπ_föôe
);

472 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπl_föôe
);

477 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__exã∫_Æways_ölöe


479 
__gamma_r_föôe
 (, *);

480 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgamma
 (
__d
))

482 
__loˇl_signgam
 = 0;

483 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

484  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

485 
	}
}

486 
__gammaf_r_föôe
 (, *);

487 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammaf
 (
__d
))

489 
__loˇl_signgam
 = 0;

490 
__ªs
 = 
	`__gammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

491  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

492 
	}
}

493 #ifde‡
__MATH_DECLARE_LDOUBLE


494 
__gammÆ_r_föôe
 (, *);

495 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammÆ
 (
__d
))

497 
__loˇl_signgam
 = 0;

498 #ifde‡
__NO_LONG_DOUBLE_MATH


499 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

501 
__ªs
 = 
	`__gammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

503  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

504 
	}
}

	@/usr/include/bits/math-vector.h

19 #i‚de‡
_MATH_H


25 
	~<bôs/libm-simd-de˛-°ubs.h
>

27 #i‡
deföed
 
__x86_64__
 && deföed 
__FAST_MATH__


28 #i‡
deföed
 
_OPENMP
 && _OPENMP >= 201307

30 
	#__DECL_SIMD_x86_64
 
	`_Pøgma
 ("om∞de˛¨êsimdÇŸöbønch")

	)

31 #ñi‡
__GNUC_PREREQ
 (6,0)

33 
	#__DECL_SIMD_x86_64
 
	`__©åibuã__
 ((
	`__simd__
 ("nŸöbønch")))

	)

36 #ifde‡
__DECL_SIMD_x86_64


37 #unde‡
__DECL_SIMD_cos


38 
	#__DECL_SIMD_cos
 
__DECL_SIMD_x86_64


	)

39 #unde‡
__DECL_SIMD_cosf


40 
	#__DECL_SIMD_cosf
 
__DECL_SIMD_x86_64


	)

41 #unde‡
__DECL_SIMD_sö


42 
	#__DECL_SIMD_sö
 
__DECL_SIMD_x86_64


	)

43 #unde‡
__DECL_SIMD_söf


44 
	#__DECL_SIMD_söf
 
__DECL_SIMD_x86_64


	)

45 #unde‡
__DECL_SIMD_söcos


46 
	#__DECL_SIMD_söcos
 
__DECL_SIMD_x86_64


	)

47 #unde‡
__DECL_SIMD_söcosf


48 
	#__DECL_SIMD_söcosf
 
__DECL_SIMD_x86_64


	)

49 #unde‡
__DECL_SIMD_log


50 
	#__DECL_SIMD_log
 
__DECL_SIMD_x86_64


	)

51 #unde‡
__DECL_SIMD_logf


52 
	#__DECL_SIMD_logf
 
__DECL_SIMD_x86_64


	)

53 #unde‡
__DECL_SIMD_exp


54 
	#__DECL_SIMD_exp
 
__DECL_SIMD_x86_64


	)

55 #unde‡
__DECL_SIMD_expf


56 
	#__DECL_SIMD_expf
 
__DECL_SIMD_x86_64


	)

57 #unde‡
__DECL_SIMD_pow


58 
	#__DECL_SIMD_pow
 
__DECL_SIMD_x86_64


	)

59 #unde‡
__DECL_SIMD_powf


60 
	#__DECL_SIMD_powf
 
__DECL_SIMD_x86_64


	)

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


52 
_MdoubÀ_BEGIN_NAMESPACE


54 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

56 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

58 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

60 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

63 
__MATHCALL_VEC
 (
cos
,, (
_MdoubÀ_
 
__x
));

65 
__MATHCALL_VEC
 (
sö
,, (
_MdoubÀ_
 
__x
));

67 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

72 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

74 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

76 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 
	g_MdoubÀ_END_NAMESPACE


79 #ifde‡
__USE_GNU


81 
__MATHDECL_VEC
 (,
söcos
,,

82 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

85 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


86 
__BEGIN_NAMESPACE_C99


88 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

90 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

92 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

93 
	g__END_NAMESPACE_C99


98 
_MdoubÀ_BEGIN_NAMESPACE


100 
__MATHCALL_VEC
 (
exp
,, (
_MdoubÀ_
 
__x
));

103 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

106 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

109 
__MATHCALL_VEC
 (
log
,, (
_MdoubÀ_
 
__x
));

112 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

115 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
)Ë
__n⁄nuŒ
 ((2));

116 
	g_MdoubÀ_END_NAMESPACE


118 #ifde‡
__USE_GNU


120 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

122 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

125 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

131 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

134 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

135 
	g__END_NAMESPACE_C99


138 #ifde‡
__USE_ISOC99


139 
__BEGIN_NAMESPACE_C99


141 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

144 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

145 
	g__END_NAMESPACE_C99


151 
_MdoubÀ_BEGIN_NAMESPACE


153 
__MATHCALL_VEC
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

156 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

157 
	g_MdoubÀ_END_NAMESPACE


159 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


160 
__BEGIN_NAMESPACE_C99


162 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

163 
	g__END_NAMESPACE_C99


166 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


167 
__BEGIN_NAMESPACE_C99


169 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

170 
	g__END_NAMESPACE_C99


176 
_MdoubÀ_BEGIN_NAMESPACE


178 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

181 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

184 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

187 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

192 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

195 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
	g_MdoubÀ_END_NAMESPACE


198 #ifde‡
__USE_MISC


199 #i‡(!
deföed
 
__˝lu•lus
 \

200 || 
	g__˝lu•lus
 < 201103L \

201 || 
	g__MATH_DECLARING_DOUBLE
 == 0)

204 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

208 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

211 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

215 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

218 #ifde‡
__USE_ISOC99


219 
__BEGIN_NAMESPACE_C99


221 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

222 
	g__END_NAMESPACE_C99


225 #ifde‡
__USE_ISOC99


226 
__BEGIN_NAMESPACE_C99


228 
__MATHCALLX
 (
«n
,, (c⁄° *
__ègb
), (
__c⁄°__
));

229 
	g__END_NAMESPACE_C99


234 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

236 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

237 #i‡(!
deföed
 
__˝lu•lus
 \

238 || 
	g__˝lu•lus
 < 201103L \

239 || 
	g__MATH_DECLARING_DOUBLE
 == 0)

241 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

245 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && 
__MATH_DECLARING_DOUBLE
)

247 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

248 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

249 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

250 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

252 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

256 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


257 
__BEGIN_NAMESPACE_C99


259 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

260 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

261 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

262 
	g__END_NAMESPACE_C99


265 #ifde‡
__USE_ISOC99


266 
__BEGIN_NAMESPACE_C99


268 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

269 
	g__END_NAMESPACE_C99


272 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

274 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

277 #ifde‡
__USE_MISC


281 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

285 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


286 
__BEGIN_NAMESPACE_C99


289 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

292 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

293 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


294 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

298 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

300 #ifde‡
__USE_ISOC99


302 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

306 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

309 #ifde‡
__USE_ISOC99


311 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

315 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

319 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

323 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

328 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

335 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

336 
__exãnsi⁄__


337 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

341 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

342 
__exãnsi⁄__


343 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

347 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

350 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

353 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

357 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

358 
__©åibuã__
 ((
__c⁄°__
));

361 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

362 
__©åibuã__
 ((
__c⁄°__
));

366 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

369 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


370 
	g__END_NAMESPACE_C99


373 #ifde‡
__USE_GNU


375 
__MATHDECL_1
 (, 
__issig«lög
,, (
_MdoubÀ_
 
__vÆue
))

376 
__©åibuã__
 ((
__c⁄°__
));

379 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

380 && 
	g__MATH_DECLARING_DOUBLE
 \

381 && !
deföed
 
	g__USE_XOPEN2K8
)

383 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

18 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


22 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


23 
	#_MATH_H_MATHDEF
 1

	)

25 #i‡
deföed
 
__x86_64__
 || (deföed 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

28 
	tÊﬂt_t
;

29 
	tdoubÀ_t
;

35 
	tÊﬂt_t
;

37 
	tdoubÀ_t
;

42 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

43 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

47 #ifde‡
__FP_FAST_FMA


48 
	#FP_FAST_FMA
 1

	)

51 #ifde‡
__FP_FAST_FMAF


52 
	#FP_FAST_FMAF
 1

	)

55 #ifde‡
__FP_FAST_FMAL


56 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/mathinline.h

19 #i‚de‡
_MATH_H


23 #i‚de‡
__exã∫_Æways_ölöe


24 
	#__MATH_INLINE
 
__ölöe


	)

26 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

30 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

32 #i‡!
__GNUC_PREREQ
 (2,97)

37 #unde‡
isgª©î


38 #unde‡
isgª©îequÆ


39 #unde‡
i¶ess


40 #unde‡
i¶es£quÆ


41 #unde‡
i¶essgª©î


42 #unde‡
isun‹dîed


43 #ifde‡
__i686__


46 
	#isgª©î
(
x
, 
y
) \

47 ({ 
__ªsu…
; \

48 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

49 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

50 
__ªsu…
; })

	)

51 
	#isgª©îequÆ
(
x
, 
y
) \

52 ({ 
__ªsu…
; \

53 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

54 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

55 
__ªsu…
; })

	)

57 
	#i¶ess
(
x
, 
y
) \

58 ({ 
__ªsu…
; \

59 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

60 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

61 
__ªsu…
; })

	)

63 
	#i¶es£quÆ
(
x
, 
y
) \

64 ({ 
__ªsu…
; \

65 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

66 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

67 
__ªsu…
; })

	)

69 
	#i¶essgª©î
(
x
, 
y
) \

70 ({ 
__ªsu…
; \

71 
	`__asm__
 ("fucomip %%st(1), %%st; setne %%al" \

72 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

73 
__ªsu…
; })

	)

75 
	#isun‹dîed
(
x
, 
y
) \

76 ({ 
__ªsu…
; \

77 
	`__asm__
 ("fucomip %%st(1), %%st; setp %%al" \

78 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

79 
__ªsu…
; })

	)

82 
	#isgª©î
(
x
, 
y
) \

83 ({ 
__ªsu…
; \

84 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

85 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

86 
__ªsu…
; })

	)

88 
	#isgª©îequÆ
(
x
, 
y
) \

89 ({ 
__ªsu…
; \

90 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

91 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

92 
__ªsu…
; })

	)

94 
	#i¶ess
(
x
, 
y
) \

95 ({ 
__ªsu…
; \

96 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

97 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

98 
__ªsu…
; })

	)

100 
	#i¶es£quÆ
(
x
, 
y
) \

101 ({ 
__ªsu…
; \

102 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

103 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

104 
__ªsu…
; })

	)

106 
	#i¶essgª©î
(
x
, 
y
) \

107 ({ 
__ªsu…
; \

108 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x44, %%ah; setz %%al" \

109 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

110 
__ªsu…
; })

	)

112 
	#isun‹dîed
(
x
, 
y
) \

113 ({ 
__ªsu…
; \

114 
	`__asm__
 ("fucompp; fnstsw; sahf; setp %%al" \

115 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

116 
__ªsu…
; })

	)

122 #i‡
__GNUC_PREREQ
 (2, 8)

123 
__BEGIN_NAMESPACE_C99


126 
__MATH_INLINE
 

127 
__NTH
 (
	$__signbôf
 (
__x
))

129 #ifde‡
__SSE2_MATH__


130 
__m
;

131 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

132  (
__m
 & 0x8) != 0;

134 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

135  
__u
.
__i
 < 0;

137 
	}
}

138 
__MATH_INLINE
 

139 
__NTH
 (
	$__signbô
 (
__x
))

141 #ifde‡
__SSE2_MATH__


142 
__m
;

143 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

144  (
__m
 & 0x80) != 0;

146 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

147  
__u
.
__i
[1] < 0;

149 
	}
}

150 
__MATH_INLINE
 

151 
__NTH
 (
	$__signbôl
 (
__x
))

153 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

154  (
__u
.
__i
[2] & 0x8000) != 0;

155 
	}
}

157 
	g__END_NAMESPACE_C99


164 #i‡
__GNUC_PREREQ
 (2, 8)

165 #i‡!
__GNUC_PREREQ
 (3, 4Ë&& !
deföed
 
__NO_MATH_INLINES
 \

166 && 
deföed
 
	g__OPTIMIZE__


170 #ifde‡
__USE_ISOC99


171 
	g__BEGIN_NAMESPACE_C99


174 #ifde‡
__SSE_MATH__


175 
__MATH_INLINE
 

176 
__NTH
 (
	$Ãötf
 (
__x
))

178 
__ªs
;

183 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

184  
__ªs
;

185 
	}
}

187 #ifde‡
__SSE2_MATH__


188 
__MATH_INLINE
 

189 
__NTH
 (
	$Ãöt
 (
__x
))

191 
__ªs
;

196 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

197  
__ªs
;

198 
	}
}

200 #ifde‡
__x86_64__


201 
__exãnsi⁄__


202 
__MATH_INLINE
 

203 
__NTH
 (
	$Œrötf
 (
__x
))

205 
__ªs
;

210 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

211  
__ªs
;

212 
	}
}

213 
__exãnsi⁄__


214 
__MATH_INLINE
 

215 
__NTH
 (
	$Œröt
 (
__x
))

217 
__ªs
;

222 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

223  
__ªs
;

224 
	}
}

227 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0 \

228 && 
deföed
 
__SSE2_MATH__


230 
__MATH_INLINE
 

231 
__NTH
 (
	$fmaxf
 (
__x
, 
__y
))

233 #ifde‡
__AVX__


234 
__ªs
;

235 
	`__asm
 ("vmaxs†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

236  
__ªs
;

238 
	`__asm
 ("maxs†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

239  
__x
;

241 
	}
}

242 
__MATH_INLINE
 

243 
__NTH
 (
	$fmax
 (
__x
, 
__y
))

245 #ifde‡
__AVX__


246 
__ªs
;

247 
	`__asm
 ("vmaxsd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

248  
__ªs
;

250 
	`__asm
 ("maxsd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

251  
__x
;

253 
	}
}

256 
__MATH_INLINE
 

257 
__NTH
 (
	$fmöf
 (
__x
, 
__y
))

259 #ifde‡
__AVX__


260 
__ªs
;

261 
	`__asm
 ("vmös†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

262  
__ªs
;

264 
	`__asm
 ("mös†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

265  
__x
;

267 
	}
}

268 
__MATH_INLINE
 

269 
__NTH
 (
	$fmö
 (
__x
, 
__y
))

271 #ifde‡
__AVX__


272 
__ªs
;

273 
	`__asm
 ("vmösd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

274  
__ªs
;

276 
	`__asm
 ("mösd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

277  
__x
;

279 
	}
}

282 
	g__END_NAMESPACE_C99


285 #i‡
deföed
 
__SSE4_1__
 && deföed 
__SSE2_MATH__


286 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


287 
__BEGIN_NAMESPACE_C99


290 
__MATH_INLINE
 

291 
__NTH
 (
	$röt
 (
__x
))

293 
__ªs
;

298 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

299  
__ªs
;

300 
	}
}

301 
__MATH_INLINE
 

302 
__NTH
 (
	$rötf
 (
__x
))

304 
__ªs
;

309 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

310  
__ªs
;

311 
	}
}

313 #ifde‡
__USE_ISOC99


315 
__MATH_INLINE
 

316 
__NTH
 (
	$√¨byöt
 (
__x
))

318 
__ªs
;

323 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

324  
__ªs
;

325 
	}
}

326 
__MATH_INLINE
 

327 
__NTH
 (
	$√¨byötf
 (
__x
))

329 
__ªs
;

334 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

335  
__ªs
;

336 
	}
}

339 
	g__END_NAMESPACE_C99


342 
__BEGIN_NAMESPACE_STD


344 
__MATH_INLINE
 

345 
__NTH
 (
	$˚û
 (
__x
))

347 
__ªs
;

348 
	`__asm
 ("roundsd $2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

349  
__ªs
;

350 
	}
}

351 
__END_NAMESPACE_STD


353 
__BEGIN_NAMESPACE_C99


354 
__MATH_INLINE
 

355 
__NTH
 (
	$˚ûf
 (
__x
))

357 
__ªs
;

358 
	`__asm
 ("rounds†$2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

359  
__ªs
;

360 
	}
}

361 
__END_NAMESPACE_C99


363 
__BEGIN_NAMESPACE_STD


365 
__MATH_INLINE
 

366 
__NTH
 (
	$Êo‹
 (
__x
))

368 
__ªs
;

369 
	`__asm
 ("roundsd $1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

370  
__ªs
;

371 
	}
}

372 
__END_NAMESPACE_STD


374 
__BEGIN_NAMESPACE_C99


375 
__MATH_INLINE
 

376 
__NTH
 (
	$Êo‹f
 (
__x
))

378 
__ªs
;

379 
	`__asm
 ("rounds†$1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

380  
__ªs
;

381 
	}
}

382 
	g__END_NAMESPACE_C99


390 #i‡!
deföed
 
__SSE2_MATH__
 && !deföed 
__x86_64__


391 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

392 && 
deföed
 
	g__OPTIMIZE__
)

396 #unde‡
m©h_îrh™dlög


405 #ifde‡
__USE_ISOC99


406 
	#__ölöe_m©h›
(
func
, 
›
) \

407 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

408 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

409 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

410 
	#__ölöe_m©h›NP
(
func
, 
›
) \

411 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

412 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

413 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

415 
	#__ölöe_m©h›
(
func
, 
›
) \

416 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

417 
	#__ölöe_m©h›NP
(
func
, 
›
) \

418 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

421 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

422 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

423 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

424 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

427 #ifde‡
__USE_ISOC99


428 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

429 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

430 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

431 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

432 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

433 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

434 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

435 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

437 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

438 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

439 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

440 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

443 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

444 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

445 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

447 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

448 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

450 
Êﬂt_ty≥
 
__ªsu…
; \

451 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

452  
__ªsu…
; \

453 }

	)

456 #ifde‡
__USE_ISOC99


457 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

458 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

459 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

460 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

461 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

462 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

463 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

464 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

465 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

466 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

467 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

468 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

469 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

470 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

471 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

472 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

473 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

474 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

475 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

476 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

477 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

478 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

479 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

480 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

482 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

483 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

484 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

485 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

486 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

487 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

488 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

489 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

490 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

491 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

492 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

493 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

496 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

497 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

498 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

500 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

501 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

503 
code
; \

504 }

	)

507 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

508 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

509 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

511 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

512 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

514 
code
; \

515 }

	)

517 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

518 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

519 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

521 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

522 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

523 
Êﬂt_ty≥
 
¨g3
)) \

525 
code
; \

526 }

	)

530 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


534 #ifde‡
__FAST_MATH__


535 #ifde‡
__USE_GNU


536 
	#__söcos_code
 \

537 
__co§
; \

538 
__sör
; \

539 
__swtmp
; \

540 
__asm
 
__vﬁ©ûe__
 \

555 : "Ò" (
__co§
), "=u" (
__sör
), "˜" (
__swtmp
Ë: "0" (
__x
)); \

556 *
__söx
 = 
__sör
; \

557 *
__cosx
 = 
__co§


	)

559 
__MATH_INLINE
 

560 
__NTH
 (
	$__söcos
 (
__x
, *
__söx
, *
__cosx
))

562 
__söcos_code
;

563 
	}
}

565 
__MATH_INLINE
 

566 
__NTH
 (
	$__söcosf
 (
__x
, *
__söx
, *
__cosx
))

568 
__söcos_code
;

569 
	}
}

571 
__MATH_INLINE
 

572 
__NTH
 (
	$__söco¶
 (
__x
, *
__söx
, *
__cosx
))

574 
__söcos_code
;

575 
	}
}

582 #i‡
__GNUC_PREREQ
 (3, 5)

583 
	#__expm1_code
 \

584 
__ãmp
; \

585 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

586  
__ãmp
 ? __ãm∞: 
__x


	)

588 
	#__expm1_code
 \

589 
__vÆue
; \

590 
__exp⁄ít
; \

591 
__ãmp
; \

592 
__asm
 
__vﬁ©ûe__
 \

601 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

602 
__asm
 
__vﬁ©ûe__
 \

604 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

605 
__ãmp
 -= 1.0; \

606 
__ãmp
 +
__vÆue
; \

607  
__ãmp
 ? __ãm∞: 
__x


	)

609 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

611 #i‡
	`__GNUC_PREREQ
 (3, 4)

612 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

614 
	#__exp_code
 \

615 
__vÆue
; \

616 
__exp⁄ít
; \

617 
__asm
 
__vﬁ©ûe__
 \

625 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

626 
__vÆue
 += 1.0; \

627 
__asm
 
__vﬁ©ûe__
 \

629 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

630  
__vÆue


	)

631 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

632 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

636 #i‡!
	`__GNUC_PREREQ
 (3, 5)

637 
	`__ölöe_m©hcodeNP
 (
èn
, 
__x
, \

638 
__vÆue
; \

639 
__vÆue2
 
	`__©åibuã__
 ((
__unu£d__
)); \

640 
__asm
 
__vﬁ©ûe__
 \

642 : "Ò" (
__vÆue2
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

643  
__vÆue
)

648 #i‡
	`__GNUC_PREREQ
 (3, 4)

649 
	`__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
,

650  
	$__buûtö_©™2l
 (
__y
, 
__x
))

652 
	#__©™2_code
 \

653 
__vÆue
; \

654 
__asm
 
__vﬁ©ûe__
 \

656 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "st(1)"); \

657  
__vÆue


	)

658 #ifde‡
__FAST_MATH__


659 
	$__ölöe_m©hcodeNP2
 (
©™2
, 
__y
, 
__x
, 
__©™2_code
)

661 
	$__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
, 
__©™2_code
)

665 #i‡
deföed
 
__FAST_MATH__
 && !
	`__GNUC_PREREQ
 (3, 5)

666 
	`__ölöe_m©hcodeNP2
 (
fmod
, 
__x
, 
__y
, \

667 
__vÆue
; \

668 
__asm
 
__vﬁ©ûe__
 \

673 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "ax", "cc"); \

674  
__vÆue
)

678 #ifde‡
__FAST_MATH__


679 #i‡!
	`__GNUC_PREREQ
 (3,3)

680 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

681 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

682 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

684 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

688 #i‡
	`__GNUC_PREREQ
 (2, 8)

689 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

690 #ifde‡
__USE_ISOC99


691 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

692 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

694 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

696 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

697 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

700 #ifde‡
__FAST_MATH__


701 #i‡!
	`__GNUC_PREREQ
 (3, 4)

703 
	`__ölöe_m©h›NP
 (
sö
, "fsin")

705 
	`__ölöe_m©h›NP
 (
cos
, "fcos")

707 
	`__ölöe_m©h›_de˛NP
 (
log
, "Êd 2; fxch; fyl2x", "0" (
__x
) : "st(1)")

710 #i‡!
	`__GNUC_PREREQ
 (3, 5)

711 
	`__ölöe_m©h›_de˛NP
 (
log10
, "Êdlg2; fxch; fyl2x", "0" (
__x
) : "st(1)")

713 
	`__ölöe_m©hcodeNP
 (
asö
, 
__x
,  
	`__©™2l
 (__x, 
	`__libc_sqπl
 (1.0 - __x * __x)))

714 
	`__ölöe_m©hcodeNP
 (
acos
, 
__x
,  
	`__©™2l
 (
	`__libc_sqπl
 (1.0 - __x * __x), __x))

717 #i‡!
	`__GNUC_PREREQ
 (3, 4)

718 
	`__ölöe_m©h›_de˛NP
 (
©™
, "Êd1; f∑èn", "0" (
__x
) : "st(1)")

722 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

723 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

724 { 
__xld
: 
__x
 
	}
}; \

725 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

726 
	g__n
.
	g__xi
[1] = 0x80000000; \

727 
	g__n
.
	g__xi
[0] = 0; \

728  
	g__n
.
	g__xld
)

731 #ifde‡
__FAST_MATH__


733 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

734 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

735  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

737 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

738 
__ex
 = 
	`__ex∂
 (
__x
); \

739  0.5 * (
__ex
 + 1.0 / __ex))

741 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

742 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

743  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

746 
	`__ölöe_m©hcodeNP
 (
Êo‹
, 
__x
, \

747 
__vÆue
; \

748 
__ign‹e
; \

749 
__cw
; \

750 
__cwtmp
; \

751 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

759 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

760 "=m" (
__cw
) \

761 : "0" (
__x
)); \

762  
__vÆue
)

764 
	`__ölöe_m©hcodeNP
 (
˚û
, 
__x
, \

765 
__vÆue
; \

766 
__ign‹e
; \

767 
__cw
; \

768 
__cwtmp
; \

769 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

777 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

778 "=m" (
__cw
) \

779 : "0" (
__x
)); \

780  
__vÆue
)

782 #ifde‡
__FAST_MATH__


783 
	#__ldexp_code
 \

784 
__vÆue
; \

785 
__asm
 
__vﬁ©ûe__
 \

787 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" ((Ë
__y
)); \

788  
__vÆue


	)

790 
__MATH_INLINE
 

791 
	`__NTH
 (
	$ldexp
 (
__x
, 
__y
))

793 
__ldexp_code
;

794 
	}
}

799 #ifde‡
__USE_ISOC99


801 #ifde‡
__FAST_MATH__


802 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

806 
	#__M_SQRT2
 1.41421356237309504880L

	)

808 #i‡!
	`__GNUC_PREREQ
 (3, 5)

809 
	`__ölöe_m©hcodeNP
 (
log1p
, 
__x
, \

810 
__vÆue
; \

811 i‡(
	`__Áb¶
 (
__x
Ë>1.0 - 0.5 * 
__M_SQRT2
) \

812 
__vÆue
 = 
	`logl
 (1.0 + 
__x
); \

814 
__asm
 
__vﬁ©ûe__
 \

818 : "Ò" (
__vÆue
Ë: "0" (
__x
) : "st(1)"); \

819  
__vÆue
)

824 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

825 
__y
 = 
	`__Áb¶
 (
__x
); \

826  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

827 * 
	$__sgn1l
 (
__x
)))

829 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

830  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

832 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

833 
__y
 = 
	`__Áb¶
 (
__x
); \

834  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

837 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

838  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

840 #i‡!
	`__GNUC_PREREQ
 (3, 5)

841 
	`__ölöe_m©hcodeNP
(
logb
, 
__x
, \

842 
__vÆue
; \

843 
__junk
; \

844 
__asm
 
__vﬁ©ûe__
 \

846 : "Ò" (
__junk
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

847  
__vÆue
)

853 #ifde‡
__USE_ISOC99


854 #ifde‡
__FAST_MATH__


856 #i‡!
	`__GNUC_PREREQ
 (3, 5)

857 
	`__ölöe_m©h›_de˛NP
 (
log2
, "Êd1; fxch; fyl2x", "0" (
__x
) : "st(1)")

860 
__MATH_INLINE
 

861 
	`__NTH
 (
	$ldexpf
 (
__x
, 
__y
))

863 
__ldexp_code
;

864 
	}
}

866 
__MATH_INLINE
 

867 
__NTH
 (
	$ldex∂
 (
__x
, 
__y
))

869 
__ldexp_code
;

870 
	}
}

872 
__ölöe_m©h›NP
 (
röt
, "frndint")

875 
	#__Ãöt_code
 \

876 
__Ãöåes
; \

877 
__asm__
 
__vﬁ©ûe__
 \

879 : "=m" (
__Ãöåes
Ë: "t" (
__x
) : "st"); \

880  
__Ãöåes


	)

881 
__MATH_INLINE
 

882 
__NTH
 (
	$Ãötf
 (
__x
))

884 
__Ãöt_code
;

885 
	}
}

886 
__MATH_INLINE
 

887 
__NTH
 (
	$Ãöt
 (
__x
))

889 
__Ãöt_code
;

890 
	}
}

891 
__MATH_INLINE
 

892 
__NTH
 (
	$Ãöé
 (
__x
))

894 
__Ãöt_code
;

895 
	}
}

896 #unde‡
__Ãöt_code


898 
	#__Œröt_code
 \

899 
__Œröåes
; \

900 
__asm__
 
__vﬁ©ûe__
 \

902 : "=m" (
__Œröåes
Ë: "t" (
__x
) : "st"); \

903  
__Œröåes


	)

904 
__exãnsi⁄__


905 
__MATH_INLINE
 

906 
__NTH
 (
	$Œrötf
 (
__x
))

908 
__Œröt_code
;

909 
	}
}

910 
__exãnsi⁄__


911 
__MATH_INLINE
 

912 
__NTH
 (
	$Œröt
 (
__x
))

914 
__Œröt_code
;

915 
	}
}

916 
__exãnsi⁄__


917 
__MATH_INLINE
 

918 
__NTH
 (
	$Œröé
 (
__x
))

920 
__Œröt_code
;

921 
	}
}

922 #unde‡
__Œröt_code


927 #ifde‡
__USE_MISC


929 #i‡
deföed
 
__FAST_MATH__
 && !
__GNUC_PREREQ
 (3, 5)

930 
__ölöe_m©hcodeNP2
 (
dªm
, 
__x
, 
__y
, \

931 
__vÆue
; \

932 
__˛obbîed
; \

933 
__asm
 
__vﬁ©ûe__
 \

938 : "Ò" (
__vÆue
), "=&a" (
__˛obbîed
Ë: "0" (
__x
), "u" (
__y
) : "cc"); \

939  
__vÆue
)

944 
__MATH_INLINE
 

945 
__NTH
 (
	$__föôe
 (
__x
))

947  (
__exãnsi⁄__


948 (((((uni⁄ { 
__d
; 
__i
[2]; }Ë{__d: 
__x
}).__i[1]

950 
	}
}

955 #unde‡
__©™2_code


956 #ifde‡
__FAST_MATH__


957 #unde‡
__expm1_code


958 #unde‡
__exp_code


959 #unde‡
__söcos_code


966 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


967 
__ölöe_m©h›
 (
__õì754_sqπ
, "fsqrt")

968 
__ölöe_m©hcode2_
 (, 
__õì754_©™2l
, 
__y
, 
__x
,

969 
__vÆue
;

970 
__asm
 
__vﬁ©ûe__
 ("fpatan\n\t"

971 : "Ò" (
__vÆue
)

972 : "0" (
__x
), "u" (
__y
) : "st(1)");

973  
__vÆue
;)

	@/usr/include/bits/mman.h

19 #i‚de‡
_SYS_MMAN_H


27 #ifde‡
__USE_MISC


28 
	#MAP_32BIT
 0x40

	)

32 #ifde‡
__USE_MISC


33 
	#MAP_DAX_EXTEND
 0x40

	)

34 
	#MAP_GROWSDOWN
 0x00100

	)

35 
	#MAP_DENYWRITE
 0x00800

	)

36 
	#MAP_EXECUTABLE
 0x01000

	)

37 
	#MAP_LOCKED
 0x02000

	)

38 
	#MAP_NORESERVE
 0x04000

	)

39 
	#MAP_POPULATE
 0x08000

	)

40 
	#MAP_NONBLOCK
 0x10000

	)

41 
	#MAP_STACK
 0x20000

	)

42 
	#MAP_HUGETLB
 0x40000

	)

46 
	~<bôs/mm™-löux.h
>

	@/usr/include/bits/nan.h

19 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

28 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#NAN
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7fc00000UL }).
__d
)

	)

39 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__q«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__q«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

48 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__q«n_uni⁄


49 
__©åibuã__
 ((
__unu£d__
)Ë{ 
__q«n_byãs
 };

50 
	#NAN
 (
__q«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifde‡
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bôs/loˇl_lim.h
>

163 #i‚def 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #i‚def 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

109 
	#__PTHREAD_SPINS
 0, 0

	)

111 
	m__nu£rs
;

112 
__exãnsi⁄__
 union

116 
	m__e•ös
;

117 
	m__ñisi⁄
;

118 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

119 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ñisi⁄


	)

120 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

121 } 
	m__ñisi⁄_d©a
;

122 
__±hªad_¶i°_t
 
	m__li°
;

125 } 
	m__d©a
;

126 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

127 
	m__Æign
;

128 } 
	t±hªad_muãx_t
;

132 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

133 
	m__Æign
;

134 } 
	t±hªad_muãx©å_t
;

143 
	m__lock
;

144 
	m__fuãx
;

145 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

146 
__exãnsi⁄__
 
	m__wakeup_£q
;

147 
__exãnsi⁄__
 
	m__wokí_£q
;

148 *
	m__muãx
;

149 
	m__nwaôîs
;

150 
	m__brﬂdˇ°_£q
;

151 } 
	m__d©a
;

152 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

153 
__exãnsi⁄__
 
	m__Æign
;

154 } 
	t±hªad_c⁄d_t
;

158 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

159 
	m__Æign
;

160 } 
	t±hªad_c⁄d©å_t
;

164 
	t±hªad_key_t
;

168 
	t±hªad_⁄˚_t
;

171 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


176 #ifde‡
__x86_64__


179 
	m__lock
;

180 
	m__ƒ_ªadîs
;

181 
	m__ªadîs_wakeup
;

182 
	m__wrôî_wakeup
;

183 
	m__ƒ_ªadîs_queued
;

184 
	m__ƒ_wrôîs_queued
;

185 
	m__wrôî
;

186 
	m__sh¨ed
;

187 sig√d 
	m__rwñisi⁄
;

188 #ifde‡ 
__ILP32__


189 
	m__∑d1
[3];

190 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

192 
	m__∑d1
[7];

193 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

195 
	m__∑d2
;

198 
	m__Êags
;

199 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

200 } 
	m__d©a
;

204 
	m__lock
;

205 
	m__ƒ_ªadîs
;

206 
	m__ªadîs_wakeup
;

207 
	m__wrôî_wakeup
;

208 
	m__ƒ_ªadîs_queued
;

209 
	m__ƒ_wrôîs_queued
;

212 
	m__Êags
;

213 
	m__sh¨ed
;

214 sig√d 
	m__rwñisi⁄
;

215 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

216 
	m__∑d2
;

217 
	m__wrôî
;

218 } 
	m__d©a
;

220 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

221 
	m__Æign
;

222 } 
	t±hªad_rwlock_t
;

226 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

227 
	m__Æign
;

228 } 
	t±hªad_rwlock©å_t
;

232 #ifde‡
__USE_XOPEN2K


234 vﬁ©ûê
	t±hªad_•ölock_t
;

241 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

242 
	m__Æign
;

243 } 
	t±hªad_b¨rõr_t
;

247 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

248 
	m__Æign
;

249 } 
	t±hªad_b¨rõøâr_t
;

253 #i‚de‡
__x86_64__


255 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/sched.h

20 #i‚de‡
__√ed_sched∑øm


22 #i‚de‡
_SCHED_H


28 
	#SCHED_OTHER
 0

	)

29 
	#SCHED_FIFO
 1

	)

30 
	#SCHED_RR
 2

	)

31 #ifde‡
__USE_GNU


32 
	#SCHED_BATCH
 3

	)

33 
	#SCHED_IDLE
 5

	)

35 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

38 #ifde‡
__USE_GNU


40 
	#CSIGNAL
 0x000000f‡

	)

41 
	#CLONE_VM
 0x00000100

	)

42 
	#CLONE_FS
 0x00000200

	)

43 
	#CLONE_FILES
 0x00000400

	)

44 
	#CLONE_SIGHAND
 0x00000800

	)

45 
	#CLONE_PTRACE
 0x00002000

	)

46 
	#CLONE_VFORK
 0x00004000

	)

48 
	#CLONE_PARENT
 0x00008000

	)

50 
	#CLONE_THREAD
 0x00010000

	)

51 
	#CLONE_NEWNS
 0x00020000

	)

52 
	#CLONE_SYSVSEM
 0x00040000

	)

53 
	#CLONE_SETTLS
 0x00080000

	)

54 
	#CLONE_PARENT_SETTID
 0x00100000

	)

56 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

58 
	#CLONE_DETACHED
 0x00400000

	)

59 
	#CLONE_UNTRACED
 0x00800000

	)

61 
	#CLONE_CHILD_SETTID
 0x01000000

	)

63 
	#CLONE_NEWUTS
 0x04000000

	)

64 
	#CLONE_NEWIPC
 0x08000000

	)

65 
	#CLONE_NEWUSER
 0x10000000

	)

66 
	#CLONE_NEWPID
 0x20000000

	)

67 
	#CLONE_NEWNET
 0x40000000

	)

68 
	#CLONE_IO
 0x80000000

	)

72 
	ssched_∑øm


74 
	m__sched_¥i‹ôy
;

77 
	g__BEGIN_DECLS


79 #ifde‡
__USE_GNU


81 
	$˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

82 
__Êags
, *
__¨g
, ...Ë
__THROW
;

85 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

88 
	$sched_gë˝u
 (Ë
__THROW
;

91 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

95 
__END_DECLS


99 #i‡!
deföed
 
__deföed_sched∑øm
 \

100 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

101 
	#__deföed_sched∑øm
 1

	)

103 
	s__sched_∑øm


105 
__sched_¥i‹ôy
;

107 #unde‡
__√ed_sched∑øm


111 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


112 
	#__˝u_£t_t_deföed


	)

114 
	#__CPU_SETSIZE
 1024

	)

115 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

118 
__CPU_MASK_TYPE
 
	t__˝u_mask
;

121 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

122 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

127 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

128 } 
	t˝u_£t_t
;

131 #i‡
	`__GNUC_PREREQ
 (2, 91)

132 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

133 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

135 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

137 
size_t
 
__i
; \

138 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

139 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

140 
__i
 = 0; __ò< 
__imax
; ++__i) \

141 
__bôs
[
__i
] = 0; \

142 
	}
} 0)

	)

144 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

145 (
__exãnsi⁄__
 \

146 ({ 
size_t
 
__˝u
 = (
˝u
); \

147 
__˝u
 / 8 < (
£tsize
) \

148 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

149 |
	`__CPUMASK
 (
__˝u
)) \

150 : 0; }))

	)

151 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

152 (
__exãnsi⁄__
 \

153 ({ 
size_t
 
__˝u
 = (
˝u
); \

154 
__˝u
 / 8 < (
£tsize
) \

155 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

156 &~
	`__CPUMASK
 (
__˝u
)) \

157 : 0; }))

	)

158 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

159 (
__exãnsi⁄__
 \

160 ({ 
size_t
 
__˝u
 = (
˝u
); \

161 
__˝u
 / 8 < (
£tsize
) \

162 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

163 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

164 : 0; }))

	)

166 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

167 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

169 #i‡
__GNUC_PREREQ
 (2, 91)

170 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

171 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

173 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

174 (
__exãnsi⁄__
 \

175 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

176 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

177 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

178 
size_t
 
__i
; \

179 
__i
 = 0; __ò< 
__imax
; ++__i) \

180 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

182 
__i
 =
__imax
; }))

	)

185 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

186 (
__exãnsi⁄__
 \

187 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

188 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

189 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

190 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

191 
size_t
 
__i
; \

192 
__i
 = 0; __ò< 
__imax
; ++__i) \

193 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

194 
__de°
; }))

	)

196 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

197 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

198 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

199 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

201 
__BEGIN_DECLS


203 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

204 
__THROW
;

205 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

206 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

208 
__END_DECLS


	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
__exãnsi⁄__
 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 
si_addr_lsb
;

113 *
_lowî
;

114 *
_uµî
;

115 } 
si_addr_bnd
;

116 } 
_sigÁu…
;

121 
si_b™d
;

122 
si_fd
;

123 } 
_sigpﬁl
;

128 *
_ˇŒ_addr
;

129 
_sysˇŒ
;

130 
_¨ch
;

131 } 
_sigsys
;

132 } 
_sifõlds
;

133 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

137 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

138 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

139 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

140 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

141 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

142 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

143 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

144 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

145 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

146 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

147 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

148 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

149 
	#si_lowî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_lowî


	)

150 
	#si_uµî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_uµî


	)

151 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

152 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

153 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

154 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

155 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

162 
SI_ASYNCNL
 = -60,

163 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

164 
SI_TKILL
 = -6,

165 
	#SI_TKILL
 
SI_TKILL


	)

166 
SI_SIGIO
,

167 
	#SI_SIGIO
 
SI_SIGIO


	)

168 
SI_ASYNCIO
,

169 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

170 
SI_MESGQ
,

171 
	#SI_MESGQ
 
SI_MESGQ


	)

172 
SI_TIMER
,

173 
	#SI_TIMER
 
SI_TIMER


	)

174 
SI_QUEUE
,

175 
	#SI_QUEUE
 
SI_QUEUE


	)

176 
SI_USER
,

177 
	#SI_USER
 
SI_USER


	)

178 
SI_KERNEL
 = 0x80

179 
	#SI_KERNEL
 
SI_KERNEL


	)

183 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


187 
ILL_ILLOPC
 = 1,

188 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

189 
ILL_ILLOPN
,

190 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

191 
ILL_ILLADR
,

192 
	#ILL_ILLADR
 
ILL_ILLADR


	)

193 
ILL_ILLTRP
,

194 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

195 
ILL_PRVOPC
,

196 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

197 
ILL_PRVREG
,

198 
	#ILL_PRVREG
 
ILL_PRVREG


	)

199 
ILL_COPROC
,

200 
	#ILL_COPROC
 
ILL_COPROC


	)

201 
ILL_BADSTK


202 
	#ILL_BADSTK
 
ILL_BADSTK


	)

208 
FPE_INTDIV
 = 1,

209 
	#FPE_INTDIV
 
FPE_INTDIV


	)

210 
FPE_INTOVF
,

211 
	#FPE_INTOVF
 
FPE_INTOVF


	)

212 
FPE_FLTDIV
,

213 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

214 
FPE_FLTOVF
,

215 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

216 
FPE_FLTUND
,

217 
	#FPE_FLTUND
 
FPE_FLTUND


	)

218 
FPE_FLTRES
,

219 
	#FPE_FLTRES
 
FPE_FLTRES


	)

220 
FPE_FLTINV
,

221 
	#FPE_FLTINV
 
FPE_FLTINV


	)

222 
FPE_FLTSUB


223 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

229 
SEGV_MAPERR
 = 1,

230 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

231 
SEGV_ACCERR


232 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

238 
BUS_ADRALN
 = 1,

239 
	#BUS_ADRALN
 
BUS_ADRALN


	)

240 
BUS_ADRERR
,

241 
	#BUS_ADRERR
 
BUS_ADRERR


	)

242 
BUS_OBJERR
,

243 
	#BUS_OBJERR
 
BUS_OBJERR


	)

244 
BUS_MCEERR_AR
,

245 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

246 
BUS_MCEERR_AO


247 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

251 #ifde‡
__USE_XOPEN_EXTENDED


255 
TRAP_BRKPT
 = 1,

256 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

257 
TRAP_TRACE


258 
	#TRAP_TRACE
 
TRAP_TRACE


	)

262 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


266 
CLD_EXITED
 = 1,

267 
	#CLD_EXITED
 
CLD_EXITED


	)

268 
CLD_KILLED
,

269 
	#CLD_KILLED
 
CLD_KILLED


	)

270 
CLD_DUMPED
,

271 
	#CLD_DUMPED
 
CLD_DUMPED


	)

272 
CLD_TRAPPED
,

273 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

274 
CLD_STOPPED
,

275 
	#CLD_STOPPED
 
CLD_STOPPED


	)

276 
CLD_CONTINUED


277 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

283 
POLL_IN
 = 1,

284 
	#POLL_IN
 
POLL_IN


	)

285 
POLL_OUT
,

286 
	#POLL_OUT
 
POLL_OUT


	)

287 
POLL_MSG
,

288 
	#POLL_MSG
 
POLL_MSG


	)

289 
POLL_ERR
,

290 
	#POLL_ERR
 
POLL_ERR


	)

291 
POLL_PRI
,

292 
	#POLL_PRI
 
POLL_PRI


	)

293 
POLL_HUP


294 
	#POLL_HUP
 
POLL_HUP


	)

298 #unde‡
__√ed_sigöfo_t


302 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

303 && !
deföed
 
__have_sigevít_t


304 
	#__have_sigevít_t
 1

	)

307 
	#__SIGEV_MAX_SIZE
 64

	)

308 #i‡
__WORDSIZE
 == 64

309 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

311 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

315 #i‚de‡
__have_±hªad_©å_t


316 
±hªad_©å_t
 
	t±hªad_©å_t
;

317 
	#__have_±hªad_©å_t
 1

	)

320 
	ssigevít


322 
sigvÆ_t
 
sigev_vÆue
;

323 
sigev_signo
;

324 
sigev_nŸify
;

328 
_∑d
[
__SIGEV_PAD_SIZE
];

332 
__pid_t
 
_tid
;

336 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

337 
±hªad_©å_t
 *
_©åibuã
;

338 } 
_sigev_thªad
;

339 } 
_sigev_un
;

340 } 
	tsigevít_t
;

343 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

344 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

349 
SIGEV_SIGNAL
 = 0,

350 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

351 
SIGEV_NONE
,

352 
	#SIGEV_NONE
 
SIGEV_NONE


	)

353 
SIGEV_THREAD
,

354 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

356 
SIGEV_THREAD_ID
 = 4

357 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #i‚de‡
_SIGNAL_H


25 
	ssig°ack


27 *
	mss_•
;

28 
	mss_⁄°ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssigÆt°ack


51 *
	mss_•
;

52 
	mss_Êags
;

53 
size_t
 
	mss_size
;

54 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/socket.h

19 #i‚de‡
__BITS_SOCKET_H


20 
	#__BITS_SOCKET_H


	)

22 #i‚de‡
_SYS_SOCKET_H


26 
	#__√ed_size_t


	)

27 
	~<°ddef.h
>

29 
	~<sys/ty≥s.h
>

32 #i‚de‡
__sockÀn_t_deföed


33 
__sockÀn_t
 
	tsockÀn_t
;

34 
	#__sockÀn_t_deföed


	)

38 
	~<bôs/sockë_ty≥.h
>

41 
	#PF_UNSPEC
 0

	)

42 
	#PF_LOCAL
 1

	)

43 
	#PF_UNIX
 
PF_LOCAL


	)

44 
	#PF_FILE
 
PF_LOCAL


	)

45 
	#PF_INET
 2

	)

46 
	#PF_AX25
 3

	)

47 
	#PF_IPX
 4

	)

48 
	#PF_APPLETALK
 5

	)

49 
	#PF_NETROM
 6

	)

50 
	#PF_BRIDGE
 7

	)

51 
	#PF_ATMPVC
 8

	)

52 
	#PF_X25
 9

	)

53 
	#PF_INET6
 10

	)

54 
	#PF_ROSE
 11

	)

55 
	#PF_DEC√t
 12

	)

56 
	#PF_NETBEUI
 13

	)

57 
	#PF_SECURITY
 14

	)

58 
	#PF_KEY
 15

	)

59 
	#PF_NETLINK
 16

	)

60 
	#PF_ROUTE
 
PF_NETLINK


	)

61 
	#PF_PACKET
 17

	)

62 
	#PF_ASH
 18

	)

63 
	#PF_ECONET
 19

	)

64 
	#PF_ATMSVC
 20

	)

65 
	#PF_RDS
 21

	)

66 
	#PF_SNA
 22

	)

67 
	#PF_IRDA
 23

	)

68 
	#PF_PPPOX
 24

	)

69 
	#PF_WANPIPE
 25

	)

70 
	#PF_LLC
 26

	)

71 
	#PF_IB
 27

	)

72 
	#PF_MPLS
 28

	)

73 
	#PF_CAN
 29

	)

74 
	#PF_TIPC
 30

	)

75 
	#PF_BLUETOOTH
 31

	)

76 
	#PF_IUCV
 32

	)

77 
	#PF_RXRPC
 33

	)

78 
	#PF_ISDN
 34

	)

79 
	#PF_PHONET
 35

	)

80 
	#PF_IEEE802154
 36

	)

81 
	#PF_CAIF
 37

	)

82 
	#PF_ALG
 38

	)

83 
	#PF_NFC
 39

	)

84 
	#PF_VSOCK
 40

	)

85 
	#PF_MAX
 41

	)

88 
	#AF_UNSPEC
 
PF_UNSPEC


	)

89 
	#AF_LOCAL
 
PF_LOCAL


	)

90 
	#AF_UNIX
 
PF_UNIX


	)

91 
	#AF_FILE
 
PF_FILE


	)

92 
	#AF_INET
 
PF_INET


	)

93 
	#AF_AX25
 
PF_AX25


	)

94 
	#AF_IPX
 
PF_IPX


	)

95 
	#AF_APPLETALK
 
PF_APPLETALK


	)

96 
	#AF_NETROM
 
PF_NETROM


	)

97 
	#AF_BRIDGE
 
PF_BRIDGE


	)

98 
	#AF_ATMPVC
 
PF_ATMPVC


	)

99 
	#AF_X25
 
PF_X25


	)

100 
	#AF_INET6
 
PF_INET6


	)

101 
	#AF_ROSE
 
PF_ROSE


	)

102 
	#AF_DEC√t
 
PF_DEC√t


	)

103 
	#AF_NETBEUI
 
PF_NETBEUI


	)

104 
	#AF_SECURITY
 
PF_SECURITY


	)

105 
	#AF_KEY
 
PF_KEY


	)

106 
	#AF_NETLINK
 
PF_NETLINK


	)

107 
	#AF_ROUTE
 
PF_ROUTE


	)

108 
	#AF_PACKET
 
PF_PACKET


	)

109 
	#AF_ASH
 
PF_ASH


	)

110 
	#AF_ECONET
 
PF_ECONET


	)

111 
	#AF_ATMSVC
 
PF_ATMSVC


	)

112 
	#AF_RDS
 
PF_RDS


	)

113 
	#AF_SNA
 
PF_SNA


	)

114 
	#AF_IRDA
 
PF_IRDA


	)

115 
	#AF_PPPOX
 
PF_PPPOX


	)

116 
	#AF_WANPIPE
 
PF_WANPIPE


	)

117 
	#AF_LLC
 
PF_LLC


	)

118 
	#AF_IB
 
PF_IB


	)

119 
	#AF_MPLS
 
PF_MPLS


	)

120 
	#AF_CAN
 
PF_CAN


	)

121 
	#AF_TIPC
 
PF_TIPC


	)

122 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

123 
	#AF_IUCV
 
PF_IUCV


	)

124 
	#AF_RXRPC
 
PF_RXRPC


	)

125 
	#AF_ISDN
 
PF_ISDN


	)

126 
	#AF_PHONET
 
PF_PHONET


	)

127 
	#AF_IEEE802154
 
PF_IEEE802154


	)

128 
	#AF_CAIF
 
PF_CAIF


	)

129 
	#AF_ALG
 
PF_ALG


	)

130 
	#AF_NFC
 
PF_NFC


	)

131 
	#AF_VSOCK
 
PF_VSOCK


	)

132 
	#AF_MAX
 
PF_MAX


	)

138 
	#SOL_RAW
 255

	)

139 
	#SOL_DECNET
 261

	)

140 
	#SOL_X25
 262

	)

141 
	#SOL_PACKET
 263

	)

142 
	#SOL_ATM
 264

	)

143 
	#SOL_AAL
 265

	)

144 
	#SOL_IRDA
 266

	)

147 
	#SOMAXCONN
 128

	)

150 
	~<bôs/sockaddr.h
>

153 
	ssockaddr


155 
__SOCKADDR_COMMON
 (
ß_
);

156 
	mß_d©a
[14];

162 
	#__ss_Æig¡y≥
 

	)

163 
	#_SS_PADSIZE
 \

164 (
_SS_SIZE
 - 
__SOCKADDR_COMMON_SIZE
 -  (
__ss_Æig¡y≥
))

	)

166 
	ssockaddr_°‹age


168 
__SOCKADDR_COMMON
 (
ss_
);

169 
	m__ss_∑ddög
[
_SS_PADSIZE
];

170 
__ss_Æig¡y≥
 
	m__ss_Æign
;

177 
	mMSG_OOB
 = 0x01,

178 
	#MSG_OOB
 
MSG_OOB


	)

179 
	mMSG_PEEK
 = 0x02,

180 
	#MSG_PEEK
 
MSG_PEEK


	)

181 
	mMSG_DONTROUTE
 = 0x04,

182 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

183 #ifde‡
__USE_GNU


185 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

186 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

188 
	mMSG_CTRUNC
 = 0x08,

189 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

190 
	mMSG_PROXY
 = 0x10,

191 
	#MSG_PROXY
 
MSG_PROXY


	)

192 
	mMSG_TRUNC
 = 0x20,

193 
	#MSG_TRUNC
 
MSG_TRUNC


	)

194 
	mMSG_DONTWAIT
 = 0x40,

195 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

196 
	mMSG_EOR
 = 0x80,

197 
	#MSG_EOR
 
MSG_EOR


	)

198 
	mMSG_WAITALL
 = 0x100,

199 
	#MSG_WAITALL
 
MSG_WAITALL


	)

200 
	mMSG_FIN
 = 0x200,

201 
	#MSG_FIN
 
MSG_FIN


	)

202 
	mMSG_SYN
 = 0x400,

203 
	#MSG_SYN
 
MSG_SYN


	)

204 
	mMSG_CONFIRM
 = 0x800,

205 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

206 
	mMSG_RST
 = 0x1000,

207 
	#MSG_RST
 
MSG_RST


	)

208 
	mMSG_ERRQUEUE
 = 0x2000,

209 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

210 
	mMSG_NOSIGNAL
 = 0x4000,

211 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

212 
	mMSG_MORE
 = 0x8000,

213 
	#MSG_MORE
 
MSG_MORE


	)

214 
	mMSG_WAITFORONE
 = 0x10000,

215 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

216 
	mMSG_FASTOPEN
 = 0x20000000,

217 
	#MSG_FASTOPEN
 
MSG_FASTOPEN


	)

219 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

222 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

228 
	smsghdr


230 *
	mmsg_«me
;

231 
sockÀn_t
 
	mmsg_«mñí
;

233 
iovec
 *
	mmsg_iov
;

234 
size_t
 
	mmsg_iovÀn
;

236 *
	mmsg_c⁄åﬁ
;

237 
size_t
 
	mmsg_c⁄åﬁÀn
;

242 
	mmsg_Êags
;

246 
	scmsghdr


248 
size_t
 
	mcmsg_Àn
;

253 
	mcmsg_Àvñ
;

254 
	mcmsg_ty≥
;

255 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

256 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

261 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

262 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

264 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

266 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

267 
	#CMSG_FIRSTHDR
(
mhdr
) \

268 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

269 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

270 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

271 & (
size_t
Ë~( (size_tË- 1))

	)

272 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

273 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

274 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

276 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

277 
cmsghdr
 *
__cmsg
Ë
__THROW
;

278 #ifde‡
__USE_EXTERN_INLINES


279 #i‚de‡
_EXTERN_INLINE


280 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

282 
_EXTERN_INLINE
 
cmsghdr
 *

283 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

285 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

287  (
cmsghdr
 *) 0;

289 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

290 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

291 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


292 + 
__mhdr
->
msg_c⁄åﬁÀn
)

293 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

294 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

296  (
cmsghdr
 *) 0;

297  
__cmsg
;

298 
	}
}

305 
	mSCM_RIGHTS
 = 0x01

306 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

307 #ifde‡
__USE_GNU


308 , 
	mSCM_CREDENTIALS
 = 0x02

309 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

313 #ifde‡
__USE_GNU


315 
	su¸ed


317 
pid_t
 
	mpid
;

318 
uid_t
 
	muid
;

319 
gid_t
 
	mgid
;

324 #i‚de‡
__USE_MISC


325 #i‚de‡
FIOGETOWN


326 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

328 #i‚de‡
FIOSETOWN


329 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

331 #i‚de‡
SIOCATMARK


332 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

334 #i‚de‡
SIOCGPGRP


335 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

337 #i‚de‡
SIOCGSTAMP


338 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

340 #i‚de‡
SIOCGSTAMPNS


341 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

343 #i‚de‡
SIOCSPGRP


344 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

349 
	~<asm/sockë.h
>

351 #i‚de‡
__USE_MISC


352 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


353 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


354 #unde‡
FIOGETOWN


356 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


357 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


358 #unde‡
FIOSETOWN


360 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


361 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


362 #unde‡
SIOCATMARK


364 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


365 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


366 #unde‡
SIOCGPGRP


368 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


369 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


370 #unde‡
SIOCGSTAMP


372 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


373 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


374 #unde‡
SIOCGSTAMPNS


376 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


377 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


378 #unde‡
SIOCSPGRP


383 
	slögî


385 
	ml_⁄off
;

386 
	ml_lögî
;

	@/usr/include/bits/socket2.h

19 #i‚de‡
_SYS_SOCKET_H


23 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

24 
__Êags
);

25 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

26 
__Êags
), 
ªcv
);

27 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

29 
__Êags
), 
__ªcv_chk
)

30 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

33 
__f‹tify_fun˘i⁄
 
ssize_t


34 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

39  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

41 i‡(
__n
 > 
	`__bos0
 (
__buf
))

42  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

44  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

45 
	}
}

47 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

48 
size_t
 
__buÊí
, 
__Êags
,

49 
__SOCKADDR_ARG
 
__addr
,

50 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

51 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

52 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

53 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

54 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

55 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

56 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

57 
size_t
 
__buÊí
, 
__Êags
,

58 
__SOCKADDR_ARG
 
__addr
,

59 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

60 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

63 
__f‹tify_fun˘i⁄
 
ssize_t


64 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

65 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

67 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

70  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

71 
__addr
, 
__addr_Àn
);

72 i‡(
__n
 > 
	`__bos0
 (
__buf
))

73  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

74 
__addr
, 
__addr_Àn
);

76  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

77 
	}
}

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #ifde‡
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__glibc_ª£rved4
;

110 
	m__glibc_ª£rved5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #ifde‡
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #ifde‡
__USE_POSIX


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #ifde‡
__USE_POSIX


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_INLINE_u«lig√d
 1

	)

27 
	#_HAVE_STRING_ARCH_memp˝y
 1

	)

31 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

32 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

33 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

34 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

35 || 
deföed
 
	g__ßndybridge__
 || deföed 
	g__haswñl__
 \

36 || 
deföed
 
	g__b⁄√Œ__
 || deföed 
	g__sûvîm⁄t__
 \

37 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

38 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

39 || 
deföed
 
	g__amdÁm10__
 || deföed 
	g__bdvî1__
 \

40 || 
deföed
 
	g__bdvî2__
 || deföed 
	g__bdvî3__
 \

41 || 
deföed
 
	g__bdvî4__
 || deföed 
	g__btvî1__
 \

42 || 
deföed
 
	g__btvî2__
)

46 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

47 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

49 #i‚de‡
__STRING_INLINE


50 #i‚de‡
__exã∫_ölöe


51 
	#__STRING_INLINE
 
ölöe


	)

53 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

58 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

59 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

60 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

62 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

63 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

64 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

65 | ((c⁄° *Ë(
§c
))[
idx
])

	)

69 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

70 
	#mem˝y
(
de°
, 
§c
, 
n
) \

71 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

72 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

73 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

74 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

75 ((
n
) == 0 \

76 ? (
de°
) \

77 : (((
n
) % 4 == 0) \

78 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

79 : (((
n
) % 2 == 0) \

80 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

81 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

83 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

84 
size_t
 
__n
);

86 
__STRING_INLINE
 *

87 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

89 
__d0
, 
__d1
;

90 *
__tmp
 = 
__de°
;

91 
__asm__
 
__vﬁ©ûe__


99 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

100 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

102  
__de°
;

103 
	}
}

105 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

106 
size_t
 
__n
);

108 
__STRING_INLINE
 *

109 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

111 
__d0
, 
__d1
;

112 *
__tmp
 = 
__de°
;

113 
__asm__
 
__vﬁ©ûe__


126 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

127 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

129  
__de°
;

130 
	}
}

132 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

134 
__STRING_INLINE
 *

135 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

137 
__d0
, 
__d1
, 
__d2
;

138 *
__tmp
 = 
__de°
;

139 
__asm__
 
__vﬁ©ûe__


150 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

151 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

152 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

153 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

155  
__de°
;

156 
	}
}

158 
	#_HAVE_STRING_ARCH_memmove
 1

	)

159 #i‚de‡
_FORCE_INLINES


162 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

164 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

165 
	`__asm__
 ("memmove");

167 
__STRING_INLINE
 *

168 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

170 
__d0
, 
__d1
, 
__d2
;

171 *
__tmp
 = 
__de°
;

172 i‡(
__de°
 < 
__§c
)

173 
__asm__
 
__vﬁ©ûe__


176 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

177 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

178 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

179 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

181 
__asm__
 
__vﬁ©ûe__


187 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

188 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

189 : "0" (
__n
), "1" (__¿+ (c⁄° *Ë
__§c
),

190 "2" (
__n
 + (*Ë
__tmp
),

191 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

192  
__de°
;

193 
	}
}

197 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

198 #i‚de‡
_FORCE_INLINES


199 #i‚de‡
__PIC__


201 
__STRING_INLINE
 

202 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

204 
__d0
, 
__d1
, 
__d2
;

205 
__ªs
;

206 
__asm__
 
__vﬁ©ûe__


214 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

215 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

216 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

217 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

219  
__ªs
;

220 
	}
}

225 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

226 
	#_USE_STRING_ARCH_mem£t
 1

	)

227 
	#mem£t
(
s
, 
c
, 
n
) \

228 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

229 ? ((
n
) == 1 \

230 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

231 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

232 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

233 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

234 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

235 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

236 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

237 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

238 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

240 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

241 *((*Ë
__s
Ë(Ë(
c
); \

242 
__s
; })

	)

244 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

245 ({ *
__s
 = (
s
); \

247 
__ui
; \

248 
__usi
; \

249 
__uc
; \

250 } *
__u
 = 
__s
; \

251 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

257 i‡((
n
) == 3 || (n) >= 5) \

258 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

261 
n
) \

264 
__u
->
__ui
 = 
__c
; \

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

267 
__u
->
__ui
 = 
__c
; \

268 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

270 
__u
->
__ui
 = 
__c
; \

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

273 
__u
->
__usi
 = (Ë
__c
; \

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

275 
__u
->
__uc
 = (Ë
__c
; \

279 
__u
->
__ui
 = 
__c
; \

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__usi
 = (Ë
__c
; \

292 
__u
->
__ui
 = 
__c
; \

293 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__uc
 = (Ë
__c
; \

305 
__u
->
__ui
 = 
__c
; \

306 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

308 
__u
->
__ui
 = 
__c
; \

309 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

311 
__u
->
__ui
 = 
__c
; \

312 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

314 
__u
->
__ui
 = 
__c
; \

319 
__s
; })

	)

321 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

322 (((
n
) % 4 == 0) \

323 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

324 
n
) \

325 : (((
n
) % 2 == 0) \

326 ? 
	`__mem£t_c˙_by2
 (
s
, \

327 ((Ë((Ë(
c
))) * 0x01010101,\

328 
n
) \

329 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

331 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

332 
size_t
 
__n
);

334 
__STRING_INLINE
 *

335 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

337 *
__tmp
 = 
__s
;

338 
__d0
;

339 #ifde‡
__i686__


340 
__asm__
 
__vﬁ©ûe__


343 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

344 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

345 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

348 
__asm__
 
__vﬁ©ûe__


354 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

355 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

356 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

359  
__s
;

360 
	}
}

362 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

363 
size_t
 
__n
);

365 
__STRING_INLINE
 *

366 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

368 
__d0
, 
__d1
;

369 *
__tmp
 = 
__s
;

370 #ifde‡
__i686__


371 
__asm__
 
__vﬁ©ûe__


375 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

376 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

377 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

380 
__asm__
 
__vﬁ©ûe__


386 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

387 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

388 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

391  
__s
;

392 
	}
}

394 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

395 (((
n
) % 4 == 0) \

396 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

397 : (((
n
) % 2 == 0) \

398 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

399 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

401 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

403 
__STRING_INLINE
 *

404 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

406 *
__tmp
 = 
__s
;

407 
__d0
;

408 
__asm__
 
__vﬁ©ûe__


418 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

419 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

420 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

422  
__s
;

423 
	}
}

425 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

427 
__STRING_INLINE
 *

428 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

430 
__d0
, 
__d1
;

431 *
__tmp
 = 
__s
;

432 
__asm__
 
__vﬁ©ûe__


443 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

444 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

445 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

447  
__s
;

448 
	}
}

452 
	#_HAVE_STRING_ARCH_memchr
 1

	)

453 #i‚de‡
_FORCE_INLINES


454 
__STRING_INLINE
 *

455 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

457 
__d0
;

458 #ifde‡
__i686__


459 
__d1
;

461 *
__ªs
;

462 i‡(
__n
 == 0)

463  
NULL
;

464 #ifde‡
__i686__


465 
__asm__
 
__vﬁ©ûe__


469 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

470 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

471 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

474 
__asm__
 
__vﬁ©ûe__


480 : "=D" (
__ªs
), "=&c" (
__d0
)

481 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

482 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

485  
__ªs
 - 1;

486 
	}
}

489 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

490 #i‚de‡
_FORCE_INLINES


491 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

493 
__STRING_INLINE
 *

494 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

496 
__d0
;

497 #ifde‡
__i686__


498 
__d1
;

500 *
__ªs
;

501 i‡(
__n
 == 0)

502  
NULL
;

503 #ifde‡
__i686__


504 
__asm__
 
__vﬁ©ûe__


510 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

511 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

512 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

515 
__asm__
 
__vﬁ©ûe__


522 : "=D" (
__ªs
), "=&c" (
__d0
)

523 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

524 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

527  
__ªs
;

528 
	}
}

529 #ifde‡
__USE_GNU


530 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

535 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

536 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

538 #i‚de‡
_FORCE_INLINES


539 
__STRING_INLINE
 *

540 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

542 
__d0
;

543 *
__ªs
;

544 
__asm__
 
__vﬁ©ûe__


547 : "=D" (
__ªs
), "=&c" (
__d0
)

548 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

549 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

551  
__ªs
 - 1;

552 
	}
}

553 #ifde‡
__USE_GNU


554 
__STRING_INLINE
 *

555 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

557  
	`__øwmemchr
 (
__s
, 
__c
);

558 
	}
}

564 
	#_HAVE_STRING_ARCH_°æí
 1

	)

565 
	#°æí
(
°r
) \

566 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

567 ? 
	`__buûtö_°æí
 (
°r
) \

568 : 
	`__°æí_g
 (
°r
)))

	)

569 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

571 
__STRING_INLINE
 
size_t


572 
	$__°æí_g
 (c⁄° *
__°r
)

574 
__dummy
;

575 c⁄° *
__tmp
 = 
__°r
;

576 
__asm__
 
__vﬁ©ûe__


582 : "Ù" (
__tmp
), "=&q" (
__dummy
)

583 : "0" (
__°r
),

584 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

586  
__tmp
 - 
__°r
 - 1;

587 
	}
}

591 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

592 
	#°r˝y
(
de°
, 
§c
) \

593 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

594 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

595 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

596 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

597 (c⁄° *Ë(
§c
), \

598 
	`°æí
 (
§c
) + 1)) \

599 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

601 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

602 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

604 
__ui
; \

605 
__usi
; \

606 
__uc
; \

607 
__c
; \

608 } *
__u
 = (*Ë
__de°
; \

609 
§˛í
) \

612 
__u
->
__uc
 = '\0'; \

615 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

618 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

619 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

620 
__u
->
__uc
 = '\0'; \

623 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__uc
 = '\0'; \

631 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

632 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

633 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

636 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

637 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

638 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

640 
__u
->
__uc
 = '\0'; \

643 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

645 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

648 (*Ë
__de°
; }))

	)

650 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

652 
__STRING_INLINE
 *

653 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

655 *
__tmp
 = 
__de°
;

656 
__dummy
;

657 
__asm__
 
__vﬁ©ûe__


666 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

667 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

668 : "0" (
__§c
), "1" (
__tmp
),

669 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

671  
__de°
;

672 
	}
}

675 #ifde‡
__USE_GNU


676 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

678 
	#__°p˝y
(
de°
, 
§c
) \

679 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

680 ? (
	`°æí
 (
§c
) + 1 <= 8 \

681 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

682 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

683 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

684 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

685 ((
§˛í
) % 4 == 0 \

686 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

687 : ((
§˛í
) % 2 == 0 \

688 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

689 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

692 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

694 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

695 (
	`__exãnsi⁄__
 ({ union { \

696 
__ui
; \

697 
__usi
; \

698 
__uc
; \

699 
__c
; \

700 } *
__u
 = (*Ë(
de°
); \

701 
§˛í
) \

704 
__u
->
__uc
 = '\0'; \

707 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

708 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

711 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

712 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

713 
__u
->
__uc
 = '\0'; \

716 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

717 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

720 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

721 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

722 
__u
->
__uc
 = '\0'; \

725 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

726 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

727 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

728 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

731 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

732 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

733 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

734 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

735 
__u
->
__uc
 = '\0'; \

738 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

739 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

740 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

741 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

744 (*Ë
__u
; }))

	)

746 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

747 
size_t
 
__§˛í
);

749 
__STRING_INLINE
 *

750 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

752 *
__tmp
 = 
__de°
;

753 
__d0
, 
__d1
;

754 
__asm__
 
__vﬁ©ûe__


762 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

763 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

765  
__tmp
;

766 
	}
}

768 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

769 
size_t
 
__§˛í
);

771 
__STRING_INLINE
 *

772 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

774 *
__tmp
 = 
__de°
;

775 
__d0
, 
__d1
;

776 
__asm__
 
__vﬁ©ûe__


789 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

790 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

791 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

792 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

794  
__tmp
 + 2;

795 
	}
}

797 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

798 
size_t
 
__§˛í
);

800 
__STRING_INLINE
 *

801 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

803 
__d0
, 
__d1
;

804 *
__tmp
 = 
__de°
;

805 
__asm__
 
__vﬁ©ûe__


816 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

817 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

818 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

819 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

821  
__tmp
;

822 
	}
}

824 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

826 
__STRING_INLINE
 *

827 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

829 *
__tmp
 = 
__de°
;

830 
__dummy
;

831 
__asm__
 
__vﬁ©ûe__


840 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

841 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

842 : "0" (
__§c
), "1" (
__tmp
),

843 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

845  
__tmp
 - 1;

846 
	}
}

851 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

852 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

853 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

854 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

855 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

856 (c⁄° *Ë(
§c
), 
n
) \

857 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

858 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

859 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

860 (((
§˛í
) % 4 == 0) \

861 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

862 : (((
§˛í
) % 2 == 0) \

863 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

864 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

866 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

867 
size_t
 
__§˛í
, size_à
__n
);

869 
__STRING_INLINE
 *

870 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

872 *
__tmp
 = 
__de°
;

873 
__dummy1
, 
__dummy2
;

874 
__asm__
 
__vﬁ©ûe__


882 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

883 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

884 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

885 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

887 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

888  
__de°
;

889 
	}
}

891 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

892 
size_t
 
__§˛í
, size_à
__n
);

894 
__STRING_INLINE
 *

895 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

897 *
__tmp
 = 
__de°
;

898 
__dummy1
, 
__dummy2
;

899 
__asm__
 
__vﬁ©ûe__


912 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

913 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

914 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

915 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

917 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

918  
__de°
;

919 
	}
}

921 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

922 
size_t
 
__§˛í
, size_à
__n
);

924 
__STRING_INLINE
 *

925 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

927 
__d0
, 
__d1
;

928 *
__tmp
 = 
__de°
;

929 
__asm__
 
__vﬁ©ûe__


940 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

941 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

942 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

943 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

945 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

946  
__de°
;

947 
	}
}

949 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

950 
size_t
 
__n
);

952 
__STRING_INLINE
 *

953 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

955 *
__tmp
 = 
__de°
;

956 
__dummy
;

957 i‡(
__n
 > 0)

958 
__asm__
 
__vﬁ©ûe__


974 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

975 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

978  
__de°
;

979 
	}
}

983 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

984 
	#°rˇt
(
de°
, 
§c
) \

985 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

986 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

987 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

989 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

990 
size_t
 
__§˛í
);

992 
__STRING_INLINE
 *

993 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

995 #ifde‡
__i686__


996 
__d0
;

997 *
__tmp
;

998 
__asm__
 
__vﬁ©ûe__


1000 : "=D" (
__tmp
), "=&c" (
__d0
),

1001 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1002 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

1003 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1005 --
__tmp
;

1007 *
__tmp
 = 
__de°
;

1008 
__asm__
 
__vﬁ©ûe__


1014 : "Ù" (
__tmp
),

1015 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1016 : "0" (
__tmp
),

1017 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1020 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1021  
__de°
;

1022 
	}
}

1024 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1026 
__STRING_INLINE
 *

1027 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1029 *
__tmp
 = 
__de°
;

1030 
__dummy
;

1031 
__asm__
 
__vﬁ©ûe__


1044 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1045 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1046 : "1" (
__tmp
), "2" (
__§c
),

1047 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1049  
__de°
;

1050 
	}
}

1054 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1055 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1056 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1057 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1058 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1059 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1060 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1061 (c⁄° *Ë(
§c
), \

1062 (
n
)Ë0, 
__de°
)) \

1063 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1065 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1066 
size_t
 
__n
);

1068 
__STRING_INLINE
 *

1069 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1071 *
__tmp
 = 
__de°
;

1072 
__dummy
;

1073 #ifde‡
__i686__


1074 
__asm__
 
__vﬁ©ûe__


1088 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1089 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1092 --
__tmp
;

1093 
__asm__
 
__vﬁ©ûe__


1110 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1111 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1114  
__de°
;

1115 
	}
}

1119 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1120 
	#°rcmp
(
s1
, 
s2
) \

1121 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1122 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1123 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1124 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1125 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1126 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1127 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1128 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1129 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1130 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s1
)) \

1133 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1134 (c⁄° *Ë(
s2
), \

1135 
	`°æí
 (
s1
))) \

1136 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1137 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1138 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1139 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1140 (c⁄° *Ë(
s2
), \

1141 
	`°æí
 (
s2
)) \

1142 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1143 (c⁄° *Ë(
s2
), \

1144 
	`°æí
 (
s2
))) \

1145 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1147 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1148 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1149 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1151 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1152 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1155 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1156 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1159 
__ªsu…
; }))

	)

1161 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1162 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1163 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1164 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1166 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1167 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1170 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1171 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1174 
__ªsu…
; }))

	)

1176 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1177 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1178 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1179 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1181 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1182 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1184 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1185 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1186 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1189 
__ªsu…
; }))

	)

1191 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1193 
__STRING_INLINE
 

1194 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1196 
__ªs
;

1197 
__asm__
 
__vﬁ©ûe__


1213 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1214 : "1" (
__s1
), "2" (
__s2
),

1215 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1216 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1218  
__ªs
;

1219 
	}
}

1223 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1224 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1225 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1226 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1227 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1228 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1229 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1231 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1232 
size_t
 
__n
);

1234 
__STRING_INLINE
 

1235 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1237 
__ªs
;

1238 
__asm__
 
__vﬁ©ûe__


1257 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1258 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1259 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1260 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1262  
__ªs
;

1263 
	}
}

1267 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1268 
	#_USE_STRING_ARCH_°rchr
 1

	)

1269 
	#°rchr
(
s
, 
c
) \

1270 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1271 ? ((
c
) == '\0' \

1272 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1273 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1274 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1276 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1278 
__STRING_INLINE
 *

1279 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1281 
__d0
;

1282 *
__ªs
;

1283 
__asm__
 
__vﬁ©ûe__


1293 : "Ù" (
__ªs
), "=&a" (
__d0
)

1294 : "0" (
__s
), "1" (
__c
),

1295 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1297  
__ªs
;

1298 
	}
}

1300 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1302 
__STRING_INLINE
 *

1303 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1305 
__d0
;

1306 *
__ªs
;

1307 
__asm__
 
__vﬁ©ûe__


1318 : "Ù" (
__ªs
), "=&a" (
__d0
)

1319 : "0" (
__s
), "1" (
__c
),

1320 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1322  
__ªs
;

1323 
	}
}

1327 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1328 
	#__°rch∫ul
(
s
, 
c
) \

1329 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1330 ? ((
c
) == '\0' \

1331 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1332 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1333 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1335 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1337 
__STRING_INLINE
 *

1338 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1340 
__d0
;

1341 *
__ªs
;

1342 
__asm__
 
__vﬁ©ûe__


1352 : "Ù" (
__ªs
), "=&a" (
__d0
)

1353 : "0" (
__s
), "1" (
__c
),

1354 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1356  
__ªs
;

1357 
	}
}

1359 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1361 
__STRING_INLINE
 *

1362 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1364 
__d0
;

1365 *
__ªs
;

1366 
__asm__
 
__vﬁ©ûe__


1377 : "Ù" (
__ªs
), "=&a" (
__d0
)

1378 : "0" (
__s
), "1" (
__c
),

1379 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1381  
__ªs
;

1382 
	}
}

1383 #ifde‡
__USE_GNU


1384 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1388 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1390 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1391 
	#ödex
(
s
, 
c
) \

1392 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1393 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1394 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1399 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1400 
	#°ºchr
(
s
, 
c
) \

1401 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1402 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1403 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1405 #ifde‡
__i686__


1406 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1408 
__STRING_INLINE
 *

1409 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1411 
__d0
, 
__d1
;

1412 *
__ªs
;

1413 
__asm__
 
__vﬁ©ûe__


1421 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1422 : "0" (1), "1" (
__s
), "2" (
__c
),

1423 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1425  
__ªs
 - 1;

1426 
	}
}

1428 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1430 
__STRING_INLINE
 *

1431 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1433 
__d0
, 
__d1
;

1434 *
__ªs
;

1435 
__asm__
 
__vﬁ©ûe__


1444 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1445 : "0" (1), "1" (
__s
), "2" (
__c
),

1446 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1448  
__ªs
 - 1;

1449 
	}
}

1451 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1453 
__STRING_INLINE
 *

1454 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1456 
__d0
, 
__d1
;

1457 *
__ªs
;

1458 
__asm__
 
__vﬁ©ûe__


1468 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1469 : "0" (0), "1" (
__s
), "2" (
__c
),

1470 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1472  
__ªs
;

1473 
	}
}

1475 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1477 
__STRING_INLINE
 *

1478 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1480 
__d0
, 
__d1
;

1481 *
__ªs
;

1482 
__asm__
 
__vﬁ©ûe__


1493 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1494 : "0" (0), "1" (
__s
), "2" (
__c
),

1495 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1497  
__ªs
;

1498 
	}
}

1502 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1504 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1505 
	#rödex
(
s
, 
c
) \

1506 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1507 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1508 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1514 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1515 
	#°rc•n
(
s
, 
ªje˘
) \

1516 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1517 ? ((
ªje˘
)[0] == '\0' \

1518 ? 
	`°æí
 (
s
) \

1519 : ((
ªje˘
)[1] == '\0' \

1520 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1521 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1522 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1524 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1526 #i‚de‡
_FORCE_INLINES


1527 
__STRING_INLINE
 
size_t


1528 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1530 
__d0
;

1531 *
__ªs
;

1532 
__asm__
 
__vﬁ©ûe__


1541 : "Ù" (
__ªs
), "=&a" (
__d0
)

1542 : "0" (
__s
), "1" (
__ªje˘
),

1543 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1545  (
__ªs
 - 1Ë- 
__s
;

1546 
	}
}

1549 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1550 
size_t
 
__ªje˘_Àn
);

1552 
__STRING_INLINE
 
size_t


1553 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1555 
__d0
, 
__d1
, 
__d2
;

1556 c⁄° *
__ªs
;

1557 
__asm__
 
__vﬁ©ûe__


1568 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1569 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1571  (
__ªs
 - 1Ë- 
__s
;

1572 
	}
}

1574 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1575 #ifde‡
__PIC__


1577 
__STRING_INLINE
 
size_t


1578 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1580 
__d0
, 
__d1
, 
__d2
;

1581 c⁄° *
__ªs
;

1582 
__asm__
 
__vﬁ©ûe__


1599 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1600 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1602  (
__ªs
 - 1Ë- 
__s
;

1603 
	}
}

1605 
__STRING_INLINE
 
size_t


1606 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1608 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1609 c⁄° *
__ªs
;

1610 
__asm__
 
__vﬁ©ûe__


1624 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1625 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1628  (
__ªs
 - 1Ë- 
__s
;

1629 
	}
}

1635 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1636 
	#°r•n
(
s
, 
ac˚±
) \

1637 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1638 ? ((
ac˚±
)[0] == '\0' \

1639 ? ((Ë(
s
), 0) \

1640 : ((
ac˚±
)[1] == '\0' \

1641 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1642 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1643 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1645 #i‚de‡
_FORCE_INLINES


1646 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1648 
__STRING_INLINE
 
size_t


1649 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1651 
__d0
;

1652 *
__ªs
;

1654 
__asm__
 
__vﬁ©ûe__


1660 : "Ù" (
__ªs
), "=&q" (
__d0
)

1661 : "0" (
__s
), "1" (
__ac˚±
),

1662 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1664  (
__ªs
 - 1Ë- 
__s
;

1665 
	}
}

1668 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1669 
size_t
 
__ac˚±_Àn
);

1671 
__STRING_INLINE
 
size_t


1672 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1674 
__d0
, 
__d1
, 
__d2
;

1675 c⁄° *
__ªs
;

1676 
__asm__
 
__vﬁ©ûe__


1687 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1688 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1691 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1692 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1694  (
__ªs
 - 1Ë- 
__s
;

1695 
	}
}

1697 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1698 #ifde‡
__PIC__


1700 
__STRING_INLINE
 
size_t


1701 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1703 
__d0
, 
__d1
, 
__d2
;

1704 c⁄° *
__ªs
;

1705 
__asm__
 
__vﬁ©ûe__


1721 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1722 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1724  (
__ªs
 - 1Ë- 
__s
;

1725 
	}
}

1727 
__STRING_INLINE
 
size_t


1728 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1730 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1731 c⁄° *
__ªs
;

1732 
__asm__
 
__vﬁ©ûe__


1746 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1747 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1749  (
__ªs
 - 1Ë- 
__s
;

1750 
	}
}

1755 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1756 
	#°Ωbrk
(
s
, 
ac˚±
) \

1757 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1758 ? ((
ac˚±
)[0] == '\0' \

1759 ? ((Ë(
s
), (*) 0) \

1760 : ((
ac˚±
)[1] == '\0' \

1761 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1762 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1763 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1765 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1766 
size_t
 
__ac˚±_Àn
);

1768 
__STRING_INLINE
 *

1769 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1771 
__d0
, 
__d1
, 
__d2
;

1772 *
__ªs
;

1773 
__asm__
 
__vﬁ©ûe__


1788 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1789 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1791  
__ªs
;

1792 
	}
}

1794 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1795 #ifde‡
__PIC__


1797 
__STRING_INLINE
 *

1798 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1800 
__d0
, 
__d1
, 
__d2
;

1801 *
__ªs
;

1802 
__asm__
 
__vﬁ©ûe__


1823 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1824 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1826  
__ªs
;

1827 
	}
}

1829 
__STRING_INLINE
 *

1830 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1832 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1833 *
__ªs
;

1834 
__asm__
 
__vﬁ©ûe__


1853 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1854 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1856  
__ªs
;

1857 
	}
}

1862 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1863 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1864 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1865 ? ((
√edÀ
)[0] == '\0' \

1866 ? (
hay°ack
) \

1867 : ((
√edÀ
)[1] == '\0' \

1868 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1869 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1870 
	`°æí
 (
√edÀ
)))) \

1871 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1875 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1876 c⁄° 
__√edÀ
[],

1877 
size_t
 
__√edÀ_Àn
);

1879 
__STRING_INLINE
 *

1880 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1881 
size_t
 
__√edÀ_Àn
)

1883 
__d0
, 
__d1
, 
__d2
;

1884 *
__ªs
;

1885 
__asm__
 
__vﬁ©ûe__


1898 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1899 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1901  
__ªs
;

1902 
	}
}

1904 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1905 c⁄° *
__√edÀ
);

1906 #ifde‡
__PIC__


1908 
__STRING_INLINE
 *

1909 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1911 
__d0
, 
__d1
, 
__d2
;

1912 *
__ªs
;

1913 
__asm__
 
__vﬁ©ûe__


1932 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1933 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1934 "d" (
__√edÀ
)

1936  
__ªs
;

1937 
	}
}

1939 
__STRING_INLINE
 *

1940 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1942 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1943 *
__ªs
;

1944 
__asm__
 
__vﬁ©ûe__


1961 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1962 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1963 "b" (
__√edÀ
)

1965  
__ªs
;

1966 
	}
}

1972 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1973 #ifde‡
__i686__


1974 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1975 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1976 ? 
	`__buûtö_ffs
 (
w‹d
) \

1977 : ({ 
__˙t
, 
__tmp
; \

1978 
__asm__
 
__vﬁ©ûe__
 \

1981 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1982 : "rm" (
w‹d
), "1" (-1)); \

1983 
__˙t
 + 1; }))

	)

1985 #i‚de‡
ff¶


1986 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1991 #i‚de‡
_FORCE_INLINES


1992 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_INLINE_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_INLINE_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_INLINE_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_INLINE_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_INLINE_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
Ë(- 
	`__°rcmp_cg
 (s2, s1,Ü2))

	)

895 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


896 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

898 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

899 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

900 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

901 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

902 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

908 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


909 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


910 #i‡
__GNUC_PREREQ
 (3, 2)

911 
	#°rc•n
(
s
, 
ªje˘
) \

912 
__exãnsi⁄__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

915 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

916 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

917 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

918 ? 
	`°æí
 (
s
) \

919 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

920 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

922 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

924 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

926 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

928 
	#°rc•n
(
s
, 
ªje˘
) \

929 
__exãnsi⁄__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

933 ? 
	`°æí
 (
s
) \

934 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

935 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

937 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

939 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

941 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

946 
__STRING_INLINE
 
size_t


947 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

949 
size_t
 
__ªsu…
 = 0;

950 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

951 ++
__ªsu…
;

952  
__ªsu…
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

956 
__ªje˘2
);

957 
__STRING_INLINE
 
size_t


958 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

960 
size_t
 
__ªsu…
 = 0;

961 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


962 && 
__s
[
__ªsu…
] !
__ªje˘2
)

963 ++
__ªsu…
;

964  
__ªsu…
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

968 
__ªje˘2
, 
__ªje˘3
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

971 
__ªje˘3
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


975 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

976 ++
__ªsu…
;

977  
__ªsu…
;

978 
	}
}

984 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


985 #i‚de‡
_HAVE_STRING_ARCH_°r•n


986 #i‡
__GNUC_PREREQ
 (3, 2)

987 
	#°r•n
(
s
, 
ac˚±
) \

988 
__exãnsi⁄__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

991 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

992 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

993 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

994 ? ((Ë(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

996 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

998 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1000 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1002 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1004 
	#°r•n
(
s
, 
ac˚±
) \

1005 
__exãnsi⁄__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1009 ? ((Ë(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1011 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1013 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1015 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1017 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1025 
size_t
 
__ªsu…
 = 0;

1027 
__s
[
__ªsu…
] =
__ac˚±
)

1028 ++
__ªsu…
;

1029  
__ªsu…
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1033 
__ac˚±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1037 
size_t
 
__ªsu…
 = 0;

1039 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1040 ++
__ªsu…
;

1041  
__ªsu…
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1045 
__ac˚±2
, 
__ac˚±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1052 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1053 ++
__ªsu…
;

1054  
__ªsu…
;

1055 
	}
}

1060 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1061 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1062 #i‡
__GNUC_PREREQ
 (3, 2)

1063 
	#°Ωbrk
(
s
, 
ac˚±
) \

1064 
__exãnsi⁄__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1067 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1068 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1069 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1070 ? ((Ë(
s
), (*Ë
NULL
) \

1071 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1072 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1074 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1076 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1078 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1080 
	#°Ωbrk
(
s
, 
ac˚±
) \

1081 
__exãnsi⁄__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1085 ? ((Ë(
s
), (*Ë
NULL
) \

1086 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1087 ? 
	`°rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1089 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1091 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1093 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1097 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1098 
__ac˚±2
);

1099 
__STRING_INLINE
 *

1100 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1103 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1104 ++
__s
;

1105  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1109 
__ac˚±2
, 
__ac˚±3
);

1110 
__STRING_INLINE
 *

1111 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1114 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1115 && *
__s
 !
__ac˚±3
)

1116 ++
__s
;

1117  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1118 
	}
}

1124 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1126 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1127 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1128 ? (*Ë(
size_t
Ë(
hay°ack
) \

1129 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1130 ? 
	`°rchr
 (
hay°ack
, \

1131 ((c⁄° *Ë(
√edÀ
))[0]) \

1132 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1133 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1137 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1138 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1139 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1140 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1141 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1142 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1143 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1144 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1147 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1148 
__STRING_INLINE
 *

1149 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1151 *
__ªsu…
;

1152 i‡(
__s
 =
NULL
)

1153 
__s
 = *
__√xç
;

1154 *
__s
 =
__£p
)

1155 ++
__s
;

1156 
__ªsu…
 = 
NULL
;

1157 i‡(*
__s
 != '\0')

1159 
__ªsu…
 = 
__s
++;

1160 *
__s
 != '\0')

1161 i‡(*
__s
++ =
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__√xç
 = 
__s
;

1168  
__ªsu…
;

1169 
	}
}

1170 #ifde‡
__USE_POSIX


1171 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1176 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1177 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1179 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1180 
	#__°r£p
(
s
, 
ªje˘
) \

1181 
__exãnsi⁄__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1185 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1186 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1187 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1188 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1190 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1192 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1194 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1197 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1198 
__STRING_INLINE
 *

1199 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1201 *
__ªtvÆ
 = *
__s
;

1202 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__ªtvÆ
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1208 
__STRING_INLINE
 *

1209 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1211 *
__ªtvÆ
 = *
__s
;

1212 i‡(
__ªtvÆ
 !
NULL
)

1214 *
__˝
 = 
__ªtvÆ
;

1217 i‡(*
__˝
 == '\0')

1219 
__˝
 = 
NULL
;

1222 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1224 *
__˝
++ = '\0';

1227 ++
__˝
;

1229 *
__s
 = 
__˝
;

1231  
__ªtvÆ
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1235 
__ªje˘3
);

1236 
__STRING_INLINE
 *

1237 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1239 *
__ªtvÆ
 = *
__s
;

1240 i‡(
__ªtvÆ
 !
NULL
)

1242 *
__˝
 = 
__ªtvÆ
;

1245 i‡(*
__˝
 == '\0')

1247 
__˝
 = 
NULL
;

1250 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1252 *
__˝
++ = '\0';

1255 ++
__˝
;

1257 *
__s
 = 
__˝
;

1259  
__ªtvÆ
;

1260 
	}
}

1261 #ifde‡
__USE_MISC


1262 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1269 #ifde‡
__USE_MISC


1271 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1272 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1273 
	~<°dlib.h
>

1276 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1278 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1279 
	#__°rdup
(
s
) \

1280 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1281 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1282 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1284 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1285 i‡(
__ªtvÆ
 !
NULL
) \

1286 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1287 
__ªtvÆ
; 
	}
})) \

1288 : 
	`__°rdup
 (
s
)))

	)

1290 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1291 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1295 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1297 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1298 
__THROW
 
__©åibuã_mÆloc__
;

1299 
	#__°∫dup
(
s
, 
n
) \

1300 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1301 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1302 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__ªtvÆ
; \

1306 i‡(
__n
 < 
__Àn
) \

1307 
__Àn
 = 
__n
 + 1; \

1308 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1309 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1313 
__Àn
 - 1); \

1315 
__ªtvÆ
; 
	}
})) \

1316 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1318 #ifde‡
__USE_XOPEN2K8


1319 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1325 #i‚de‡
_FORCE_INLINES


1326 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 #i‡!
__GNUC_PREREQ
 (5,0)

23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

27 #i‚de‡
__˝lu•lus


31 #unde‡
mem˝y


32 #unde‡
memmove


33 #unde‡
mem£t


34 #unde‡
°rˇt


35 #unde‡
°r˝y


36 #unde‡
°∫ˇt


37 #unde‡
°∫˝y


38 #ifde‡
__USE_GNU


39 #unde‡
memp˝y


40 #unde‡
°p˝y


42 #ifde‡
__USE_MISC


43 #unde‡
bc›y


44 #unde‡
bzîo


49 
__f‹tify_fun˘i⁄
 *

50 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

51 
size_t
 
__Àn
))

53  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

54 
	}
}

56 
__f‹tify_fun˘i⁄
 *

57 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__f‹tify_fun˘i⁄
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__f‹tify_fun˘i⁄
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

82 #i‡!
	`__GNUC_PREREQ
 (5,0)

83 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

84 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

86 
	`__w¨n_mem£t_zîo_Àn
 ();

87  
__de°
;

90  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

91 
	}
}

93 #ifde‡
__USE_MISC


94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

100 
__f‹tify_fun˘i⁄
 

101 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

103 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

104 
	}
}

107 
__f‹tify_fun˘i⁄
 *

108 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

110  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

111 
	}
}

113 #ifde‡
__USE_GNU


114 
__f‹tify_fun˘i⁄
 *

115 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

117  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

118 
	}
}

122 
__f‹tify_fun˘i⁄
 *

123 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

124 
size_t
 
__Àn
))

126  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

127 
	}
}

130 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

131 
size_t
 
__de°Àn
Ë
__THROW
;

132 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

133 
size_t
 
__n
), 
°≤˝y
);

135 
__f‹tify_fun˘i⁄
 *

136 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

138 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

139 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿> 
	`__bos
 (
__de°
)))

140  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

141  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

142 
	}
}

145 
__f‹tify_fun˘i⁄
 *

146 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

148  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

149 
	}
}

152 
__f‹tify_fun˘i⁄
 *

153 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

154 
size_t
 
__Àn
))

156  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

157 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_MISC


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/syscall.h

3 #i‚de‡
_SYSCALL_H


8 #i‡!
deföed
 
__x86_64__


9 
	#SYS__Œ£ek
 
__NR__Œ£ek


	)

10 
	#SYS__√w£À˘
 
__NR__√w£À˘


	)

11 
	#SYS__sys˘l
 
__NR__sys˘l


	)

12 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

13 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

14 
	#SYS_ac˘
 
__NR_ac˘


	)

15 
	#SYS_add_key
 
__NR_add_key


	)

16 
	#SYS_adjtimex
 
__NR_adjtimex


	)

17 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

18 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

19 
	#SYS_bdÊush
 
__NR_bdÊush


	)

20 
	#SYS_böd
 
__NR_böd


	)

21 
	#SYS_bpf
 
__NR_bpf


	)

22 
	#SYS_bªak
 
__NR_bªak


	)

23 
	#SYS_brk
 
__NR_brk


	)

24 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

25 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

26 
	#SYS_chdú
 
__NR_chdú


	)

27 
	#SYS_chmod
 
__NR_chmod


	)

28 
	#SYS_chown
 
__NR_chown


	)

29 
	#SYS_chown32
 
__NR_chown32


	)

30 
	#SYS_chroŸ
 
__NR_chroŸ


	)

31 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

32 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

33 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

34 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

35 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

36 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

37 
	#SYS_˛o£
 
__NR_˛o£


	)

38 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

39 
	#SYS_¸ót
 
__NR_¸ót


	)

40 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

41 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

42 
	#SYS_dup
 
__NR_dup


	)

43 
	#SYS_dup2
 
__NR_dup2


	)

44 
	#SYS_dup3
 
__NR_dup3


	)

45 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

46 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

47 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

48 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

49 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

50 
	#SYS_evítfd
 
__NR_evítfd


	)

51 
	#SYS_evítfd2
 
__NR_evítfd2


	)

52 
	#SYS_execve
 
__NR_execve


	)

53 
	#SYS_execvót
 
__NR_execvót


	)

54 
	#SYS_exô
 
__NR_exô


	)

55 
	#SYS_exô_group
 
__NR_exô_group


	)

56 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

57 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

58 
	#SYS_Ádvi£64_64
 
__NR_Ádvi£64_64


	)

59 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

60 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

61 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

62 
	#SYS_fchdú
 
__NR_fchdú


	)

63 
	#SYS_fchmod
 
__NR_fchmod


	)

64 
	#SYS_fchmod©
 
__NR_fchmod©


	)

65 
	#SYS_fchown
 
__NR_fchown


	)

66 
	#SYS_fchown32
 
__NR_fchown32


	)

67 
	#SYS_fchow«t
 
__NR_fchow«t


	)

68 
	#SYS_f˙é
 
__NR_f˙é


	)

69 
	#SYS_f˙é64
 
__NR_f˙é64


	)

70 
	#SYS_fd©async
 
__NR_fd©async


	)

71 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

72 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

73 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

74 
	#SYS_Êock
 
__NR_Êock


	)

75 
	#SYS_f‹k
 
__NR_f‹k


	)

76 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

77 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

78 
	#SYS_f°©
 
__NR_f°©


	)

79 
	#SYS_f°©64
 
__NR_f°©64


	)

80 
	#SYS_f°©©64
 
__NR_f°©©64


	)

81 
	#SYS_f°©fs
 
__NR_f°©fs


	)

82 
	#SYS_f°©fs64
 
__NR_f°©fs64


	)

83 
	#SYS_fsync
 
__NR_fsync


	)

84 
	#SYS_·ime
 
__NR_·ime


	)

85 
	#SYS_·runˇã
 
__NR_·runˇã


	)

86 
	#SYS_·runˇã64
 
__NR_·runˇã64


	)

87 
	#SYS_fuãx
 
__NR_fuãx


	)

88 
	#SYS_futimeßt
 
__NR_futimeßt


	)

89 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

90 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

91 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

92 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

93 
	#SYS_gë˝u
 
__NR_gë˝u


	)

94 
	#SYS_gëcwd
 
__NR_gëcwd


	)

95 
	#SYS_gëdíts
 
__NR_gëdíts


	)

96 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

97 
	#SYS_gëegid
 
__NR_gëegid


	)

98 
	#SYS_gëegid32
 
__NR_gëegid32


	)

99 
	#SYS_gëeuid
 
__NR_gëeuid


	)

100 
	#SYS_gëeuid32
 
__NR_gëeuid32


	)

101 
	#SYS_gëgid
 
__NR_gëgid


	)

102 
	#SYS_gëgid32
 
__NR_gëgid32


	)

103 
	#SYS_gëgroups
 
__NR_gëgroups


	)

104 
	#SYS_gëgroups32
 
__NR_gëgroups32


	)

105 
	#SYS_gëôimî
 
__NR_gëôimî


	)

106 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

107 
	#SYS_gëpgid
 
__NR_gëpgid


	)

108 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

109 
	#SYS_gëpid
 
__NR_gëpid


	)

110 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

111 
	#SYS_gëµid
 
__NR_gëµid


	)

112 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

113 
	#SYS_gëøndom
 
__NR_gëøndom


	)

114 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

115 
	#SYS_gëªsgid32
 
__NR_gëªsgid32


	)

116 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

117 
	#SYS_gëªsuid32
 
__NR_gëªsuid32


	)

118 
	#SYS_gëæimô
 
__NR_gëæimô


	)

119 
	#SYS_gërußge
 
__NR_gërußge


	)

120 
	#SYS_gësid
 
__NR_gësid


	)

121 
	#SYS_gësock«me
 
__NR_gësock«me


	)

122 
	#SYS_gësock›t
 
__NR_gësock›t


	)

123 
	#SYS_gëtid
 
__NR_gëtid


	)

124 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

125 
	#SYS_gëuid
 
__NR_gëuid


	)

126 
	#SYS_gëuid32
 
__NR_gëuid32


	)

127 
	#SYS_gëx©å
 
__NR_gëx©å


	)

128 
	#SYS_gây
 
__NR_gây


	)

129 
	#SYS_idÀ
 
__NR_idÀ


	)

130 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

131 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

132 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

133 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

134 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

135 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

136 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

137 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

138 
	#SYS_io_£tup
 
__NR_io_£tup


	)

139 
	#SYS_io_submô
 
__NR_io_submô


	)

140 
	#SYS_io˘l
 
__NR_io˘l


	)

141 
	#SYS_i›îm
 
__NR_i›îm


	)

142 
	#SYS_i›l
 
__NR_i›l


	)

143 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

144 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

145 
	#SYS_ùc
 
__NR_ùc


	)

146 
	#SYS_kcmp
 
__NR_kcmp


	)

147 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

148 
	#SYS_key˘l
 
__NR_key˘l


	)

149 
	#SYS_kûl
 
__NR_kûl


	)

150 
	#SYS_lchown
 
__NR_lchown


	)

151 
	#SYS_lchown32
 
__NR_lchown32


	)

152 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

153 
	#SYS_lök
 
__NR_lök


	)

154 
	#SYS_lök©
 
__NR_lök©


	)

155 
	#SYS_li°í
 
__NR_li°í


	)

156 
	#SYS_li°x©å
 
__NR_li°x©å


	)

157 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

158 
	#SYS_lock
 
__NR_lock


	)

159 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

160 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

161 
	#SYS_l£ek
 
__NR_l£ek


	)

162 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

163 
	#SYS_l°©
 
__NR_l°©


	)

164 
	#SYS_l°©64
 
__NR_l°©64


	)

165 
	#SYS_madvi£
 
__NR_madvi£


	)

166 
	#SYS_mböd
 
__NR_mböd


	)

167 
	#SYS_memb¨rõr
 
__NR_memb¨rõr


	)

168 
	#SYS_memfd_¸óã
 
__NR_memfd_¸óã


	)

169 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

170 
	#SYS_möc‹e
 
__NR_möc‹e


	)

171 
	#SYS_mkdú
 
__NR_mkdú


	)

172 
	#SYS_mkdú©
 
__NR_mkdú©


	)

173 
	#SYS_mknod
 
__NR_mknod


	)

174 
	#SYS_mknod©
 
__NR_mknod©


	)

175 
	#SYS_mlock
 
__NR_mlock


	)

176 
	#SYS_mlock2
 
__NR_mlock2


	)

177 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

178 
	#SYS_mm≠
 
__NR_mm≠


	)

179 
	#SYS_mm≠2
 
__NR_mm≠2


	)

180 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

181 
	#SYS_mou¡
 
__NR_mou¡


	)

182 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

183 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

184 
	#SYS_mpx
 
__NR_mpx


	)

185 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

186 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

187 
	#SYS_mq_›í
 
__NR_mq_›í


	)

188 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

189 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

190 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

191 
	#SYS_mªm≠
 
__NR_mªm≠


	)

192 
	#SYS_msync
 
__NR_msync


	)

193 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

194 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

195 
	#SYS_munm≠
 
__NR_munm≠


	)

196 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

197 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

198 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

199 
	#SYS_ni˚
 
__NR_ni˚


	)

200 
	#SYS_ﬁdf°©
 
__NR_ﬁdf°©


	)

201 
	#SYS_ﬁdl°©
 
__NR_ﬁdl°©


	)

202 
	#SYS_ﬁdﬁdu«me
 
__NR_ﬁdﬁdu«me


	)

203 
	#SYS_ﬁd°©
 
__NR_ﬁd°©


	)

204 
	#SYS_ﬁdu«me
 
__NR_ﬁdu«me


	)

205 
	#SYS_›í
 
__NR_›í


	)

206 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

207 
	#SYS_›í©
 
__NR_›í©


	)

208 
	#SYS_∑u£
 
__NR_∑u£


	)

209 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

210 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

211 
	#SYS_pùe
 
__NR_pùe


	)

212 
	#SYS_pùe2
 
__NR_pùe2


	)

213 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

214 
	#SYS_pﬁl
 
__NR_pﬁl


	)

215 
	#SYS_µﬁl
 
__NR_µﬁl


	)

216 
	#SYS_¥˘l
 
__NR_¥˘l


	)

217 
	#SYS_¥ód64
 
__NR_¥ód64


	)

218 
	#SYS_¥ódv
 
__NR_¥ódv


	)

219 
	#SYS_¥limô64
 
__NR_¥limô64


	)

220 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

221 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

222 
	#SYS_¥of
 
__NR_¥of


	)

223 
	#SYS_¥ofû
 
__NR_¥ofû


	)

224 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

225 
	#SYS_±ø˚
 
__NR_±ø˚


	)

226 
	#SYS_puçmsg
 
__NR_puçmsg


	)

227 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

228 
	#SYS_pwrôe64_sync
 
__NR_pwrôe64_sync


	)

229 
	#SYS_pwrôev
 
__NR_pwrôev


	)

230 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

231 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

232 
	#SYS_ªad
 
__NR_ªad


	)

233 
	#SYS_ªadahód
 
__NR_ªadahód


	)

234 
	#SYS_ªaddú
 
__NR_ªaddú


	)

235 
	#SYS_ªadlök
 
__NR_ªadlök


	)

236 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

237 
	#SYS_ªadv
 
__NR_ªadv


	)

238 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

239 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

240 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

241 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

242 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

243 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

244 
	#SYS_ª«me
 
__NR_ª«me


	)

245 
	#SYS_ª«mót
 
__NR_ª«mót


	)

246 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

247 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

248 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

249 
	#SYS_rmdú
 
__NR_rmdú


	)

250 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

251 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

252 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

253 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

254 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

255 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

256 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

257 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

258 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

259 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

260 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

261 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

262 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

263 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

264 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

265 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

266 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

267 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

268 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

269 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

270 
	#SYS_£ccomp
 
__NR_£ccomp


	)

271 
	#SYS_£À˘
 
__NR_£À˘


	)

272 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

273 
	#SYS_£ndfûe64
 
__NR_£ndfûe64


	)

274 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

275 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

276 
	#SYS_£ndto
 
__NR_£ndto


	)

277 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

278 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

279 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

280 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

281 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

282 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

283 
	#SYS_£tfsgid32
 
__NR_£tfsgid32


	)

284 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

285 
	#SYS_£tfsuid32
 
__NR_£tfsuid32


	)

286 
	#SYS_£tgid
 
__NR_£tgid


	)

287 
	#SYS_£tgid32
 
__NR_£tgid32


	)

288 
	#SYS_£tgroups
 
__NR_£tgroups


	)

289 
	#SYS_£tgroups32
 
__NR_£tgroups32


	)

290 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

291 
	#SYS_£tôimî
 
__NR_£tôimî


	)

292 
	#SYS_£äs
 
__NR_£äs


	)

293 
	#SYS_£çgid
 
__NR_£çgid


	)

294 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

295 
	#SYS_£åegid
 
__NR_£åegid


	)

296 
	#SYS_£åegid32
 
__NR_£åegid32


	)

297 
	#SYS_£åesgid
 
__NR_£åesgid


	)

298 
	#SYS_£åesgid32
 
__NR_£åesgid32


	)

299 
	#SYS_£åesuid
 
__NR_£åesuid


	)

300 
	#SYS_£åesuid32
 
__NR_£åesuid32


	)

301 
	#SYS_£åeuid
 
__NR_£åeuid


	)

302 
	#SYS_£åeuid32
 
__NR_£åeuid32


	)

303 
	#SYS_£ålimô
 
__NR_£ålimô


	)

304 
	#SYS_£tsid
 
__NR_£tsid


	)

305 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

306 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

307 
	#SYS_£tuid
 
__NR_£tuid


	)

308 
	#SYS_£tuid32
 
__NR_£tuid32


	)

309 
	#SYS_£tx©å
 
__NR_£tx©å


	)

310 
	#SYS_sgëmask
 
__NR_sgëmask


	)

311 
	#SYS_shutdown
 
__NR_shutdown


	)

312 
	#SYS_siga˘i⁄
 
__NR_siga˘i⁄


	)

313 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

314 
	#SYS_sig«l
 
__NR_sig«l


	)

315 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

316 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

317 
	#SYS_sig≥ndög
 
__NR_sig≥ndög


	)

318 
	#SYS_sig¥ocmask
 
__NR_sig¥ocmask


	)

319 
	#SYS_sigªtu∫
 
__NR_sigªtu∫


	)

320 
	#SYS_sigsu•íd
 
__NR_sigsu•íd


	)

321 
	#SYS_sockë
 
__NR_sockë


	)

322 
	#SYS_sockëˇŒ
 
__NR_sockëˇŒ


	)

323 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

324 
	#SYS_•li˚
 
__NR_•li˚


	)

325 
	#SYS_s£tmask
 
__NR_s£tmask


	)

326 
	#SYS_°©
 
__NR_°©


	)

327 
	#SYS_°©64
 
__NR_°©64


	)

328 
	#SYS_°©fs
 
__NR_°©fs


	)

329 
	#SYS_°©fs64
 
__NR_°©fs64


	)

330 
	#SYS_°ime
 
__NR_°ime


	)

331 
	#SYS_°ty
 
__NR_°ty


	)

332 
	#SYS_sw≠off
 
__NR_sw≠off


	)

333 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

334 
	#SYS_symlök
 
__NR_symlök


	)

335 
	#SYS_symlök©
 
__NR_symlök©


	)

336 
	#SYS_sync
 
__NR_sync


	)

337 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

338 
	#SYS_syncfs
 
__NR_syncfs


	)

339 
	#SYS_sysfs
 
__NR_sysfs


	)

340 
	#SYS_sysöfo
 
__NR_sysöfo


	)

341 
	#SYS_sy¶og
 
__NR_sy¶og


	)

342 
	#SYS_ãe
 
__NR_ãe


	)

343 
	#SYS_tgkûl
 
__NR_tgkûl


	)

344 
	#SYS_time
 
__NR_time


	)

345 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

346 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

347 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

348 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

349 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

350 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

351 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

352 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

353 
	#SYS_times
 
__NR_times


	)

354 
	#SYS_tkûl
 
__NR_tkûl


	)

355 
	#SYS_åunˇã
 
__NR_åunˇã


	)

356 
	#SYS_åunˇã64
 
__NR_åunˇã64


	)

357 
	#SYS_ugëæimô
 
__NR_ugëæimô


	)

358 
	#SYS_ulimô
 
__NR_ulimô


	)

359 
	#SYS_umask
 
__NR_umask


	)

360 
	#SYS_umou¡
 
__NR_umou¡


	)

361 
	#SYS_umou¡2
 
__NR_umou¡2


	)

362 
	#SYS_u«me
 
__NR_u«me


	)

363 
	#SYS_u∆ök
 
__NR_u∆ök


	)

364 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

365 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

366 
	#SYS_u£lib
 
__NR_u£lib


	)

367 
	#SYS_u£rÁu…fd
 
__NR_u£rÁu…fd


	)

368 
	#SYS_u°©
 
__NR_u°©


	)

369 
	#SYS_utime
 
__NR_utime


	)

370 
	#SYS_utimíßt
 
__NR_utimíßt


	)

371 
	#SYS_utimes
 
__NR_utimes


	)

372 
	#SYS_vf‹k
 
__NR_vf‹k


	)

373 
	#SYS_vh™gup
 
__NR_vh™gup


	)

374 
	#SYS_vm86
 
__NR_vm86


	)

375 
	#SYS_vm86ﬁd
 
__NR_vm86ﬁd


	)

376 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

377 
	#SYS_v£rvî
 
__NR_v£rvî


	)

378 
	#SYS_waô4
 
__NR_waô4


	)

379 
	#SYS_waôid
 
__NR_waôid


	)

380 
	#SYS_waôpid
 
__NR_waôpid


	)

381 
	#SYS_wrôe
 
__NR_wrôe


	)

382 
	#SYS_wrôev
 
__NR_wrôev


	)

384 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


385 
	#SYS__sys˘l
 
__NR__sys˘l


	)

386 
	#SYS_ac˚±
 
__NR_ac˚±


	)

387 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

388 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

389 
	#SYS_ac˘
 
__NR_ac˘


	)

390 
	#SYS_add_key
 
__NR_add_key


	)

391 
	#SYS_adjtimex
 
__NR_adjtimex


	)

392 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

393 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

394 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

395 
	#SYS_böd
 
__NR_böd


	)

396 
	#SYS_bpf
 
__NR_bpf


	)

397 
	#SYS_brk
 
__NR_brk


	)

398 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

399 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

400 
	#SYS_chdú
 
__NR_chdú


	)

401 
	#SYS_chmod
 
__NR_chmod


	)

402 
	#SYS_chown
 
__NR_chown


	)

403 
	#SYS_chroŸ
 
__NR_chroŸ


	)

404 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

405 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

406 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

407 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

408 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

409 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

410 
	#SYS_˛o£
 
__NR_˛o£


	)

411 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

412 
	#SYS_¸ót
 
__NR_¸ót


	)

413 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

414 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

415 
	#SYS_dup
 
__NR_dup


	)

416 
	#SYS_dup2
 
__NR_dup2


	)

417 
	#SYS_dup3
 
__NR_dup3


	)

418 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

419 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

420 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

421 
	#SYS_ïﬁl_˘l_ﬁd
 
__NR_ïﬁl_˘l_ﬁd


	)

422 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

423 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

424 
	#SYS_ïﬁl_waô_ﬁd
 
__NR_ïﬁl_waô_ﬁd


	)

425 
	#SYS_evítfd
 
__NR_evítfd


	)

426 
	#SYS_evítfd2
 
__NR_evítfd2


	)

427 
	#SYS_execve
 
__NR_execve


	)

428 
	#SYS_execvót
 
__NR_execvót


	)

429 
	#SYS_exô
 
__NR_exô


	)

430 
	#SYS_exô_group
 
__NR_exô_group


	)

431 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

432 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

433 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

434 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

435 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

436 
	#SYS_fchdú
 
__NR_fchdú


	)

437 
	#SYS_fchmod
 
__NR_fchmod


	)

438 
	#SYS_fchmod©
 
__NR_fchmod©


	)

439 
	#SYS_fchown
 
__NR_fchown


	)

440 
	#SYS_fchow«t
 
__NR_fchow«t


	)

441 
	#SYS_f˙é
 
__NR_f˙é


	)

442 
	#SYS_fd©async
 
__NR_fd©async


	)

443 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

444 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

445 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

446 
	#SYS_Êock
 
__NR_Êock


	)

447 
	#SYS_f‹k
 
__NR_f‹k


	)

448 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

449 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

450 
	#SYS_f°©
 
__NR_f°©


	)

451 
	#SYS_f°©fs
 
__NR_f°©fs


	)

452 
	#SYS_fsync
 
__NR_fsync


	)

453 
	#SYS_·runˇã
 
__NR_·runˇã


	)

454 
	#SYS_fuãx
 
__NR_fuãx


	)

455 
	#SYS_futimeßt
 
__NR_futimeßt


	)

456 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

457 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

458 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

459 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

460 
	#SYS_gë˝u
 
__NR_gë˝u


	)

461 
	#SYS_gëcwd
 
__NR_gëcwd


	)

462 
	#SYS_gëdíts
 
__NR_gëdíts


	)

463 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

464 
	#SYS_gëegid
 
__NR_gëegid


	)

465 
	#SYS_gëeuid
 
__NR_gëeuid


	)

466 
	#SYS_gëgid
 
__NR_gëgid


	)

467 
	#SYS_gëgroups
 
__NR_gëgroups


	)

468 
	#SYS_gëôimî
 
__NR_gëôimî


	)

469 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

470 
	#SYS_gëpgid
 
__NR_gëpgid


	)

471 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

472 
	#SYS_gëpid
 
__NR_gëpid


	)

473 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

474 
	#SYS_gëµid
 
__NR_gëµid


	)

475 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

476 
	#SYS_gëøndom
 
__NR_gëøndom


	)

477 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

478 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

479 
	#SYS_gëæimô
 
__NR_gëæimô


	)

480 
	#SYS_gërußge
 
__NR_gërußge


	)

481 
	#SYS_gësid
 
__NR_gësid


	)

482 
	#SYS_gësock«me
 
__NR_gësock«me


	)

483 
	#SYS_gësock›t
 
__NR_gësock›t


	)

484 
	#SYS_gëtid
 
__NR_gëtid


	)

485 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

486 
	#SYS_gëuid
 
__NR_gëuid


	)

487 
	#SYS_gëx©å
 
__NR_gëx©å


	)

488 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

489 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

490 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

491 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

492 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

493 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

494 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

495 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

496 
	#SYS_io_£tup
 
__NR_io_£tup


	)

497 
	#SYS_io_submô
 
__NR_io_submô


	)

498 
	#SYS_io˘l
 
__NR_io˘l


	)

499 
	#SYS_i›îm
 
__NR_i›îm


	)

500 
	#SYS_i›l
 
__NR_i›l


	)

501 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

502 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

503 
	#SYS_kcmp
 
__NR_kcmp


	)

504 
	#SYS_kexec_fûe_lﬂd
 
__NR_kexec_fûe_lﬂd


	)

505 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

506 
	#SYS_key˘l
 
__NR_key˘l


	)

507 
	#SYS_kûl
 
__NR_kûl


	)

508 
	#SYS_lchown
 
__NR_lchown


	)

509 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

510 
	#SYS_lök
 
__NR_lök


	)

511 
	#SYS_lök©
 
__NR_lök©


	)

512 
	#SYS_li°í
 
__NR_li°í


	)

513 
	#SYS_li°x©å
 
__NR_li°x©å


	)

514 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

515 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

516 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

517 
	#SYS_l£ek
 
__NR_l£ek


	)

518 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

519 
	#SYS_l°©
 
__NR_l°©


	)

520 
	#SYS_madvi£
 
__NR_madvi£


	)

521 
	#SYS_mböd
 
__NR_mböd


	)

522 
	#SYS_memb¨rõr
 
__NR_memb¨rõr


	)

523 
	#SYS_memfd_¸óã
 
__NR_memfd_¸óã


	)

524 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

525 
	#SYS_möc‹e
 
__NR_möc‹e


	)

526 
	#SYS_mkdú
 
__NR_mkdú


	)

527 
	#SYS_mkdú©
 
__NR_mkdú©


	)

528 
	#SYS_mknod
 
__NR_mknod


	)

529 
	#SYS_mknod©
 
__NR_mknod©


	)

530 
	#SYS_mlock
 
__NR_mlock


	)

531 
	#SYS_mlock2
 
__NR_mlock2


	)

532 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

533 
	#SYS_mm≠
 
__NR_mm≠


	)

534 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

535 
	#SYS_mou¡
 
__NR_mou¡


	)

536 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

537 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

538 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

539 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

540 
	#SYS_mq_›í
 
__NR_mq_›í


	)

541 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

542 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

543 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

544 
	#SYS_mªm≠
 
__NR_mªm≠


	)

545 
	#SYS_msg˘l
 
__NR_msg˘l


	)

546 
	#SYS_msggë
 
__NR_msggë


	)

547 
	#SYS_msgrcv
 
__NR_msgrcv


	)

548 
	#SYS_msg¢d
 
__NR_msg¢d


	)

549 
	#SYS_msync
 
__NR_msync


	)

550 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

551 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

552 
	#SYS_munm≠
 
__NR_munm≠


	)

553 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

554 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

555 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

556 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

557 
	#SYS_›í
 
__NR_›í


	)

558 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

559 
	#SYS_›í©
 
__NR_›í©


	)

560 
	#SYS_∑u£
 
__NR_∑u£


	)

561 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

562 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

563 
	#SYS_pùe
 
__NR_pùe


	)

564 
	#SYS_pùe2
 
__NR_pùe2


	)

565 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

566 
	#SYS_pﬁl
 
__NR_pﬁl


	)

567 
	#SYS_µﬁl
 
__NR_µﬁl


	)

568 
	#SYS_¥˘l
 
__NR_¥˘l


	)

569 
	#SYS_¥ód64
 
__NR_¥ód64


	)

570 
	#SYS_¥ódv
 
__NR_¥ódv


	)

571 
	#SYS_¥limô64
 
__NR_¥limô64


	)

572 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

573 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

574 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

575 
	#SYS_±ø˚
 
__NR_±ø˚


	)

576 
	#SYS_puçmsg
 
__NR_puçmsg


	)

577 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

578 
	#SYS_pwrôev
 
__NR_pwrôev


	)

579 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

580 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

581 
	#SYS_ªad
 
__NR_ªad


	)

582 
	#SYS_ªadahód
 
__NR_ªadahód


	)

583 
	#SYS_ªadlök
 
__NR_ªadlök


	)

584 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

585 
	#SYS_ªadv
 
__NR_ªadv


	)

586 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

587 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

588 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

589 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

590 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

591 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

592 
	#SYS_ª«me
 
__NR_ª«me


	)

593 
	#SYS_ª«mót
 
__NR_ª«mót


	)

594 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

595 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

596 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

597 
	#SYS_rmdú
 
__NR_rmdú


	)

598 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

599 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

600 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

601 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

602 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

603 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

604 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

605 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

606 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

607 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

608 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

609 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

610 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

611 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

612 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

613 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

614 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

615 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

616 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

617 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

618 
	#SYS_£ccomp
 
__NR_£ccomp


	)

619 
	#SYS_£curôy
 
__NR_£curôy


	)

620 
	#SYS_£À˘
 
__NR_£À˘


	)

621 
	#SYS_£m˘l
 
__NR_£m˘l


	)

622 
	#SYS_£mgë
 
__NR_£mgë


	)

623 
	#SYS_£m›
 
__NR_£m›


	)

624 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

625 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

626 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

627 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

628 
	#SYS_£ndto
 
__NR_£ndto


	)

629 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

630 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

631 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

632 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

633 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

634 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

635 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

636 
	#SYS_£tgid
 
__NR_£tgid


	)

637 
	#SYS_£tgroups
 
__NR_£tgroups


	)

638 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

639 
	#SYS_£tôimî
 
__NR_£tôimî


	)

640 
	#SYS_£äs
 
__NR_£äs


	)

641 
	#SYS_£çgid
 
__NR_£çgid


	)

642 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

643 
	#SYS_£åegid
 
__NR_£åegid


	)

644 
	#SYS_£åesgid
 
__NR_£åesgid


	)

645 
	#SYS_£åesuid
 
__NR_£åesuid


	)

646 
	#SYS_£åeuid
 
__NR_£åeuid


	)

647 
	#SYS_£ålimô
 
__NR_£ålimô


	)

648 
	#SYS_£tsid
 
__NR_£tsid


	)

649 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

650 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

651 
	#SYS_£tuid
 
__NR_£tuid


	)

652 
	#SYS_£tx©å
 
__NR_£tx©å


	)

653 
	#SYS_shm©
 
__NR_shm©


	)

654 
	#SYS_shm˘l
 
__NR_shm˘l


	)

655 
	#SYS_shmdt
 
__NR_shmdt


	)

656 
	#SYS_shmgë
 
__NR_shmgë


	)

657 
	#SYS_shutdown
 
__NR_shutdown


	)

658 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

659 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

660 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

661 
	#SYS_sockë
 
__NR_sockë


	)

662 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

663 
	#SYS_•li˚
 
__NR_•li˚


	)

664 
	#SYS_°©
 
__NR_°©


	)

665 
	#SYS_°©fs
 
__NR_°©fs


	)

666 
	#SYS_sw≠off
 
__NR_sw≠off


	)

667 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

668 
	#SYS_symlök
 
__NR_symlök


	)

669 
	#SYS_symlök©
 
__NR_symlök©


	)

670 
	#SYS_sync
 
__NR_sync


	)

671 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

672 
	#SYS_syncfs
 
__NR_syncfs


	)

673 
	#SYS_sysfs
 
__NR_sysfs


	)

674 
	#SYS_sysöfo
 
__NR_sysöfo


	)

675 
	#SYS_sy¶og
 
__NR_sy¶og


	)

676 
	#SYS_ãe
 
__NR_ãe


	)

677 
	#SYS_tgkûl
 
__NR_tgkûl


	)

678 
	#SYS_time
 
__NR_time


	)

679 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

680 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

681 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

682 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

683 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

684 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

685 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

686 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

687 
	#SYS_times
 
__NR_times


	)

688 
	#SYS_tkûl
 
__NR_tkûl


	)

689 
	#SYS_åunˇã
 
__NR_åunˇã


	)

690 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

691 
	#SYS_umask
 
__NR_umask


	)

692 
	#SYS_umou¡2
 
__NR_umou¡2


	)

693 
	#SYS_u«me
 
__NR_u«me


	)

694 
	#SYS_u∆ök
 
__NR_u∆ök


	)

695 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

696 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

697 
	#SYS_u£lib
 
__NR_u£lib


	)

698 
	#SYS_u£rÁu…fd
 
__NR_u£rÁu…fd


	)

699 
	#SYS_u°©
 
__NR_u°©


	)

700 
	#SYS_utime
 
__NR_utime


	)

701 
	#SYS_utimíßt
 
__NR_utimíßt


	)

702 
	#SYS_utimes
 
__NR_utimes


	)

703 
	#SYS_vf‹k
 
__NR_vf‹k


	)

704 
	#SYS_vh™gup
 
__NR_vh™gup


	)

705 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

706 
	#SYS_v£rvî
 
__NR_v£rvî


	)

707 
	#SYS_waô4
 
__NR_waô4


	)

708 
	#SYS_waôid
 
__NR_waôid


	)

709 
	#SYS_wrôe
 
__NR_wrôe


	)

710 
	#SYS_wrôev
 
__NR_wrôev


	)

712 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


713 
	#SYS_ac˚±
 
__NR_ac˚±


	)

714 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

715 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

716 
	#SYS_ac˘
 
__NR_ac˘


	)

717 
	#SYS_add_key
 
__NR_add_key


	)

718 
	#SYS_adjtimex
 
__NR_adjtimex


	)

719 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

720 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

721 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

722 
	#SYS_böd
 
__NR_böd


	)

723 
	#SYS_bpf
 
__NR_bpf


	)

724 
	#SYS_brk
 
__NR_brk


	)

725 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

726 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

727 
	#SYS_chdú
 
__NR_chdú


	)

728 
	#SYS_chmod
 
__NR_chmod


	)

729 
	#SYS_chown
 
__NR_chown


	)

730 
	#SYS_chroŸ
 
__NR_chroŸ


	)

731 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

732 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

733 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

734 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

735 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

736 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

737 
	#SYS_˛o£
 
__NR_˛o£


	)

738 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

739 
	#SYS_¸ót
 
__NR_¸ót


	)

740 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

741 
	#SYS_dup
 
__NR_dup


	)

742 
	#SYS_dup2
 
__NR_dup2


	)

743 
	#SYS_dup3
 
__NR_dup3


	)

744 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

745 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

746 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

747 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

748 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

749 
	#SYS_evítfd
 
__NR_evítfd


	)

750 
	#SYS_evítfd2
 
__NR_evítfd2


	)

751 
	#SYS_execve
 
__NR_execve


	)

752 
	#SYS_execvót
 
__NR_execvót


	)

753 
	#SYS_exô
 
__NR_exô


	)

754 
	#SYS_exô_group
 
__NR_exô_group


	)

755 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

756 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

757 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

758 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

759 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

760 
	#SYS_fchdú
 
__NR_fchdú


	)

761 
	#SYS_fchmod
 
__NR_fchmod


	)

762 
	#SYS_fchmod©
 
__NR_fchmod©


	)

763 
	#SYS_fchown
 
__NR_fchown


	)

764 
	#SYS_fchow«t
 
__NR_fchow«t


	)

765 
	#SYS_f˙é
 
__NR_f˙é


	)

766 
	#SYS_fd©async
 
__NR_fd©async


	)

767 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

768 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

769 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

770 
	#SYS_Êock
 
__NR_Êock


	)

771 
	#SYS_f‹k
 
__NR_f‹k


	)

772 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

773 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

774 
	#SYS_f°©
 
__NR_f°©


	)

775 
	#SYS_f°©fs
 
__NR_f°©fs


	)

776 
	#SYS_fsync
 
__NR_fsync


	)

777 
	#SYS_·runˇã
 
__NR_·runˇã


	)

778 
	#SYS_fuãx
 
__NR_fuãx


	)

779 
	#SYS_futimeßt
 
__NR_futimeßt


	)

780 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

781 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

782 
	#SYS_gë˝u
 
__NR_gë˝u


	)

783 
	#SYS_gëcwd
 
__NR_gëcwd


	)

784 
	#SYS_gëdíts
 
__NR_gëdíts


	)

785 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

786 
	#SYS_gëegid
 
__NR_gëegid


	)

787 
	#SYS_gëeuid
 
__NR_gëeuid


	)

788 
	#SYS_gëgid
 
__NR_gëgid


	)

789 
	#SYS_gëgroups
 
__NR_gëgroups


	)

790 
	#SYS_gëôimî
 
__NR_gëôimî


	)

791 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

792 
	#SYS_gëpgid
 
__NR_gëpgid


	)

793 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

794 
	#SYS_gëpid
 
__NR_gëpid


	)

795 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

796 
	#SYS_gëµid
 
__NR_gëµid


	)

797 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

798 
	#SYS_gëøndom
 
__NR_gëøndom


	)

799 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

800 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

801 
	#SYS_gëæimô
 
__NR_gëæimô


	)

802 
	#SYS_gërußge
 
__NR_gërußge


	)

803 
	#SYS_gësid
 
__NR_gësid


	)

804 
	#SYS_gësock«me
 
__NR_gësock«me


	)

805 
	#SYS_gësock›t
 
__NR_gësock›t


	)

806 
	#SYS_gëtid
 
__NR_gëtid


	)

807 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

808 
	#SYS_gëuid
 
__NR_gëuid


	)

809 
	#SYS_gëx©å
 
__NR_gëx©å


	)

810 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

811 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

812 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

813 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

814 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

815 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

816 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

817 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

818 
	#SYS_io_£tup
 
__NR_io_£tup


	)

819 
	#SYS_io_submô
 
__NR_io_submô


	)

820 
	#SYS_io˘l
 
__NR_io˘l


	)

821 
	#SYS_i›îm
 
__NR_i›îm


	)

822 
	#SYS_i›l
 
__NR_i›l


	)

823 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

824 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

825 
	#SYS_kcmp
 
__NR_kcmp


	)

826 
	#SYS_kexec_fûe_lﬂd
 
__NR_kexec_fûe_lﬂd


	)

827 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

828 
	#SYS_key˘l
 
__NR_key˘l


	)

829 
	#SYS_kûl
 
__NR_kûl


	)

830 
	#SYS_lchown
 
__NR_lchown


	)

831 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

832 
	#SYS_lök
 
__NR_lök


	)

833 
	#SYS_lök©
 
__NR_lök©


	)

834 
	#SYS_li°í
 
__NR_li°í


	)

835 
	#SYS_li°x©å
 
__NR_li°x©å


	)

836 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

837 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

838 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

839 
	#SYS_l£ek
 
__NR_l£ek


	)

840 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

841 
	#SYS_l°©
 
__NR_l°©


	)

842 
	#SYS_madvi£
 
__NR_madvi£


	)

843 
	#SYS_mböd
 
__NR_mböd


	)

844 
	#SYS_memb¨rõr
 
__NR_memb¨rõr


	)

845 
	#SYS_memfd_¸óã
 
__NR_memfd_¸óã


	)

846 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

847 
	#SYS_möc‹e
 
__NR_möc‹e


	)

848 
	#SYS_mkdú
 
__NR_mkdú


	)

849 
	#SYS_mkdú©
 
__NR_mkdú©


	)

850 
	#SYS_mknod
 
__NR_mknod


	)

851 
	#SYS_mknod©
 
__NR_mknod©


	)

852 
	#SYS_mlock
 
__NR_mlock


	)

853 
	#SYS_mlock2
 
__NR_mlock2


	)

854 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

855 
	#SYS_mm≠
 
__NR_mm≠


	)

856 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

857 
	#SYS_mou¡
 
__NR_mou¡


	)

858 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

859 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

860 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

861 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

862 
	#SYS_mq_›í
 
__NR_mq_›í


	)

863 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

864 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

865 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

866 
	#SYS_mªm≠
 
__NR_mªm≠


	)

867 
	#SYS_msg˘l
 
__NR_msg˘l


	)

868 
	#SYS_msggë
 
__NR_msggë


	)

869 
	#SYS_msgrcv
 
__NR_msgrcv


	)

870 
	#SYS_msg¢d
 
__NR_msg¢d


	)

871 
	#SYS_msync
 
__NR_msync


	)

872 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

873 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

874 
	#SYS_munm≠
 
__NR_munm≠


	)

875 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

876 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

877 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

878 
	#SYS_›í
 
__NR_›í


	)

879 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

880 
	#SYS_›í©
 
__NR_›í©


	)

881 
	#SYS_∑u£
 
__NR_∑u£


	)

882 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

883 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

884 
	#SYS_pùe
 
__NR_pùe


	)

885 
	#SYS_pùe2
 
__NR_pùe2


	)

886 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

887 
	#SYS_pﬁl
 
__NR_pﬁl


	)

888 
	#SYS_µﬁl
 
__NR_µﬁl


	)

889 
	#SYS_¥˘l
 
__NR_¥˘l


	)

890 
	#SYS_¥ód64
 
__NR_¥ód64


	)

891 
	#SYS_¥ódv
 
__NR_¥ódv


	)

892 
	#SYS_¥limô64
 
__NR_¥limô64


	)

893 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

894 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

895 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

896 
	#SYS_±ø˚
 
__NR_±ø˚


	)

897 
	#SYS_puçmsg
 
__NR_puçmsg


	)

898 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

899 
	#SYS_pwrôev
 
__NR_pwrôev


	)

900 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

901 
	#SYS_ªad
 
__NR_ªad


	)

902 
	#SYS_ªadahód
 
__NR_ªadahód


	)

903 
	#SYS_ªadlök
 
__NR_ªadlök


	)

904 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

905 
	#SYS_ªadv
 
__NR_ªadv


	)

906 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

907 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

908 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

909 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

910 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

911 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

912 
	#SYS_ª«me
 
__NR_ª«me


	)

913 
	#SYS_ª«mót
 
__NR_ª«mót


	)

914 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

915 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

916 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

917 
	#SYS_rmdú
 
__NR_rmdú


	)

918 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

919 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

920 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

921 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

922 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

923 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

924 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

925 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

926 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

927 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

928 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

929 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

930 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

931 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

932 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

933 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

934 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

935 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

936 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

937 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

938 
	#SYS_£ccomp
 
__NR_£ccomp


	)

939 
	#SYS_£curôy
 
__NR_£curôy


	)

940 
	#SYS_£À˘
 
__NR_£À˘


	)

941 
	#SYS_£m˘l
 
__NR_£m˘l


	)

942 
	#SYS_£mgë
 
__NR_£mgë


	)

943 
	#SYS_£m›
 
__NR_£m›


	)

944 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

945 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

946 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

947 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

948 
	#SYS_£ndto
 
__NR_£ndto


	)

949 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

950 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

951 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

952 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

953 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

954 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

955 
	#SYS_£tgid
 
__NR_£tgid


	)

956 
	#SYS_£tgroups
 
__NR_£tgroups


	)

957 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

958 
	#SYS_£tôimî
 
__NR_£tôimî


	)

959 
	#SYS_£äs
 
__NR_£äs


	)

960 
	#SYS_£çgid
 
__NR_£çgid


	)

961 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

962 
	#SYS_£åegid
 
__NR_£åegid


	)

963 
	#SYS_£åesgid
 
__NR_£åesgid


	)

964 
	#SYS_£åesuid
 
__NR_£åesuid


	)

965 
	#SYS_£åeuid
 
__NR_£åeuid


	)

966 
	#SYS_£ålimô
 
__NR_£ålimô


	)

967 
	#SYS_£tsid
 
__NR_£tsid


	)

968 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

969 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

970 
	#SYS_£tuid
 
__NR_£tuid


	)

971 
	#SYS_£tx©å
 
__NR_£tx©å


	)

972 
	#SYS_shm©
 
__NR_shm©


	)

973 
	#SYS_shm˘l
 
__NR_shm˘l


	)

974 
	#SYS_shmdt
 
__NR_shmdt


	)

975 
	#SYS_shmgë
 
__NR_shmgë


	)

976 
	#SYS_shutdown
 
__NR_shutdown


	)

977 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

978 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

979 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

980 
	#SYS_sockë
 
__NR_sockë


	)

981 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

982 
	#SYS_•li˚
 
__NR_•li˚


	)

983 
	#SYS_°©
 
__NR_°©


	)

984 
	#SYS_°©fs
 
__NR_°©fs


	)

985 
	#SYS_sw≠off
 
__NR_sw≠off


	)

986 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

987 
	#SYS_symlök
 
__NR_symlök


	)

988 
	#SYS_symlök©
 
__NR_symlök©


	)

989 
	#SYS_sync
 
__NR_sync


	)

990 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

991 
	#SYS_syncfs
 
__NR_syncfs


	)

992 
	#SYS_sysfs
 
__NR_sysfs


	)

993 
	#SYS_sysöfo
 
__NR_sysöfo


	)

994 
	#SYS_sy¶og
 
__NR_sy¶og


	)

995 
	#SYS_ãe
 
__NR_ãe


	)

996 
	#SYS_tgkûl
 
__NR_tgkûl


	)

997 
	#SYS_time
 
__NR_time


	)

998 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

999 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

1000 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

1001 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

1002 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

1003 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

1004 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

1005 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

1006 
	#SYS_times
 
__NR_times


	)

1007 
	#SYS_tkûl
 
__NR_tkûl


	)

1008 
	#SYS_åunˇã
 
__NR_åunˇã


	)

1009 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

1010 
	#SYS_umask
 
__NR_umask


	)

1011 
	#SYS_umou¡2
 
__NR_umou¡2


	)

1012 
	#SYS_u«me
 
__NR_u«me


	)

1013 
	#SYS_u∆ök
 
__NR_u∆ök


	)

1014 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

1015 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

1016 
	#SYS_u£rÁu…fd
 
__NR_u£rÁu…fd


	)

1017 
	#SYS_u°©
 
__NR_u°©


	)

1018 
	#SYS_utime
 
__NR_utime


	)

1019 
	#SYS_utimíßt
 
__NR_utimíßt


	)

1020 
	#SYS_utimes
 
__NR_utimes


	)

1021 
	#SYS_vf‹k
 
__NR_vf‹k


	)

1022 
	#SYS_vh™gup
 
__NR_vh™gup


	)

1023 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

1024 
	#SYS_waô4
 
__NR_waô4


	)

1025 
	#SYS_waôid
 
__NR_waôid


	)

1026 
	#SYS_wrôe
 
__NR_wrôe


	)

1027 
	#SYS_wrôev
 
__NR_wrôev


	)

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 ((
˛ock_t
Ë1000000)

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

81 
	#CLOCK_TAI
 11

	)

84 
	#TIMER_ABSTIME
 1

	)

87 #ifde‡
__USE_GNU


88 
	~<bôs/timex.h
>

90 
__BEGIN_DECLS


93 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

95 
__END_DECLS


101 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

40 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


41 #i‚de‡
__ENUM_IDTYPE_T


42 
	#__ENUM_IDTYPE_T
 1

	)

46 #unde‡
P_ALL


47 #unde‡
P_PID


48 #unde‡
P_PGID


52 
	mP_ALL
,

53 
	mP_PID
,

54 
	mP_PGID


55 } 
	tidty≥_t
;

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_MISC


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__√ed_IOV_MAX


	)

33 
	~<bôs/°dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 
	#NL_NMAX
 
INT_MAX


	)

83 
	#NL_SETMAX
 
INT_MAX


	)

86 
	#NL_TEXTMAX
 
INT_MAX


	)

89 
	#NZERO
 20

	)

93 #ifde‡
INT_MAX


94 #i‡
INT_MAX
 == 32767

95 
	#WORD_BIT
 16

	)

97 #i‡
INT_MAX
 == 2147483647

98 
	#WORD_BIT
 32

	)

101 
	#WORD_BIT
 64

	)

104 #ñi‡
deföed
 
__INT_MAX__


105 #i‡
__INT_MAX__
 == 32767

106 
	#WORD_BIT
 16

	)

108 #i‡
__INT_MAX__
 == 2147483647

109 
	#WORD_BIT
 32

	)

112 
	#WORD_BIT
 64

	)

116 
	#WORD_BIT
 32

	)

120 #ifde‡
LONG_MAX


121 #i‡
LONG_MAX
 == 2147483647

122 
	#LONG_BIT
 32

	)

125 
	#LONG_BIT
 64

	)

127 #ñi‡
deföed
 
__LONG_MAX__


128 #i‡
__LONG_MAX__
 == 2147483647

129 
	#LONG_BIT
 32

	)

132 
	#LONG_BIT
 64

	)

135 
	~<bôs/w‹dsize.h
>

136 #i‡
__WORDSIZE
 == 64

137 
	#LONG_BIT
 64

	)

139 
	#LONG_BIT
 32

	)

	@/usr/include/boost/preprocessor/arithmetic/dec.hpp

1 #/* 
C›yright
 (
C
) 2001

2 #* 
Hou£m¨que
 
Oy


3 #* 
hâp
:

5 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


6 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


7 #* 
hâp
:

9 #
#/* 
Revi£d
 
by
 
Paul
 
Mís⁄ides
 (2002) */

11 #
#/* 
Sì
 
hâp
:

13 #
#i‚de‡
BOOST_PREPROCESSOR_ARITHMETIC_DEC_HPP


15 
	#BOOST_PREPROCESSOR_ARITHMETIC_DEC_HPP


	)

16 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

18 #
#/* 
BOOST_PP_DEC
 */

20 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MWCC
()

22 
	#BOOST_PP_DEC
(
x
Ë
	`BOOST_PP_DEC_I
(x)

	)

24 
	#BOOST_PP_DEC
(
x
Ë
	`BOOST_PP_DEC_OO
((x))

	)

25 
	#BOOST_PP_DEC_OO
(
∑r
Ë
BOOST_PP_DEC_I
 ## 
	)
par

27 
#deföê
	#BOOST_PP_DEC_I
(
x
Ë
BOOST_PP_DEC_
 ## 
	)
x

29 
#deföê
	#BOOST_PP_DEC_0
 0

	)

31 
	#BOOST_PP_DEC_1
 0

	)

32 
	#BOOST_PP_DEC_2
 1

	)

33 
	#BOOST_PP_DEC_3
 2

	)

34 
	#BOOST_PP_DEC_4
 3

	)

35 
	#BOOST_PP_DEC_5
 4

	)

36 
	#BOOST_PP_DEC_6
 5

	)

37 
	#BOOST_PP_DEC_7
 6

	)

38 
	#BOOST_PP_DEC_8
 7

	)

39 
	#BOOST_PP_DEC_9
 8

	)

40 
	#BOOST_PP_DEC_10
 9

	)

41 
	#BOOST_PP_DEC_11
 10

	)

42 
	#BOOST_PP_DEC_12
 11

	)

43 
	#BOOST_PP_DEC_13
 12

	)

44 
	#BOOST_PP_DEC_14
 13

	)

45 
	#BOOST_PP_DEC_15
 14

	)

46 
	#BOOST_PP_DEC_16
 15

	)

47 
	#BOOST_PP_DEC_17
 16

	)

48 
	#BOOST_PP_DEC_18
 17

	)

49 
	#BOOST_PP_DEC_19
 18

	)

50 
	#BOOST_PP_DEC_20
 19

	)

51 
	#BOOST_PP_DEC_21
 20

	)

52 
	#BOOST_PP_DEC_22
 21

	)

53 
	#BOOST_PP_DEC_23
 22

	)

54 
	#BOOST_PP_DEC_24
 23

	)

55 
	#BOOST_PP_DEC_25
 24

	)

56 
	#BOOST_PP_DEC_26
 25

	)

57 
	#BOOST_PP_DEC_27
 26

	)

58 
	#BOOST_PP_DEC_28
 27

	)

59 
	#BOOST_PP_DEC_29
 28

	)

60 
	#BOOST_PP_DEC_30
 29

	)

61 
	#BOOST_PP_DEC_31
 30

	)

62 
	#BOOST_PP_DEC_32
 31

	)

63 
	#BOOST_PP_DEC_33
 32

	)

64 
	#BOOST_PP_DEC_34
 33

	)

65 
	#BOOST_PP_DEC_35
 34

	)

66 
	#BOOST_PP_DEC_36
 35

	)

67 
	#BOOST_PP_DEC_37
 36

	)

68 
	#BOOST_PP_DEC_38
 37

	)

69 
	#BOOST_PP_DEC_39
 38

	)

70 
	#BOOST_PP_DEC_40
 39

	)

71 
	#BOOST_PP_DEC_41
 40

	)

72 
	#BOOST_PP_DEC_42
 41

	)

73 
	#BOOST_PP_DEC_43
 42

	)

74 
	#BOOST_PP_DEC_44
 43

	)

75 
	#BOOST_PP_DEC_45
 44

	)

76 
	#BOOST_PP_DEC_46
 45

	)

77 
	#BOOST_PP_DEC_47
 46

	)

78 
	#BOOST_PP_DEC_48
 47

	)

79 
	#BOOST_PP_DEC_49
 48

	)

80 
	#BOOST_PP_DEC_50
 49

	)

81 
	#BOOST_PP_DEC_51
 50

	)

82 
	#BOOST_PP_DEC_52
 51

	)

83 
	#BOOST_PP_DEC_53
 52

	)

84 
	#BOOST_PP_DEC_54
 53

	)

85 
	#BOOST_PP_DEC_55
 54

	)

86 
	#BOOST_PP_DEC_56
 55

	)

87 
	#BOOST_PP_DEC_57
 56

	)

88 
	#BOOST_PP_DEC_58
 57

	)

89 
	#BOOST_PP_DEC_59
 58

	)

90 
	#BOOST_PP_DEC_60
 59

	)

91 
	#BOOST_PP_DEC_61
 60

	)

92 
	#BOOST_PP_DEC_62
 61

	)

93 
	#BOOST_PP_DEC_63
 62

	)

94 
	#BOOST_PP_DEC_64
 63

	)

95 
	#BOOST_PP_DEC_65
 64

	)

96 
	#BOOST_PP_DEC_66
 65

	)

97 
	#BOOST_PP_DEC_67
 66

	)

98 
	#BOOST_PP_DEC_68
 67

	)

99 
	#BOOST_PP_DEC_69
 68

	)

100 
	#BOOST_PP_DEC_70
 69

	)

101 
	#BOOST_PP_DEC_71
 70

	)

102 
	#BOOST_PP_DEC_72
 71

	)

103 
	#BOOST_PP_DEC_73
 72

	)

104 
	#BOOST_PP_DEC_74
 73

	)

105 
	#BOOST_PP_DEC_75
 74

	)

106 
	#BOOST_PP_DEC_76
 75

	)

107 
	#BOOST_PP_DEC_77
 76

	)

108 
	#BOOST_PP_DEC_78
 77

	)

109 
	#BOOST_PP_DEC_79
 78

	)

110 
	#BOOST_PP_DEC_80
 79

	)

111 
	#BOOST_PP_DEC_81
 80

	)

112 
	#BOOST_PP_DEC_82
 81

	)

113 
	#BOOST_PP_DEC_83
 82

	)

114 
	#BOOST_PP_DEC_84
 83

	)

115 
	#BOOST_PP_DEC_85
 84

	)

116 
	#BOOST_PP_DEC_86
 85

	)

117 
	#BOOST_PP_DEC_87
 86

	)

118 
	#BOOST_PP_DEC_88
 87

	)

119 
	#BOOST_PP_DEC_89
 88

	)

120 
	#BOOST_PP_DEC_90
 89

	)

121 
	#BOOST_PP_DEC_91
 90

	)

122 
	#BOOST_PP_DEC_92
 91

	)

123 
	#BOOST_PP_DEC_93
 92

	)

124 
	#BOOST_PP_DEC_94
 93

	)

125 
	#BOOST_PP_DEC_95
 94

	)

126 
	#BOOST_PP_DEC_96
 95

	)

127 
	#BOOST_PP_DEC_97
 96

	)

128 
	#BOOST_PP_DEC_98
 97

	)

129 
	#BOOST_PP_DEC_99
 98

	)

130 
	#BOOST_PP_DEC_100
 99

	)

131 
	#BOOST_PP_DEC_101
 100

	)

132 
	#BOOST_PP_DEC_102
 101

	)

133 
	#BOOST_PP_DEC_103
 102

	)

134 
	#BOOST_PP_DEC_104
 103

	)

135 
	#BOOST_PP_DEC_105
 104

	)

136 
	#BOOST_PP_DEC_106
 105

	)

137 
	#BOOST_PP_DEC_107
 106

	)

138 
	#BOOST_PP_DEC_108
 107

	)

139 
	#BOOST_PP_DEC_109
 108

	)

140 
	#BOOST_PP_DEC_110
 109

	)

141 
	#BOOST_PP_DEC_111
 110

	)

142 
	#BOOST_PP_DEC_112
 111

	)

143 
	#BOOST_PP_DEC_113
 112

	)

144 
	#BOOST_PP_DEC_114
 113

	)

145 
	#BOOST_PP_DEC_115
 114

	)

146 
	#BOOST_PP_DEC_116
 115

	)

147 
	#BOOST_PP_DEC_117
 116

	)

148 
	#BOOST_PP_DEC_118
 117

	)

149 
	#BOOST_PP_DEC_119
 118

	)

150 
	#BOOST_PP_DEC_120
 119

	)

151 
	#BOOST_PP_DEC_121
 120

	)

152 
	#BOOST_PP_DEC_122
 121

	)

153 
	#BOOST_PP_DEC_123
 122

	)

154 
	#BOOST_PP_DEC_124
 123

	)

155 
	#BOOST_PP_DEC_125
 124

	)

156 
	#BOOST_PP_DEC_126
 125

	)

157 
	#BOOST_PP_DEC_127
 126

	)

158 
	#BOOST_PP_DEC_128
 127

	)

159 
	#BOOST_PP_DEC_129
 128

	)

160 
	#BOOST_PP_DEC_130
 129

	)

161 
	#BOOST_PP_DEC_131
 130

	)

162 
	#BOOST_PP_DEC_132
 131

	)

163 
	#BOOST_PP_DEC_133
 132

	)

164 
	#BOOST_PP_DEC_134
 133

	)

165 
	#BOOST_PP_DEC_135
 134

	)

166 
	#BOOST_PP_DEC_136
 135

	)

167 
	#BOOST_PP_DEC_137
 136

	)

168 
	#BOOST_PP_DEC_138
 137

	)

169 
	#BOOST_PP_DEC_139
 138

	)

170 
	#BOOST_PP_DEC_140
 139

	)

171 
	#BOOST_PP_DEC_141
 140

	)

172 
	#BOOST_PP_DEC_142
 141

	)

173 
	#BOOST_PP_DEC_143
 142

	)

174 
	#BOOST_PP_DEC_144
 143

	)

175 
	#BOOST_PP_DEC_145
 144

	)

176 
	#BOOST_PP_DEC_146
 145

	)

177 
	#BOOST_PP_DEC_147
 146

	)

178 
	#BOOST_PP_DEC_148
 147

	)

179 
	#BOOST_PP_DEC_149
 148

	)

180 
	#BOOST_PP_DEC_150
 149

	)

181 
	#BOOST_PP_DEC_151
 150

	)

182 
	#BOOST_PP_DEC_152
 151

	)

183 
	#BOOST_PP_DEC_153
 152

	)

184 
	#BOOST_PP_DEC_154
 153

	)

185 
	#BOOST_PP_DEC_155
 154

	)

186 
	#BOOST_PP_DEC_156
 155

	)

187 
	#BOOST_PP_DEC_157
 156

	)

188 
	#BOOST_PP_DEC_158
 157

	)

189 
	#BOOST_PP_DEC_159
 158

	)

190 
	#BOOST_PP_DEC_160
 159

	)

191 
	#BOOST_PP_DEC_161
 160

	)

192 
	#BOOST_PP_DEC_162
 161

	)

193 
	#BOOST_PP_DEC_163
 162

	)

194 
	#BOOST_PP_DEC_164
 163

	)

195 
	#BOOST_PP_DEC_165
 164

	)

196 
	#BOOST_PP_DEC_166
 165

	)

197 
	#BOOST_PP_DEC_167
 166

	)

198 
	#BOOST_PP_DEC_168
 167

	)

199 
	#BOOST_PP_DEC_169
 168

	)

200 
	#BOOST_PP_DEC_170
 169

	)

201 
	#BOOST_PP_DEC_171
 170

	)

202 
	#BOOST_PP_DEC_172
 171

	)

203 
	#BOOST_PP_DEC_173
 172

	)

204 
	#BOOST_PP_DEC_174
 173

	)

205 
	#BOOST_PP_DEC_175
 174

	)

206 
	#BOOST_PP_DEC_176
 175

	)

207 
	#BOOST_PP_DEC_177
 176

	)

208 
	#BOOST_PP_DEC_178
 177

	)

209 
	#BOOST_PP_DEC_179
 178

	)

210 
	#BOOST_PP_DEC_180
 179

	)

211 
	#BOOST_PP_DEC_181
 180

	)

212 
	#BOOST_PP_DEC_182
 181

	)

213 
	#BOOST_PP_DEC_183
 182

	)

214 
	#BOOST_PP_DEC_184
 183

	)

215 
	#BOOST_PP_DEC_185
 184

	)

216 
	#BOOST_PP_DEC_186
 185

	)

217 
	#BOOST_PP_DEC_187
 186

	)

218 
	#BOOST_PP_DEC_188
 187

	)

219 
	#BOOST_PP_DEC_189
 188

	)

220 
	#BOOST_PP_DEC_190
 189

	)

221 
	#BOOST_PP_DEC_191
 190

	)

222 
	#BOOST_PP_DEC_192
 191

	)

223 
	#BOOST_PP_DEC_193
 192

	)

224 
	#BOOST_PP_DEC_194
 193

	)

225 
	#BOOST_PP_DEC_195
 194

	)

226 
	#BOOST_PP_DEC_196
 195

	)

227 
	#BOOST_PP_DEC_197
 196

	)

228 
	#BOOST_PP_DEC_198
 197

	)

229 
	#BOOST_PP_DEC_199
 198

	)

230 
	#BOOST_PP_DEC_200
 199

	)

231 
	#BOOST_PP_DEC_201
 200

	)

232 
	#BOOST_PP_DEC_202
 201

	)

233 
	#BOOST_PP_DEC_203
 202

	)

234 
	#BOOST_PP_DEC_204
 203

	)

235 
	#BOOST_PP_DEC_205
 204

	)

236 
	#BOOST_PP_DEC_206
 205

	)

237 
	#BOOST_PP_DEC_207
 206

	)

238 
	#BOOST_PP_DEC_208
 207

	)

239 
	#BOOST_PP_DEC_209
 208

	)

240 
	#BOOST_PP_DEC_210
 209

	)

241 
	#BOOST_PP_DEC_211
 210

	)

242 
	#BOOST_PP_DEC_212
 211

	)

243 
	#BOOST_PP_DEC_213
 212

	)

244 
	#BOOST_PP_DEC_214
 213

	)

245 
	#BOOST_PP_DEC_215
 214

	)

246 
	#BOOST_PP_DEC_216
 215

	)

247 
	#BOOST_PP_DEC_217
 216

	)

248 
	#BOOST_PP_DEC_218
 217

	)

249 
	#BOOST_PP_DEC_219
 218

	)

250 
	#BOOST_PP_DEC_220
 219

	)

251 
	#BOOST_PP_DEC_221
 220

	)

252 
	#BOOST_PP_DEC_222
 221

	)

253 
	#BOOST_PP_DEC_223
 222

	)

254 
	#BOOST_PP_DEC_224
 223

	)

255 
	#BOOST_PP_DEC_225
 224

	)

256 
	#BOOST_PP_DEC_226
 225

	)

257 
	#BOOST_PP_DEC_227
 226

	)

258 
	#BOOST_PP_DEC_228
 227

	)

259 
	#BOOST_PP_DEC_229
 228

	)

260 
	#BOOST_PP_DEC_230
 229

	)

261 
	#BOOST_PP_DEC_231
 230

	)

262 
	#BOOST_PP_DEC_232
 231

	)

263 
	#BOOST_PP_DEC_233
 232

	)

264 
	#BOOST_PP_DEC_234
 233

	)

265 
	#BOOST_PP_DEC_235
 234

	)

266 
	#BOOST_PP_DEC_236
 235

	)

267 
	#BOOST_PP_DEC_237
 236

	)

268 
	#BOOST_PP_DEC_238
 237

	)

269 
	#BOOST_PP_DEC_239
 238

	)

270 
	#BOOST_PP_DEC_240
 239

	)

271 
	#BOOST_PP_DEC_241
 240

	)

272 
	#BOOST_PP_DEC_242
 241

	)

273 
	#BOOST_PP_DEC_243
 242

	)

274 
	#BOOST_PP_DEC_244
 243

	)

275 
	#BOOST_PP_DEC_245
 244

	)

276 
	#BOOST_PP_DEC_246
 245

	)

277 
	#BOOST_PP_DEC_247
 246

	)

278 
	#BOOST_PP_DEC_248
 247

	)

279 
	#BOOST_PP_DEC_249
 248

	)

280 
	#BOOST_PP_DEC_250
 249

	)

281 
	#BOOST_PP_DEC_251
 250

	)

282 
	#BOOST_PP_DEC_252
 251

	)

283 
	#BOOST_PP_DEC_253
 252

	)

284 
	#BOOST_PP_DEC_254
 253

	)

285 
	#BOOST_PP_DEC_255
 254

	)

286 
	#BOOST_PP_DEC_256
 255

	)

	@/usr/include/boost/preprocessor/config/config.hpp

3 #* (
C
Ë
C›yright
 
Paul
 
Mís⁄ides
 2002-2011. *

4 #* (
C
Ë
C›yright
 
Edw¨d
 
Dõ√r
 2011. *

5 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì
 *

6 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©
 *

7 #* 
hâp
:

10 #
#/* 
Sì
 
hâp
:

12 #
#i‚de‡
BOOST_PREPROCESSOR_CONFIG_CONFIG_HPP


14 
	#BOOST_PREPROCESSOR_CONFIG_CONFIG_HPP


	)

15 #
#/* 
BOOST_PP_CONFIG_FLAGS
 */

17 
#deföê
	#BOOST_PP_CONFIG_STRICT
(Ë0x0001

	)

19 
	#BOOST_PP_CONFIG_IDEAL
(Ë0x0002

	)

20 
#deföê
	#BOOST_PP_CONFIG_MSVC
(Ë0x0004

	)

22 
	#BOOST_PP_CONFIG_MWCC
(Ë0x0008

	)

23 
	#BOOST_PP_CONFIG_BCC
(Ë0x0010

	)

24 
	#BOOST_PP_CONFIG_EDG
(Ë0x0020

	)

25 
	#BOOST_PP_CONFIG_DMC
(Ë0x0040

	)

26 #
#i‚de‡
BOOST_PP_CONFIG_FLAGS


28 #i‡
deföed
(
__GCCXML__
)

29 
	#BOOST_PP_CONFIG_FLAGS
(Ë(
	`BOOST_PP_CONFIG_STRICT
())

	)

30 #ñi‡
deföed
(
__WAVE__
)

31 
	#BOOST_PP_CONFIG_FLAGS
(Ë(
	`BOOST_PP_CONFIG_STRICT
())

	)

32 #ñi‡
deföed
(
__MWERKS__
) && __MWERKS__ >= 0x3200

33 
	#BOOST_PP_CONFIG_FLAGS
(Ë(
	`BOOST_PP_CONFIG_STRICT
())

	)

34 #ñi‡
deföed
(
__EDG__
Ë|| deföed(
__EDG_VERSION__
)

35 #i‡
deföed
(
_MSC_VER
Ë&& (deföed(
__INTELLISENSE__
Ë|| 
__EDG_VERSION__
 >= 308)

36 
	#BOOST_PP_CONFIG_FLAGS
(Ë(
	`BOOST_PP_CONFIG_MSVC
())

	)

38 
	#BOOST_PP_CONFIG_FLAGS
(Ë(
	`BOOST_PP_CONFIG_EDG
(Ë| 
	`BOOST_PP_CONFIG_STRICT
())

	)

40 #ñi‡
deföed
(
__MWERKS__
)

41 
	#BOOST_PP_CONFIG_FLAGS
(Ë(
	`BOOST_PP_CONFIG_MWCC
())

	)

42 #ñi‡
deföed
(
__DMC__
)

43 
	#BOOST_PP_CONFIG_FLAGS
(Ë(
	`BOOST_PP_CONFIG_DMC
())

	)

44 #ñi‡
deföed
(
__BORLANDC__
) && __BORLANDC__ >= 0x581

45 
	#BOOST_PP_CONFIG_FLAGS
(Ë(
	`BOOST_PP_CONFIG_STRICT
())

	)

46 #ñi‡
deföed
(
__BORLANDC__
Ë|| deföed(
__IBMC__
Ë|| deföed(
__IBMCPP__
Ë|| deföed(
__SUNPRO_CC
)

47 
	#BOOST_PP_CONFIG_FLAGS
(Ë(
	`BOOST_PP_CONFIG_BCC
())

	)

48 #ñi‡
deföed
(
_MSC_VER
Ë&& !deföed(
__˛™g__
)

49 
	#BOOST_PP_CONFIG_FLAGS
(Ë(
	`BOOST_PP_CONFIG_MSVC
())

	)

51 
	#BOOST_PP_CONFIG_FLAGS
(Ë(
	`BOOST_PP_CONFIG_STRICT
())

	)

54 #
#/* 
BOOST_PP_CONFIG_EXTENDED_LINE_INFO
 */

56 #
#i‚de‡
BOOST_PP_CONFIG_EXTENDED_LINE_INFO


58 
	#BOOST_PP_CONFIG_EXTENDED_LINE_INFO
 0

	)

60 #
#/* 
BOOST_PP_CONFIG_ERRORS
 */

62 #
#i‚de‡
BOOST_PP_CONFIG_ERRORS


64 #ifde‡
NDEBUG


65 
	#BOOST_PP_CONFIG_ERRORS
 0

	)

67 
	#BOOST_PP_CONFIG_ERRORS
 1

	)

70 #
#/* 
BOOST_PP_VARIADICS
 */

72 #
#i‡!
deföed
 
BOOST_PP_VARIADICS


74 #/* 
v¨üdic
 
suµ‹t
 
ex∂icôly
 
dißbÀd
 
Æl
 
u¡e°ed
 
compûîs
 */

75 #i‡
deföed
 
__GCCXML__
 || deföed 
__CUDACC__
 || deföed 
__PATHSCALE__
 || deföed 
__DMC__
 || deföed 
__CODEGEARC__
 || deföed 
__BORLANDC__
 || deföed 
__MWERKS__
 || deföed 
__SUNPRO_CC
 || deföed 
__HP_aCC
 && !deföed 
__EDG__
 || deföed 
__MRC__
 || deföed 
__SC__
 || deföed 
__IBMCPP__
 || deföed 
__PGI


76 
	#BOOST_PP_VARIADICS
 0

	)

77 #/* 
VC
++ (
C
/C++) */

78 #ñi‡
deföed
 
_MSC_VER
 && _MSC_VER >1400 && (!deföed 
__EDG__
 || deföed(
__INTELLISENSE__
)Ë&& !deföed 
__˛™g__


79 
	#BOOST_PP_VARIADICS
 1

	)

80 
	#BOOST_PP_VARIADICS_MSVC
 1

	)

81 #/* 
Wave
 (
C
/C++), 
GCC
 (C++) */

82 #ñi‡
deföed
 
__WAVE__
 && 
__WAVE_HAS_VARIADICS__
 || deföed 
__GNUC__
 && 
__GXX_EXPERIMENTAL_CXX0X__


83 
	#BOOST_PP_VARIADICS
 1

	)

84 #/* 
EDG
-
ba£d
 (
C
/C++), 
GCC
 (C), 
™d
 
unknown
 (C/C++) */

85 #ñi‡!
deföed
 
__˝lu•lus
 && 
__STDC_VERSION__
 >= 199901L || __cplusplus >= 201103L

86 
	#BOOST_PP_VARIADICS
 1

	)

88 
	#BOOST_PP_VARIADICS
 0

	)

90 #ñi‡!
BOOST_PP_VARIADICS
 + 1 < 2

91 #unde‡
BOOST_PP_VARIADICS


92 
	#BOOST_PP_VARIADICS
 1

	)

93 #i‡
deföed
 
_MSC_VER
 && _MSC_VER >1400 && (deföed(
__INTELLISENSE__
Ë|| !(deföed 
__EDG__
 || deföed 
__GCCXML__
 || deföed 
__CUDACC__
 || deföed 
__PATHSCALE__
 || deföed 
__˛™g__
 || deföed 
__DMC__
 || deföed 
__CODEGEARC__
 || deföed 
__BORLANDC__
 || deföed 
__MWERKS__
 || deföed 
__SUNPRO_CC
 || deföed 
__HP_aCC
 || deföed 
__MRC__
 || deföed 
__SC__
 || deföed 
__IBMCPP__
 || deföed 
__PGI
))

94 
	#BOOST_PP_VARIADICS_MSVC
 1

	)

97 #unde‡
BOOST_PP_VARIADICS


98 
	#BOOST_PP_VARIADICS
 0

	)

	@/usr/include/boost/preprocessor/list/for_each_i.hpp

1 #/* 
C›yright
 (
C
) 2001

2 #* 
Hou£m¨que
 
Oy


3 #* 
hâp
:

5 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


6 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


7 #* 
hâp
:

9 #
#/* 
Revi£d
 
by
 
Paul
 
Mís⁄ides
 (2002) */

11 #
#/* 
Sì
 
hâp
:

13 #
#i‚de‡
BOOST_PREPROCESSOR_LIST_LIST_FOR_EACH_I_HPP


15 
	#BOOST_PREPROCESSOR_LIST_LIST_FOR_EACH_I_HPP


	)

16 
#ö˛udê
	~<boo°/¥ïro˚ss‹/¨ôhmëic/öc.hµ
>

18 
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

19 
	~<boo°/¥ïro˚ss‹/li°/adt.hµ
>

20 
	~<boo°/¥ïro˚ss‹/ª≥tôi⁄/f‹.hµ
>

21 
	~<boo°/¥ïro˚ss‹/tu∂e/ñem.hµ
>

22 
	~<boo°/¥ïro˚ss‹/tu∂e/ªm.hµ
>

23 #
#/* 
BOOST_PP_LIST_FOR_EACH_I
 */

25 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_EDG
(Ë&& ~BOOST_PP_CONFIG_FLAGS(Ë& 
BOOST_PP_CONFIG_MSVC
()

27 
	#BOOST_PP_LIST_FOR_EACH_I
(
ma¸o
, 
d©a
, 
li°
Ë
	`BOOST_PP_FOR
((ma¸o, d©a,Üi°, 0), 
BOOST_PP_LIST_FOR_EACH_I_P
, 
BOOST_PP_LIST_FOR_EACH_I_O
, 
BOOST_PP_LIST_FOR_EACH_I_M
)

	)

29 
	#BOOST_PP_LIST_FOR_EACH_I
(
ma¸o
, 
d©a
, 
li°
Ë
	`BOOST_PP_LIST_FOR_EACH_I_I
(ma¸o, d©a,Üi°)

	)

30 
	#BOOST_PP_LIST_FOR_EACH_I_I
(
ma¸o
, 
d©a
, 
li°
Ë
	`BOOST_PP_FOR
((ma¸o, d©a,Üi°, 0), 
BOOST_PP_LIST_FOR_EACH_I_P
, 
BOOST_PP_LIST_FOR_EACH_I_O
, 
BOOST_PP_LIST_FOR_EACH_I_M
)

	)

32 #
#i‡
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_STRICT
()

34 
	#BOOST_PP_LIST_FOR_EACH_I_P
(
r
, 
x
Ë
BOOST_PP_LIST_FOR_EACH_I_P_D
 
	)
x

35 
	#BOOST_PP_LIST_FOR_EACH_I_P_D
(
m
, 
d
, 
l
, 
i
Ë
	`BOOST_PP_LIST_IS_CONS
÷)

	)

37 
	#BOOST_PP_LIST_FOR_EACH_I_P
(
r
, 
x
Ë
	`BOOST_PP_LIST_IS_CONS
(
	`BOOST_PP_TUPLE_ELEM
(4, 2, x))

	)

39 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MWCC
()

41 
	#BOOST_PP_LIST_FOR_EACH_I_O
(
r
, 
x
Ë
BOOST_PP_LIST_FOR_EACH_I_O_D
 
	)
x

42 
	#BOOST_PP_LIST_FOR_EACH_I_O_D
(
m
, 
d
, 
l
, 
i
Ë(m, d, 
	`BOOST_PP_LIST_REST
÷), 
	`BOOST_PP_INC
(i))

	)

44 
	#BOOST_PP_LIST_FOR_EACH_I_O
(
r
, 
x
Ë(
	`BOOST_PP_TUPLE_ELEM
(4, 0, x), BOOST_PP_TUPLE_ELEM(4, 1, x), 
	`BOOST_PP_LIST_REST
(BOOST_PP_TUPLE_ELEM(4, 2, x)), 
	`BOOST_PP_INC
(BOOST_PP_TUPLE_ELEM(4, 3, x)))

	)

46 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_EDG
()

48 
	#BOOST_PP_LIST_FOR_EACH_I_M
(
r
, 
x
Ë
	`BOOST_PP_LIST_FOR_EACH_I_M_D
‘, 
	`BOOST_PP_TUPLE_ELEM
(4, 0, x), BOOST_PP_TUPLE_ELEM(4, 1, x), BOOST_PP_TUPLE_ELEM(4, 2, x), BOOST_PP_TUPLE_ELEM(4, 3, x))

	)

50 
	#BOOST_PP_LIST_FOR_EACH_I_M
(
r
, 
x
Ë
	`BOOST_PP_LIST_FOR_EACH_I_M_I
‘, 
BOOST_PP_TUPLE_REM_4
 x)

	)

51 
	#BOOST_PP_LIST_FOR_EACH_I_M_I
(
r
, 
x_e
Ë
	`BOOST_PP_LIST_FOR_EACH_I_M_D
‘, x_e)

	)

53 
#deföê
	#BOOST_PP_LIST_FOR_EACH_I_M_D
(
r
, 
m
, 
d
, 
l
, 
i
Ë
	`m
‘, d, i, 
	`BOOST_PP_LIST_FIRST
÷))

	)

55 #
#/* 
BOOST_PP_LIST_FOR_EACH_I_R
 */

57 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_EDG
()

59 
	#BOOST_PP_LIST_FOR_EACH_I_R
(
r
, 
ma¸o
, 
d©a
, 
li°
Ë
BOOST_PP_FOR_
 ## 
	`r
((ma¸o, d©a,Üi°, 0), 
BOOST_PP_LIST_FOR_EACH_I_P
, 
BOOST_PP_LIST_FOR_EACH_I_O
, 
BOOST_PP_LIST_FOR_EACH_I_M
)

	)

61 
	#BOOST_PP_LIST_FOR_EACH_I_R
(
r
, 
ma¸o
, 
d©a
, 
li°
Ë
	`BOOST_PP_LIST_FOR_EACH_I_R_I
‘, ma¸o, d©a,Üi°)

	)

62 
	#BOOST_PP_LIST_FOR_EACH_I_R_I
(
r
, 
ma¸o
, 
d©a
, 
li°
Ë
BOOST_PP_FOR_
 ## 
	`r
((ma¸o, d©a,Üi°, 0), 
BOOST_PP_LIST_FOR_EACH_I_P
, 
BOOST_PP_LIST_FOR_EACH_I_O
, 
BOOST_PP_LIST_FOR_EACH_I_M
)

	)

	@/usr/include/boost/preprocessor/repetition/for.hpp

1 #/* 
C›yright
 (
C
) 2001

2 #* 
Hou£m¨que
 
Oy


3 #* 
hâp
:

5 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


6 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


7 #* 
hâp
:

9 #
#/* 
Revi£d
 
by
 
Paul
 
Mís⁄ides
 (2002) */

11 #
#/* 
Sì
 
hâp
:

13 #
#i‚de‡
BOOST_PREPROCESSOR_REPETITION_FOR_HPP


15 
	#BOOST_PREPROCESSOR_REPETITION_FOR_HPP


	)

16 
#ö˛udê
	~<boo°/¥ïro˚ss‹/ˇt.hµ
>

18 
	~<boo°/¥ïro˚ss‹/debug/îr‹.hµ
>

19 
	~<boo°/¥ïro˚ss‹/dëaû/auto_ªc.hµ
>

20 #
#/* 
BOOST_PP_FOR
 */

24 
	#BOOST_PP_FOR
(
°©e
, 
¥ed
, 
›
, 
ma¸o
)

	)

26 
#deföê
	#BOOST_PP_FOR
 
	`BOOST_PP_CAT
(
BOOST_PP_FOR_
, 
	`BOOST_PP_AUTO_REC
(
BOOST_PP_FOR_P
, 256))

	)

28 
#deföê
	#BOOST_PP_FOR_P
(
n
Ë
	`BOOST_PP_CAT
(
BOOST_PP_FOR_CHECK_
, 
BOOST_PP_FOR_
 ## 
	`n
(1, 
BOOST_PP_FOR_SR_P
, 
BOOST_PP_FOR_SR_O
, 
BOOST_PP_FOR_SR_M
))

	)

30 
#deföê
	#BOOST_PP_FOR_SR_P
(
r
, 
s
Ë
	)
s

32 
	#BOOST_PP_FOR_SR_O
(
r
, 
s
Ë0

	)

33 
	#BOOST_PP_FOR_SR_M
(
r
, 
s
Ë
BOOST_PP_NIL


	)

34 #
#i‡
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_EDG
()

36 
	~<boo°/¥ïro˚ss‹/ª≥tôi⁄/dëaû/edg/f‹.hµ
>

37 #ñi‡
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MSVC
()

38 
	~<boo°/¥ïro˚ss‹/ª≥tôi⁄/dëaû/msvc/f‹.hµ
>

39 #ñi‡
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_DMC
()

40 
	~<boo°/¥ïro˚ss‹/ª≥tôi⁄/dëaû/dmc/f‹.hµ
>

42 
	~<boo°/¥ïro˚ss‹/ª≥tôi⁄/dëaû/f‹.hµ
>

44 
#deföê
	#BOOST_PP_FOR_257
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_ERROR
(0x0002)

	)

46 
#deföê
	#BOOST_PP_FOR_CHECK_BOOST_PP_NIL
 1

	)

48 
#deföê
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_1
(
s
, 
p
, 
o
, 
m
Ë0

	)

50 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_2
(
s
, 
p
, 
o
, 
m
Ë0

	)

51 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_3
(
s
, 
p
, 
o
, 
m
Ë0

	)

52 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_4
(
s
, 
p
, 
o
, 
m
Ë0

	)

53 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_5
(
s
, 
p
, 
o
, 
m
Ë0

	)

54 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_6
(
s
, 
p
, 
o
, 
m
Ë0

	)

55 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_7
(
s
, 
p
, 
o
, 
m
Ë0

	)

56 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_8
(
s
, 
p
, 
o
, 
m
Ë0

	)

57 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_9
(
s
, 
p
, 
o
, 
m
Ë0

	)

58 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_10
(
s
, 
p
, 
o
, 
m
Ë0

	)

59 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_11
(
s
, 
p
, 
o
, 
m
Ë0

	)

60 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_12
(
s
, 
p
, 
o
, 
m
Ë0

	)

61 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_13
(
s
, 
p
, 
o
, 
m
Ë0

	)

62 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_14
(
s
, 
p
, 
o
, 
m
Ë0

	)

63 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_15
(
s
, 
p
, 
o
, 
m
Ë0

	)

64 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_16
(
s
, 
p
, 
o
, 
m
Ë0

	)

65 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_17
(
s
, 
p
, 
o
, 
m
Ë0

	)

66 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_18
(
s
, 
p
, 
o
, 
m
Ë0

	)

67 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_19
(
s
, 
p
, 
o
, 
m
Ë0

	)

68 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_20
(
s
, 
p
, 
o
, 
m
Ë0

	)

69 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_21
(
s
, 
p
, 
o
, 
m
Ë0

	)

70 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_22
(
s
, 
p
, 
o
, 
m
Ë0

	)

71 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_23
(
s
, 
p
, 
o
, 
m
Ë0

	)

72 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_24
(
s
, 
p
, 
o
, 
m
Ë0

	)

73 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_25
(
s
, 
p
, 
o
, 
m
Ë0

	)

74 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_26
(
s
, 
p
, 
o
, 
m
Ë0

	)

75 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_27
(
s
, 
p
, 
o
, 
m
Ë0

	)

76 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_28
(
s
, 
p
, 
o
, 
m
Ë0

	)

77 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_29
(
s
, 
p
, 
o
, 
m
Ë0

	)

78 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_30
(
s
, 
p
, 
o
, 
m
Ë0

	)

79 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_31
(
s
, 
p
, 
o
, 
m
Ë0

	)

80 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_32
(
s
, 
p
, 
o
, 
m
Ë0

	)

81 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_33
(
s
, 
p
, 
o
, 
m
Ë0

	)

82 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_34
(
s
, 
p
, 
o
, 
m
Ë0

	)

83 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_35
(
s
, 
p
, 
o
, 
m
Ë0

	)

84 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_36
(
s
, 
p
, 
o
, 
m
Ë0

	)

85 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_37
(
s
, 
p
, 
o
, 
m
Ë0

	)

86 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_38
(
s
, 
p
, 
o
, 
m
Ë0

	)

87 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_39
(
s
, 
p
, 
o
, 
m
Ë0

	)

88 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_40
(
s
, 
p
, 
o
, 
m
Ë0

	)

89 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_41
(
s
, 
p
, 
o
, 
m
Ë0

	)

90 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_42
(
s
, 
p
, 
o
, 
m
Ë0

	)

91 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_43
(
s
, 
p
, 
o
, 
m
Ë0

	)

92 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_44
(
s
, 
p
, 
o
, 
m
Ë0

	)

93 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_45
(
s
, 
p
, 
o
, 
m
Ë0

	)

94 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_46
(
s
, 
p
, 
o
, 
m
Ë0

	)

95 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_47
(
s
, 
p
, 
o
, 
m
Ë0

	)

96 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_48
(
s
, 
p
, 
o
, 
m
Ë0

	)

97 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_49
(
s
, 
p
, 
o
, 
m
Ë0

	)

98 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_50
(
s
, 
p
, 
o
, 
m
Ë0

	)

99 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_51
(
s
, 
p
, 
o
, 
m
Ë0

	)

100 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_52
(
s
, 
p
, 
o
, 
m
Ë0

	)

101 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_53
(
s
, 
p
, 
o
, 
m
Ë0

	)

102 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_54
(
s
, 
p
, 
o
, 
m
Ë0

	)

103 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_55
(
s
, 
p
, 
o
, 
m
Ë0

	)

104 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_56
(
s
, 
p
, 
o
, 
m
Ë0

	)

105 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_57
(
s
, 
p
, 
o
, 
m
Ë0

	)

106 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_58
(
s
, 
p
, 
o
, 
m
Ë0

	)

107 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_59
(
s
, 
p
, 
o
, 
m
Ë0

	)

108 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_60
(
s
, 
p
, 
o
, 
m
Ë0

	)

109 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_61
(
s
, 
p
, 
o
, 
m
Ë0

	)

110 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_62
(
s
, 
p
, 
o
, 
m
Ë0

	)

111 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_63
(
s
, 
p
, 
o
, 
m
Ë0

	)

112 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_64
(
s
, 
p
, 
o
, 
m
Ë0

	)

113 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_65
(
s
, 
p
, 
o
, 
m
Ë0

	)

114 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_66
(
s
, 
p
, 
o
, 
m
Ë0

	)

115 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_67
(
s
, 
p
, 
o
, 
m
Ë0

	)

116 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_68
(
s
, 
p
, 
o
, 
m
Ë0

	)

117 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_69
(
s
, 
p
, 
o
, 
m
Ë0

	)

118 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_70
(
s
, 
p
, 
o
, 
m
Ë0

	)

119 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_71
(
s
, 
p
, 
o
, 
m
Ë0

	)

120 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_72
(
s
, 
p
, 
o
, 
m
Ë0

	)

121 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_73
(
s
, 
p
, 
o
, 
m
Ë0

	)

122 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_74
(
s
, 
p
, 
o
, 
m
Ë0

	)

123 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_75
(
s
, 
p
, 
o
, 
m
Ë0

	)

124 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_76
(
s
, 
p
, 
o
, 
m
Ë0

	)

125 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_77
(
s
, 
p
, 
o
, 
m
Ë0

	)

126 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_78
(
s
, 
p
, 
o
, 
m
Ë0

	)

127 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_79
(
s
, 
p
, 
o
, 
m
Ë0

	)

128 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_80
(
s
, 
p
, 
o
, 
m
Ë0

	)

129 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_81
(
s
, 
p
, 
o
, 
m
Ë0

	)

130 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_82
(
s
, 
p
, 
o
, 
m
Ë0

	)

131 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_83
(
s
, 
p
, 
o
, 
m
Ë0

	)

132 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_84
(
s
, 
p
, 
o
, 
m
Ë0

	)

133 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_85
(
s
, 
p
, 
o
, 
m
Ë0

	)

134 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_86
(
s
, 
p
, 
o
, 
m
Ë0

	)

135 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_87
(
s
, 
p
, 
o
, 
m
Ë0

	)

136 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_88
(
s
, 
p
, 
o
, 
m
Ë0

	)

137 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_89
(
s
, 
p
, 
o
, 
m
Ë0

	)

138 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_90
(
s
, 
p
, 
o
, 
m
Ë0

	)

139 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_91
(
s
, 
p
, 
o
, 
m
Ë0

	)

140 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_92
(
s
, 
p
, 
o
, 
m
Ë0

	)

141 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_93
(
s
, 
p
, 
o
, 
m
Ë0

	)

142 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_94
(
s
, 
p
, 
o
, 
m
Ë0

	)

143 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_95
(
s
, 
p
, 
o
, 
m
Ë0

	)

144 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_96
(
s
, 
p
, 
o
, 
m
Ë0

	)

145 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_97
(
s
, 
p
, 
o
, 
m
Ë0

	)

146 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_98
(
s
, 
p
, 
o
, 
m
Ë0

	)

147 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_99
(
s
, 
p
, 
o
, 
m
Ë0

	)

148 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_100
(
s
, 
p
, 
o
, 
m
Ë0

	)

149 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_101
(
s
, 
p
, 
o
, 
m
Ë0

	)

150 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_102
(
s
, 
p
, 
o
, 
m
Ë0

	)

151 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_103
(
s
, 
p
, 
o
, 
m
Ë0

	)

152 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_104
(
s
, 
p
, 
o
, 
m
Ë0

	)

153 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_105
(
s
, 
p
, 
o
, 
m
Ë0

	)

154 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_106
(
s
, 
p
, 
o
, 
m
Ë0

	)

155 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_107
(
s
, 
p
, 
o
, 
m
Ë0

	)

156 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_108
(
s
, 
p
, 
o
, 
m
Ë0

	)

157 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_109
(
s
, 
p
, 
o
, 
m
Ë0

	)

158 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_110
(
s
, 
p
, 
o
, 
m
Ë0

	)

159 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_111
(
s
, 
p
, 
o
, 
m
Ë0

	)

160 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_112
(
s
, 
p
, 
o
, 
m
Ë0

	)

161 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_113
(
s
, 
p
, 
o
, 
m
Ë0

	)

162 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_114
(
s
, 
p
, 
o
, 
m
Ë0

	)

163 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_115
(
s
, 
p
, 
o
, 
m
Ë0

	)

164 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_116
(
s
, 
p
, 
o
, 
m
Ë0

	)

165 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_117
(
s
, 
p
, 
o
, 
m
Ë0

	)

166 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_118
(
s
, 
p
, 
o
, 
m
Ë0

	)

167 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_119
(
s
, 
p
, 
o
, 
m
Ë0

	)

168 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_120
(
s
, 
p
, 
o
, 
m
Ë0

	)

169 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_121
(
s
, 
p
, 
o
, 
m
Ë0

	)

170 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_122
(
s
, 
p
, 
o
, 
m
Ë0

	)

171 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_123
(
s
, 
p
, 
o
, 
m
Ë0

	)

172 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_124
(
s
, 
p
, 
o
, 
m
Ë0

	)

173 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_125
(
s
, 
p
, 
o
, 
m
Ë0

	)

174 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_126
(
s
, 
p
, 
o
, 
m
Ë0

	)

175 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_127
(
s
, 
p
, 
o
, 
m
Ë0

	)

176 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_128
(
s
, 
p
, 
o
, 
m
Ë0

	)

177 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_129
(
s
, 
p
, 
o
, 
m
Ë0

	)

178 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_130
(
s
, 
p
, 
o
, 
m
Ë0

	)

179 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_131
(
s
, 
p
, 
o
, 
m
Ë0

	)

180 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_132
(
s
, 
p
, 
o
, 
m
Ë0

	)

181 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_133
(
s
, 
p
, 
o
, 
m
Ë0

	)

182 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_134
(
s
, 
p
, 
o
, 
m
Ë0

	)

183 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_135
(
s
, 
p
, 
o
, 
m
Ë0

	)

184 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_136
(
s
, 
p
, 
o
, 
m
Ë0

	)

185 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_137
(
s
, 
p
, 
o
, 
m
Ë0

	)

186 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_138
(
s
, 
p
, 
o
, 
m
Ë0

	)

187 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_139
(
s
, 
p
, 
o
, 
m
Ë0

	)

188 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_140
(
s
, 
p
, 
o
, 
m
Ë0

	)

189 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_141
(
s
, 
p
, 
o
, 
m
Ë0

	)

190 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_142
(
s
, 
p
, 
o
, 
m
Ë0

	)

191 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_143
(
s
, 
p
, 
o
, 
m
Ë0

	)

192 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_144
(
s
, 
p
, 
o
, 
m
Ë0

	)

193 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_145
(
s
, 
p
, 
o
, 
m
Ë0

	)

194 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_146
(
s
, 
p
, 
o
, 
m
Ë0

	)

195 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_147
(
s
, 
p
, 
o
, 
m
Ë0

	)

196 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_148
(
s
, 
p
, 
o
, 
m
Ë0

	)

197 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_149
(
s
, 
p
, 
o
, 
m
Ë0

	)

198 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_150
(
s
, 
p
, 
o
, 
m
Ë0

	)

199 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_151
(
s
, 
p
, 
o
, 
m
Ë0

	)

200 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_152
(
s
, 
p
, 
o
, 
m
Ë0

	)

201 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_153
(
s
, 
p
, 
o
, 
m
Ë0

	)

202 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_154
(
s
, 
p
, 
o
, 
m
Ë0

	)

203 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_155
(
s
, 
p
, 
o
, 
m
Ë0

	)

204 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_156
(
s
, 
p
, 
o
, 
m
Ë0

	)

205 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_157
(
s
, 
p
, 
o
, 
m
Ë0

	)

206 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_158
(
s
, 
p
, 
o
, 
m
Ë0

	)

207 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_159
(
s
, 
p
, 
o
, 
m
Ë0

	)

208 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_160
(
s
, 
p
, 
o
, 
m
Ë0

	)

209 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_161
(
s
, 
p
, 
o
, 
m
Ë0

	)

210 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_162
(
s
, 
p
, 
o
, 
m
Ë0

	)

211 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_163
(
s
, 
p
, 
o
, 
m
Ë0

	)

212 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_164
(
s
, 
p
, 
o
, 
m
Ë0

	)

213 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_165
(
s
, 
p
, 
o
, 
m
Ë0

	)

214 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_166
(
s
, 
p
, 
o
, 
m
Ë0

	)

215 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_167
(
s
, 
p
, 
o
, 
m
Ë0

	)

216 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_168
(
s
, 
p
, 
o
, 
m
Ë0

	)

217 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_169
(
s
, 
p
, 
o
, 
m
Ë0

	)

218 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_170
(
s
, 
p
, 
o
, 
m
Ë0

	)

219 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_171
(
s
, 
p
, 
o
, 
m
Ë0

	)

220 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_172
(
s
, 
p
, 
o
, 
m
Ë0

	)

221 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_173
(
s
, 
p
, 
o
, 
m
Ë0

	)

222 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_174
(
s
, 
p
, 
o
, 
m
Ë0

	)

223 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_175
(
s
, 
p
, 
o
, 
m
Ë0

	)

224 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_176
(
s
, 
p
, 
o
, 
m
Ë0

	)

225 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_177
(
s
, 
p
, 
o
, 
m
Ë0

	)

226 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_178
(
s
, 
p
, 
o
, 
m
Ë0

	)

227 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_179
(
s
, 
p
, 
o
, 
m
Ë0

	)

228 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_180
(
s
, 
p
, 
o
, 
m
Ë0

	)

229 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_181
(
s
, 
p
, 
o
, 
m
Ë0

	)

230 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_182
(
s
, 
p
, 
o
, 
m
Ë0

	)

231 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_183
(
s
, 
p
, 
o
, 
m
Ë0

	)

232 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_184
(
s
, 
p
, 
o
, 
m
Ë0

	)

233 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_185
(
s
, 
p
, 
o
, 
m
Ë0

	)

234 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_186
(
s
, 
p
, 
o
, 
m
Ë0

	)

235 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_187
(
s
, 
p
, 
o
, 
m
Ë0

	)

236 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_188
(
s
, 
p
, 
o
, 
m
Ë0

	)

237 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_189
(
s
, 
p
, 
o
, 
m
Ë0

	)

238 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_190
(
s
, 
p
, 
o
, 
m
Ë0

	)

239 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_191
(
s
, 
p
, 
o
, 
m
Ë0

	)

240 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_192
(
s
, 
p
, 
o
, 
m
Ë0

	)

241 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_193
(
s
, 
p
, 
o
, 
m
Ë0

	)

242 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_194
(
s
, 
p
, 
o
, 
m
Ë0

	)

243 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_195
(
s
, 
p
, 
o
, 
m
Ë0

	)

244 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_196
(
s
, 
p
, 
o
, 
m
Ë0

	)

245 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_197
(
s
, 
p
, 
o
, 
m
Ë0

	)

246 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_198
(
s
, 
p
, 
o
, 
m
Ë0

	)

247 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_199
(
s
, 
p
, 
o
, 
m
Ë0

	)

248 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_200
(
s
, 
p
, 
o
, 
m
Ë0

	)

249 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_201
(
s
, 
p
, 
o
, 
m
Ë0

	)

250 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_202
(
s
, 
p
, 
o
, 
m
Ë0

	)

251 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_203
(
s
, 
p
, 
o
, 
m
Ë0

	)

252 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_204
(
s
, 
p
, 
o
, 
m
Ë0

	)

253 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_205
(
s
, 
p
, 
o
, 
m
Ë0

	)

254 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_206
(
s
, 
p
, 
o
, 
m
Ë0

	)

255 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_207
(
s
, 
p
, 
o
, 
m
Ë0

	)

256 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_208
(
s
, 
p
, 
o
, 
m
Ë0

	)

257 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_209
(
s
, 
p
, 
o
, 
m
Ë0

	)

258 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_210
(
s
, 
p
, 
o
, 
m
Ë0

	)

259 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_211
(
s
, 
p
, 
o
, 
m
Ë0

	)

260 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_212
(
s
, 
p
, 
o
, 
m
Ë0

	)

261 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_213
(
s
, 
p
, 
o
, 
m
Ë0

	)

262 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_214
(
s
, 
p
, 
o
, 
m
Ë0

	)

263 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_215
(
s
, 
p
, 
o
, 
m
Ë0

	)

264 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_216
(
s
, 
p
, 
o
, 
m
Ë0

	)

265 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_217
(
s
, 
p
, 
o
, 
m
Ë0

	)

266 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_218
(
s
, 
p
, 
o
, 
m
Ë0

	)

267 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_219
(
s
, 
p
, 
o
, 
m
Ë0

	)

268 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_220
(
s
, 
p
, 
o
, 
m
Ë0

	)

269 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_221
(
s
, 
p
, 
o
, 
m
Ë0

	)

270 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_222
(
s
, 
p
, 
o
, 
m
Ë0

	)

271 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_223
(
s
, 
p
, 
o
, 
m
Ë0

	)

272 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_224
(
s
, 
p
, 
o
, 
m
Ë0

	)

273 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_225
(
s
, 
p
, 
o
, 
m
Ë0

	)

274 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_226
(
s
, 
p
, 
o
, 
m
Ë0

	)

275 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_227
(
s
, 
p
, 
o
, 
m
Ë0

	)

276 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_228
(
s
, 
p
, 
o
, 
m
Ë0

	)

277 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_229
(
s
, 
p
, 
o
, 
m
Ë0

	)

278 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_230
(
s
, 
p
, 
o
, 
m
Ë0

	)

279 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_231
(
s
, 
p
, 
o
, 
m
Ë0

	)

280 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_232
(
s
, 
p
, 
o
, 
m
Ë0

	)

281 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_233
(
s
, 
p
, 
o
, 
m
Ë0

	)

282 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_234
(
s
, 
p
, 
o
, 
m
Ë0

	)

283 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_235
(
s
, 
p
, 
o
, 
m
Ë0

	)

284 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_236
(
s
, 
p
, 
o
, 
m
Ë0

	)

285 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_237
(
s
, 
p
, 
o
, 
m
Ë0

	)

286 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_238
(
s
, 
p
, 
o
, 
m
Ë0

	)

287 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_239
(
s
, 
p
, 
o
, 
m
Ë0

	)

288 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_240
(
s
, 
p
, 
o
, 
m
Ë0

	)

289 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_241
(
s
, 
p
, 
o
, 
m
Ë0

	)

290 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_242
(
s
, 
p
, 
o
, 
m
Ë0

	)

291 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_243
(
s
, 
p
, 
o
, 
m
Ë0

	)

292 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_244
(
s
, 
p
, 
o
, 
m
Ë0

	)

293 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_245
(
s
, 
p
, 
o
, 
m
Ë0

	)

294 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_246
(
s
, 
p
, 
o
, 
m
Ë0

	)

295 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_247
(
s
, 
p
, 
o
, 
m
Ë0

	)

296 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_248
(
s
, 
p
, 
o
, 
m
Ë0

	)

297 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_249
(
s
, 
p
, 
o
, 
m
Ë0

	)

298 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_250
(
s
, 
p
, 
o
, 
m
Ë0

	)

299 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_251
(
s
, 
p
, 
o
, 
m
Ë0

	)

300 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_252
(
s
, 
p
, 
o
, 
m
Ë0

	)

301 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_253
(
s
, 
p
, 
o
, 
m
Ë0

	)

302 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_254
(
s
, 
p
, 
o
, 
m
Ë0

	)

303 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_255
(
s
, 
p
, 
o
, 
m
Ë0

	)

304 
	#BOOST_PP_FOR_CHECK_BOOST_PP_FOR_256
(
s
, 
p
, 
o
, 
m
Ë0

	)

	@/usr/include/boost/preprocessor/seq/seq.hpp

3 #* (
C
Ë
C›yright
 
Paul
 
Mís⁄ides
 2002.

4 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


5 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


6 #* 
hâp
:

9 #
#/* 
Sì
 
hâp
:

11 #
#i‚de‡
BOOST_PREPROCESSOR_SEQ_SEQ_HPP


13 
	#BOOST_PREPROCESSOR_SEQ_SEQ_HPP


	)

14 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

16 
	~<boo°/¥ïro˚ss‹/£q/ñem.hµ
>

17 #
#/* 
BOOST_PP_SEQ_HEAD
 */

19 
#deföê
	#BOOST_PP_SEQ_HEAD
(
£q
Ë
	`BOOST_PP_SEQ_ELEM
(0, seq)

	)

21 #
#/* 
BOOST_PP_SEQ_TAIL
 */

23 #
#i‡
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MWCC
()

25 
	#BOOST_PP_SEQ_TAIL
(
£q
Ë
	`BOOST_PP_SEQ_TAIL_1
((£q))

	)

26 
	#BOOST_PP_SEQ_TAIL_1
(
∑r
Ë
BOOST_PP_SEQ_TAIL_2
 ## 
	)
par

27 
	#BOOST_PP_SEQ_TAIL_2
(
£q
Ë
BOOST_PP_SEQ_TAIL_I
 ## 
	)
seq

28 #ñi‡
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MSVC
()

29 
	#BOOST_PP_SEQ_TAIL
(
£q
Ë
	`BOOST_PP_SEQ_TAIL_ID
(
BOOST_PP_SEQ_TAIL_I
 seq)

	)

30 
	#BOOST_PP_SEQ_TAIL_ID
(
id
Ë
	)
id

31 #ñi‡
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_EDG
()

32 
	#BOOST_PP_SEQ_TAIL
(
£q
Ë
	`BOOST_PP_SEQ_TAIL_D
(£q)

	)

33 
	#BOOST_PP_SEQ_TAIL_D
(
£q
Ë
BOOST_PP_SEQ_TAIL_I
 
	)
seq

35 
	#BOOST_PP_SEQ_TAIL
(
£q
Ë
BOOST_PP_SEQ_TAIL_I
 
	)
seq

37 
#deföê
	#BOOST_PP_SEQ_TAIL_I
(
x
)

	)

39 #
#/* 
BOOST_PP_SEQ_NIL
 */

41 
#deföê
	#BOOST_PP_SEQ_NIL
(
x
Ë(x)

	)

	@/usr/include/boost/preprocessor/seq/size.hpp

3 #* (
C
Ë
C›yright
 
Paul
 
Mís⁄ides
 2002.

4 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


5 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


6 #* 
hâp
:

9 #
#/* 
Sì
 
hâp
:

11 #
#i‚de‡
BOOST_PREPROCESSOR_SEQ_SIZE_HPP


13 
	#BOOST_PREPROCESSOR_SEQ_SIZE_HPP


	)

14 
#ö˛udê
	~<boo°/¥ïro˚ss‹/ˇt.hµ
>

16 
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

17 #
#i‡
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MWCC
()

19 
	#BOOST_PP_SEQ_SIZE
(
£q
Ë
	`BOOST_PP_SEQ_SIZE_I
((£q))

	)

20 
	#BOOST_PP_SEQ_SIZE_I
(
∑r
Ë
BOOST_PP_SEQ_SIZE_II
 ## 
	)
par

21 
	#BOOST_PP_SEQ_SIZE_II
(
£q
Ë
	`BOOST_PP_CAT
(
BOOST_PP_SEQ_SIZE_
, 
BOOST_PP_SEQ_SIZE_0
 ## seq)

	)

22 #ñi‡
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_EDG
(Ë|| BOOST_PP_CONFIG_FLAGS(Ë& 
BOOST_PP_CONFIG_MSVC
()

23 
	#BOOST_PP_SEQ_SIZE
(
£q
Ë
	`BOOST_PP_SEQ_SIZE_I
(£q)

	)

24 
	#BOOST_PP_SEQ_SIZE_I
(
£q
Ë
	`BOOST_PP_CAT
(
BOOST_PP_SEQ_SIZE_
, 
BOOST_PP_SEQ_SIZE_0
 seq)

	)

25 #ñi‡
deföed
(
__IBMC__
Ë|| deföed(
__IBMCPP__
)

26 
	#BOOST_PP_SEQ_SIZE
(
£q
Ë
	`BOOST_PP_CAT
(
BOOST_PP_SEQ_SIZE_
, BOOST_PP_CAT(
BOOST_PP_SEQ_SIZE_0
, seq))

	)

28 
	#BOOST_PP_SEQ_SIZE
(
£q
Ë
	`BOOST_PP_CAT
(
BOOST_PP_SEQ_SIZE_
, 
BOOST_PP_SEQ_SIZE_0
 seq)

	)

30 
#deföê
	#BOOST_PP_SEQ_SIZE_0
(
_
Ë
BOOST_PP_SEQ_SIZE_1


	)

32 
	#BOOST_PP_SEQ_SIZE_1
(
_
Ë
BOOST_PP_SEQ_SIZE_2


	)

33 
	#BOOST_PP_SEQ_SIZE_2
(
_
Ë
BOOST_PP_SEQ_SIZE_3


	)

34 
	#BOOST_PP_SEQ_SIZE_3
(
_
Ë
BOOST_PP_SEQ_SIZE_4


	)

35 
	#BOOST_PP_SEQ_SIZE_4
(
_
Ë
BOOST_PP_SEQ_SIZE_5


	)

36 
	#BOOST_PP_SEQ_SIZE_5
(
_
Ë
BOOST_PP_SEQ_SIZE_6


	)

37 
	#BOOST_PP_SEQ_SIZE_6
(
_
Ë
BOOST_PP_SEQ_SIZE_7


	)

38 
	#BOOST_PP_SEQ_SIZE_7
(
_
Ë
BOOST_PP_SEQ_SIZE_8


	)

39 
	#BOOST_PP_SEQ_SIZE_8
(
_
Ë
BOOST_PP_SEQ_SIZE_9


	)

40 
	#BOOST_PP_SEQ_SIZE_9
(
_
Ë
BOOST_PP_SEQ_SIZE_10


	)

41 
	#BOOST_PP_SEQ_SIZE_10
(
_
Ë
BOOST_PP_SEQ_SIZE_11


	)

42 
	#BOOST_PP_SEQ_SIZE_11
(
_
Ë
BOOST_PP_SEQ_SIZE_12


	)

43 
	#BOOST_PP_SEQ_SIZE_12
(
_
Ë
BOOST_PP_SEQ_SIZE_13


	)

44 
	#BOOST_PP_SEQ_SIZE_13
(
_
Ë
BOOST_PP_SEQ_SIZE_14


	)

45 
	#BOOST_PP_SEQ_SIZE_14
(
_
Ë
BOOST_PP_SEQ_SIZE_15


	)

46 
	#BOOST_PP_SEQ_SIZE_15
(
_
Ë
BOOST_PP_SEQ_SIZE_16


	)

47 
	#BOOST_PP_SEQ_SIZE_16
(
_
Ë
BOOST_PP_SEQ_SIZE_17


	)

48 
	#BOOST_PP_SEQ_SIZE_17
(
_
Ë
BOOST_PP_SEQ_SIZE_18


	)

49 
	#BOOST_PP_SEQ_SIZE_18
(
_
Ë
BOOST_PP_SEQ_SIZE_19


	)

50 
	#BOOST_PP_SEQ_SIZE_19
(
_
Ë
BOOST_PP_SEQ_SIZE_20


	)

51 
	#BOOST_PP_SEQ_SIZE_20
(
_
Ë
BOOST_PP_SEQ_SIZE_21


	)

52 
	#BOOST_PP_SEQ_SIZE_21
(
_
Ë
BOOST_PP_SEQ_SIZE_22


	)

53 
	#BOOST_PP_SEQ_SIZE_22
(
_
Ë
BOOST_PP_SEQ_SIZE_23


	)

54 
	#BOOST_PP_SEQ_SIZE_23
(
_
Ë
BOOST_PP_SEQ_SIZE_24


	)

55 
	#BOOST_PP_SEQ_SIZE_24
(
_
Ë
BOOST_PP_SEQ_SIZE_25


	)

56 
	#BOOST_PP_SEQ_SIZE_25
(
_
Ë
BOOST_PP_SEQ_SIZE_26


	)

57 
	#BOOST_PP_SEQ_SIZE_26
(
_
Ë
BOOST_PP_SEQ_SIZE_27


	)

58 
	#BOOST_PP_SEQ_SIZE_27
(
_
Ë
BOOST_PP_SEQ_SIZE_28


	)

59 
	#BOOST_PP_SEQ_SIZE_28
(
_
Ë
BOOST_PP_SEQ_SIZE_29


	)

60 
	#BOOST_PP_SEQ_SIZE_29
(
_
Ë
BOOST_PP_SEQ_SIZE_30


	)

61 
	#BOOST_PP_SEQ_SIZE_30
(
_
Ë
BOOST_PP_SEQ_SIZE_31


	)

62 
	#BOOST_PP_SEQ_SIZE_31
(
_
Ë
BOOST_PP_SEQ_SIZE_32


	)

63 
	#BOOST_PP_SEQ_SIZE_32
(
_
Ë
BOOST_PP_SEQ_SIZE_33


	)

64 
	#BOOST_PP_SEQ_SIZE_33
(
_
Ë
BOOST_PP_SEQ_SIZE_34


	)

65 
	#BOOST_PP_SEQ_SIZE_34
(
_
Ë
BOOST_PP_SEQ_SIZE_35


	)

66 
	#BOOST_PP_SEQ_SIZE_35
(
_
Ë
BOOST_PP_SEQ_SIZE_36


	)

67 
	#BOOST_PP_SEQ_SIZE_36
(
_
Ë
BOOST_PP_SEQ_SIZE_37


	)

68 
	#BOOST_PP_SEQ_SIZE_37
(
_
Ë
BOOST_PP_SEQ_SIZE_38


	)

69 
	#BOOST_PP_SEQ_SIZE_38
(
_
Ë
BOOST_PP_SEQ_SIZE_39


	)

70 
	#BOOST_PP_SEQ_SIZE_39
(
_
Ë
BOOST_PP_SEQ_SIZE_40


	)

71 
	#BOOST_PP_SEQ_SIZE_40
(
_
Ë
BOOST_PP_SEQ_SIZE_41


	)

72 
	#BOOST_PP_SEQ_SIZE_41
(
_
Ë
BOOST_PP_SEQ_SIZE_42


	)

73 
	#BOOST_PP_SEQ_SIZE_42
(
_
Ë
BOOST_PP_SEQ_SIZE_43


	)

74 
	#BOOST_PP_SEQ_SIZE_43
(
_
Ë
BOOST_PP_SEQ_SIZE_44


	)

75 
	#BOOST_PP_SEQ_SIZE_44
(
_
Ë
BOOST_PP_SEQ_SIZE_45


	)

76 
	#BOOST_PP_SEQ_SIZE_45
(
_
Ë
BOOST_PP_SEQ_SIZE_46


	)

77 
	#BOOST_PP_SEQ_SIZE_46
(
_
Ë
BOOST_PP_SEQ_SIZE_47


	)

78 
	#BOOST_PP_SEQ_SIZE_47
(
_
Ë
BOOST_PP_SEQ_SIZE_48


	)

79 
	#BOOST_PP_SEQ_SIZE_48
(
_
Ë
BOOST_PP_SEQ_SIZE_49


	)

80 
	#BOOST_PP_SEQ_SIZE_49
(
_
Ë
BOOST_PP_SEQ_SIZE_50


	)

81 
	#BOOST_PP_SEQ_SIZE_50
(
_
Ë
BOOST_PP_SEQ_SIZE_51


	)

82 
	#BOOST_PP_SEQ_SIZE_51
(
_
Ë
BOOST_PP_SEQ_SIZE_52


	)

83 
	#BOOST_PP_SEQ_SIZE_52
(
_
Ë
BOOST_PP_SEQ_SIZE_53


	)

84 
	#BOOST_PP_SEQ_SIZE_53
(
_
Ë
BOOST_PP_SEQ_SIZE_54


	)

85 
	#BOOST_PP_SEQ_SIZE_54
(
_
Ë
BOOST_PP_SEQ_SIZE_55


	)

86 
	#BOOST_PP_SEQ_SIZE_55
(
_
Ë
BOOST_PP_SEQ_SIZE_56


	)

87 
	#BOOST_PP_SEQ_SIZE_56
(
_
Ë
BOOST_PP_SEQ_SIZE_57


	)

88 
	#BOOST_PP_SEQ_SIZE_57
(
_
Ë
BOOST_PP_SEQ_SIZE_58


	)

89 
	#BOOST_PP_SEQ_SIZE_58
(
_
Ë
BOOST_PP_SEQ_SIZE_59


	)

90 
	#BOOST_PP_SEQ_SIZE_59
(
_
Ë
BOOST_PP_SEQ_SIZE_60


	)

91 
	#BOOST_PP_SEQ_SIZE_60
(
_
Ë
BOOST_PP_SEQ_SIZE_61


	)

92 
	#BOOST_PP_SEQ_SIZE_61
(
_
Ë
BOOST_PP_SEQ_SIZE_62


	)

93 
	#BOOST_PP_SEQ_SIZE_62
(
_
Ë
BOOST_PP_SEQ_SIZE_63


	)

94 
	#BOOST_PP_SEQ_SIZE_63
(
_
Ë
BOOST_PP_SEQ_SIZE_64


	)

95 
	#BOOST_PP_SEQ_SIZE_64
(
_
Ë
BOOST_PP_SEQ_SIZE_65


	)

96 
	#BOOST_PP_SEQ_SIZE_65
(
_
Ë
BOOST_PP_SEQ_SIZE_66


	)

97 
	#BOOST_PP_SEQ_SIZE_66
(
_
Ë
BOOST_PP_SEQ_SIZE_67


	)

98 
	#BOOST_PP_SEQ_SIZE_67
(
_
Ë
BOOST_PP_SEQ_SIZE_68


	)

99 
	#BOOST_PP_SEQ_SIZE_68
(
_
Ë
BOOST_PP_SEQ_SIZE_69


	)

100 
	#BOOST_PP_SEQ_SIZE_69
(
_
Ë
BOOST_PP_SEQ_SIZE_70


	)

101 
	#BOOST_PP_SEQ_SIZE_70
(
_
Ë
BOOST_PP_SEQ_SIZE_71


	)

102 
	#BOOST_PP_SEQ_SIZE_71
(
_
Ë
BOOST_PP_SEQ_SIZE_72


	)

103 
	#BOOST_PP_SEQ_SIZE_72
(
_
Ë
BOOST_PP_SEQ_SIZE_73


	)

104 
	#BOOST_PP_SEQ_SIZE_73
(
_
Ë
BOOST_PP_SEQ_SIZE_74


	)

105 
	#BOOST_PP_SEQ_SIZE_74
(
_
Ë
BOOST_PP_SEQ_SIZE_75


	)

106 
	#BOOST_PP_SEQ_SIZE_75
(
_
Ë
BOOST_PP_SEQ_SIZE_76


	)

107 
	#BOOST_PP_SEQ_SIZE_76
(
_
Ë
BOOST_PP_SEQ_SIZE_77


	)

108 
	#BOOST_PP_SEQ_SIZE_77
(
_
Ë
BOOST_PP_SEQ_SIZE_78


	)

109 
	#BOOST_PP_SEQ_SIZE_78
(
_
Ë
BOOST_PP_SEQ_SIZE_79


	)

110 
	#BOOST_PP_SEQ_SIZE_79
(
_
Ë
BOOST_PP_SEQ_SIZE_80


	)

111 
	#BOOST_PP_SEQ_SIZE_80
(
_
Ë
BOOST_PP_SEQ_SIZE_81


	)

112 
	#BOOST_PP_SEQ_SIZE_81
(
_
Ë
BOOST_PP_SEQ_SIZE_82


	)

113 
	#BOOST_PP_SEQ_SIZE_82
(
_
Ë
BOOST_PP_SEQ_SIZE_83


	)

114 
	#BOOST_PP_SEQ_SIZE_83
(
_
Ë
BOOST_PP_SEQ_SIZE_84


	)

115 
	#BOOST_PP_SEQ_SIZE_84
(
_
Ë
BOOST_PP_SEQ_SIZE_85


	)

116 
	#BOOST_PP_SEQ_SIZE_85
(
_
Ë
BOOST_PP_SEQ_SIZE_86


	)

117 
	#BOOST_PP_SEQ_SIZE_86
(
_
Ë
BOOST_PP_SEQ_SIZE_87


	)

118 
	#BOOST_PP_SEQ_SIZE_87
(
_
Ë
BOOST_PP_SEQ_SIZE_88


	)

119 
	#BOOST_PP_SEQ_SIZE_88
(
_
Ë
BOOST_PP_SEQ_SIZE_89


	)

120 
	#BOOST_PP_SEQ_SIZE_89
(
_
Ë
BOOST_PP_SEQ_SIZE_90


	)

121 
	#BOOST_PP_SEQ_SIZE_90
(
_
Ë
BOOST_PP_SEQ_SIZE_91


	)

122 
	#BOOST_PP_SEQ_SIZE_91
(
_
Ë
BOOST_PP_SEQ_SIZE_92


	)

123 
	#BOOST_PP_SEQ_SIZE_92
(
_
Ë
BOOST_PP_SEQ_SIZE_93


	)

124 
	#BOOST_PP_SEQ_SIZE_93
(
_
Ë
BOOST_PP_SEQ_SIZE_94


	)

125 
	#BOOST_PP_SEQ_SIZE_94
(
_
Ë
BOOST_PP_SEQ_SIZE_95


	)

126 
	#BOOST_PP_SEQ_SIZE_95
(
_
Ë
BOOST_PP_SEQ_SIZE_96


	)

127 
	#BOOST_PP_SEQ_SIZE_96
(
_
Ë
BOOST_PP_SEQ_SIZE_97


	)

128 
	#BOOST_PP_SEQ_SIZE_97
(
_
Ë
BOOST_PP_SEQ_SIZE_98


	)

129 
	#BOOST_PP_SEQ_SIZE_98
(
_
Ë
BOOST_PP_SEQ_SIZE_99


	)

130 
	#BOOST_PP_SEQ_SIZE_99
(
_
Ë
BOOST_PP_SEQ_SIZE_100


	)

131 
	#BOOST_PP_SEQ_SIZE_100
(
_
Ë
BOOST_PP_SEQ_SIZE_101


	)

132 
	#BOOST_PP_SEQ_SIZE_101
(
_
Ë
BOOST_PP_SEQ_SIZE_102


	)

133 
	#BOOST_PP_SEQ_SIZE_102
(
_
Ë
BOOST_PP_SEQ_SIZE_103


	)

134 
	#BOOST_PP_SEQ_SIZE_103
(
_
Ë
BOOST_PP_SEQ_SIZE_104


	)

135 
	#BOOST_PP_SEQ_SIZE_104
(
_
Ë
BOOST_PP_SEQ_SIZE_105


	)

136 
	#BOOST_PP_SEQ_SIZE_105
(
_
Ë
BOOST_PP_SEQ_SIZE_106


	)

137 
	#BOOST_PP_SEQ_SIZE_106
(
_
Ë
BOOST_PP_SEQ_SIZE_107


	)

138 
	#BOOST_PP_SEQ_SIZE_107
(
_
Ë
BOOST_PP_SEQ_SIZE_108


	)

139 
	#BOOST_PP_SEQ_SIZE_108
(
_
Ë
BOOST_PP_SEQ_SIZE_109


	)

140 
	#BOOST_PP_SEQ_SIZE_109
(
_
Ë
BOOST_PP_SEQ_SIZE_110


	)

141 
	#BOOST_PP_SEQ_SIZE_110
(
_
Ë
BOOST_PP_SEQ_SIZE_111


	)

142 
	#BOOST_PP_SEQ_SIZE_111
(
_
Ë
BOOST_PP_SEQ_SIZE_112


	)

143 
	#BOOST_PP_SEQ_SIZE_112
(
_
Ë
BOOST_PP_SEQ_SIZE_113


	)

144 
	#BOOST_PP_SEQ_SIZE_113
(
_
Ë
BOOST_PP_SEQ_SIZE_114


	)

145 
	#BOOST_PP_SEQ_SIZE_114
(
_
Ë
BOOST_PP_SEQ_SIZE_115


	)

146 
	#BOOST_PP_SEQ_SIZE_115
(
_
Ë
BOOST_PP_SEQ_SIZE_116


	)

147 
	#BOOST_PP_SEQ_SIZE_116
(
_
Ë
BOOST_PP_SEQ_SIZE_117


	)

148 
	#BOOST_PP_SEQ_SIZE_117
(
_
Ë
BOOST_PP_SEQ_SIZE_118


	)

149 
	#BOOST_PP_SEQ_SIZE_118
(
_
Ë
BOOST_PP_SEQ_SIZE_119


	)

150 
	#BOOST_PP_SEQ_SIZE_119
(
_
Ë
BOOST_PP_SEQ_SIZE_120


	)

151 
	#BOOST_PP_SEQ_SIZE_120
(
_
Ë
BOOST_PP_SEQ_SIZE_121


	)

152 
	#BOOST_PP_SEQ_SIZE_121
(
_
Ë
BOOST_PP_SEQ_SIZE_122


	)

153 
	#BOOST_PP_SEQ_SIZE_122
(
_
Ë
BOOST_PP_SEQ_SIZE_123


	)

154 
	#BOOST_PP_SEQ_SIZE_123
(
_
Ë
BOOST_PP_SEQ_SIZE_124


	)

155 
	#BOOST_PP_SEQ_SIZE_124
(
_
Ë
BOOST_PP_SEQ_SIZE_125


	)

156 
	#BOOST_PP_SEQ_SIZE_125
(
_
Ë
BOOST_PP_SEQ_SIZE_126


	)

157 
	#BOOST_PP_SEQ_SIZE_126
(
_
Ë
BOOST_PP_SEQ_SIZE_127


	)

158 
	#BOOST_PP_SEQ_SIZE_127
(
_
Ë
BOOST_PP_SEQ_SIZE_128


	)

159 
	#BOOST_PP_SEQ_SIZE_128
(
_
Ë
BOOST_PP_SEQ_SIZE_129


	)

160 
	#BOOST_PP_SEQ_SIZE_129
(
_
Ë
BOOST_PP_SEQ_SIZE_130


	)

161 
	#BOOST_PP_SEQ_SIZE_130
(
_
Ë
BOOST_PP_SEQ_SIZE_131


	)

162 
	#BOOST_PP_SEQ_SIZE_131
(
_
Ë
BOOST_PP_SEQ_SIZE_132


	)

163 
	#BOOST_PP_SEQ_SIZE_132
(
_
Ë
BOOST_PP_SEQ_SIZE_133


	)

164 
	#BOOST_PP_SEQ_SIZE_133
(
_
Ë
BOOST_PP_SEQ_SIZE_134


	)

165 
	#BOOST_PP_SEQ_SIZE_134
(
_
Ë
BOOST_PP_SEQ_SIZE_135


	)

166 
	#BOOST_PP_SEQ_SIZE_135
(
_
Ë
BOOST_PP_SEQ_SIZE_136


	)

167 
	#BOOST_PP_SEQ_SIZE_136
(
_
Ë
BOOST_PP_SEQ_SIZE_137


	)

168 
	#BOOST_PP_SEQ_SIZE_137
(
_
Ë
BOOST_PP_SEQ_SIZE_138


	)

169 
	#BOOST_PP_SEQ_SIZE_138
(
_
Ë
BOOST_PP_SEQ_SIZE_139


	)

170 
	#BOOST_PP_SEQ_SIZE_139
(
_
Ë
BOOST_PP_SEQ_SIZE_140


	)

171 
	#BOOST_PP_SEQ_SIZE_140
(
_
Ë
BOOST_PP_SEQ_SIZE_141


	)

172 
	#BOOST_PP_SEQ_SIZE_141
(
_
Ë
BOOST_PP_SEQ_SIZE_142


	)

173 
	#BOOST_PP_SEQ_SIZE_142
(
_
Ë
BOOST_PP_SEQ_SIZE_143


	)

174 
	#BOOST_PP_SEQ_SIZE_143
(
_
Ë
BOOST_PP_SEQ_SIZE_144


	)

175 
	#BOOST_PP_SEQ_SIZE_144
(
_
Ë
BOOST_PP_SEQ_SIZE_145


	)

176 
	#BOOST_PP_SEQ_SIZE_145
(
_
Ë
BOOST_PP_SEQ_SIZE_146


	)

177 
	#BOOST_PP_SEQ_SIZE_146
(
_
Ë
BOOST_PP_SEQ_SIZE_147


	)

178 
	#BOOST_PP_SEQ_SIZE_147
(
_
Ë
BOOST_PP_SEQ_SIZE_148


	)

179 
	#BOOST_PP_SEQ_SIZE_148
(
_
Ë
BOOST_PP_SEQ_SIZE_149


	)

180 
	#BOOST_PP_SEQ_SIZE_149
(
_
Ë
BOOST_PP_SEQ_SIZE_150


	)

181 
	#BOOST_PP_SEQ_SIZE_150
(
_
Ë
BOOST_PP_SEQ_SIZE_151


	)

182 
	#BOOST_PP_SEQ_SIZE_151
(
_
Ë
BOOST_PP_SEQ_SIZE_152


	)

183 
	#BOOST_PP_SEQ_SIZE_152
(
_
Ë
BOOST_PP_SEQ_SIZE_153


	)

184 
	#BOOST_PP_SEQ_SIZE_153
(
_
Ë
BOOST_PP_SEQ_SIZE_154


	)

185 
	#BOOST_PP_SEQ_SIZE_154
(
_
Ë
BOOST_PP_SEQ_SIZE_155


	)

186 
	#BOOST_PP_SEQ_SIZE_155
(
_
Ë
BOOST_PP_SEQ_SIZE_156


	)

187 
	#BOOST_PP_SEQ_SIZE_156
(
_
Ë
BOOST_PP_SEQ_SIZE_157


	)

188 
	#BOOST_PP_SEQ_SIZE_157
(
_
Ë
BOOST_PP_SEQ_SIZE_158


	)

189 
	#BOOST_PP_SEQ_SIZE_158
(
_
Ë
BOOST_PP_SEQ_SIZE_159


	)

190 
	#BOOST_PP_SEQ_SIZE_159
(
_
Ë
BOOST_PP_SEQ_SIZE_160


	)

191 
	#BOOST_PP_SEQ_SIZE_160
(
_
Ë
BOOST_PP_SEQ_SIZE_161


	)

192 
	#BOOST_PP_SEQ_SIZE_161
(
_
Ë
BOOST_PP_SEQ_SIZE_162


	)

193 
	#BOOST_PP_SEQ_SIZE_162
(
_
Ë
BOOST_PP_SEQ_SIZE_163


	)

194 
	#BOOST_PP_SEQ_SIZE_163
(
_
Ë
BOOST_PP_SEQ_SIZE_164


	)

195 
	#BOOST_PP_SEQ_SIZE_164
(
_
Ë
BOOST_PP_SEQ_SIZE_165


	)

196 
	#BOOST_PP_SEQ_SIZE_165
(
_
Ë
BOOST_PP_SEQ_SIZE_166


	)

197 
	#BOOST_PP_SEQ_SIZE_166
(
_
Ë
BOOST_PP_SEQ_SIZE_167


	)

198 
	#BOOST_PP_SEQ_SIZE_167
(
_
Ë
BOOST_PP_SEQ_SIZE_168


	)

199 
	#BOOST_PP_SEQ_SIZE_168
(
_
Ë
BOOST_PP_SEQ_SIZE_169


	)

200 
	#BOOST_PP_SEQ_SIZE_169
(
_
Ë
BOOST_PP_SEQ_SIZE_170


	)

201 
	#BOOST_PP_SEQ_SIZE_170
(
_
Ë
BOOST_PP_SEQ_SIZE_171


	)

202 
	#BOOST_PP_SEQ_SIZE_171
(
_
Ë
BOOST_PP_SEQ_SIZE_172


	)

203 
	#BOOST_PP_SEQ_SIZE_172
(
_
Ë
BOOST_PP_SEQ_SIZE_173


	)

204 
	#BOOST_PP_SEQ_SIZE_173
(
_
Ë
BOOST_PP_SEQ_SIZE_174


	)

205 
	#BOOST_PP_SEQ_SIZE_174
(
_
Ë
BOOST_PP_SEQ_SIZE_175


	)

206 
	#BOOST_PP_SEQ_SIZE_175
(
_
Ë
BOOST_PP_SEQ_SIZE_176


	)

207 
	#BOOST_PP_SEQ_SIZE_176
(
_
Ë
BOOST_PP_SEQ_SIZE_177


	)

208 
	#BOOST_PP_SEQ_SIZE_177
(
_
Ë
BOOST_PP_SEQ_SIZE_178


	)

209 
	#BOOST_PP_SEQ_SIZE_178
(
_
Ë
BOOST_PP_SEQ_SIZE_179


	)

210 
	#BOOST_PP_SEQ_SIZE_179
(
_
Ë
BOOST_PP_SEQ_SIZE_180


	)

211 
	#BOOST_PP_SEQ_SIZE_180
(
_
Ë
BOOST_PP_SEQ_SIZE_181


	)

212 
	#BOOST_PP_SEQ_SIZE_181
(
_
Ë
BOOST_PP_SEQ_SIZE_182


	)

213 
	#BOOST_PP_SEQ_SIZE_182
(
_
Ë
BOOST_PP_SEQ_SIZE_183


	)

214 
	#BOOST_PP_SEQ_SIZE_183
(
_
Ë
BOOST_PP_SEQ_SIZE_184


	)

215 
	#BOOST_PP_SEQ_SIZE_184
(
_
Ë
BOOST_PP_SEQ_SIZE_185


	)

216 
	#BOOST_PP_SEQ_SIZE_185
(
_
Ë
BOOST_PP_SEQ_SIZE_186


	)

217 
	#BOOST_PP_SEQ_SIZE_186
(
_
Ë
BOOST_PP_SEQ_SIZE_187


	)

218 
	#BOOST_PP_SEQ_SIZE_187
(
_
Ë
BOOST_PP_SEQ_SIZE_188


	)

219 
	#BOOST_PP_SEQ_SIZE_188
(
_
Ë
BOOST_PP_SEQ_SIZE_189


	)

220 
	#BOOST_PP_SEQ_SIZE_189
(
_
Ë
BOOST_PP_SEQ_SIZE_190


	)

221 
	#BOOST_PP_SEQ_SIZE_190
(
_
Ë
BOOST_PP_SEQ_SIZE_191


	)

222 
	#BOOST_PP_SEQ_SIZE_191
(
_
Ë
BOOST_PP_SEQ_SIZE_192


	)

223 
	#BOOST_PP_SEQ_SIZE_192
(
_
Ë
BOOST_PP_SEQ_SIZE_193


	)

224 
	#BOOST_PP_SEQ_SIZE_193
(
_
Ë
BOOST_PP_SEQ_SIZE_194


	)

225 
	#BOOST_PP_SEQ_SIZE_194
(
_
Ë
BOOST_PP_SEQ_SIZE_195


	)

226 
	#BOOST_PP_SEQ_SIZE_195
(
_
Ë
BOOST_PP_SEQ_SIZE_196


	)

227 
	#BOOST_PP_SEQ_SIZE_196
(
_
Ë
BOOST_PP_SEQ_SIZE_197


	)

228 
	#BOOST_PP_SEQ_SIZE_197
(
_
Ë
BOOST_PP_SEQ_SIZE_198


	)

229 
	#BOOST_PP_SEQ_SIZE_198
(
_
Ë
BOOST_PP_SEQ_SIZE_199


	)

230 
	#BOOST_PP_SEQ_SIZE_199
(
_
Ë
BOOST_PP_SEQ_SIZE_200


	)

231 
	#BOOST_PP_SEQ_SIZE_200
(
_
Ë
BOOST_PP_SEQ_SIZE_201


	)

232 
	#BOOST_PP_SEQ_SIZE_201
(
_
Ë
BOOST_PP_SEQ_SIZE_202


	)

233 
	#BOOST_PP_SEQ_SIZE_202
(
_
Ë
BOOST_PP_SEQ_SIZE_203


	)

234 
	#BOOST_PP_SEQ_SIZE_203
(
_
Ë
BOOST_PP_SEQ_SIZE_204


	)

235 
	#BOOST_PP_SEQ_SIZE_204
(
_
Ë
BOOST_PP_SEQ_SIZE_205


	)

236 
	#BOOST_PP_SEQ_SIZE_205
(
_
Ë
BOOST_PP_SEQ_SIZE_206


	)

237 
	#BOOST_PP_SEQ_SIZE_206
(
_
Ë
BOOST_PP_SEQ_SIZE_207


	)

238 
	#BOOST_PP_SEQ_SIZE_207
(
_
Ë
BOOST_PP_SEQ_SIZE_208


	)

239 
	#BOOST_PP_SEQ_SIZE_208
(
_
Ë
BOOST_PP_SEQ_SIZE_209


	)

240 
	#BOOST_PP_SEQ_SIZE_209
(
_
Ë
BOOST_PP_SEQ_SIZE_210


	)

241 
	#BOOST_PP_SEQ_SIZE_210
(
_
Ë
BOOST_PP_SEQ_SIZE_211


	)

242 
	#BOOST_PP_SEQ_SIZE_211
(
_
Ë
BOOST_PP_SEQ_SIZE_212


	)

243 
	#BOOST_PP_SEQ_SIZE_212
(
_
Ë
BOOST_PP_SEQ_SIZE_213


	)

244 
	#BOOST_PP_SEQ_SIZE_213
(
_
Ë
BOOST_PP_SEQ_SIZE_214


	)

245 
	#BOOST_PP_SEQ_SIZE_214
(
_
Ë
BOOST_PP_SEQ_SIZE_215


	)

246 
	#BOOST_PP_SEQ_SIZE_215
(
_
Ë
BOOST_PP_SEQ_SIZE_216


	)

247 
	#BOOST_PP_SEQ_SIZE_216
(
_
Ë
BOOST_PP_SEQ_SIZE_217


	)

248 
	#BOOST_PP_SEQ_SIZE_217
(
_
Ë
BOOST_PP_SEQ_SIZE_218


	)

249 
	#BOOST_PP_SEQ_SIZE_218
(
_
Ë
BOOST_PP_SEQ_SIZE_219


	)

250 
	#BOOST_PP_SEQ_SIZE_219
(
_
Ë
BOOST_PP_SEQ_SIZE_220


	)

251 
	#BOOST_PP_SEQ_SIZE_220
(
_
Ë
BOOST_PP_SEQ_SIZE_221


	)

252 
	#BOOST_PP_SEQ_SIZE_221
(
_
Ë
BOOST_PP_SEQ_SIZE_222


	)

253 
	#BOOST_PP_SEQ_SIZE_222
(
_
Ë
BOOST_PP_SEQ_SIZE_223


	)

254 
	#BOOST_PP_SEQ_SIZE_223
(
_
Ë
BOOST_PP_SEQ_SIZE_224


	)

255 
	#BOOST_PP_SEQ_SIZE_224
(
_
Ë
BOOST_PP_SEQ_SIZE_225


	)

256 
	#BOOST_PP_SEQ_SIZE_225
(
_
Ë
BOOST_PP_SEQ_SIZE_226


	)

257 
	#BOOST_PP_SEQ_SIZE_226
(
_
Ë
BOOST_PP_SEQ_SIZE_227


	)

258 
	#BOOST_PP_SEQ_SIZE_227
(
_
Ë
BOOST_PP_SEQ_SIZE_228


	)

259 
	#BOOST_PP_SEQ_SIZE_228
(
_
Ë
BOOST_PP_SEQ_SIZE_229


	)

260 
	#BOOST_PP_SEQ_SIZE_229
(
_
Ë
BOOST_PP_SEQ_SIZE_230


	)

261 
	#BOOST_PP_SEQ_SIZE_230
(
_
Ë
BOOST_PP_SEQ_SIZE_231


	)

262 
	#BOOST_PP_SEQ_SIZE_231
(
_
Ë
BOOST_PP_SEQ_SIZE_232


	)

263 
	#BOOST_PP_SEQ_SIZE_232
(
_
Ë
BOOST_PP_SEQ_SIZE_233


	)

264 
	#BOOST_PP_SEQ_SIZE_233
(
_
Ë
BOOST_PP_SEQ_SIZE_234


	)

265 
	#BOOST_PP_SEQ_SIZE_234
(
_
Ë
BOOST_PP_SEQ_SIZE_235


	)

266 
	#BOOST_PP_SEQ_SIZE_235
(
_
Ë
BOOST_PP_SEQ_SIZE_236


	)

267 
	#BOOST_PP_SEQ_SIZE_236
(
_
Ë
BOOST_PP_SEQ_SIZE_237


	)

268 
	#BOOST_PP_SEQ_SIZE_237
(
_
Ë
BOOST_PP_SEQ_SIZE_238


	)

269 
	#BOOST_PP_SEQ_SIZE_238
(
_
Ë
BOOST_PP_SEQ_SIZE_239


	)

270 
	#BOOST_PP_SEQ_SIZE_239
(
_
Ë
BOOST_PP_SEQ_SIZE_240


	)

271 
	#BOOST_PP_SEQ_SIZE_240
(
_
Ë
BOOST_PP_SEQ_SIZE_241


	)

272 
	#BOOST_PP_SEQ_SIZE_241
(
_
Ë
BOOST_PP_SEQ_SIZE_242


	)

273 
	#BOOST_PP_SEQ_SIZE_242
(
_
Ë
BOOST_PP_SEQ_SIZE_243


	)

274 
	#BOOST_PP_SEQ_SIZE_243
(
_
Ë
BOOST_PP_SEQ_SIZE_244


	)

275 
	#BOOST_PP_SEQ_SIZE_244
(
_
Ë
BOOST_PP_SEQ_SIZE_245


	)

276 
	#BOOST_PP_SEQ_SIZE_245
(
_
Ë
BOOST_PP_SEQ_SIZE_246


	)

277 
	#BOOST_PP_SEQ_SIZE_246
(
_
Ë
BOOST_PP_SEQ_SIZE_247


	)

278 
	#BOOST_PP_SEQ_SIZE_247
(
_
Ë
BOOST_PP_SEQ_SIZE_248


	)

279 
	#BOOST_PP_SEQ_SIZE_248
(
_
Ë
BOOST_PP_SEQ_SIZE_249


	)

280 
	#BOOST_PP_SEQ_SIZE_249
(
_
Ë
BOOST_PP_SEQ_SIZE_250


	)

281 
	#BOOST_PP_SEQ_SIZE_250
(
_
Ë
BOOST_PP_SEQ_SIZE_251


	)

282 
	#BOOST_PP_SEQ_SIZE_251
(
_
Ë
BOOST_PP_SEQ_SIZE_252


	)

283 
	#BOOST_PP_SEQ_SIZE_252
(
_
Ë
BOOST_PP_SEQ_SIZE_253


	)

284 
	#BOOST_PP_SEQ_SIZE_253
(
_
Ë
BOOST_PP_SEQ_SIZE_254


	)

285 
	#BOOST_PP_SEQ_SIZE_254
(
_
Ë
BOOST_PP_SEQ_SIZE_255


	)

286 
	#BOOST_PP_SEQ_SIZE_255
(
_
Ë
BOOST_PP_SEQ_SIZE_256


	)

287 
	#BOOST_PP_SEQ_SIZE_256
(
_
Ë
BOOST_PP_SEQ_SIZE_257


	)

288 
#deföê
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_0
 0

	)

290 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_1
 1

	)

291 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_2
 2

	)

292 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_3
 3

	)

293 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_4
 4

	)

294 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_5
 5

	)

295 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_6
 6

	)

296 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_7
 7

	)

297 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_8
 8

	)

298 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_9
 9

	)

299 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_10
 10

	)

300 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_11
 11

	)

301 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_12
 12

	)

302 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_13
 13

	)

303 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_14
 14

	)

304 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_15
 15

	)

305 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_16
 16

	)

306 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_17
 17

	)

307 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_18
 18

	)

308 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_19
 19

	)

309 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_20
 20

	)

310 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_21
 21

	)

311 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_22
 22

	)

312 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_23
 23

	)

313 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_24
 24

	)

314 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_25
 25

	)

315 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_26
 26

	)

316 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_27
 27

	)

317 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_28
 28

	)

318 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_29
 29

	)

319 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_30
 30

	)

320 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_31
 31

	)

321 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_32
 32

	)

322 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_33
 33

	)

323 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_34
 34

	)

324 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_35
 35

	)

325 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_36
 36

	)

326 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_37
 37

	)

327 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_38
 38

	)

328 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_39
 39

	)

329 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_40
 40

	)

330 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_41
 41

	)

331 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_42
 42

	)

332 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_43
 43

	)

333 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_44
 44

	)

334 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_45
 45

	)

335 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_46
 46

	)

336 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_47
 47

	)

337 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_48
 48

	)

338 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_49
 49

	)

339 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_50
 50

	)

340 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_51
 51

	)

341 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_52
 52

	)

342 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_53
 53

	)

343 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_54
 54

	)

344 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_55
 55

	)

345 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_56
 56

	)

346 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_57
 57

	)

347 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_58
 58

	)

348 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_59
 59

	)

349 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_60
 60

	)

350 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_61
 61

	)

351 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_62
 62

	)

352 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_63
 63

	)

353 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_64
 64

	)

354 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_65
 65

	)

355 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_66
 66

	)

356 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_67
 67

	)

357 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_68
 68

	)

358 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_69
 69

	)

359 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_70
 70

	)

360 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_71
 71

	)

361 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_72
 72

	)

362 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_73
 73

	)

363 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_74
 74

	)

364 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_75
 75

	)

365 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_76
 76

	)

366 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_77
 77

	)

367 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_78
 78

	)

368 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_79
 79

	)

369 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_80
 80

	)

370 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_81
 81

	)

371 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_82
 82

	)

372 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_83
 83

	)

373 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_84
 84

	)

374 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_85
 85

	)

375 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_86
 86

	)

376 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_87
 87

	)

377 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_88
 88

	)

378 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_89
 89

	)

379 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_90
 90

	)

380 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_91
 91

	)

381 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_92
 92

	)

382 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_93
 93

	)

383 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_94
 94

	)

384 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_95
 95

	)

385 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_96
 96

	)

386 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_97
 97

	)

387 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_98
 98

	)

388 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_99
 99

	)

389 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_100
 100

	)

390 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_101
 101

	)

391 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_102
 102

	)

392 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_103
 103

	)

393 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_104
 104

	)

394 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_105
 105

	)

395 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_106
 106

	)

396 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_107
 107

	)

397 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_108
 108

	)

398 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_109
 109

	)

399 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_110
 110

	)

400 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_111
 111

	)

401 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_112
 112

	)

402 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_113
 113

	)

403 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_114
 114

	)

404 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_115
 115

	)

405 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_116
 116

	)

406 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_117
 117

	)

407 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_118
 118

	)

408 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_119
 119

	)

409 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_120
 120

	)

410 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_121
 121

	)

411 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_122
 122

	)

412 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_123
 123

	)

413 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_124
 124

	)

414 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_125
 125

	)

415 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_126
 126

	)

416 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_127
 127

	)

417 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_128
 128

	)

418 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_129
 129

	)

419 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_130
 130

	)

420 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_131
 131

	)

421 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_132
 132

	)

422 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_133
 133

	)

423 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_134
 134

	)

424 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_135
 135

	)

425 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_136
 136

	)

426 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_137
 137

	)

427 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_138
 138

	)

428 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_139
 139

	)

429 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_140
 140

	)

430 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_141
 141

	)

431 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_142
 142

	)

432 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_143
 143

	)

433 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_144
 144

	)

434 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_145
 145

	)

435 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_146
 146

	)

436 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_147
 147

	)

437 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_148
 148

	)

438 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_149
 149

	)

439 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_150
 150

	)

440 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_151
 151

	)

441 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_152
 152

	)

442 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_153
 153

	)

443 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_154
 154

	)

444 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_155
 155

	)

445 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_156
 156

	)

446 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_157
 157

	)

447 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_158
 158

	)

448 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_159
 159

	)

449 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_160
 160

	)

450 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_161
 161

	)

451 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_162
 162

	)

452 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_163
 163

	)

453 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_164
 164

	)

454 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_165
 165

	)

455 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_166
 166

	)

456 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_167
 167

	)

457 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_168
 168

	)

458 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_169
 169

	)

459 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_170
 170

	)

460 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_171
 171

	)

461 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_172
 172

	)

462 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_173
 173

	)

463 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_174
 174

	)

464 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_175
 175

	)

465 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_176
 176

	)

466 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_177
 177

	)

467 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_178
 178

	)

468 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_179
 179

	)

469 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_180
 180

	)

470 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_181
 181

	)

471 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_182
 182

	)

472 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_183
 183

	)

473 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_184
 184

	)

474 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_185
 185

	)

475 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_186
 186

	)

476 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_187
 187

	)

477 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_188
 188

	)

478 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_189
 189

	)

479 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_190
 190

	)

480 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_191
 191

	)

481 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_192
 192

	)

482 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_193
 193

	)

483 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_194
 194

	)

484 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_195
 195

	)

485 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_196
 196

	)

486 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_197
 197

	)

487 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_198
 198

	)

488 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_199
 199

	)

489 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_200
 200

	)

490 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_201
 201

	)

491 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_202
 202

	)

492 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_203
 203

	)

493 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_204
 204

	)

494 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_205
 205

	)

495 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_206
 206

	)

496 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_207
 207

	)

497 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_208
 208

	)

498 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_209
 209

	)

499 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_210
 210

	)

500 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_211
 211

	)

501 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_212
 212

	)

502 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_213
 213

	)

503 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_214
 214

	)

504 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_215
 215

	)

505 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_216
 216

	)

506 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_217
 217

	)

507 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_218
 218

	)

508 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_219
 219

	)

509 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_220
 220

	)

510 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_221
 221

	)

511 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_222
 222

	)

512 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_223
 223

	)

513 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_224
 224

	)

514 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_225
 225

	)

515 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_226
 226

	)

516 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_227
 227

	)

517 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_228
 228

	)

518 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_229
 229

	)

519 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_230
 230

	)

520 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_231
 231

	)

521 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_232
 232

	)

522 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_233
 233

	)

523 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_234
 234

	)

524 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_235
 235

	)

525 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_236
 236

	)

526 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_237
 237

	)

527 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_238
 238

	)

528 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_239
 239

	)

529 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_240
 240

	)

530 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_241
 241

	)

531 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_242
 242

	)

532 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_243
 243

	)

533 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_244
 244

	)

534 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_245
 245

	)

535 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_246
 246

	)

536 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_247
 247

	)

537 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_248
 248

	)

538 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_249
 249

	)

539 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_250
 250

	)

540 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_251
 251

	)

541 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_252
 252

	)

542 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_253
 253

	)

543 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_254
 254

	)

544 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_255
 255

	)

545 
	#BOOST_PP_SEQ_SIZE_BOOST_PP_SEQ_SIZE_256
 256

	)

	@/usr/include/boost/preprocessor/tuple/elem.hpp

1 #/* 
C›yright
 (
C
) 2001

2 #* 
Hou£m¨que
 
Oy


3 #* 
hâp
:

5 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


6 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


7 #* 
hâp
:

9 #
#/* 
Revi£d
 
by
 
Paul
 
Mís⁄ides
 (2002-2011) */

11 #/* 
Revi£d
 
by
 
Edw¨d
 
Dõ√r
 (2011,2014) */

12 #
#/* 
Sì
 
hâp
:

14 #
#i‚de‡
BOOST_PREPROCESSOR_TUPLE_ELEM_HPP


16 
	#BOOST_PREPROCESSOR_TUPLE_ELEM_HPP


	)

17 
#ö˛udê
	~<boo°/¥ïro˚ss‹/ˇt.hµ
>

19 
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

20 
	~<boo°/¥ïro˚ss‹/Ácûôõs/ex∑nd.hµ
>

21 
	~<boo°/¥ïro˚ss‹/Ácûôõs/ovîlﬂd.hµ
>

22 
	~<boo°/¥ïro˚ss‹/tu∂e/ªm.hµ
>

23 
	~<boo°/¥ïro˚ss‹/v¨üdic/ñem.hµ
>

24 
	~<boo°/¥ïro˚ss‹/tu∂e/dëaû/is_sögÀ_ªtu∫.hµ
>

25 #
#i‡
BOOST_PP_VARIADICS


27 #i‡
BOOST_PP_VARIADICS_MSVC


28 
	#BOOST_PP_TUPLE_ELEM
(...Ë
	`BOOST_PP_TUPLE_ELEM_I
(
	`BOOST_PP_OVERLOAD
(
BOOST_PP_TUPLE_ELEM_O_
, 
__VA_ARGS__
), (__VA_ARGS__))

	)

29 
	#BOOST_PP_TUPLE_ELEM_I
(
m
, 
¨gs
Ë
	`BOOST_PP_TUPLE_ELEM_II
(m,árgs)

	)

30 
	#BOOST_PP_TUPLE_ELEM_II
(
m
, 
¨gs
Ë
	`BOOST_PP_CAT
(m ##árgs,)

	)

36 
	#BOOST_PP_TUPLE_ELEM_O_2
(
n
, 
tu∂e
) \

37 
	`BOOST_PP_VARIADIC_ELEM
(
n
, 
	`BOOST_PP_EXPAND
(
	`BOOST_PP_TUPLE_IS_SINGLE_RETURN
(
BOOST_PP_REM_CAT
,
BOOST_PP_REM
,
tu∂e
)Åuple)) \

38 

	)

40 
	#BOOST_PP_TUPLE_ELEM
(...Ë
	`BOOST_PP_OVERLOAD
(
BOOST_PP_TUPLE_ELEM_O_
, 
__VA_ARGS__
)(__VA_ARGS__)

	)

41 
	#BOOST_PP_TUPLE_ELEM_O_2
(
n
, 
tu∂e
Ë
	`BOOST_PP_VARIADIC_ELEM
“, 
BOOST_PP_REM
Åu∂e)

	)

43 
	#BOOST_PP_TUPLE_ELEM_O_3
(
size
, 
n
, 
tu∂e
Ë
	`BOOST_PP_TUPLE_ELEM_O_2
“,Åu∂e)

	)

45 #i‡
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MSVC
()

46 
	#BOOST_PP_TUPLE_ELEM
(
size
, 
n
, 
tu∂e
Ë
	`BOOST_PP_TUPLE_ELEM_I
(
	`BOOST_PP_CAT
(
BOOST_PP_TUPLE_ELEM_
,Ç), BOOST_PP_CAT(BOOST_PP_CAT(
BOOST_PP_TUPLE_ELEM_E_
, size),Åu∂e))

	)

47 
	#BOOST_PP_TUPLE_ELEM_I
(
m
, 
¨gs
Ë
	`BOOST_PP_TUPLE_ELEM_II
(m,árgs)

	)

48 
	#BOOST_PP_TUPLE_ELEM_II
(
m
, 
¨gs
Ë
	`BOOST_PP_CAT
(m ##árgs,)

	)

49 #ñi‡
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MWCC
()

50 
	#BOOST_PP_TUPLE_ELEM
(
size
, 
n
, 
tu∂e
Ë
	`BOOST_PP_TUPLE_ELEM_I_OO
((size,Ç,Åu∂e))

	)

51 
	#BOOST_PP_TUPLE_ELEM_I_OO
(
∑r
Ë
BOOST_PP_TUPLE_ELEM_I
 ## 
	)
par

52 
	#BOOST_PP_TUPLE_ELEM_I
(
size
, 
n
, 
tu∂e
Ë
	`BOOST_PP_TUPLE_ELEM_II
(“, 
BOOST_PP_TUPLE_ELEM_E_
 ## sizê##Åu∂e))

	)

53 
	#BOOST_PP_TUPLE_ELEM_II
(
∑r
Ë
	`BOOST_PP_TUPLE_ELEM_III_OO
’¨)

	)

54 
	#BOOST_PP_TUPLE_ELEM_III_OO
(
∑r
Ë
BOOST_PP_TUPLE_ELEM_III
 ## 
	)
par

55 
	#BOOST_PP_TUPLE_ELEM_III
(
n
, 
ëu∂e
Ë
BOOST_PP_TUPLE_ELEM_
 ##Ç ## 
	)
etuple

57 
	#BOOST_PP_TUPLE_ELEM
(
size
, 
n
, 
tu∂e
Ë
	`BOOST_PP_TUPLE_ELEM_I
(
	`BOOST_PP_CAT
(
BOOST_PP_TUPLE_ELEM_
,ÇËBOOST_PP_CAT(
BOOST_PP_TUPLE_ELEM_E_
, sizeËtu∂e)

	)

58 
	#BOOST_PP_TUPLE_ELEM_I
(
x
Ë
	)
x

60 
	#BOOST_PP_TUPLE_ELEM_E_1
(
e0
Ë”0, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

61 
	#BOOST_PP_TUPLE_ELEM_E_2
(
e0
, 
e1
Ë”0,É1, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

62 
	#BOOST_PP_TUPLE_ELEM_E_3
(
e0
, 
e1
, 
e2
Ë”0,É1,É2, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

63 
	#BOOST_PP_TUPLE_ELEM_E_4
(
e0
, 
e1
, 
e2
, 
e3
Ë”0,É1,É2,É3, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

64 
	#BOOST_PP_TUPLE_ELEM_E_5
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
Ë”0,É1,É2,É3,É4, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

65 
	#BOOST_PP_TUPLE_ELEM_E_6
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
Ë”0,É1,É2,É3,É4,É5, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

66 
	#BOOST_PP_TUPLE_ELEM_E_7
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
Ë”0,É1,É2,É3,É4,É5,É6, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

67 
	#BOOST_PP_TUPLE_ELEM_E_8
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
Ë”0,É1,É2,É3,É4,É5,É6,É7, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

68 
	#BOOST_PP_TUPLE_ELEM_E_9
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

69 
	#BOOST_PP_TUPLE_ELEM_E_10
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

70 
	#BOOST_PP_TUPLE_ELEM_E_11
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

71 
	#BOOST_PP_TUPLE_ELEM_E_12
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

72 
	#BOOST_PP_TUPLE_ELEM_E_13
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

73 
	#BOOST_PP_TUPLE_ELEM_E_14
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

74 
	#BOOST_PP_TUPLE_ELEM_E_15
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

75 
	#BOOST_PP_TUPLE_ELEM_E_16
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

76 
	#BOOST_PP_TUPLE_ELEM_E_17
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

77 
	#BOOST_PP_TUPLE_ELEM_E_18
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

78 
	#BOOST_PP_TUPLE_ELEM_E_19
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

79 
	#BOOST_PP_TUPLE_ELEM_E_20
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

80 
	#BOOST_PP_TUPLE_ELEM_E_21
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

81 
	#BOOST_PP_TUPLE_ELEM_E_22
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

82 
	#BOOST_PP_TUPLE_ELEM_E_23
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

83 
	#BOOST_PP_TUPLE_ELEM_E_24
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

84 
	#BOOST_PP_TUPLE_ELEM_E_25
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

85 
	#BOOST_PP_TUPLE_ELEM_E_26
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

86 
	#BOOST_PP_TUPLE_ELEM_E_27
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

87 
	#BOOST_PP_TUPLE_ELEM_E_28
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

88 
	#BOOST_PP_TUPLE_ELEM_E_29
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

89 
	#BOOST_PP_TUPLE_ELEM_E_30
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

90 
	#BOOST_PP_TUPLE_ELEM_E_31
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

91 
	#BOOST_PP_TUPLE_ELEM_E_32
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

92 
	#BOOST_PP_TUPLE_ELEM_E_33
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

93 
	#BOOST_PP_TUPLE_ELEM_E_34
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

94 
	#BOOST_PP_TUPLE_ELEM_E_35
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

95 
	#BOOST_PP_TUPLE_ELEM_E_36
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

96 
	#BOOST_PP_TUPLE_ELEM_E_37
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

97 
	#BOOST_PP_TUPLE_ELEM_E_38
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

98 
	#BOOST_PP_TUPLE_ELEM_E_39
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

99 
	#BOOST_PP_TUPLE_ELEM_E_40
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

100 
	#BOOST_PP_TUPLE_ELEM_E_41
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

101 
	#BOOST_PP_TUPLE_ELEM_E_42
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

102 
	#BOOST_PP_TUPLE_ELEM_E_43
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

103 
	#BOOST_PP_TUPLE_ELEM_E_44
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

104 
	#BOOST_PP_TUPLE_ELEM_E_45
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

105 
	#BOOST_PP_TUPLE_ELEM_E_46
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

106 
	#BOOST_PP_TUPLE_ELEM_E_47
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

107 
	#BOOST_PP_TUPLE_ELEM_E_48
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

108 
	#BOOST_PP_TUPLE_ELEM_E_49
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

109 
	#BOOST_PP_TUPLE_ELEM_E_50
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

110 
	#BOOST_PP_TUPLE_ELEM_E_51
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

111 
	#BOOST_PP_TUPLE_ELEM_E_52
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50,É51, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

112 
	#BOOST_PP_TUPLE_ELEM_E_53
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50,É51,É52, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

113 
	#BOOST_PP_TUPLE_ELEM_E_54
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50,É51,É52,É53, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

114 
	#BOOST_PP_TUPLE_ELEM_E_55
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50,É51,É52,É53,É54, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	)

115 
	#BOOST_PP_TUPLE_ELEM_E_56
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50,É51,É52,É53,É54,É55, ?, ?, ?, ?, ?, ?, ?, ?)

	)

116 
	#BOOST_PP_TUPLE_ELEM_E_57
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50,É51,É52,É53,É54,É55,É56, ?, ?, ?, ?, ?, ?, ?)

	)

117 
	#BOOST_PP_TUPLE_ELEM_E_58
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50,É51,É52,É53,É54,É55,É56,É57, ?, ?, ?, ?, ?, ?)

	)

118 
	#BOOST_PP_TUPLE_ELEM_E_59
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50,É51,É52,É53,É54,É55,É56,É57,É58, ?, ?, ?, ?, ?)

	)

119 
	#BOOST_PP_TUPLE_ELEM_E_60
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50,É51,É52,É53,É54,É55,É56,É57,É58,É59, ?, ?, ?, ?)

	)

120 
	#BOOST_PP_TUPLE_ELEM_E_61
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50,É51,É52,É53,É54,É55,É56,É57,É58,É59,É60, ?, ?, ?)

	)

121 
	#BOOST_PP_TUPLE_ELEM_E_62
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50,É51,É52,É53,É54,É55,É56,É57,É58,É59,É60,É61, ?, ?)

	)

122 
	#BOOST_PP_TUPLE_ELEM_E_63
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
Ë”0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50,É51,É52,É53,É54,É55,É56,É57,É58,É59,É60,É61,É62, ?)

	)

123 
	#BOOST_PP_TUPLE_ELEM_E_64


	)

124 
	#BOOST_PP_TUPLE_ELEM_0
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e0

125 
	#BOOST_PP_TUPLE_ELEM_1
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e1

126 
	#BOOST_PP_TUPLE_ELEM_2
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e2

127 
	#BOOST_PP_TUPLE_ELEM_3
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e3

128 
	#BOOST_PP_TUPLE_ELEM_4
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e4

129 
	#BOOST_PP_TUPLE_ELEM_5
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e5

130 
	#BOOST_PP_TUPLE_ELEM_6
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e6

131 
	#BOOST_PP_TUPLE_ELEM_7
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e7

132 
	#BOOST_PP_TUPLE_ELEM_8
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e8

133 
	#BOOST_PP_TUPLE_ELEM_9
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e9

134 
	#BOOST_PP_TUPLE_ELEM_10
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e10

135 
	#BOOST_PP_TUPLE_ELEM_11
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e11

136 
	#BOOST_PP_TUPLE_ELEM_12
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e12

137 
	#BOOST_PP_TUPLE_ELEM_13
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e13

138 
	#BOOST_PP_TUPLE_ELEM_14
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e14

139 
	#BOOST_PP_TUPLE_ELEM_15
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e15

140 
	#BOOST_PP_TUPLE_ELEM_16
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e16

141 
	#BOOST_PP_TUPLE_ELEM_17
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e17

142 
	#BOOST_PP_TUPLE_ELEM_18
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e18

143 
	#BOOST_PP_TUPLE_ELEM_19
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e19

144 
	#BOOST_PP_TUPLE_ELEM_20
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e20

145 
	#BOOST_PP_TUPLE_ELEM_21
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e21

146 
	#BOOST_PP_TUPLE_ELEM_22
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e22

147 
	#BOOST_PP_TUPLE_ELEM_23
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e23

148 
	#BOOST_PP_TUPLE_ELEM_24
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e24

149 
	#BOOST_PP_TUPLE_ELEM_25
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e25

150 
	#BOOST_PP_TUPLE_ELEM_26
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e26

151 
	#BOOST_PP_TUPLE_ELEM_27
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e27

152 
	#BOOST_PP_TUPLE_ELEM_28
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e28

153 
	#BOOST_PP_TUPLE_ELEM_29
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e29

154 
	#BOOST_PP_TUPLE_ELEM_30
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e30

155 
	#BOOST_PP_TUPLE_ELEM_31
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e31

156 
	#BOOST_PP_TUPLE_ELEM_32
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e32

157 
	#BOOST_PP_TUPLE_ELEM_33
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e33

158 
	#BOOST_PP_TUPLE_ELEM_34
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e34

159 
	#BOOST_PP_TUPLE_ELEM_35
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e35

160 
	#BOOST_PP_TUPLE_ELEM_36
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e36

161 
	#BOOST_PP_TUPLE_ELEM_37
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e37

162 
	#BOOST_PP_TUPLE_ELEM_38
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e38

163 
	#BOOST_PP_TUPLE_ELEM_39
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e39

164 
	#BOOST_PP_TUPLE_ELEM_40
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e40

165 
	#BOOST_PP_TUPLE_ELEM_41
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e41

166 
	#BOOST_PP_TUPLE_ELEM_42
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e42

167 
	#BOOST_PP_TUPLE_ELEM_43
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e43

168 
	#BOOST_PP_TUPLE_ELEM_44
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e44

169 
	#BOOST_PP_TUPLE_ELEM_45
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e45

170 
	#BOOST_PP_TUPLE_ELEM_46
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e46

171 
	#BOOST_PP_TUPLE_ELEM_47
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e47

172 
	#BOOST_PP_TUPLE_ELEM_48
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e48

173 
	#BOOST_PP_TUPLE_ELEM_49
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e49

174 
	#BOOST_PP_TUPLE_ELEM_50
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e50

175 
	#BOOST_PP_TUPLE_ELEM_51
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e51

176 
	#BOOST_PP_TUPLE_ELEM_52
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e52

177 
	#BOOST_PP_TUPLE_ELEM_53
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e53

178 
	#BOOST_PP_TUPLE_ELEM_54
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e54

179 
	#BOOST_PP_TUPLE_ELEM_55
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e55

180 
	#BOOST_PP_TUPLE_ELEM_56
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e56

181 
	#BOOST_PP_TUPLE_ELEM_57
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e57

182 
	#BOOST_PP_TUPLE_ELEM_58
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e58

183 
	#BOOST_PP_TUPLE_ELEM_59
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e59

184 
	#BOOST_PP_TUPLE_ELEM_60
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e60

185 
	#BOOST_PP_TUPLE_ELEM_61
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e61

186 
	#BOOST_PP_TUPLE_ELEM_62
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e62

187 
	#BOOST_PP_TUPLE_ELEM_63
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ë
	)
e63

189 #
#/* 
dúe˘ly
 
u£d
 
ñ£whîe
 
ö
 
Boo°
... */

191 
#deföê
	#BOOST_PP_TUPLE_ELEM_1_0
(
a
Ë
	)
a

193 
#deföê
	#BOOST_PP_TUPLE_ELEM_2_0
(
a
, 
b
Ë
	)
a

195 
	#BOOST_PP_TUPLE_ELEM_2_1
(
a
, 
b
Ë
	)
b

196 
#deföê
	#BOOST_PP_TUPLE_ELEM_3_0
(
a
, 
b
, 
c
Ë
	)
a

198 
	#BOOST_PP_TUPLE_ELEM_3_1
(
a
, 
b
, 
c
Ë
	)
b

199 
	#BOOST_PP_TUPLE_ELEM_3_2
(
a
, 
b
, 
c
Ë
	)
c

	@/usr/include/boost/preprocessor/tuple/rem.hpp

3 #* (
C
Ë
C›yright
 
Paul
 
Mís⁄ides
 2002-2011. *

4 #* (
C
Ë
C›yright
 
Edw¨d
 
Dõ√r
 2011,2013. *

5 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì
 *

6 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©
 *

7 #* 
hâp
:

10 #
#/* 
Sì
 
hâp
:

12 #
#i‚de‡
BOOST_PREPROCESSOR_TUPLE_REM_HPP


14 
	#BOOST_PREPROCESSOR_TUPLE_REM_HPP


	)

15 
#ö˛udê
	~<boo°/¥ïro˚ss‹/ˇt.hµ
>

17 
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

18 
	~<boo°/¥ïro˚ss‹/Ácûôõs/ex∑nd.hµ
>

19 
	~<boo°/¥ïro˚ss‹/Ácûôõs/ovîlﬂd.hµ
>

20 
	~<boo°/¥ïro˚ss‹/tu∂e/dëaû/is_sögÀ_ªtu∫.hµ
>

21 #
#/* 
BOOST_PP_REM
 */

23 #
#i‡
BOOST_PP_VARIADICS


25 #i‡
BOOST_PP_VARIADICS_MSVC


27 
	#BOOST_PP_REM_CAT
(...Ë
	`BOOST_PP_CAT
(
__VA_ARGS__
,)

	)

29 
	#BOOST_PP_REM
(...Ë
__VA_ARGS__


	)

31 
	#BOOST_PP_REM
(
x
Ë
	)
x

33 #
#/* 
BOOST_PP_TUPLE_REM
 */

39 #i‡
BOOST_PP_VARIADICS
 && !(
BOOST_PP_VARIADICS_MSVC
 && 
_MSC_VER
 <= 1400)

40 #i‡
BOOST_PP_VARIADICS_MSVC


42 
	#BOOST_PP_TUPLE_REM_CAT
(
size
Ë
BOOST_PP_REM_CAT


	)

44 
	#BOOST_PP_TUPLE_REM
(
size
Ë
BOOST_PP_REM


	)

46 #i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MWCC
()

47 
	#BOOST_PP_TUPLE_REM
(
size
Ë
	`BOOST_PP_TUPLE_REM_I
(size)

	)

49 
	#BOOST_PP_TUPLE_REM
(
size
Ë
	`BOOST_PP_TUPLE_REM_OO
((size))

	)

50 
	#BOOST_PP_TUPLE_REM_OO
(
∑r
Ë
BOOST_PP_TUPLE_REM_I
 ## 
	)
par

52 
	#BOOST_PP_TUPLE_REM_I
(
size
Ë
BOOST_PP_TUPLE_REM_
 ## 
	)
size

54 
	#BOOST_PP_TUPLE_REM_0
()

	)

55 
	#BOOST_PP_TUPLE_REM_1
(
e0
Ë
	)
e0

56 
	#BOOST_PP_TUPLE_REM_2
(
e0
, 
e1
Ëe0, 
	)
e1

57 
	#BOOST_PP_TUPLE_REM_3
(
e0
, 
e1
, 
e2
Ëe0,É1, 
	)
e2

58 
	#BOOST_PP_TUPLE_REM_4
(
e0
, 
e1
, 
e2
, 
e3
Ëe0,É1,É2, 
	)
e3

59 
	#BOOST_PP_TUPLE_REM_5
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
Ëe0,É1,É2,É3, 
	)
e4

60 
	#BOOST_PP_TUPLE_REM_6
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
Ëe0,É1,É2,É3,É4, 
	)
e5

61 
	#BOOST_PP_TUPLE_REM_7
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
Ëe0,É1,É2,É3,É4,É5, 
	)
e6

62 
	#BOOST_PP_TUPLE_REM_8
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
Ëe0,É1,É2,É3,É4,É5,É6, 
	)
e7

63 
	#BOOST_PP_TUPLE_REM_9
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
Ëe0,É1,É2,É3,É4,É5,É6,É7, 
	)
e8

64 
	#BOOST_PP_TUPLE_REM_10
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8, 
	)
e9

65 
	#BOOST_PP_TUPLE_REM_11
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9, 
	)
e10

66 
	#BOOST_PP_TUPLE_REM_12
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10, 
	)
e11

67 
	#BOOST_PP_TUPLE_REM_13
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11, 
	)
e12

68 
	#BOOST_PP_TUPLE_REM_14
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12, 
	)
e13

69 
	#BOOST_PP_TUPLE_REM_15
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13, 
	)
e14

70 
	#BOOST_PP_TUPLE_REM_16
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14, 
	)
e15

71 
	#BOOST_PP_TUPLE_REM_17
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15, 
	)
e16

72 
	#BOOST_PP_TUPLE_REM_18
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16, 
	)
e17

73 
	#BOOST_PP_TUPLE_REM_19
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17, 
	)
e18

74 
	#BOOST_PP_TUPLE_REM_20
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18, 
	)
e19

75 
	#BOOST_PP_TUPLE_REM_21
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19, 
	)
e20

76 
	#BOOST_PP_TUPLE_REM_22
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20, 
	)
e21

77 
	#BOOST_PP_TUPLE_REM_23
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21, 
	)
e22

78 
	#BOOST_PP_TUPLE_REM_24
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22, 
	)
e23

79 
	#BOOST_PP_TUPLE_REM_25
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23, 
	)
e24

80 
	#BOOST_PP_TUPLE_REM_26
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24, 
	)
e25

81 
	#BOOST_PP_TUPLE_REM_27
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25, 
	)
e26

82 
	#BOOST_PP_TUPLE_REM_28
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26, 
	)
e27

83 
	#BOOST_PP_TUPLE_REM_29
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27, 
	)
e28

84 
	#BOOST_PP_TUPLE_REM_30
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28, 
	)
e29

85 
	#BOOST_PP_TUPLE_REM_31
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29, 
	)
e30

86 
	#BOOST_PP_TUPLE_REM_32
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30, 
	)
e31

87 
	#BOOST_PP_TUPLE_REM_33
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31, 
	)
e32

88 
	#BOOST_PP_TUPLE_REM_34
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32, 
	)
e33

89 
	#BOOST_PP_TUPLE_REM_35
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33, 
	)
e34

90 
	#BOOST_PP_TUPLE_REM_36
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34, 
	)
e35

91 
	#BOOST_PP_TUPLE_REM_37
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35, 
	)
e36

92 
	#BOOST_PP_TUPLE_REM_38
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36, 
	)
e37

93 
	#BOOST_PP_TUPLE_REM_39
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37, 
	)
e38

94 
	#BOOST_PP_TUPLE_REM_40
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38, 
	)
e39

95 
	#BOOST_PP_TUPLE_REM_41
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39, 
	)
e40

96 
	#BOOST_PP_TUPLE_REM_42
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40, 
	)
e41

97 
	#BOOST_PP_TUPLE_REM_43
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41, 
	)
e42

98 
	#BOOST_PP_TUPLE_REM_44
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42, 
	)
e43

99 
	#BOOST_PP_TUPLE_REM_45
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43, 
	)
e44

100 
	#BOOST_PP_TUPLE_REM_46
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44, 
	)
e45

101 
	#BOOST_PP_TUPLE_REM_47
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45, 
	)
e46

102 
	#BOOST_PP_TUPLE_REM_48
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46, 
	)
e47

103 
	#BOOST_PP_TUPLE_REM_49
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47, 
	)
e48

104 
	#BOOST_PP_TUPLE_REM_50
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48, 
	)
e49

105 
	#BOOST_PP_TUPLE_REM_51
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49, 
	)
e50

106 
	#BOOST_PP_TUPLE_REM_52
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50, 
	)
e51

107 
	#BOOST_PP_TUPLE_REM_53
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50,É51, 
	)
e52

108 
	#BOOST_PP_TUPLE_REM_54
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50,É51,É52, 
	)
e53

109 
	#BOOST_PP_TUPLE_REM_55
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50,É51,É52,É53, 
	)
e54

110 
	#BOOST_PP_TUPLE_REM_56
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50,É51,É52,É53,É54, 
	)
e55

111 
	#BOOST_PP_TUPLE_REM_57
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50,É51,É52,É53,É54,É55, 
	)
e56

112 
	#BOOST_PP_TUPLE_REM_58
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50,É51,É52,É53,É54,É55,É56, 
	)
e57

113 
	#BOOST_PP_TUPLE_REM_59
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50,É51,É52,É53,É54,É55,É56,É57, 
	)
e58

114 
	#BOOST_PP_TUPLE_REM_60
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50,É51,É52,É53,É54,É55,É56,É57,É58, 
	)
e59

115 
	#BOOST_PP_TUPLE_REM_61
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50,É51,É52,É53,É54,É55,É56,É57,É58,É59, 
	)
e60

116 
	#BOOST_PP_TUPLE_REM_62
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50,É51,É52,É53,É54,É55,É56,É57,É58,É59,É60, 
	)
e61

117 
	#BOOST_PP_TUPLE_REM_63
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50,É51,É52,É53,É54,É55,É56,É57,É58,É59,É60,É61, 
	)
e62

118 
	#BOOST_PP_TUPLE_REM_64
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
Ëe0,É1,É2,É3,É4,É5,É6,É7,É8,É9,É10,É11,É12,É13,É14,É15,É16,É17,É18,É19,É20,É21,É22,É23,É24,É25,É26,É27,É28,É29,É30,É31,É32,É33,É34,É35,É36,É37,É38,É39,É40,É41,É42,É43,É44,É45,É46,É47,É48,É49,É50,É51,É52,É53,É54,É55,É56,É57,É58,É59,É60,É61,É62, 
	)
e63

119 #
#/* 
BOOST_PP_TUPLE_REM_CTOR
 */

121 #
#i‡
BOOST_PP_VARIADICS


123 #i‡
BOOST_PP_VARIADICS_MSVC


124 
	#BOOST_PP_TUPLE_REM_CTOR
(...Ë
	`BOOST_PP_TUPLE_REM_CTOR_I
(
	`BOOST_PP_OVERLOAD
(
BOOST_PP_TUPLE_REM_CTOR_O_
, 
__VA_ARGS__
), (__VA_ARGS__))

	)

125 
	#BOOST_PP_TUPLE_REM_CTOR_I
(
m
, 
¨gs
Ë
	`BOOST_PP_TUPLE_REM_CTOR_II
(m,árgs)

	)

126 
	#BOOST_PP_TUPLE_REM_CTOR_II
(
m
, 
¨gs
Ë
	`BOOST_PP_CAT
(m ##árgs,)

	)

127 
	#BOOST_PP_TUPLE_REM_CTOR_O_1
(
tu∂e
Ë
	`BOOST_PP_EXPAND
(
	`BOOST_PP_TUPLE_IS_SINGLE_RETURN
(
BOOST_PP_REM_CAT
,
BOOST_PP_REM
,tu∂eËtu∂e)

	)

129 
	#BOOST_PP_TUPLE_REM_CTOR
(...Ë
	`BOOST_PP_OVERLOAD
(
BOOST_PP_TUPLE_REM_CTOR_O_
, 
__VA_ARGS__
)(__VA_ARGS__)

	)

130 
	#BOOST_PP_TUPLE_REM_CTOR_O_1
(
tu∂e
Ë
BOOST_PP_REM
 
	)
tuple

132 
	#BOOST_PP_TUPLE_REM_CTOR_O_2
(
size
, 
tu∂e
Ë
	`BOOST_PP_TUPLE_REM_CTOR_O_1
—u∂e)

	)

134 #i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_EDG
()

135 
	#BOOST_PP_TUPLE_REM_CTOR
(
size
, 
tu∂e
Ë
	`BOOST_PP_TUPLE_REM_CTOR_I
(
	`BOOST_PP_TUPLE_REM
(size),Åu∂e)

	)

137 
	#BOOST_PP_TUPLE_REM_CTOR
(
size
, 
tu∂e
Ë
	`BOOST_PP_TUPLE_REM_CTOR_D
(size,Åu∂e)

	)

138 
	#BOOST_PP_TUPLE_REM_CTOR_D
(
size
, 
tu∂e
Ë
	`BOOST_PP_TUPLE_REM_CTOR_I
(
	`BOOST_PP_TUPLE_REM
(size),Åu∂e)

	)

140 #i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MWCC
()

141 
	#BOOST_PP_TUPLE_REM_CTOR_I
(
ext
, 
tu∂e
Ëexà
	)
tuple

143 
	#BOOST_PP_TUPLE_REM_CTOR_I
(
ext
, 
tu∂e
Ë
	`BOOST_PP_TUPLE_REM_CTOR_OO
(”xt,Åu∂e))

	)

144 
	#BOOST_PP_TUPLE_REM_CTOR_OO
(
∑r
Ë
BOOST_PP_TUPLE_REM_CTOR_II
 ## 
	)
par

145 
	#BOOST_PP_TUPLE_REM_CTOR_II
(
ext
, 
tu∂e
Ëexà## 
	)
tuple

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 \

231 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

232 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

233 
	#_POSIX_SOURCE
 1

	)

234 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

235 
	#_POSIX_C_SOURCE
 2

	)

236 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

237 
	#_POSIX_C_SOURCE
 199506L

	)

238 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

239 
	#_POSIX_C_SOURCE
 200112L

	)

241 
	#_POSIX_C_SOURCE
 200809L

	)

243 
	#__USE_POSIX_IMPLICITLY
 1

	)

246 #i‡(
deföed
 
_POSIX_SOURCE
 \

247 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

248 || 
deföed
 
_XOPEN_SOURCE
)

249 
	#__USE_POSIX
 1

	)

252 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


253 
	#__USE_POSIX2
 1

	)

256 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

257 
	#__USE_POSIX199309
 1

	)

260 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

261 
	#__USE_POSIX199506
 1

	)

264 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

265 
	#__USE_XOPEN2K
 1

	)

266 #unde‡
__USE_ISOC95


267 
	#__USE_ISOC95
 1

	)

268 #unde‡
__USE_ISOC99


269 
	#__USE_ISOC99
 1

	)

272 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

273 
	#__USE_XOPEN2K8
 1

	)

274 #unde‡
_ATFILE_SOURCE


275 
	#_ATFILE_SOURCE
 1

	)

278 #ifdef 
_XOPEN_SOURCE


279 
	#__USE_XOPEN
 1

	)

280 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

281 
	#__USE_XOPEN_EXTENDED
 1

	)

282 
	#__USE_UNIX98
 1

	)

283 #unde‡
_LARGEFILE_SOURCE


284 
	#_LARGEFILE_SOURCE
 1

	)

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

286 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

287 
	#__USE_XOPEN2K8
 1

	)

288 
	#__USE_XOPEN2K8XSI
 1

	)

290 
	#__USE_XOPEN2K
 1

	)

291 
	#__USE_XOPEN2KXSI
 1

	)

292 #unde‡
__USE_ISOC95


293 
	#__USE_ISOC95
 1

	)

294 #unde‡
__USE_ISOC99


295 
	#__USE_ISOC99
 1

	)

298 #ifde‡
_XOPEN_SOURCE_EXTENDED


299 
	#__USE_XOPEN_EXTENDED
 1

	)

304 #ifde‡
_LARGEFILE_SOURCE


305 
	#__USE_LARGEFILE
 1

	)

308 #ifde‡
_LARGEFILE64_SOURCE


309 
	#__USE_LARGEFILE64
 1

	)

312 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

313 
	#__USE_FILE_OFFSET64
 1

	)

316 #i‡
deföed
 
_DEFAULT_SOURCE


317 
	#__USE_MISC
 1

	)

320 #ifdef 
_ATFILE_SOURCE


321 
	#__USE_ATFILE
 1

	)

324 #ifdef 
_GNU_SOURCE


325 
	#__USE_GNU
 1

	)

328 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


329 
	#__USE_REENTRANT
 1

	)

332 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

333 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

334 #i‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 23

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‚de‡
__ASSEMBLER__


366 #i‚de‡
_SYS_CDEFS_H


367 
	~<sys/cdefs.h
>

372 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


373 
	#__USE_LARGEFILE
 1

	)

374 
	#__USE_LARGEFILE64
 1

	)

380 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

381 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

382 && 
deföed
 
	g__exã∫_ölöe


383 
	#__USE_EXTERN_INLINES
 1

	)

391 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/linux/hw_breakpoint.h

1 #i‚de‡
_LINUX_HW_BREAKPOINT_H


2 
	#_LINUX_HW_BREAKPOINT_H


	)

5 
	mHW_BREAKPOINT_LEN_1
 = 1,

6 
	mHW_BREAKPOINT_LEN_2
 = 2,

7 
	mHW_BREAKPOINT_LEN_4
 = 4,

8 
	mHW_BREAKPOINT_LEN_8
 = 8,

12 
	mHW_BREAKPOINT_EMPTY
 = 0,

13 
	mHW_BREAKPOINT_R
 = 1,

14 
	mHW_BREAKPOINT_W
 = 2,

15 
	mHW_BREAKPOINT_RW
 = 
HW_BREAKPOINT_R
 | 
HW_BREAKPOINT_W
,

16 
	mHW_BREAKPOINT_X
 = 4,

17 
	mHW_BREAKPOINT_INVALID
 = 
HW_BREAKPOINT_RW
 | 
HW_BREAKPOINT_X
,

20 
	ebp_ty≥_idx
 {

21 
	mTYPE_INST
 = 0,

22 #ifde‡
CONFIG_HAVE_MIXED_BREAKPOINTS_REGS


23 
	mTYPE_DATA
 = 0,

25 
	mTYPE_DATA
 = 1,

27 
	mTYPE_MAX


	@/usr/include/linux/perf_event.h

14 #i‚de‡
_LINUX_PERF_EVENT_H


15 
	#_LINUX_PERF_EVENT_H


	)

17 
	~<löux/ty≥s.h
>

18 
	~<löux/io˘l.h
>

19 
	~<asm/byã‹dî.h
>

28 
	e≥rf_ty≥_id
 {

29 
	mPERF_TYPE_HARDWARE
 = 0,

30 
	mPERF_TYPE_SOFTWARE
 = 1,

31 
	mPERF_TYPE_TRACEPOINT
 = 2,

32 
	mPERF_TYPE_HW_CACHE
 = 3,

33 
	mPERF_TYPE_RAW
 = 4,

34 
	mPERF_TYPE_BREAKPOINT
 = 5,

36 
	mPERF_TYPE_MAX
,

44 
	e≥rf_hw_id
 {

48 
	mPERF_COUNT_HW_CPU_CYCLES
 = 0,

49 
	mPERF_COUNT_HW_INSTRUCTIONS
 = 1,

50 
	mPERF_COUNT_HW_CACHE_REFERENCES
 = 2,

51 
	mPERF_COUNT_HW_CACHE_MISSES
 = 3,

52 
	mPERF_COUNT_HW_BRANCH_INSTRUCTIONS
 = 4,

53 
	mPERF_COUNT_HW_BRANCH_MISSES
 = 5,

54 
	mPERF_COUNT_HW_BUS_CYCLES
 = 6,

55 
	mPERF_COUNT_HW_STALLED_CYCLES_FRONTEND
 = 7,

56 
	mPERF_COUNT_HW_STALLED_CYCLES_BACKEND
 = 8,

57 
	mPERF_COUNT_HW_REF_CPU_CYCLES
 = 9,

59 
	mPERF_COUNT_HW_MAX
,

69 
	e≥rf_hw_ˇche_id
 {

70 
	mPERF_COUNT_HW_CACHE_L1D
 = 0,

71 
	mPERF_COUNT_HW_CACHE_L1I
 = 1,

72 
	mPERF_COUNT_HW_CACHE_LL
 = 2,

73 
	mPERF_COUNT_HW_CACHE_DTLB
 = 3,

74 
	mPERF_COUNT_HW_CACHE_ITLB
 = 4,

75 
	mPERF_COUNT_HW_CACHE_BPU
 = 5,

76 
	mPERF_COUNT_HW_CACHE_NODE
 = 6,

78 
	mPERF_COUNT_HW_CACHE_MAX
,

81 
	e≥rf_hw_ˇche_›_id
 {

82 
	mPERF_COUNT_HW_CACHE_OP_READ
 = 0,

83 
	mPERF_COUNT_HW_CACHE_OP_WRITE
 = 1,

84 
	mPERF_COUNT_HW_CACHE_OP_PREFETCH
 = 2,

86 
	mPERF_COUNT_HW_CACHE_OP_MAX
,

89 
	e≥rf_hw_ˇche_›_ªsu…_id
 {

90 
	mPERF_COUNT_HW_CACHE_RESULT_ACCESS
 = 0,

91 
	mPERF_COUNT_HW_CACHE_RESULT_MISS
 = 1,

93 
	mPERF_COUNT_HW_CACHE_RESULT_MAX
,

102 
	e≥rf_sw_ids
 {

103 
	mPERF_COUNT_SW_CPU_CLOCK
 = 0,

104 
	mPERF_COUNT_SW_TASK_CLOCK
 = 1,

105 
	mPERF_COUNT_SW_PAGE_FAULTS
 = 2,

106 
	mPERF_COUNT_SW_CONTEXT_SWITCHES
 = 3,

107 
	mPERF_COUNT_SW_CPU_MIGRATIONS
 = 4,

108 
	mPERF_COUNT_SW_PAGE_FAULTS_MIN
 = 5,

109 
	mPERF_COUNT_SW_PAGE_FAULTS_MAJ
 = 6,

110 
	mPERF_COUNT_SW_ALIGNMENT_FAULTS
 = 7,

111 
	mPERF_COUNT_SW_EMULATION_FAULTS
 = 8,

112 
	mPERF_COUNT_SW_DUMMY
 = 9,

113 
	mPERF_COUNT_SW_BPF_OUTPUT
 = 10,

115 
	mPERF_COUNT_SW_MAX
,

122 
	e≥rf_evít_ßm∂e_f‹m©
 {

123 
	mPERF_SAMPLE_IP
 = 1U << 0,

124 
	mPERF_SAMPLE_TID
 = 1U << 1,

125 
	mPERF_SAMPLE_TIME
 = 1U << 2,

126 
	mPERF_SAMPLE_ADDR
 = 1U << 3,

127 
	mPERF_SAMPLE_READ
 = 1U << 4,

128 
	mPERF_SAMPLE_CALLCHAIN
 = 1U << 5,

129 
	mPERF_SAMPLE_ID
 = 1U << 6,

130 
	mPERF_SAMPLE_CPU
 = 1U << 7,

131 
	mPERF_SAMPLE_PERIOD
 = 1U << 8,

132 
	mPERF_SAMPLE_STREAM_ID
 = 1U << 9,

133 
	mPERF_SAMPLE_RAW
 = 1U << 10,

134 
	mPERF_SAMPLE_BRANCH_STACK
 = 1U << 11,

135 
	mPERF_SAMPLE_REGS_USER
 = 1U << 12,

136 
	mPERF_SAMPLE_STACK_USER
 = 1U << 13,

137 
	mPERF_SAMPLE_WEIGHT
 = 1U << 14,

138 
	mPERF_SAMPLE_DATA_SRC
 = 1U << 15,

139 
	mPERF_SAMPLE_IDENTIFIER
 = 1U << 16,

140 
	mPERF_SAMPLE_TRANSACTION
 = 1U << 17,

141 
	mPERF_SAMPLE_REGS_INTR
 = 1U << 18,

143 
	mPERF_SAMPLE_MAX
 = 1U << 19,

156 
	e≥rf_bønch_ßm∂e_ty≥_shi·
 {

157 
	mPERF_SAMPLE_BRANCH_USER_SHIFT
 = 0,

158 
	mPERF_SAMPLE_BRANCH_KERNEL_SHIFT
 = 1,

159 
	mPERF_SAMPLE_BRANCH_HV_SHIFT
 = 2,

161 
	mPERF_SAMPLE_BRANCH_ANY_SHIFT
 = 3,

162 
	mPERF_SAMPLE_BRANCH_ANY_CALL_SHIFT
 = 4,

163 
	mPERF_SAMPLE_BRANCH_ANY_RETURN_SHIFT
 = 5,

164 
	mPERF_SAMPLE_BRANCH_IND_CALL_SHIFT
 = 6,

165 
	mPERF_SAMPLE_BRANCH_ABORT_TX_SHIFT
 = 7,

166 
	mPERF_SAMPLE_BRANCH_IN_TX_SHIFT
 = 8,

167 
	mPERF_SAMPLE_BRANCH_NO_TX_SHIFT
 = 9,

168 
	mPERF_SAMPLE_BRANCH_COND_SHIFT
 = 10,

170 
	mPERF_SAMPLE_BRANCH_CALL_STACK_SHIFT
 = 11,

171 
	mPERF_SAMPLE_BRANCH_IND_JUMP_SHIFT
 = 12,

172 
	mPERF_SAMPLE_BRANCH_CALL_SHIFT
 = 13,

174 
	mPERF_SAMPLE_BRANCH_MAX_SHIFT


177 
	e≥rf_bønch_ßm∂e_ty≥
 {

178 
	mPERF_SAMPLE_BRANCH_USER
 = 1U << 
PERF_SAMPLE_BRANCH_USER_SHIFT
,

179 
	mPERF_SAMPLE_BRANCH_KERNEL
 = 1U << 
PERF_SAMPLE_BRANCH_KERNEL_SHIFT
,

180 
	mPERF_SAMPLE_BRANCH_HV
 = 1U << 
PERF_SAMPLE_BRANCH_HV_SHIFT
,

182 
	mPERF_SAMPLE_BRANCH_ANY
 = 1U << 
PERF_SAMPLE_BRANCH_ANY_SHIFT
,

183 
	mPERF_SAMPLE_BRANCH_ANY_CALL
 = 1U << 
PERF_SAMPLE_BRANCH_ANY_CALL_SHIFT
,

184 
	mPERF_SAMPLE_BRANCH_ANY_RETURN
 = 1U << 
PERF_SAMPLE_BRANCH_ANY_RETURN_SHIFT
,

185 
	mPERF_SAMPLE_BRANCH_IND_CALL
 = 1U << 
PERF_SAMPLE_BRANCH_IND_CALL_SHIFT
,

186 
	mPERF_SAMPLE_BRANCH_ABORT_TX
 = 1U << 
PERF_SAMPLE_BRANCH_ABORT_TX_SHIFT
,

187 
	mPERF_SAMPLE_BRANCH_IN_TX
 = 1U << 
PERF_SAMPLE_BRANCH_IN_TX_SHIFT
,

188 
	mPERF_SAMPLE_BRANCH_NO_TX
 = 1U << 
PERF_SAMPLE_BRANCH_NO_TX_SHIFT
,

189 
	mPERF_SAMPLE_BRANCH_COND
 = 1U << 
PERF_SAMPLE_BRANCH_COND_SHIFT
,

191 
	mPERF_SAMPLE_BRANCH_CALL_STACK
 = 1U << 
PERF_SAMPLE_BRANCH_CALL_STACK_SHIFT
,

192 
	mPERF_SAMPLE_BRANCH_IND_JUMP
 = 1U << 
PERF_SAMPLE_BRANCH_IND_JUMP_SHIFT
,

193 
	mPERF_SAMPLE_BRANCH_CALL
 = 1U << 
PERF_SAMPLE_BRANCH_CALL_SHIFT
,

195 
	mPERF_SAMPLE_BRANCH_MAX
 = 1U << 
PERF_SAMPLE_BRANCH_MAX_SHIFT
,

198 
	#PERF_SAMPLE_BRANCH_PLM_ALL
 \

199 (
PERF_SAMPLE_BRANCH_USER
|\

200 
PERF_SAMPLE_BRANCH_KERNEL
|\

201 
PERF_SAMPLE_BRANCH_HV
)

	)

206 
	e≥rf_ßm∂e_ªgs_abi
 {

207 
	mPERF_SAMPLE_REGS_ABI_NONE
 = 0,

208 
	mPERF_SAMPLE_REGS_ABI_32
 = 1,

209 
	mPERF_SAMPLE_REGS_ABI_64
 = 2,

217 
	mPERF_TXN_ELISION
 = (1 << 0),

218 
	mPERF_TXN_TRANSACTION
 = (1 << 1),

219 
	mPERF_TXN_SYNC
 = (1 << 2),

220 
	mPERF_TXN_ASYNC
 = (1 << 3),

221 
	mPERF_TXN_RETRY
 = (1 << 4),

222 
	mPERF_TXN_CONFLICT
 = (1 << 5),

223 
	mPERF_TXN_CAPACITY_WRITE
 = (1 << 6),

224 
	mPERF_TXN_CAPACITY_READ
 = (1 << 7),

226 
	mPERF_TXN_MAX
 = (1 << 8),

230 
	mPERF_TXN_ABORT_MASK
 = (0xffffffffULL << 32),

231 
	mPERF_TXN_ABORT_SHIFT
 = 32,

254 
	e≥rf_evít_ªad_f‹m©
 {

255 
	mPERF_FORMAT_TOTAL_TIME_ENABLED
 = 1U << 0,

256 
	mPERF_FORMAT_TOTAL_TIME_RUNNING
 = 1U << 1,

257 
	mPERF_FORMAT_ID
 = 1U << 2,

258 
	mPERF_FORMAT_GROUP
 = 1U << 3,

260 
	mPERF_FORMAT_MAX
 = 1U << 4,

263 
	#PERF_ATTR_SIZE_VER0
 64

	)

264 
	#PERF_ATTR_SIZE_VER1
 72

	)

265 
	#PERF_ATTR_SIZE_VER2
 80

	)

266 
	#PERF_ATTR_SIZE_VER3
 96

	)

268 
	#PERF_ATTR_SIZE_VER4
 104

	)

269 
	#PERF_ATTR_SIZE_VER5
 112

	)

274 
	s≥rf_evít_©å
 {

279 
__u32
 
	mty≥
;

284 
__u32
 
	msize
;

289 
__u64
 
	mc⁄fig
;

292 
__u64
 
	mßm∂e_≥riod
;

293 
__u64
 
	mßm∂e_‰eq
;

296 
__u64
 
	mßm∂e_ty≥
;

297 
__u64
 
	mªad_f‹m©
;

299 
__u64
 
	mdißbÀd
 : 1,

300 
	möhîô
 : 1,

301 
	mpö√d
 : 1,

302 
	mex˛usive
 : 1,

303 
	mex˛ude_u£r
 : 1,

304 
	mex˛ude_kî√l
 : 1,

305 
	mex˛ude_hv
 : 1,

306 
	mex˛ude_idÀ
 : 1,

307 
	mmm≠
 : 1,

308 
	mcomm
 : 1,

309 
	m‰eq
 : 1,

310 
	möhîô_°©
 : 1,

311 
	míabÀ_⁄_exec
 : 1,

312 
	mèsk
 : 1,

313 
	mw©îm¨k
 : 1,

324 
	m¥eci£_ù
 : 2,

325 
	mmm≠_d©a
 : 1,

326 
	mßm∂e_id_Æl
 : 1,

328 
	mex˛ude_ho°
 : 1,

329 
	mex˛ude_gue°
 : 1,

331 
	mex˛ude_ˇŒchaö_kî√l
 : 1,

332 
	mex˛ude_ˇŒchaö_u£r
 : 1,

333 
	mmm≠2
 : 1,

334 
	mcomm_exec
 : 1,

335 
	mu£_˛ockid
 : 1,

336 
	mc⁄ãxt_swôch
 : 1,

337 
	m__ª£rved_1
 : 37;

340 
__u32
 
	mwakeup_evíts
;

341 
__u32
 
	mwakeup_w©îm¨k
;

344 
__u32
 
	mbp_ty≥
;

346 
__u64
 
	mbp_addr
;

347 
__u64
 
	mc⁄fig1
;

350 
__u64
 
	mbp_Àn
;

351 
__u64
 
	mc⁄fig2
;

353 
__u64
 
	mbønch_ßm∂e_ty≥
;

359 
__u64
 
	mßm∂e_ªgs_u£r
;

364 
__u32
 
	mßm∂e_°ack_u£r
;

366 
__s32
 
	m˛ockid
;

375 
__u64
 
	mßm∂e_ªgs_öå
;

380 
__u32
 
	maux_w©îm¨k
;

381 
__u32
 
	m__ª£rved_2
;

384 
	#≥rf_Êags
(
©å
Ë(*(&◊âr)->
ªad_f‹m©
 + 1))

	)

389 
	#PERF_EVENT_IOC_ENABLE
 
	`_IO
 ('$', 0)

	)

390 
	#PERF_EVENT_IOC_DISABLE
 
	`_IO
 ('$', 1)

	)

391 
	#PERF_EVENT_IOC_REFRESH
 
	`_IO
 ('$', 2)

	)

392 
	#PERF_EVENT_IOC_RESET
 
	`_IO
 ('$', 3)

	)

393 
	#PERF_EVENT_IOC_PERIOD
 
	`_IOW
('$', 4, 
__u64
)

	)

394 
	#PERF_EVENT_IOC_SET_OUTPUT
 
	`_IO
 ('$', 5)

	)

395 
	#PERF_EVENT_IOC_SET_FILTER
 
	`_IOW
('$', 6, *)

	)

396 
	#PERF_EVENT_IOC_ID
 
	`_IOR
('$', 7, 
__u64
 *)

	)

397 
	#PERF_EVENT_IOC_SET_BPF
 
	`_IOW
('$', 8, 
__u32
)

	)

399 
	e≥rf_evít_ioc_Êags
 {

400 
	mPERF_IOC_FLAG_GROUP
 = 1U << 0,

406 
	s≥rf_evít_mm≠_∑ge
 {

407 
__u32
 
	mvîsi⁄
;

408 
__u32
 
	mcom∑t_vîsi⁄
;

445 
__u32
 
	mlock
;

446 
__u32
 
	mödex
;

447 
__s64
 
	moff£t
;

448 
__u64
 
	mtime_íabÀd
;

449 
__u64
 
	mtime_ru¬ög
;

451 
__u64
 
	mˇ∑bûôõs
;

453 
__u64
 
	mˇp_bô0
 : 1,

454 
	mˇp_bô0_is_dïªˇãd
 : 1,

456 
	mˇp_u£r_rdpmc
 : 1,

457 
	mˇp_u£r_time
 : 1,

458 
	mˇp_u£r_time_zîo
 : 1,

459 
	mˇp_____ªs
 : 59;

472 
__u16
 
	mpmc_width
;

498 
__u16
 
	mtime_shi·
;

499 
__u32
 
	mtime_mu…
;

500 
__u64
 
	mtime_off£t
;

517 
__u64
 
	mtime_zîo
;

518 
__u32
 
	msize
;

524 
__u8
 
	m__ª£rved
[118*8+4];

542 
__u64
 
	md©a_hód
;

543 
__u64
 
	md©a_èû
;

544 
__u64
 
	md©a_off£t
;

545 
__u64
 
	md©a_size
;

558 
__u64
 
	maux_hód
;

559 
__u64
 
	maux_èû
;

560 
__u64
 
	maux_off£t
;

561 
__u64
 
	maux_size
;

564 
	#PERF_RECORD_MISC_CPUMODE_MASK
 (7 << 0)

	)

565 
	#PERF_RECORD_MISC_CPUMODE_UNKNOWN
 (0 << 0)

	)

566 
	#PERF_RECORD_MISC_KERNEL
 (1 << 0)

	)

567 
	#PERF_RECORD_MISC_USER
 (2 << 0)

	)

568 
	#PERF_RECORD_MISC_HYPERVISOR
 (3 << 0)

	)

569 
	#PERF_RECORD_MISC_GUEST_KERNEL
 (4 << 0)

	)

570 
	#PERF_RECORD_MISC_GUEST_USER
 (5 << 0)

	)

575 
	#PERF_RECORD_MISC_PROC_MAP_PARSE_TIMEOUT
 (1 << 12)

	)

581 
	#PERF_RECORD_MISC_MMAP_DATA
 (1 << 13)

	)

582 
	#PERF_RECORD_MISC_COMM_EXEC
 (1 << 13)

	)

583 
	#PERF_RECORD_MISC_SWITCH_OUT
 (1 << 13)

	)

589 
	#PERF_RECORD_MISC_EXACT_IP
 (1 << 14)

	)

593 
	#PERF_RECORD_MISC_EXT_RESERVED
 (1 << 15)

	)

595 
	s≥rf_evít_hódî
 {

596 
__u32
 
	mty≥
;

597 
__u16
 
	mmisc
;

598 
__u16
 
	msize
;

601 
	e≥rf_evít_ty≥
 {

642 
	mPERF_RECORD_MMAP
 = 1,

652 
	mPERF_RECORD_LOST
 = 2,

663 
	mPERF_RECORD_COMM
 = 3,

674 
	mPERF_RECORD_EXIT
 = 4,

685 
	mPERF_RECORD_THROTTLE
 = 5,

686 
	mPERF_RECORD_UNTHROTTLE
 = 6,

697 
	mPERF_RECORD_FORK
 = 7,

708 
	mPERF_RECORD_READ
 = 8,

766 
	mPERF_RECORD_SAMPLE
 = 9,

788 
	mPERF_RECORD_MMAP2
 = 10,

802 
	mPERF_RECORD_AUX
 = 11,

813 
	mPERF_RECORD_ITRACE_START
 = 12,

825 
	mPERF_RECORD_LOST_SAMPLES
 = 13,

837 
	mPERF_RECORD_SWITCH
 = 14,

851 
	mPERF_RECORD_SWITCH_CPU_WIDE
 = 15,

853 
	mPERF_RECORD_MAX
,

856 
	#PERF_MAX_STACK_DEPTH
 127

	)

858 
	e≥rf_ˇŒchaö_c⁄ãxt
 {

859 
	mPERF_CONTEXT_HV
 = (
__u64
)-32,

860 
	mPERF_CONTEXT_KERNEL
 = (
__u64
)-128,

861 
	mPERF_CONTEXT_USER
 = (
__u64
)-512,

863 
	mPERF_CONTEXT_GUEST
 = (
__u64
)-2048,

864 
	mPERF_CONTEXT_GUEST_KERNEL
 = (
__u64
)-2176,

865 
	mPERF_CONTEXT_GUEST_USER
 = (
__u64
)-2560,

867 
	mPERF_CONTEXT_MAX
 = (
__u64
)-4095,

873 
	#PERF_AUX_FLAG_TRUNCATED
 0x01

	)

874 
	#PERF_AUX_FLAG_OVERWRITE
 0x02

	)

876 
	#PERF_FLAG_FD_NO_GROUP
 (1UL << 0)

	)

877 
	#PERF_FLAG_FD_OUTPUT
 (1UL << 1)

	)

878 
	#PERF_FLAG_PID_CGROUP
 (1UL << 2Ë

	)

879 
	#PERF_FLAG_FD_CLOEXEC
 (1UL << 3Ë

	)

881 
	u≥rf_mem_d©a_§c
 {

882 
__u64
 
	mvÆ
;

884 
__u64
 
	mmem_›
:5,

885 
	mmem_lvl
:14,

886 
	mmem_¢o›
:5,

887 
	mmem_lock
:2,

888 
	mmem_déb
:7,

889 
	mmem_rsvd
:31;

894 
	#PERF_MEM_OP_NA
 0x01

	)

895 
	#PERF_MEM_OP_LOAD
 0x02

	)

896 
	#PERF_MEM_OP_STORE
 0x04

	)

897 
	#PERF_MEM_OP_PFETCH
 0x08

	)

898 
	#PERF_MEM_OP_EXEC
 0x10

	)

899 
	#PERF_MEM_OP_SHIFT
 0

	)

902 
	#PERF_MEM_LVL_NA
 0x01

	)

903 
	#PERF_MEM_LVL_HIT
 0x02

	)

904 
	#PERF_MEM_LVL_MISS
 0x04

	)

905 
	#PERF_MEM_LVL_L1
 0x08

	)

906 
	#PERF_MEM_LVL_LFB
 0x10

	)

907 
	#PERF_MEM_LVL_L2
 0x20

	)

908 
	#PERF_MEM_LVL_L3
 0x40

	)

909 
	#PERF_MEM_LVL_LOC_RAM
 0x80

	)

910 
	#PERF_MEM_LVL_REM_RAM1
 0x100

	)

911 
	#PERF_MEM_LVL_REM_RAM2
 0x200

	)

912 
	#PERF_MEM_LVL_REM_CCE1
 0x400

	)

913 
	#PERF_MEM_LVL_REM_CCE2
 0x800

	)

914 
	#PERF_MEM_LVL_IO
 0x1000

	)

915 
	#PERF_MEM_LVL_UNC
 0x2000

	)

916 
	#PERF_MEM_LVL_SHIFT
 5

	)

919 
	#PERF_MEM_SNOOP_NA
 0x01

	)

920 
	#PERF_MEM_SNOOP_NONE
 0x02

	)

921 
	#PERF_MEM_SNOOP_HIT
 0x04

	)

922 
	#PERF_MEM_SNOOP_MISS
 0x08

	)

923 
	#PERF_MEM_SNOOP_HITM
 0x10

	)

924 
	#PERF_MEM_SNOOP_SHIFT
 19

	)

927 
	#PERF_MEM_LOCK_NA
 0x01

	)

928 
	#PERF_MEM_LOCK_LOCKED
 0x02

	)

929 
	#PERF_MEM_LOCK_SHIFT
 24

	)

932 
	#PERF_MEM_TLB_NA
 0x01

	)

933 
	#PERF_MEM_TLB_HIT
 0x02

	)

934 
	#PERF_MEM_TLB_MISS
 0x04

	)

935 
	#PERF_MEM_TLB_L1
 0x08

	)

936 
	#PERF_MEM_TLB_L2
 0x10

	)

937 
	#PERF_MEM_TLB_WK
 0x20

	)

938 
	#PERF_MEM_TLB_OS
 0x40

	)

939 
	#PERF_MEM_TLB_SHIFT
 26

	)

941 
	#PERF_MEM_S
(
a
, 
s
) \

942 (((
__u64
)
PERF_MEM_
##
a
##
_
##
s
Ë<< PERF_MEM_##a##
_SHIFT
)

	)

959 
	s≥rf_bønch_íåy
 {

960 
__u64
 
	m‰om
;

961 
__u64
 
	mto
;

962 
__u64
 
	mmi•ªd
:1,

963 
	m¥edi˘ed
:1,

964 
	mö_tx
:1,

965 
	mab‹t
:1,

966 
	mcy˛es
:16,

967 
	mª£rved
:44;

	@/usr/include/linux/sysinfo.h

1 #i‚de‡
_LINUX_SYSINFO_H


2 
	#_LINUX_SYSINFO_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#SI_LOAD_SHIFT
 16

	)

7 
	ssysöfo
 {

8 
__kî√l_l⁄g_t
 
	mu±ime
;

9 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

10 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

11 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

12 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

13 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

14 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

15 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

16 
__u16
 
	m¥ocs
;

17 
__u16
 
	m∑d
;

18 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

19 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

20 
__u32
 
	mmem_unô
;

21 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/sys/ioctl.h

18 #i‚def 
_SYS_IOCTL_H


19 
	#_SYS_IOCTL_H
 1

	)

21 
	~<„©uªs.h
>

23 
	g__BEGIN_DECLS


26 
	~<bôs/io˘ls.h
>

29 
	~<bôs/io˘l-ty≥s.h
>

36 
	~<sys/âydeÁu…s.h
>

41 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

43 
__END_DECLS


	@/usr/include/sys/prctl.h

18 #i‚de‡
_SYS_PRCTL_H


19 
	#_SYS_PRCTL_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<löux/¥˘l.h
>

24 
__BEGIN_DECLS


27 
	$¥˘l
 (
__›ti⁄
, ...Ë
__THROW
;

29 
__END_DECLS


	@/usr/include/sys/resource.h

18 #i‚def 
_SYS_RESOURCE_H


19 
	#_SYS_RESOURCE_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/ªsour˚.h
>

26 #i‚de‡
__id_t_deföed


27 
__id_t
 
	tid_t
;

28 
	#__id_t_deföed


	)

31 
	g__BEGIN_DECLS


37 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


38 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

39 
__rußge_who
 
	t__rußge_who_t
;

40 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

42 
	t__æimô_ªsour˚_t
;

43 
	t__rußge_who_t
;

44 
	t__¥i‹ôy_which_t
;

49 #i‚de‡
__USE_FILE_OFFSET64


50 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

51 
æimô
 *
__æimôs
Ë
__THROW
;

53 #ifde‡
__REDIRECT_NTH


54 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

55 
æimô
 *
__æimôs
), 
gëæimô64
);

57 
	#gëæimô
 
gëæimô64


	)

60 #ifde‡
__USE_LARGEFILE64


61 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

62 
æimô64
 *
__æimôs
Ë
__THROW
;

68 #i‚de‡
__USE_FILE_OFFSET64


69 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

70 c⁄° 
æimô
 *
__æimôs
Ë
__THROW
;

72 #ifde‡
__REDIRECT_NTH


73 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

74 c⁄° 
æimô
 *
__æimôs
),

75 
£ålimô64
);

77 
	#£ålimô
 
£ålimô64


	)

80 #ifde‡
__USE_LARGEFILE64


81 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

82 c⁄° 
æimô64
 *
__æimôs
Ë
__THROW
;

87 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

93 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

97 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

98 
__THROW
;

100 
__END_DECLS


	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

28 #ifde‡
__x86_64__


31 
__exãnsi⁄__
 
	tgªg_t
;

34 
	#NGREG
 23

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_Âxªg


94 
	msignifiˇnd
[4];

95 
	mexp⁄ít
;

96 
	m∑ddög
[3];

99 
	s_libc_xmmªg


101 
__uöt32_t
 
	mñemít
[4];

104 
	s_libc_Â°©e


107 
__uöt16_t
 
	mcwd
;

108 
__uöt16_t
 
	mswd
;

109 
__uöt16_t
 
	m·w
;

110 
__uöt16_t
 
	mf›
;

111 
__uöt64_t
 
	mrù
;

112 
__uöt64_t
 
	mrdp
;

113 
__uöt32_t
 
	mmxc§
;

114 
__uöt32_t
 
	mmx¸_mask
;

115 
_libc_Âxªg
 
	m_°
[8];

116 
_libc_xmmªg
 
	m_xmm
[16];

117 
__uöt32_t
 
	m∑ddög
[24];

121 
_libc_Â°©e
 *
	tÂªg£t_t
;

126 
gªg£t_t
 
	mgªgs
;

128 
Âªg£t_t
 
	mÂªgs
;

129 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

130 } 
	tmc⁄ãxt_t
;

133 
	suc⁄ãxt


135 
	muc_Êags
;

136 
uc⁄ãxt
 *
	muc_lök
;

137 
°ack_t
 
	muc_°ack
;

138 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_Â°©e
 
	m__Âªgs_mem
;

141 } 
	tuc⁄ãxt_t
;

146 
	tgªg_t
;

149 
	#NGREG
 19

	)

152 
gªg_t
 
	tgªg£t_t
[
NGREG
];

154 #ifde‡
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_Âªg


202 
	msignifiˇnd
[4];

203 
	mexp⁄ít
;

206 
	s_libc_Â°©e


208 
	mcw
;

209 
	msw
;

210 
	mèg
;

211 
	mùoff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_Âªg
 
	m_°
[8];

216 
	m°©us
;

220 
_libc_Â°©e
 *
	tÂªg£t_t
;

225 
gªg£t_t
 
	mgªgs
;

228 
Âªg£t_t
 
	mÂªgs
;

229 
	mﬁdmask
;

230 
	m¸2
;

231 } 
	tmc⁄ãxt_t
;

234 
	suc⁄ãxt


236 
	muc_Êags
;

237 
uc⁄ãxt
 *
	muc_lök
;

238 
°ack_t
 
	muc_°ack
;

239 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_Â°©e
 
	m__Âªgs_mem
;

242 } 
	tuc⁄ãxt_t
;

	@/usr/include/sys/wait.h

22 #i‚def 
_SYS_WAIT_H


23 
	#_SYS_WAIT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<sig«l.h
>

32 #i‡!
deföed
 
_STDLIB_H
 || (!deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K8
)

35 
	~<bôs/waôÊags.h
>

37 #ifdef 
__USE_MISC


42 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


43 
	#__WAIT_INT
(
°©us
) \

44 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

45 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

47 
	#__WAIT_INT
(
°©us
Ë(*(c⁄° *Ë&(°©us))

	)

55 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


56 
	#__WAIT_STATUS
 *

	)

57 
	#__WAIT_STATUS_DEFN
 *

	)

62 
waô
 *
	m__u±r
;

63 *
	m__ùå
;

64 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

71 
	#__WAIT_STATUS
 *

	)

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	~<bôs/waô°©us.h
>

79 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

80 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

81 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

82 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

83 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

84 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

85 #ifde‡
__WIFCONTINUED


86 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifdef 
__USE_MISC


91 
	#WCOREFLAG
 
__WCOREFLAG


	)

92 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (
	`__WAIT_INT
 (°©us))

	)

93 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

94 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

102 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

104 #ifdef 
__USE_MISC


106 
	#WAIT_ANY
 (-1Ë

	)

107 
	#WAIT_MYPGRP
 0

	)

125 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

127 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 #i‚de‡
__id_t_deföed


129 
	~<bôs/ty≥s.h
>

130 
__id_t
 
	tid_t
;

131 
	#__id_t_deföed


	)

134 
	#__√ed_sigöfo_t


	)

135 
	~<bôs/sigöfo.h
>

148 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

149 
__›ti⁄s
);

152 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


155 
	grußge
;

162 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

163 
rußge
 * 
__ußge
Ë
__THROWNL
;

166 #ifde‡
__USE_MISC


168 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

169 
rußge
 *
__ußge
Ë
__THROWNL
;

173 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/asm/byteorder.h

1 #i‚de‡
_ASM_X86_BYTEORDER_H


2 
	#_ASM_X86_BYTEORDER_H


	)

4 
	~<löux/byã‹dî/lôée_ídün.h
>

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/asm/unistd_32.h

1 #i‚de‡
_ASM_X86_UNISTD_32_H


2 
	#_ASM_X86_UNISTD_32_H
 1

	)

4 
	#__NR_ª°¨t_sysˇŒ
 0

	)

5 
	#__NR_exô
 1

	)

6 
	#__NR_f‹k
 2

	)

7 
	#__NR_ªad
 3

	)

8 
	#__NR_wrôe
 4

	)

9 
	#__NR_›í
 5

	)

10 
	#__NR_˛o£
 6

	)

11 
	#__NR_waôpid
 7

	)

12 
	#__NR_¸ót
 8

	)

13 
	#__NR_lök
 9

	)

14 
	#__NR_u∆ök
 10

	)

15 
	#__NR_execve
 11

	)

16 
	#__NR_chdú
 12

	)

17 
	#__NR_time
 13

	)

18 
	#__NR_mknod
 14

	)

19 
	#__NR_chmod
 15

	)

20 
	#__NR_lchown
 16

	)

21 
	#__NR_bªak
 17

	)

22 
	#__NR_ﬁd°©
 18

	)

23 
	#__NR_l£ek
 19

	)

24 
	#__NR_gëpid
 20

	)

25 
	#__NR_mou¡
 21

	)

26 
	#__NR_umou¡
 22

	)

27 
	#__NR_£tuid
 23

	)

28 
	#__NR_gëuid
 24

	)

29 
	#__NR_°ime
 25

	)

30 
	#__NR_±ø˚
 26

	)

31 
	#__NR_Æ¨m
 27

	)

32 
	#__NR_ﬁdf°©
 28

	)

33 
	#__NR_∑u£
 29

	)

34 
	#__NR_utime
 30

	)

35 
	#__NR_°ty
 31

	)

36 
	#__NR_gây
 32

	)

37 
	#__NR_ac˚ss
 33

	)

38 
	#__NR_ni˚
 34

	)

39 
	#__NR_·ime
 35

	)

40 
	#__NR_sync
 36

	)

41 
	#__NR_kûl
 37

	)

42 
	#__NR_ª«me
 38

	)

43 
	#__NR_mkdú
 39

	)

44 
	#__NR_rmdú
 40

	)

45 
	#__NR_dup
 41

	)

46 
	#__NR_pùe
 42

	)

47 
	#__NR_times
 43

	)

48 
	#__NR_¥of
 44

	)

49 
	#__NR_brk
 45

	)

50 
	#__NR_£tgid
 46

	)

51 
	#__NR_gëgid
 47

	)

52 
	#__NR_sig«l
 48

	)

53 
	#__NR_gëeuid
 49

	)

54 
	#__NR_gëegid
 50

	)

55 
	#__NR_ac˘
 51

	)

56 
	#__NR_umou¡2
 52

	)

57 
	#__NR_lock
 53

	)

58 
	#__NR_io˘l
 54

	)

59 
	#__NR_f˙é
 55

	)

60 
	#__NR_mpx
 56

	)

61 
	#__NR_£çgid
 57

	)

62 
	#__NR_ulimô
 58

	)

63 
	#__NR_ﬁdﬁdu«me
 59

	)

64 
	#__NR_umask
 60

	)

65 
	#__NR_chroŸ
 61

	)

66 
	#__NR_u°©
 62

	)

67 
	#__NR_dup2
 63

	)

68 
	#__NR_gëµid
 64

	)

69 
	#__NR_gëpgΩ
 65

	)

70 
	#__NR_£tsid
 66

	)

71 
	#__NR_siga˘i⁄
 67

	)

72 
	#__NR_sgëmask
 68

	)

73 
	#__NR_s£tmask
 69

	)

74 
	#__NR_£åeuid
 70

	)

75 
	#__NR_£åegid
 71

	)

76 
	#__NR_sigsu•íd
 72

	)

77 
	#__NR_sig≥ndög
 73

	)

78 
	#__NR_£tho°«me
 74

	)

79 
	#__NR_£ålimô
 75

	)

80 
	#__NR_gëæimô
 76

	)

81 
	#__NR_gërußge
 77

	)

82 
	#__NR_gëtimeofday
 78

	)

83 
	#__NR_£âimeofday
 79

	)

84 
	#__NR_gëgroups
 80

	)

85 
	#__NR_£tgroups
 81

	)

86 
	#__NR_£À˘
 82

	)

87 
	#__NR_symlök
 83

	)

88 
	#__NR_ﬁdl°©
 84

	)

89 
	#__NR_ªadlök
 85

	)

90 
	#__NR_u£lib
 86

	)

91 
	#__NR_sw≠⁄
 87

	)

92 
	#__NR_ªboŸ
 88

	)

93 
	#__NR_ªaddú
 89

	)

94 
	#__NR_mm≠
 90

	)

95 
	#__NR_munm≠
 91

	)

96 
	#__NR_åunˇã
 92

	)

97 
	#__NR_·runˇã
 93

	)

98 
	#__NR_fchmod
 94

	)

99 
	#__NR_fchown
 95

	)

100 
	#__NR_gë¥i‹ôy
 96

	)

101 
	#__NR_£çri‹ôy
 97

	)

102 
	#__NR_¥ofû
 98

	)

103 
	#__NR_°©fs
 99

	)

104 
	#__NR_f°©fs
 100

	)

105 
	#__NR_i›îm
 101

	)

106 
	#__NR_sockëˇŒ
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_£tôimî
 104

	)

109 
	#__NR_gëôimî
 105

	)

110 
	#__NR_°©
 106

	)

111 
	#__NR_l°©
 107

	)

112 
	#__NR_f°©
 108

	)

113 
	#__NR_ﬁdu«me
 109

	)

114 
	#__NR_i›l
 110

	)

115 
	#__NR_vh™gup
 111

	)

116 
	#__NR_idÀ
 112

	)

117 
	#__NR_vm86ﬁd
 113

	)

118 
	#__NR_waô4
 114

	)

119 
	#__NR_sw≠off
 115

	)

120 
	#__NR_sysöfo
 116

	)

121 
	#__NR_ùc
 117

	)

122 
	#__NR_fsync
 118

	)

123 
	#__NR_sigªtu∫
 119

	)

124 
	#__NR_˛⁄e
 120

	)

125 
	#__NR_£tdomaö«me
 121

	)

126 
	#__NR_u«me
 122

	)

127 
	#__NR_modify_ldt
 123

	)

128 
	#__NR_adjtimex
 124

	)

129 
	#__NR_m¥Ÿe˘
 125

	)

130 
	#__NR_sig¥ocmask
 126

	)

131 
	#__NR_¸óã_moduÀ
 127

	)

132 
	#__NR_öô_moduÀ
 128

	)

133 
	#__NR_dñëe_moduÀ
 129

	)

134 
	#__NR_gë_kî√l_syms
 130

	)

135 
	#__NR_quŸa˘l
 131

	)

136 
	#__NR_gëpgid
 132

	)

137 
	#__NR_fchdú
 133

	)

138 
	#__NR_bdÊush
 134

	)

139 
	#__NR_sysfs
 135

	)

140 
	#__NR_≥rs⁄Æôy
 136

	)

141 
	#__NR_afs_sysˇŒ
 137

	)

142 
	#__NR_£tfsuid
 138

	)

143 
	#__NR_£tfsgid
 139

	)

144 
	#__NR__Œ£ek
 140

	)

145 
	#__NR_gëdíts
 141

	)

146 
	#__NR__√w£À˘
 142

	)

147 
	#__NR_Êock
 143

	)

148 
	#__NR_msync
 144

	)

149 
	#__NR_ªadv
 145

	)

150 
	#__NR_wrôev
 146

	)

151 
	#__NR_gësid
 147

	)

152 
	#__NR_fd©async
 148

	)

153 
	#__NR__sys˘l
 149

	)

154 
	#__NR_mlock
 150

	)

155 
	#__NR_mu∆ock
 151

	)

156 
	#__NR_mlockÆl
 152

	)

157 
	#__NR_mu∆ockÆl
 153

	)

158 
	#__NR_sched_£ç¨am
 154

	)

159 
	#__NR_sched_gë∑øm
 155

	)

160 
	#__NR_sched_£tscheduÀr
 156

	)

161 
	#__NR_sched_gëscheduÀr
 157

	)

162 
	#__NR_sched_yõld
 158

	)

163 
	#__NR_sched_gë_¥i‹ôy_max
 159

	)

164 
	#__NR_sched_gë_¥i‹ôy_mö
 160

	)

165 
	#__NR_sched_º_gë_öãrvÆ
 161

	)

166 
	#__NR_«no¶ìp
 162

	)

167 
	#__NR_mªm≠
 163

	)

168 
	#__NR_£åesuid
 164

	)

169 
	#__NR_gëªsuid
 165

	)

170 
	#__NR_vm86
 166

	)

171 
	#__NR_quîy_moduÀ
 167

	)

172 
	#__NR_pﬁl
 168

	)

173 
	#__NR_nfs£rv˘l
 169

	)

174 
	#__NR_£åesgid
 170

	)

175 
	#__NR_gëªsgid
 171

	)

176 
	#__NR_¥˘l
 172

	)

177 
	#__NR_π_sigªtu∫
 173

	)

178 
	#__NR_π_siga˘i⁄
 174

	)

179 
	#__NR_π_sig¥ocmask
 175

	)

180 
	#__NR_π_sig≥ndög
 176

	)

181 
	#__NR_π_sigtimedwaô
 177

	)

182 
	#__NR_π_sigqueueöfo
 178

	)

183 
	#__NR_π_sigsu•íd
 179

	)

184 
	#__NR_¥ód64
 180

	)

185 
	#__NR_pwrôe64
 181

	)

186 
	#__NR_chown
 182

	)

187 
	#__NR_gëcwd
 183

	)

188 
	#__NR_ˇpgë
 184

	)

189 
	#__NR_ˇp£t
 185

	)

190 
	#__NR_sigÆt°ack
 186

	)

191 
	#__NR_£ndfûe
 187

	)

192 
	#__NR_gëpmsg
 188

	)

193 
	#__NR_puçmsg
 189

	)

194 
	#__NR_vf‹k
 190

	)

195 
	#__NR_ugëæimô
 191

	)

196 
	#__NR_mm≠2
 192

	)

197 
	#__NR_åunˇã64
 193

	)

198 
	#__NR_·runˇã64
 194

	)

199 
	#__NR_°©64
 195

	)

200 
	#__NR_l°©64
 196

	)

201 
	#__NR_f°©64
 197

	)

202 
	#__NR_lchown32
 198

	)

203 
	#__NR_gëuid32
 199

	)

204 
	#__NR_gëgid32
 200

	)

205 
	#__NR_gëeuid32
 201

	)

206 
	#__NR_gëegid32
 202

	)

207 
	#__NR_£åeuid32
 203

	)

208 
	#__NR_£åegid32
 204

	)

209 
	#__NR_gëgroups32
 205

	)

210 
	#__NR_£tgroups32
 206

	)

211 
	#__NR_fchown32
 207

	)

212 
	#__NR_£åesuid32
 208

	)

213 
	#__NR_gëªsuid32
 209

	)

214 
	#__NR_£åesgid32
 210

	)

215 
	#__NR_gëªsgid32
 211

	)

216 
	#__NR_chown32
 212

	)

217 
	#__NR_£tuid32
 213

	)

218 
	#__NR_£tgid32
 214

	)

219 
	#__NR_£tfsuid32
 215

	)

220 
	#__NR_£tfsgid32
 216

	)

221 
	#__NR_pivŸ_roŸ
 217

	)

222 
	#__NR_möc‹e
 218

	)

223 
	#__NR_madvi£
 219

	)

224 
	#__NR_gëdíts64
 220

	)

225 
	#__NR_f˙é64
 221

	)

226 
	#__NR_gëtid
 224

	)

227 
	#__NR_ªadahód
 225

	)

228 
	#__NR_£tx©å
 226

	)

229 
	#__NR_l£tx©å
 227

	)

230 
	#__NR_f£tx©å
 228

	)

231 
	#__NR_gëx©å
 229

	)

232 
	#__NR_lgëx©å
 230

	)

233 
	#__NR_fgëx©å
 231

	)

234 
	#__NR_li°x©å
 232

	)

235 
	#__NR_Œi°x©å
 233

	)

236 
	#__NR_Êi°x©å
 234

	)

237 
	#__NR_ªmovex©å
 235

	)

238 
	#__NR_Ãemovex©å
 236

	)

239 
	#__NR_‰emovex©å
 237

	)

240 
	#__NR_tkûl
 238

	)

241 
	#__NR_£ndfûe64
 239

	)

242 
	#__NR_fuãx
 240

	)

243 
	#__NR_sched_£èfföôy
 241

	)

244 
	#__NR_sched_gëafföôy
 242

	)

245 
	#__NR_£t_thªad_¨ó
 243

	)

246 
	#__NR_gë_thªad_¨ó
 244

	)

247 
	#__NR_io_£tup
 245

	)

248 
	#__NR_io_de°roy
 246

	)

249 
	#__NR_io_gëevíts
 247

	)

250 
	#__NR_io_submô
 248

	)

251 
	#__NR_io_ˇn˚l
 249

	)

252 
	#__NR_Ádvi£64
 250

	)

253 
	#__NR_exô_group
 252

	)

254 
	#__NR_lookup_dcookõ
 253

	)

255 
	#__NR_ïﬁl_¸óã
 254

	)

256 
	#__NR_ïﬁl_˘l
 255

	)

257 
	#__NR_ïﬁl_waô
 256

	)

258 
	#__NR_ªm≠_fûe_∑ges
 257

	)

259 
	#__NR_£t_tid_addªss
 258

	)

260 
	#__NR_timî_¸óã
 259

	)

261 
	#__NR_timî_£âime
 260

	)

262 
	#__NR_timî_gëtime
 261

	)

263 
	#__NR_timî_gëovîrun
 262

	)

264 
	#__NR_timî_dñëe
 263

	)

265 
	#__NR_˛ock_£âime
 264

	)

266 
	#__NR_˛ock_gëtime
 265

	)

267 
	#__NR_˛ock_gëªs
 266

	)

268 
	#__NR_˛ock_«no¶ìp
 267

	)

269 
	#__NR_°©fs64
 268

	)

270 
	#__NR_f°©fs64
 269

	)

271 
	#__NR_tgkûl
 270

	)

272 
	#__NR_utimes
 271

	)

273 
	#__NR_Ádvi£64_64
 272

	)

274 
	#__NR_v£rvî
 273

	)

275 
	#__NR_mböd
 274

	)

276 
	#__NR_gë_mempﬁicy
 275

	)

277 
	#__NR_£t_mempﬁicy
 276

	)

278 
	#__NR_mq_›í
 277

	)

279 
	#__NR_mq_u∆ök
 278

	)

280 
	#__NR_mq_timed£nd
 279

	)

281 
	#__NR_mq_timedª˚ive
 280

	)

282 
	#__NR_mq_nŸify
 281

	)

283 
	#__NR_mq_gë£èâr
 282

	)

284 
	#__NR_kexec_lﬂd
 283

	)

285 
	#__NR_waôid
 284

	)

286 
	#__NR_add_key
 286

	)

287 
	#__NR_ªque°_key
 287

	)

288 
	#__NR_key˘l
 288

	)

289 
	#__NR_i›rio_£t
 289

	)

290 
	#__NR_i›rio_gë
 290

	)

291 
	#__NR_öŸify_öô
 291

	)

292 
	#__NR_öŸify_add_w©ch
 292

	)

293 
	#__NR_öŸify_rm_w©ch
 293

	)

294 
	#__NR_migøã_∑ges
 294

	)

295 
	#__NR_›í©
 295

	)

296 
	#__NR_mkdú©
 296

	)

297 
	#__NR_mknod©
 297

	)

298 
	#__NR_fchow«t
 298

	)

299 
	#__NR_futimeßt
 299

	)

300 
	#__NR_f°©©64
 300

	)

301 
	#__NR_u∆ök©
 301

	)

302 
	#__NR_ª«mót
 302

	)

303 
	#__NR_lök©
 303

	)

304 
	#__NR_symlök©
 304

	)

305 
	#__NR_ªadlök©
 305

	)

306 
	#__NR_fchmod©
 306

	)

307 
	#__NR_Ác˚sßt
 307

	)

308 
	#__NR_p£À˘6
 308

	)

309 
	#__NR_µﬁl
 309

	)

310 
	#__NR_unsh¨e
 310

	)

311 
	#__NR_£t_robu°_li°
 311

	)

312 
	#__NR_gë_robu°_li°
 312

	)

313 
	#__NR_•li˚
 313

	)

314 
	#__NR_sync_fûe_ønge
 314

	)

315 
	#__NR_ãe
 315

	)

316 
	#__NR_vm•li˚
 316

	)

317 
	#__NR_move_∑ges
 317

	)

318 
	#__NR_gë˝u
 318

	)

319 
	#__NR_ïﬁl_pwaô
 319

	)

320 
	#__NR_utimíßt
 320

	)

321 
	#__NR_sig«lfd
 321

	)

322 
	#__NR_timîfd_¸óã
 322

	)

323 
	#__NR_evítfd
 323

	)

324 
	#__NR_ÁŒoˇã
 324

	)

325 
	#__NR_timîfd_£âime
 325

	)

326 
	#__NR_timîfd_gëtime
 326

	)

327 
	#__NR_sig«lfd4
 327

	)

328 
	#__NR_evítfd2
 328

	)

329 
	#__NR_ïﬁl_¸óã1
 329

	)

330 
	#__NR_dup3
 330

	)

331 
	#__NR_pùe2
 331

	)

332 
	#__NR_öŸify_öô1
 332

	)

333 
	#__NR_¥ódv
 333

	)

334 
	#__NR_pwrôev
 334

	)

335 
	#__NR_π_tgsigqueueöfo
 335

	)

336 
	#__NR_≥rf_evít_›í
 336

	)

337 
	#__NR_ªcvmmsg
 337

	)

338 
	#__NR_ÁnŸify_öô
 338

	)

339 
	#__NR_ÁnŸify_m¨k
 339

	)

340 
	#__NR_¥limô64
 340

	)

341 
	#__NR_«me_to_h™dÀ_©
 341

	)

342 
	#__NR_›í_by_h™dÀ_©
 342

	)

343 
	#__NR_˛ock_adjtime
 343

	)

344 
	#__NR_syncfs
 344

	)

345 
	#__NR_£ndmmsg
 345

	)

346 
	#__NR_£äs
 346

	)

347 
	#__NR_¥o˚ss_vm_ªadv
 347

	)

348 
	#__NR_¥o˚ss_vm_wrôev
 348

	)

349 
	#__NR_kcmp
 349

	)

350 
	#__NR_föô_moduÀ
 350

	)

351 
	#__NR_sched_£èâr
 351

	)

352 
	#__NR_sched_gë©å
 352

	)

353 
	#__NR_ª«mót2
 353

	)

354 
	#__NR_£ccomp
 354

	)

355 
	#__NR_gëøndom
 355

	)

356 
	#__NR_memfd_¸óã
 356

	)

357 
	#__NR_bpf
 357

	)

358 
	#__NR_execvót
 358

	)

359 
	#__NR_sockë
 359

	)

360 
	#__NR_sockë∑ú
 360

	)

361 
	#__NR_böd
 361

	)

362 
	#__NR_c⁄√˘
 362

	)

363 
	#__NR_li°í
 363

	)

364 
	#__NR_ac˚±4
 364

	)

365 
	#__NR_gësock›t
 365

	)

366 
	#__NR_£tsock›t
 366

	)

367 
	#__NR_gësock«me
 367

	)

368 
	#__NR_gë≥î«me
 368

	)

369 
	#__NR_£ndto
 369

	)

370 
	#__NR_£ndmsg
 370

	)

371 
	#__NR_ªcv‰om
 371

	)

372 
	#__NR_ªcvmsg
 372

	)

373 
	#__NR_shutdown
 373

	)

374 
	#__NR_u£rÁu…fd
 374

	)

375 
	#__NR_memb¨rõr
 375

	)

376 
	#__NR_mlock2
 376

	)

	@/usr/include/asm/unistd_64.h

1 #i‚de‡
_ASM_X86_UNISTD_64_H


2 
	#_ASM_X86_UNISTD_64_H
 1

	)

4 
	#__NR_ªad
 0

	)

5 
	#__NR_wrôe
 1

	)

6 
	#__NR_›í
 2

	)

7 
	#__NR_˛o£
 3

	)

8 
	#__NR_°©
 4

	)

9 
	#__NR_f°©
 5

	)

10 
	#__NR_l°©
 6

	)

11 
	#__NR_pﬁl
 7

	)

12 
	#__NR_l£ek
 8

	)

13 
	#__NR_mm≠
 9

	)

14 
	#__NR_m¥Ÿe˘
 10

	)

15 
	#__NR_munm≠
 11

	)

16 
	#__NR_brk
 12

	)

17 
	#__NR_π_siga˘i⁄
 13

	)

18 
	#__NR_π_sig¥ocmask
 14

	)

19 
	#__NR_π_sigªtu∫
 15

	)

20 
	#__NR_io˘l
 16

	)

21 
	#__NR_¥ód64
 17

	)

22 
	#__NR_pwrôe64
 18

	)

23 
	#__NR_ªadv
 19

	)

24 
	#__NR_wrôev
 20

	)

25 
	#__NR_ac˚ss
 21

	)

26 
	#__NR_pùe
 22

	)

27 
	#__NR_£À˘
 23

	)

28 
	#__NR_sched_yõld
 24

	)

29 
	#__NR_mªm≠
 25

	)

30 
	#__NR_msync
 26

	)

31 
	#__NR_möc‹e
 27

	)

32 
	#__NR_madvi£
 28

	)

33 
	#__NR_shmgë
 29

	)

34 
	#__NR_shm©
 30

	)

35 
	#__NR_shm˘l
 31

	)

36 
	#__NR_dup
 32

	)

37 
	#__NR_dup2
 33

	)

38 
	#__NR_∑u£
 34

	)

39 
	#__NR_«no¶ìp
 35

	)

40 
	#__NR_gëôimî
 36

	)

41 
	#__NR_Æ¨m
 37

	)

42 
	#__NR_£tôimî
 38

	)

43 
	#__NR_gëpid
 39

	)

44 
	#__NR_£ndfûe
 40

	)

45 
	#__NR_sockë
 41

	)

46 
	#__NR_c⁄√˘
 42

	)

47 
	#__NR_ac˚±
 43

	)

48 
	#__NR_£ndto
 44

	)

49 
	#__NR_ªcv‰om
 45

	)

50 
	#__NR_£ndmsg
 46

	)

51 
	#__NR_ªcvmsg
 47

	)

52 
	#__NR_shutdown
 48

	)

53 
	#__NR_böd
 49

	)

54 
	#__NR_li°í
 50

	)

55 
	#__NR_gësock«me
 51

	)

56 
	#__NR_gë≥î«me
 52

	)

57 
	#__NR_sockë∑ú
 53

	)

58 
	#__NR_£tsock›t
 54

	)

59 
	#__NR_gësock›t
 55

	)

60 
	#__NR_˛⁄e
 56

	)

61 
	#__NR_f‹k
 57

	)

62 
	#__NR_vf‹k
 58

	)

63 
	#__NR_execve
 59

	)

64 
	#__NR_exô
 60

	)

65 
	#__NR_waô4
 61

	)

66 
	#__NR_kûl
 62

	)

67 
	#__NR_u«me
 63

	)

68 
	#__NR_£mgë
 64

	)

69 
	#__NR_£m›
 65

	)

70 
	#__NR_£m˘l
 66

	)

71 
	#__NR_shmdt
 67

	)

72 
	#__NR_msggë
 68

	)

73 
	#__NR_msg¢d
 69

	)

74 
	#__NR_msgrcv
 70

	)

75 
	#__NR_msg˘l
 71

	)

76 
	#__NR_f˙é
 72

	)

77 
	#__NR_Êock
 73

	)

78 
	#__NR_fsync
 74

	)

79 
	#__NR_fd©async
 75

	)

80 
	#__NR_åunˇã
 76

	)

81 
	#__NR_·runˇã
 77

	)

82 
	#__NR_gëdíts
 78

	)

83 
	#__NR_gëcwd
 79

	)

84 
	#__NR_chdú
 80

	)

85 
	#__NR_fchdú
 81

	)

86 
	#__NR_ª«me
 82

	)

87 
	#__NR_mkdú
 83

	)

88 
	#__NR_rmdú
 84

	)

89 
	#__NR_¸ót
 85

	)

90 
	#__NR_lök
 86

	)

91 
	#__NR_u∆ök
 87

	)

92 
	#__NR_symlök
 88

	)

93 
	#__NR_ªadlök
 89

	)

94 
	#__NR_chmod
 90

	)

95 
	#__NR_fchmod
 91

	)

96 
	#__NR_chown
 92

	)

97 
	#__NR_fchown
 93

	)

98 
	#__NR_lchown
 94

	)

99 
	#__NR_umask
 95

	)

100 
	#__NR_gëtimeofday
 96

	)

101 
	#__NR_gëæimô
 97

	)

102 
	#__NR_gërußge
 98

	)

103 
	#__NR_sysöfo
 99

	)

104 
	#__NR_times
 100

	)

105 
	#__NR_±ø˚
 101

	)

106 
	#__NR_gëuid
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_gëgid
 104

	)

109 
	#__NR_£tuid
 105

	)

110 
	#__NR_£tgid
 106

	)

111 
	#__NR_gëeuid
 107

	)

112 
	#__NR_gëegid
 108

	)

113 
	#__NR_£çgid
 109

	)

114 
	#__NR_gëµid
 110

	)

115 
	#__NR_gëpgΩ
 111

	)

116 
	#__NR_£tsid
 112

	)

117 
	#__NR_£åeuid
 113

	)

118 
	#__NR_£åegid
 114

	)

119 
	#__NR_gëgroups
 115

	)

120 
	#__NR_£tgroups
 116

	)

121 
	#__NR_£åesuid
 117

	)

122 
	#__NR_gëªsuid
 118

	)

123 
	#__NR_£åesgid
 119

	)

124 
	#__NR_gëªsgid
 120

	)

125 
	#__NR_gëpgid
 121

	)

126 
	#__NR_£tfsuid
 122

	)

127 
	#__NR_£tfsgid
 123

	)

128 
	#__NR_gësid
 124

	)

129 
	#__NR_ˇpgë
 125

	)

130 
	#__NR_ˇp£t
 126

	)

131 
	#__NR_π_sig≥ndög
 127

	)

132 
	#__NR_π_sigtimedwaô
 128

	)

133 
	#__NR_π_sigqueueöfo
 129

	)

134 
	#__NR_π_sigsu•íd
 130

	)

135 
	#__NR_sigÆt°ack
 131

	)

136 
	#__NR_utime
 132

	)

137 
	#__NR_mknod
 133

	)

138 
	#__NR_u£lib
 134

	)

139 
	#__NR_≥rs⁄Æôy
 135

	)

140 
	#__NR_u°©
 136

	)

141 
	#__NR_°©fs
 137

	)

142 
	#__NR_f°©fs
 138

	)

143 
	#__NR_sysfs
 139

	)

144 
	#__NR_gë¥i‹ôy
 140

	)

145 
	#__NR_£çri‹ôy
 141

	)

146 
	#__NR_sched_£ç¨am
 142

	)

147 
	#__NR_sched_gë∑øm
 143

	)

148 
	#__NR_sched_£tscheduÀr
 144

	)

149 
	#__NR_sched_gëscheduÀr
 145

	)

150 
	#__NR_sched_gë_¥i‹ôy_max
 146

	)

151 
	#__NR_sched_gë_¥i‹ôy_mö
 147

	)

152 
	#__NR_sched_º_gë_öãrvÆ
 148

	)

153 
	#__NR_mlock
 149

	)

154 
	#__NR_mu∆ock
 150

	)

155 
	#__NR_mlockÆl
 151

	)

156 
	#__NR_mu∆ockÆl
 152

	)

157 
	#__NR_vh™gup
 153

	)

158 
	#__NR_modify_ldt
 154

	)

159 
	#__NR_pivŸ_roŸ
 155

	)

160 
	#__NR__sys˘l
 156

	)

161 
	#__NR_¥˘l
 157

	)

162 
	#__NR_¨ch_¥˘l
 158

	)

163 
	#__NR_adjtimex
 159

	)

164 
	#__NR_£ålimô
 160

	)

165 
	#__NR_chroŸ
 161

	)

166 
	#__NR_sync
 162

	)

167 
	#__NR_ac˘
 163

	)

168 
	#__NR_£âimeofday
 164

	)

169 
	#__NR_mou¡
 165

	)

170 
	#__NR_umou¡2
 166

	)

171 
	#__NR_sw≠⁄
 167

	)

172 
	#__NR_sw≠off
 168

	)

173 
	#__NR_ªboŸ
 169

	)

174 
	#__NR_£tho°«me
 170

	)

175 
	#__NR_£tdomaö«me
 171

	)

176 
	#__NR_i›l
 172

	)

177 
	#__NR_i›îm
 173

	)

178 
	#__NR_¸óã_moduÀ
 174

	)

179 
	#__NR_öô_moduÀ
 175

	)

180 
	#__NR_dñëe_moduÀ
 176

	)

181 
	#__NR_gë_kî√l_syms
 177

	)

182 
	#__NR_quîy_moduÀ
 178

	)

183 
	#__NR_quŸa˘l
 179

	)

184 
	#__NR_nfs£rv˘l
 180

	)

185 
	#__NR_gëpmsg
 181

	)

186 
	#__NR_puçmsg
 182

	)

187 
	#__NR_afs_sysˇŒ
 183

	)

188 
	#__NR_tuxˇŒ
 184

	)

189 
	#__NR_£curôy
 185

	)

190 
	#__NR_gëtid
 186

	)

191 
	#__NR_ªadahód
 187

	)

192 
	#__NR_£tx©å
 188

	)

193 
	#__NR_l£tx©å
 189

	)

194 
	#__NR_f£tx©å
 190

	)

195 
	#__NR_gëx©å
 191

	)

196 
	#__NR_lgëx©å
 192

	)

197 
	#__NR_fgëx©å
 193

	)

198 
	#__NR_li°x©å
 194

	)

199 
	#__NR_Œi°x©å
 195

	)

200 
	#__NR_Êi°x©å
 196

	)

201 
	#__NR_ªmovex©å
 197

	)

202 
	#__NR_Ãemovex©å
 198

	)

203 
	#__NR_‰emovex©å
 199

	)

204 
	#__NR_tkûl
 200

	)

205 
	#__NR_time
 201

	)

206 
	#__NR_fuãx
 202

	)

207 
	#__NR_sched_£èfföôy
 203

	)

208 
	#__NR_sched_gëafföôy
 204

	)

209 
	#__NR_£t_thªad_¨ó
 205

	)

210 
	#__NR_io_£tup
 206

	)

211 
	#__NR_io_de°roy
 207

	)

212 
	#__NR_io_gëevíts
 208

	)

213 
	#__NR_io_submô
 209

	)

214 
	#__NR_io_ˇn˚l
 210

	)

215 
	#__NR_gë_thªad_¨ó
 211

	)

216 
	#__NR_lookup_dcookõ
 212

	)

217 
	#__NR_ïﬁl_¸óã
 213

	)

218 
	#__NR_ïﬁl_˘l_ﬁd
 214

	)

219 
	#__NR_ïﬁl_waô_ﬁd
 215

	)

220 
	#__NR_ªm≠_fûe_∑ges
 216

	)

221 
	#__NR_gëdíts64
 217

	)

222 
	#__NR_£t_tid_addªss
 218

	)

223 
	#__NR_ª°¨t_sysˇŒ
 219

	)

224 
	#__NR_£mtimed›
 220

	)

225 
	#__NR_Ádvi£64
 221

	)

226 
	#__NR_timî_¸óã
 222

	)

227 
	#__NR_timî_£âime
 223

	)

228 
	#__NR_timî_gëtime
 224

	)

229 
	#__NR_timî_gëovîrun
 225

	)

230 
	#__NR_timî_dñëe
 226

	)

231 
	#__NR_˛ock_£âime
 227

	)

232 
	#__NR_˛ock_gëtime
 228

	)

233 
	#__NR_˛ock_gëªs
 229

	)

234 
	#__NR_˛ock_«no¶ìp
 230

	)

235 
	#__NR_exô_group
 231

	)

236 
	#__NR_ïﬁl_waô
 232

	)

237 
	#__NR_ïﬁl_˘l
 233

	)

238 
	#__NR_tgkûl
 234

	)

239 
	#__NR_utimes
 235

	)

240 
	#__NR_v£rvî
 236

	)

241 
	#__NR_mböd
 237

	)

242 
	#__NR_£t_mempﬁicy
 238

	)

243 
	#__NR_gë_mempﬁicy
 239

	)

244 
	#__NR_mq_›í
 240

	)

245 
	#__NR_mq_u∆ök
 241

	)

246 
	#__NR_mq_timed£nd
 242

	)

247 
	#__NR_mq_timedª˚ive
 243

	)

248 
	#__NR_mq_nŸify
 244

	)

249 
	#__NR_mq_gë£èâr
 245

	)

250 
	#__NR_kexec_lﬂd
 246

	)

251 
	#__NR_waôid
 247

	)

252 
	#__NR_add_key
 248

	)

253 
	#__NR_ªque°_key
 249

	)

254 
	#__NR_key˘l
 250

	)

255 
	#__NR_i›rio_£t
 251

	)

256 
	#__NR_i›rio_gë
 252

	)

257 
	#__NR_öŸify_öô
 253

	)

258 
	#__NR_öŸify_add_w©ch
 254

	)

259 
	#__NR_öŸify_rm_w©ch
 255

	)

260 
	#__NR_migøã_∑ges
 256

	)

261 
	#__NR_›í©
 257

	)

262 
	#__NR_mkdú©
 258

	)

263 
	#__NR_mknod©
 259

	)

264 
	#__NR_fchow«t
 260

	)

265 
	#__NR_futimeßt
 261

	)

266 
	#__NR_√wf°©©
 262

	)

267 
	#__NR_u∆ök©
 263

	)

268 
	#__NR_ª«mót
 264

	)

269 
	#__NR_lök©
 265

	)

270 
	#__NR_symlök©
 266

	)

271 
	#__NR_ªadlök©
 267

	)

272 
	#__NR_fchmod©
 268

	)

273 
	#__NR_Ác˚sßt
 269

	)

274 
	#__NR_p£À˘6
 270

	)

275 
	#__NR_µﬁl
 271

	)

276 
	#__NR_unsh¨e
 272

	)

277 
	#__NR_£t_robu°_li°
 273

	)

278 
	#__NR_gë_robu°_li°
 274

	)

279 
	#__NR_•li˚
 275

	)

280 
	#__NR_ãe
 276

	)

281 
	#__NR_sync_fûe_ønge
 277

	)

282 
	#__NR_vm•li˚
 278

	)

283 
	#__NR_move_∑ges
 279

	)

284 
	#__NR_utimíßt
 280

	)

285 
	#__NR_ïﬁl_pwaô
 281

	)

286 
	#__NR_sig«lfd
 282

	)

287 
	#__NR_timîfd_¸óã
 283

	)

288 
	#__NR_evítfd
 284

	)

289 
	#__NR_ÁŒoˇã
 285

	)

290 
	#__NR_timîfd_£âime
 286

	)

291 
	#__NR_timîfd_gëtime
 287

	)

292 
	#__NR_ac˚±4
 288

	)

293 
	#__NR_sig«lfd4
 289

	)

294 
	#__NR_evítfd2
 290

	)

295 
	#__NR_ïﬁl_¸óã1
 291

	)

296 
	#__NR_dup3
 292

	)

297 
	#__NR_pùe2
 293

	)

298 
	#__NR_öŸify_öô1
 294

	)

299 
	#__NR_¥ódv
 295

	)

300 
	#__NR_pwrôev
 296

	)

301 
	#__NR_π_tgsigqueueöfo
 297

	)

302 
	#__NR_≥rf_evít_›í
 298

	)

303 
	#__NR_ªcvmmsg
 299

	)

304 
	#__NR_ÁnŸify_öô
 300

	)

305 
	#__NR_ÁnŸify_m¨k
 301

	)

306 
	#__NR_¥limô64
 302

	)

307 
	#__NR_«me_to_h™dÀ_©
 303

	)

308 
	#__NR_›í_by_h™dÀ_©
 304

	)

309 
	#__NR_˛ock_adjtime
 305

	)

310 
	#__NR_syncfs
 306

	)

311 
	#__NR_£ndmmsg
 307

	)

312 
	#__NR_£äs
 308

	)

313 
	#__NR_gë˝u
 309

	)

314 
	#__NR_¥o˚ss_vm_ªadv
 310

	)

315 
	#__NR_¥o˚ss_vm_wrôev
 311

	)

316 
	#__NR_kcmp
 312

	)

317 
	#__NR_föô_moduÀ
 313

	)

318 
	#__NR_sched_£èâr
 314

	)

319 
	#__NR_sched_gë©å
 315

	)

320 
	#__NR_ª«mót2
 316

	)

321 
	#__NR_£ccomp
 317

	)

322 
	#__NR_gëøndom
 318

	)

323 
	#__NR_memfd_¸óã
 319

	)

324 
	#__NR_kexec_fûe_lﬂd
 320

	)

325 
	#__NR_bpf
 321

	)

326 
	#__NR_execvót
 322

	)

327 
	#__NR_u£rÁu…fd
 323

	)

328 
	#__NR_memb¨rõr
 324

	)

329 
	#__NR_mlock2
 325

	)

	@/usr/include/asm/unistd_x32.h

1 #i‚de‡
_ASM_X86_UNISTD_X32_H


2 
	#_ASM_X86_UNISTD_X32_H
 1

	)

4 
	#__NR_ªad
 (
__X32_SYSCALL_BIT
 + 0)

	)

5 
	#__NR_wrôe
 (
__X32_SYSCALL_BIT
 + 1)

	)

6 
	#__NR_›í
 (
__X32_SYSCALL_BIT
 + 2)

	)

7 
	#__NR_˛o£
 (
__X32_SYSCALL_BIT
 + 3)

	)

8 
	#__NR_°©
 (
__X32_SYSCALL_BIT
 + 4)

	)

9 
	#__NR_f°©
 (
__X32_SYSCALL_BIT
 + 5)

	)

10 
	#__NR_l°©
 (
__X32_SYSCALL_BIT
 + 6)

	)

11 
	#__NR_pﬁl
 (
__X32_SYSCALL_BIT
 + 7)

	)

12 
	#__NR_l£ek
 (
__X32_SYSCALL_BIT
 + 8)

	)

13 
	#__NR_mm≠
 (
__X32_SYSCALL_BIT
 + 9)

	)

14 
	#__NR_m¥Ÿe˘
 (
__X32_SYSCALL_BIT
 + 10)

	)

15 
	#__NR_munm≠
 (
__X32_SYSCALL_BIT
 + 11)

	)

16 
	#__NR_brk
 (
__X32_SYSCALL_BIT
 + 12)

	)

17 
	#__NR_π_sig¥ocmask
 (
__X32_SYSCALL_BIT
 + 14)

	)

18 
	#__NR_¥ód64
 (
__X32_SYSCALL_BIT
 + 17)

	)

19 
	#__NR_pwrôe64
 (
__X32_SYSCALL_BIT
 + 18)

	)

20 
	#__NR_ac˚ss
 (
__X32_SYSCALL_BIT
 + 21)

	)

21 
	#__NR_pùe
 (
__X32_SYSCALL_BIT
 + 22)

	)

22 
	#__NR_£À˘
 (
__X32_SYSCALL_BIT
 + 23)

	)

23 
	#__NR_sched_yõld
 (
__X32_SYSCALL_BIT
 + 24)

	)

24 
	#__NR_mªm≠
 (
__X32_SYSCALL_BIT
 + 25)

	)

25 
	#__NR_msync
 (
__X32_SYSCALL_BIT
 + 26)

	)

26 
	#__NR_möc‹e
 (
__X32_SYSCALL_BIT
 + 27)

	)

27 
	#__NR_madvi£
 (
__X32_SYSCALL_BIT
 + 28)

	)

28 
	#__NR_shmgë
 (
__X32_SYSCALL_BIT
 + 29)

	)

29 
	#__NR_shm©
 (
__X32_SYSCALL_BIT
 + 30)

	)

30 
	#__NR_shm˘l
 (
__X32_SYSCALL_BIT
 + 31)

	)

31 
	#__NR_dup
 (
__X32_SYSCALL_BIT
 + 32)

	)

32 
	#__NR_dup2
 (
__X32_SYSCALL_BIT
 + 33)

	)

33 
	#__NR_∑u£
 (
__X32_SYSCALL_BIT
 + 34)

	)

34 
	#__NR_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 35)

	)

35 
	#__NR_gëôimî
 (
__X32_SYSCALL_BIT
 + 36)

	)

36 
	#__NR_Æ¨m
 (
__X32_SYSCALL_BIT
 + 37)

	)

37 
	#__NR_£tôimî
 (
__X32_SYSCALL_BIT
 + 38)

	)

38 
	#__NR_gëpid
 (
__X32_SYSCALL_BIT
 + 39)

	)

39 
	#__NR_£ndfûe
 (
__X32_SYSCALL_BIT
 + 40)

	)

40 
	#__NR_sockë
 (
__X32_SYSCALL_BIT
 + 41)

	)

41 
	#__NR_c⁄√˘
 (
__X32_SYSCALL_BIT
 + 42)

	)

42 
	#__NR_ac˚±
 (
__X32_SYSCALL_BIT
 + 43)

	)

43 
	#__NR_£ndto
 (
__X32_SYSCALL_BIT
 + 44)

	)

44 
	#__NR_shutdown
 (
__X32_SYSCALL_BIT
 + 48)

	)

45 
	#__NR_böd
 (
__X32_SYSCALL_BIT
 + 49)

	)

46 
	#__NR_li°í
 (
__X32_SYSCALL_BIT
 + 50)

	)

47 
	#__NR_gësock«me
 (
__X32_SYSCALL_BIT
 + 51)

	)

48 
	#__NR_gë≥î«me
 (
__X32_SYSCALL_BIT
 + 52)

	)

49 
	#__NR_sockë∑ú
 (
__X32_SYSCALL_BIT
 + 53)

	)

50 
	#__NR_˛⁄e
 (
__X32_SYSCALL_BIT
 + 56)

	)

51 
	#__NR_f‹k
 (
__X32_SYSCALL_BIT
 + 57)

	)

52 
	#__NR_vf‹k
 (
__X32_SYSCALL_BIT
 + 58)

	)

53 
	#__NR_exô
 (
__X32_SYSCALL_BIT
 + 60)

	)

54 
	#__NR_waô4
 (
__X32_SYSCALL_BIT
 + 61)

	)

55 
	#__NR_kûl
 (
__X32_SYSCALL_BIT
 + 62)

	)

56 
	#__NR_u«me
 (
__X32_SYSCALL_BIT
 + 63)

	)

57 
	#__NR_£mgë
 (
__X32_SYSCALL_BIT
 + 64)

	)

58 
	#__NR_£m›
 (
__X32_SYSCALL_BIT
 + 65)

	)

59 
	#__NR_£m˘l
 (
__X32_SYSCALL_BIT
 + 66)

	)

60 
	#__NR_shmdt
 (
__X32_SYSCALL_BIT
 + 67)

	)

61 
	#__NR_msggë
 (
__X32_SYSCALL_BIT
 + 68)

	)

62 
	#__NR_msg¢d
 (
__X32_SYSCALL_BIT
 + 69)

	)

63 
	#__NR_msgrcv
 (
__X32_SYSCALL_BIT
 + 70)

	)

64 
	#__NR_msg˘l
 (
__X32_SYSCALL_BIT
 + 71)

	)

65 
	#__NR_f˙é
 (
__X32_SYSCALL_BIT
 + 72)

	)

66 
	#__NR_Êock
 (
__X32_SYSCALL_BIT
 + 73)

	)

67 
	#__NR_fsync
 (
__X32_SYSCALL_BIT
 + 74)

	)

68 
	#__NR_fd©async
 (
__X32_SYSCALL_BIT
 + 75)

	)

69 
	#__NR_åunˇã
 (
__X32_SYSCALL_BIT
 + 76)

	)

70 
	#__NR_·runˇã
 (
__X32_SYSCALL_BIT
 + 77)

	)

71 
	#__NR_gëdíts
 (
__X32_SYSCALL_BIT
 + 78)

	)

72 
	#__NR_gëcwd
 (
__X32_SYSCALL_BIT
 + 79)

	)

73 
	#__NR_chdú
 (
__X32_SYSCALL_BIT
 + 80)

	)

74 
	#__NR_fchdú
 (
__X32_SYSCALL_BIT
 + 81)

	)

75 
	#__NR_ª«me
 (
__X32_SYSCALL_BIT
 + 82)

	)

76 
	#__NR_mkdú
 (
__X32_SYSCALL_BIT
 + 83)

	)

77 
	#__NR_rmdú
 (
__X32_SYSCALL_BIT
 + 84)

	)

78 
	#__NR_¸ót
 (
__X32_SYSCALL_BIT
 + 85)

	)

79 
	#__NR_lök
 (
__X32_SYSCALL_BIT
 + 86)

	)

80 
	#__NR_u∆ök
 (
__X32_SYSCALL_BIT
 + 87)

	)

81 
	#__NR_symlök
 (
__X32_SYSCALL_BIT
 + 88)

	)

82 
	#__NR_ªadlök
 (
__X32_SYSCALL_BIT
 + 89)

	)

83 
	#__NR_chmod
 (
__X32_SYSCALL_BIT
 + 90)

	)

84 
	#__NR_fchmod
 (
__X32_SYSCALL_BIT
 + 91)

	)

85 
	#__NR_chown
 (
__X32_SYSCALL_BIT
 + 92)

	)

86 
	#__NR_fchown
 (
__X32_SYSCALL_BIT
 + 93)

	)

87 
	#__NR_lchown
 (
__X32_SYSCALL_BIT
 + 94)

	)

88 
	#__NR_umask
 (
__X32_SYSCALL_BIT
 + 95)

	)

89 
	#__NR_gëtimeofday
 (
__X32_SYSCALL_BIT
 + 96)

	)

90 
	#__NR_gëæimô
 (
__X32_SYSCALL_BIT
 + 97)

	)

91 
	#__NR_gërußge
 (
__X32_SYSCALL_BIT
 + 98)

	)

92 
	#__NR_sysöfo
 (
__X32_SYSCALL_BIT
 + 99)

	)

93 
	#__NR_times
 (
__X32_SYSCALL_BIT
 + 100)

	)

94 
	#__NR_gëuid
 (
__X32_SYSCALL_BIT
 + 102)

	)

95 
	#__NR_sy¶og
 (
__X32_SYSCALL_BIT
 + 103)

	)

96 
	#__NR_gëgid
 (
__X32_SYSCALL_BIT
 + 104)

	)

97 
	#__NR_£tuid
 (
__X32_SYSCALL_BIT
 + 105)

	)

98 
	#__NR_£tgid
 (
__X32_SYSCALL_BIT
 + 106)

	)

99 
	#__NR_gëeuid
 (
__X32_SYSCALL_BIT
 + 107)

	)

100 
	#__NR_gëegid
 (
__X32_SYSCALL_BIT
 + 108)

	)

101 
	#__NR_£çgid
 (
__X32_SYSCALL_BIT
 + 109)

	)

102 
	#__NR_gëµid
 (
__X32_SYSCALL_BIT
 + 110)

	)

103 
	#__NR_gëpgΩ
 (
__X32_SYSCALL_BIT
 + 111)

	)

104 
	#__NR_£tsid
 (
__X32_SYSCALL_BIT
 + 112)

	)

105 
	#__NR_£åeuid
 (
__X32_SYSCALL_BIT
 + 113)

	)

106 
	#__NR_£åegid
 (
__X32_SYSCALL_BIT
 + 114)

	)

107 
	#__NR_gëgroups
 (
__X32_SYSCALL_BIT
 + 115)

	)

108 
	#__NR_£tgroups
 (
__X32_SYSCALL_BIT
 + 116)

	)

109 
	#__NR_£åesuid
 (
__X32_SYSCALL_BIT
 + 117)

	)

110 
	#__NR_gëªsuid
 (
__X32_SYSCALL_BIT
 + 118)

	)

111 
	#__NR_£åesgid
 (
__X32_SYSCALL_BIT
 + 119)

	)

112 
	#__NR_gëªsgid
 (
__X32_SYSCALL_BIT
 + 120)

	)

113 
	#__NR_gëpgid
 (
__X32_SYSCALL_BIT
 + 121)

	)

114 
	#__NR_£tfsuid
 (
__X32_SYSCALL_BIT
 + 122)

	)

115 
	#__NR_£tfsgid
 (
__X32_SYSCALL_BIT
 + 123)

	)

116 
	#__NR_gësid
 (
__X32_SYSCALL_BIT
 + 124)

	)

117 
	#__NR_ˇpgë
 (
__X32_SYSCALL_BIT
 + 125)

	)

118 
	#__NR_ˇp£t
 (
__X32_SYSCALL_BIT
 + 126)

	)

119 
	#__NR_π_sigsu•íd
 (
__X32_SYSCALL_BIT
 + 130)

	)

120 
	#__NR_utime
 (
__X32_SYSCALL_BIT
 + 132)

	)

121 
	#__NR_mknod
 (
__X32_SYSCALL_BIT
 + 133)

	)

122 
	#__NR_≥rs⁄Æôy
 (
__X32_SYSCALL_BIT
 + 135)

	)

123 
	#__NR_u°©
 (
__X32_SYSCALL_BIT
 + 136)

	)

124 
	#__NR_°©fs
 (
__X32_SYSCALL_BIT
 + 137)

	)

125 
	#__NR_f°©fs
 (
__X32_SYSCALL_BIT
 + 138)

	)

126 
	#__NR_sysfs
 (
__X32_SYSCALL_BIT
 + 139)

	)

127 
	#__NR_gë¥i‹ôy
 (
__X32_SYSCALL_BIT
 + 140)

	)

128 
	#__NR_£çri‹ôy
 (
__X32_SYSCALL_BIT
 + 141)

	)

129 
	#__NR_sched_£ç¨am
 (
__X32_SYSCALL_BIT
 + 142)

	)

130 
	#__NR_sched_gë∑øm
 (
__X32_SYSCALL_BIT
 + 143)

	)

131 
	#__NR_sched_£tscheduÀr
 (
__X32_SYSCALL_BIT
 + 144)

	)

132 
	#__NR_sched_gëscheduÀr
 (
__X32_SYSCALL_BIT
 + 145)

	)

133 
	#__NR_sched_gë_¥i‹ôy_max
 (
__X32_SYSCALL_BIT
 + 146)

	)

134 
	#__NR_sched_gë_¥i‹ôy_mö
 (
__X32_SYSCALL_BIT
 + 147)

	)

135 
	#__NR_sched_º_gë_öãrvÆ
 (
__X32_SYSCALL_BIT
 + 148)

	)

136 
	#__NR_mlock
 (
__X32_SYSCALL_BIT
 + 149)

	)

137 
	#__NR_mu∆ock
 (
__X32_SYSCALL_BIT
 + 150)

	)

138 
	#__NR_mlockÆl
 (
__X32_SYSCALL_BIT
 + 151)

	)

139 
	#__NR_mu∆ockÆl
 (
__X32_SYSCALL_BIT
 + 152)

	)

140 
	#__NR_vh™gup
 (
__X32_SYSCALL_BIT
 + 153)

	)

141 
	#__NR_modify_ldt
 (
__X32_SYSCALL_BIT
 + 154)

	)

142 
	#__NR_pivŸ_roŸ
 (
__X32_SYSCALL_BIT
 + 155)

	)

143 
	#__NR_¥˘l
 (
__X32_SYSCALL_BIT
 + 157)

	)

144 
	#__NR_¨ch_¥˘l
 (
__X32_SYSCALL_BIT
 + 158)

	)

145 
	#__NR_adjtimex
 (
__X32_SYSCALL_BIT
 + 159)

	)

146 
	#__NR_£ålimô
 (
__X32_SYSCALL_BIT
 + 160)

	)

147 
	#__NR_chroŸ
 (
__X32_SYSCALL_BIT
 + 161)

	)

148 
	#__NR_sync
 (
__X32_SYSCALL_BIT
 + 162)

	)

149 
	#__NR_ac˘
 (
__X32_SYSCALL_BIT
 + 163)

	)

150 
	#__NR_£âimeofday
 (
__X32_SYSCALL_BIT
 + 164)

	)

151 
	#__NR_mou¡
 (
__X32_SYSCALL_BIT
 + 165)

	)

152 
	#__NR_umou¡2
 (
__X32_SYSCALL_BIT
 + 166)

	)

153 
	#__NR_sw≠⁄
 (
__X32_SYSCALL_BIT
 + 167)

	)

154 
	#__NR_sw≠off
 (
__X32_SYSCALL_BIT
 + 168)

	)

155 
	#__NR_ªboŸ
 (
__X32_SYSCALL_BIT
 + 169)

	)

156 
	#__NR_£tho°«me
 (
__X32_SYSCALL_BIT
 + 170)

	)

157 
	#__NR_£tdomaö«me
 (
__X32_SYSCALL_BIT
 + 171)

	)

158 
	#__NR_i›l
 (
__X32_SYSCALL_BIT
 + 172)

	)

159 
	#__NR_i›îm
 (
__X32_SYSCALL_BIT
 + 173)

	)

160 
	#__NR_öô_moduÀ
 (
__X32_SYSCALL_BIT
 + 175)

	)

161 
	#__NR_dñëe_moduÀ
 (
__X32_SYSCALL_BIT
 + 176)

	)

162 
	#__NR_quŸa˘l
 (
__X32_SYSCALL_BIT
 + 179)

	)

163 
	#__NR_gëpmsg
 (
__X32_SYSCALL_BIT
 + 181)

	)

164 
	#__NR_puçmsg
 (
__X32_SYSCALL_BIT
 + 182)

	)

165 
	#__NR_afs_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 183)

	)

166 
	#__NR_tuxˇŒ
 (
__X32_SYSCALL_BIT
 + 184)

	)

167 
	#__NR_£curôy
 (
__X32_SYSCALL_BIT
 + 185)

	)

168 
	#__NR_gëtid
 (
__X32_SYSCALL_BIT
 + 186)

	)

169 
	#__NR_ªadahód
 (
__X32_SYSCALL_BIT
 + 187)

	)

170 
	#__NR_£tx©å
 (
__X32_SYSCALL_BIT
 + 188)

	)

171 
	#__NR_l£tx©å
 (
__X32_SYSCALL_BIT
 + 189)

	)

172 
	#__NR_f£tx©å
 (
__X32_SYSCALL_BIT
 + 190)

	)

173 
	#__NR_gëx©å
 (
__X32_SYSCALL_BIT
 + 191)

	)

174 
	#__NR_lgëx©å
 (
__X32_SYSCALL_BIT
 + 192)

	)

175 
	#__NR_fgëx©å
 (
__X32_SYSCALL_BIT
 + 193)

	)

176 
	#__NR_li°x©å
 (
__X32_SYSCALL_BIT
 + 194)

	)

177 
	#__NR_Œi°x©å
 (
__X32_SYSCALL_BIT
 + 195)

	)

178 
	#__NR_Êi°x©å
 (
__X32_SYSCALL_BIT
 + 196)

	)

179 
	#__NR_ªmovex©å
 (
__X32_SYSCALL_BIT
 + 197)

	)

180 
	#__NR_Ãemovex©å
 (
__X32_SYSCALL_BIT
 + 198)

	)

181 
	#__NR_‰emovex©å
 (
__X32_SYSCALL_BIT
 + 199)

	)

182 
	#__NR_tkûl
 (
__X32_SYSCALL_BIT
 + 200)

	)

183 
	#__NR_time
 (
__X32_SYSCALL_BIT
 + 201)

	)

184 
	#__NR_fuãx
 (
__X32_SYSCALL_BIT
 + 202)

	)

185 
	#__NR_sched_£èfföôy
 (
__X32_SYSCALL_BIT
 + 203)

	)

186 
	#__NR_sched_gëafföôy
 (
__X32_SYSCALL_BIT
 + 204)

	)

187 
	#__NR_io_de°roy
 (
__X32_SYSCALL_BIT
 + 207)

	)

188 
	#__NR_io_gëevíts
 (
__X32_SYSCALL_BIT
 + 208)

	)

189 
	#__NR_io_ˇn˚l
 (
__X32_SYSCALL_BIT
 + 210)

	)

190 
	#__NR_lookup_dcookõ
 (
__X32_SYSCALL_BIT
 + 212)

	)

191 
	#__NR_ïﬁl_¸óã
 (
__X32_SYSCALL_BIT
 + 213)

	)

192 
	#__NR_ªm≠_fûe_∑ges
 (
__X32_SYSCALL_BIT
 + 216)

	)

193 
	#__NR_gëdíts64
 (
__X32_SYSCALL_BIT
 + 217)

	)

194 
	#__NR_£t_tid_addªss
 (
__X32_SYSCALL_BIT
 + 218)

	)

195 
	#__NR_ª°¨t_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 219)

	)

196 
	#__NR_£mtimed›
 (
__X32_SYSCALL_BIT
 + 220)

	)

197 
	#__NR_Ádvi£64
 (
__X32_SYSCALL_BIT
 + 221)

	)

198 
	#__NR_timî_£âime
 (
__X32_SYSCALL_BIT
 + 223)

	)

199 
	#__NR_timî_gëtime
 (
__X32_SYSCALL_BIT
 + 224)

	)

200 
	#__NR_timî_gëovîrun
 (
__X32_SYSCALL_BIT
 + 225)

	)

201 
	#__NR_timî_dñëe
 (
__X32_SYSCALL_BIT
 + 226)

	)

202 
	#__NR_˛ock_£âime
 (
__X32_SYSCALL_BIT
 + 227)

	)

203 
	#__NR_˛ock_gëtime
 (
__X32_SYSCALL_BIT
 + 228)

	)

204 
	#__NR_˛ock_gëªs
 (
__X32_SYSCALL_BIT
 + 229)

	)

205 
	#__NR_˛ock_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 230)

	)

206 
	#__NR_exô_group
 (
__X32_SYSCALL_BIT
 + 231)

	)

207 
	#__NR_ïﬁl_waô
 (
__X32_SYSCALL_BIT
 + 232)

	)

208 
	#__NR_ïﬁl_˘l
 (
__X32_SYSCALL_BIT
 + 233)

	)

209 
	#__NR_tgkûl
 (
__X32_SYSCALL_BIT
 + 234)

	)

210 
	#__NR_utimes
 (
__X32_SYSCALL_BIT
 + 235)

	)

211 
	#__NR_mböd
 (
__X32_SYSCALL_BIT
 + 237)

	)

212 
	#__NR_£t_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 238)

	)

213 
	#__NR_gë_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 239)

	)

214 
	#__NR_mq_›í
 (
__X32_SYSCALL_BIT
 + 240)

	)

215 
	#__NR_mq_u∆ök
 (
__X32_SYSCALL_BIT
 + 241)

	)

216 
	#__NR_mq_timed£nd
 (
__X32_SYSCALL_BIT
 + 242)

	)

217 
	#__NR_mq_timedª˚ive
 (
__X32_SYSCALL_BIT
 + 243)

	)

218 
	#__NR_mq_gë£èâr
 (
__X32_SYSCALL_BIT
 + 245)

	)

219 
	#__NR_add_key
 (
__X32_SYSCALL_BIT
 + 248)

	)

220 
	#__NR_ªque°_key
 (
__X32_SYSCALL_BIT
 + 249)

	)

221 
	#__NR_key˘l
 (
__X32_SYSCALL_BIT
 + 250)

	)

222 
	#__NR_i›rio_£t
 (
__X32_SYSCALL_BIT
 + 251)

	)

223 
	#__NR_i›rio_gë
 (
__X32_SYSCALL_BIT
 + 252)

	)

224 
	#__NR_öŸify_öô
 (
__X32_SYSCALL_BIT
 + 253)

	)

225 
	#__NR_öŸify_add_w©ch
 (
__X32_SYSCALL_BIT
 + 254)

	)

226 
	#__NR_öŸify_rm_w©ch
 (
__X32_SYSCALL_BIT
 + 255)

	)

227 
	#__NR_migøã_∑ges
 (
__X32_SYSCALL_BIT
 + 256)

	)

228 
	#__NR_›í©
 (
__X32_SYSCALL_BIT
 + 257)

	)

229 
	#__NR_mkdú©
 (
__X32_SYSCALL_BIT
 + 258)

	)

230 
	#__NR_mknod©
 (
__X32_SYSCALL_BIT
 + 259)

	)

231 
	#__NR_fchow«t
 (
__X32_SYSCALL_BIT
 + 260)

	)

232 
	#__NR_futimeßt
 (
__X32_SYSCALL_BIT
 + 261)

	)

233 
	#__NR_√wf°©©
 (
__X32_SYSCALL_BIT
 + 262)

	)

234 
	#__NR_u∆ök©
 (
__X32_SYSCALL_BIT
 + 263)

	)

235 
	#__NR_ª«mót
 (
__X32_SYSCALL_BIT
 + 264)

	)

236 
	#__NR_lök©
 (
__X32_SYSCALL_BIT
 + 265)

	)

237 
	#__NR_symlök©
 (
__X32_SYSCALL_BIT
 + 266)

	)

238 
	#__NR_ªadlök©
 (
__X32_SYSCALL_BIT
 + 267)

	)

239 
	#__NR_fchmod©
 (
__X32_SYSCALL_BIT
 + 268)

	)

240 
	#__NR_Ác˚sßt
 (
__X32_SYSCALL_BIT
 + 269)

	)

241 
	#__NR_p£À˘6
 (
__X32_SYSCALL_BIT
 + 270)

	)

242 
	#__NR_µﬁl
 (
__X32_SYSCALL_BIT
 + 271)

	)

243 
	#__NR_unsh¨e
 (
__X32_SYSCALL_BIT
 + 272)

	)

244 
	#__NR_•li˚
 (
__X32_SYSCALL_BIT
 + 275)

	)

245 
	#__NR_ãe
 (
__X32_SYSCALL_BIT
 + 276)

	)

246 
	#__NR_sync_fûe_ønge
 (
__X32_SYSCALL_BIT
 + 277)

	)

247 
	#__NR_utimíßt
 (
__X32_SYSCALL_BIT
 + 280)

	)

248 
	#__NR_ïﬁl_pwaô
 (
__X32_SYSCALL_BIT
 + 281)

	)

249 
	#__NR_sig«lfd
 (
__X32_SYSCALL_BIT
 + 282)

	)

250 
	#__NR_timîfd_¸óã
 (
__X32_SYSCALL_BIT
 + 283)

	)

251 
	#__NR_evítfd
 (
__X32_SYSCALL_BIT
 + 284)

	)

252 
	#__NR_ÁŒoˇã
 (
__X32_SYSCALL_BIT
 + 285)

	)

253 
	#__NR_timîfd_£âime
 (
__X32_SYSCALL_BIT
 + 286)

	)

254 
	#__NR_timîfd_gëtime
 (
__X32_SYSCALL_BIT
 + 287)

	)

255 
	#__NR_ac˚±4
 (
__X32_SYSCALL_BIT
 + 288)

	)

256 
	#__NR_sig«lfd4
 (
__X32_SYSCALL_BIT
 + 289)

	)

257 
	#__NR_evítfd2
 (
__X32_SYSCALL_BIT
 + 290)

	)

258 
	#__NR_ïﬁl_¸óã1
 (
__X32_SYSCALL_BIT
 + 291)

	)

259 
	#__NR_dup3
 (
__X32_SYSCALL_BIT
 + 292)

	)

260 
	#__NR_pùe2
 (
__X32_SYSCALL_BIT
 + 293)

	)

261 
	#__NR_öŸify_öô1
 (
__X32_SYSCALL_BIT
 + 294)

	)

262 
	#__NR_≥rf_evít_›í
 (
__X32_SYSCALL_BIT
 + 298)

	)

263 
	#__NR_ÁnŸify_öô
 (
__X32_SYSCALL_BIT
 + 300)

	)

264 
	#__NR_ÁnŸify_m¨k
 (
__X32_SYSCALL_BIT
 + 301)

	)

265 
	#__NR_¥limô64
 (
__X32_SYSCALL_BIT
 + 302)

	)

266 
	#__NR_«me_to_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 303)

	)

267 
	#__NR_›í_by_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 304)

	)

268 
	#__NR_˛ock_adjtime
 (
__X32_SYSCALL_BIT
 + 305)

	)

269 
	#__NR_syncfs
 (
__X32_SYSCALL_BIT
 + 306)

	)

270 
	#__NR_£äs
 (
__X32_SYSCALL_BIT
 + 308)

	)

271 
	#__NR_gë˝u
 (
__X32_SYSCALL_BIT
 + 309)

	)

272 
	#__NR_kcmp
 (
__X32_SYSCALL_BIT
 + 312)

	)

273 
	#__NR_föô_moduÀ
 (
__X32_SYSCALL_BIT
 + 313)

	)

274 
	#__NR_sched_£èâr
 (
__X32_SYSCALL_BIT
 + 314)

	)

275 
	#__NR_sched_gë©å
 (
__X32_SYSCALL_BIT
 + 315)

	)

276 
	#__NR_ª«mót2
 (
__X32_SYSCALL_BIT
 + 316)

	)

277 
	#__NR_£ccomp
 (
__X32_SYSCALL_BIT
 + 317)

	)

278 
	#__NR_gëøndom
 (
__X32_SYSCALL_BIT
 + 318)

	)

279 
	#__NR_memfd_¸óã
 (
__X32_SYSCALL_BIT
 + 319)

	)

280 
	#__NR_kexec_fûe_lﬂd
 (
__X32_SYSCALL_BIT
 + 320)

	)

281 
	#__NR_bpf
 (
__X32_SYSCALL_BIT
 + 321)

	)

282 
	#__NR_u£rÁu…fd
 (
__X32_SYSCALL_BIT
 + 323)

	)

283 
	#__NR_memb¨rõr
 (
__X32_SYSCALL_BIT
 + 324)

	)

284 
	#__NR_mlock2
 (
__X32_SYSCALL_BIT
 + 325)

	)

285 
	#__NR_π_siga˘i⁄
 (
__X32_SYSCALL_BIT
 + 512)

	)

286 
	#__NR_π_sigªtu∫
 (
__X32_SYSCALL_BIT
 + 513)

	)

287 
	#__NR_io˘l
 (
__X32_SYSCALL_BIT
 + 514)

	)

288 
	#__NR_ªadv
 (
__X32_SYSCALL_BIT
 + 515)

	)

289 
	#__NR_wrôev
 (
__X32_SYSCALL_BIT
 + 516)

	)

290 
	#__NR_ªcv‰om
 (
__X32_SYSCALL_BIT
 + 517)

	)

291 
	#__NR_£ndmsg
 (
__X32_SYSCALL_BIT
 + 518)

	)

292 
	#__NR_ªcvmsg
 (
__X32_SYSCALL_BIT
 + 519)

	)

293 
	#__NR_execve
 (
__X32_SYSCALL_BIT
 + 520)

	)

294 
	#__NR_±ø˚
 (
__X32_SYSCALL_BIT
 + 521)

	)

295 
	#__NR_π_sig≥ndög
 (
__X32_SYSCALL_BIT
 + 522)

	)

296 
	#__NR_π_sigtimedwaô
 (
__X32_SYSCALL_BIT
 + 523)

	)

297 
	#__NR_π_sigqueueöfo
 (
__X32_SYSCALL_BIT
 + 524)

	)

298 
	#__NR_sigÆt°ack
 (
__X32_SYSCALL_BIT
 + 525)

	)

299 
	#__NR_timî_¸óã
 (
__X32_SYSCALL_BIT
 + 526)

	)

300 
	#__NR_mq_nŸify
 (
__X32_SYSCALL_BIT
 + 527)

	)

301 
	#__NR_kexec_lﬂd
 (
__X32_SYSCALL_BIT
 + 528)

	)

302 
	#__NR_waôid
 (
__X32_SYSCALL_BIT
 + 529)

	)

303 
	#__NR_£t_robu°_li°
 (
__X32_SYSCALL_BIT
 + 530)

	)

304 
	#__NR_gë_robu°_li°
 (
__X32_SYSCALL_BIT
 + 531)

	)

305 
	#__NR_vm•li˚
 (
__X32_SYSCALL_BIT
 + 532)

	)

306 
	#__NR_move_∑ges
 (
__X32_SYSCALL_BIT
 + 533)

	)

307 
	#__NR_¥ódv
 (
__X32_SYSCALL_BIT
 + 534)

	)

308 
	#__NR_pwrôev
 (
__X32_SYSCALL_BIT
 + 535)

	)

309 
	#__NR_π_tgsigqueueöfo
 (
__X32_SYSCALL_BIT
 + 536)

	)

310 
	#__NR_ªcvmmsg
 (
__X32_SYSCALL_BIT
 + 537)

	)

311 
	#__NR_£ndmmsg
 (
__X32_SYSCALL_BIT
 + 538)

	)

312 
	#__NR_¥o˚ss_vm_ªadv
 (
__X32_SYSCALL_BIT
 + 539)

	)

313 
	#__NR_¥o˚ss_vm_wrôev
 (
__X32_SYSCALL_BIT
 + 540)

	)

314 
	#__NR_£tsock›t
 (
__X32_SYSCALL_BIT
 + 541)

	)

315 
	#__NR_gësock›t
 (
__X32_SYSCALL_BIT
 + 542)

	)

316 
	#__NR_io_£tup
 (
__X32_SYSCALL_BIT
 + 543)

	)

317 
	#__NR_io_submô
 (
__X32_SYSCALL_BIT
 + 544)

	)

318 
	#__NR_execvót
 (
__X32_SYSCALL_BIT
 + 545)

	)

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 (020000000 | 
__O_DIRECTORY
)

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

131 #ifde‡
__USE_GNU


132 
	#F_OFD_GETLK
 36

	)

133 
	#F_OFD_SETLK
 37

	)

134 
	#F_OFD_SETLKW
 38

	)

137 #ifde‡
__USE_LARGEFILE64


138 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

141 #ifde‡
__USE_XOPEN2K8


142 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

143 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

144 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

147 #ifde‡
__USE_GNU


148 
	#O_DIRECT
 
__O_DIRECT


	)

149 
	#O_NOATIME
 
__O_NOATIME


	)

150 
	#O_PATH
 
__O_PATH


	)

151 
	#O_TMPFILE
 
__O_TMPFILE


	)

157 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


158 
	#O_DSYNC
 
__O_DSYNC


	)

159 #i‡
deföed
 
__O_RSYNC


160 
	#O_RSYNC
 
__O_RSYNC


	)

162 
	#O_RSYNC
 
O_SYNC


	)

167 
	#F_DUPFD
 0

	)

168 
	#F_GETFD
 1

	)

169 
	#F_SETFD
 2

	)

170 
	#F_GETFL
 3

	)

171 
	#F_SETFL
 4

	)

173 #i‚de‡
__F_SETOWN


174 
	#__F_SETOWN
 8

	)

175 
	#__F_GETOWN
 9

	)

178 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


179 
	#F_SETOWN
 
__F_SETOWN


	)

180 
	#F_GETOWN
 
__F_GETOWN


	)

183 #i‚de‡
__F_SETSIG


184 
	#__F_SETSIG
 10

	)

185 
	#__F_GETSIG
 11

	)

187 #i‚de‡
__F_SETOWN_EX


188 
	#__F_SETOWN_EX
 15

	)

189 
	#__F_GETOWN_EX
 16

	)

192 #ifde‡
__USE_GNU


193 
	#F_SETSIG
 
__F_SETSIG


	)

194 
	#F_GETSIG
 
__F_GETSIG


	)

195 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

196 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

199 #ifde‡
__USE_GNU


200 
	#F_SETLEASE
 1024

	)

201 
	#F_GETLEASE
 1025

	)

202 
	#F_NOTIFY
 1026

	)

203 
	#F_SETPIPE_SZ
 1031

	)

204 
	#F_GETPIPE_SZ
 1032

	)

206 #ifde‡
__USE_XOPEN2K8


207 
	#F_DUPFD_CLOEXEC
 1030

	)

212 
	#FD_CLOEXEC
 1

	)

214 #i‚de‡
F_RDLCK


216 
	#F_RDLCK
 0

	)

217 
	#F_WRLCK
 1

	)

218 
	#F_UNLCK
 2

	)

223 #i‚de‡
F_EXLCK


224 
	#F_EXLCK
 4

	)

225 
	#F_SHLCK
 8

	)

228 #ifde‡
__USE_MISC


230 
	#LOCK_SH
 1

	)

231 
	#LOCK_EX
 2

	)

232 
	#LOCK_NB
 4

	)

234 
	#LOCK_UN
 8

	)

237 #ifde‡
__USE_GNU


238 
	#LOCK_MAND
 32

	)

239 
	#LOCK_READ
 64

	)

240 
	#LOCK_WRITE
 128

	)

241 
	#LOCK_RW
 192

	)

244 #ifde‡
__USE_GNU


246 
	#DN_ACCESS
 0x00000001

	)

247 
	#DN_MODIFY
 0x00000002

	)

248 
	#DN_CREATE
 0x00000004

	)

249 
	#DN_DELETE
 0x00000008

	)

250 
	#DN_RENAME
 0x00000010

	)

251 
	#DN_ATTRIB
 0x00000020

	)

252 
	#DN_MULTISHOT
 0x80000000

	)

256 #ifde‡
__USE_GNU


258 
	e__pid_ty≥


260 
	mF_OWNER_TID
 = 0,

261 
	mF_OWNER_PID
,

262 
	mF_OWNER_PGRP
,

263 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


267 
	sf_ow√r_ex


269 
__pid_ty≥
 
	mty≥
;

270 
__pid_t
 
	mpid
;

276 #ifdef 
__USE_MISC


277 
	#FAPPEND
 
O_APPEND


	)

278 
	#FFSYNC
 
O_FSYNC


	)

279 
	#FASYNC
 
O_ASYNC


	)

280 
	#FNONBLOCK
 
O_NONBLOCK


	)

281 
	#FNDELAY
 
O_NDELAY


	)

284 #i‚de‡
__POSIX_FADV_DONTNEED


285 
	#__POSIX_FADV_DONTNEED
 4

	)

286 
	#__POSIX_FADV_NOREUSE
 5

	)

289 #ifde‡
__USE_XOPEN2K


290 
	#POSIX_FADV_NORMAL
 0

	)

291 
	#POSIX_FADV_RANDOM
 1

	)

292 
	#POSIX_FADV_SEQUENTIAL
 2

	)

293 
	#POSIX_FADV_WILLNEED
 3

	)

294 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

295 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

299 #ifde‡
__USE_GNU


301 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

304 
	#SYNC_FILE_RANGE_WRITE
 2

	)

307 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

312 
	#SPLICE_F_MOVE
 1

	)

313 
	#SPLICE_F_NONBLOCK
 2

	)

316 
	#SPLICE_F_MORE
 4

	)

317 
	#SPLICE_F_GIFT
 8

	)

321 
	#FALLOC_FL_KEEP_SIZE
 1

	)

324 
	#FALLOC_FL_PUNCH_HOLE
 2

	)

325 
	#FALLOC_FL_COLLAPSE_RANGE
 8

	)

328 
	#FALLOC_FL_ZERO_RANGE
 16

	)

333 
	sfûe_h™dÀ


335 
	mh™dÀ_byãs
;

336 
	mh™dÀ_ty≥
;

338 
	mf_h™dÀ
[0];

342 
	#MAX_HANDLE_SZ
 128

	)

346 #ifde‡
__USE_ATFILE


347 
	#AT_FDCWD
 -100

	)

350 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

351 
	#AT_REMOVEDIR
 0x200

	)

353 
	#AT_SYMLINK_FOLLOW
 0x400

	)

354 #ifde‡
__USE_GNU


355 
	#AT_NO_AUTOMOUNT
 0x800

	)

357 
	#AT_EMPTY_PATH
 0x1000

	)

359 
	#AT_EACCESS
 0x200

	)

363 
	g__BEGIN_DECLS


365 #ifde‡
__USE_GNU


368 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

369 
__THROW
;

376 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

377 
__Êags
);

384 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

385 
size_t
 
__cou¡
, 
__Êags
);

391 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

392 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

393 
__Êags
);

399 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

400 
__Êags
);

406 #i‚de‡
__USE_FILE_OFFSET64


407 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

409 #ifde‡
__REDIRECT


410 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

411 
__off64_t
 
__Àn
),

412 
ÁŒoˇã64
);

414 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

417 #ifde‡
__USE_LARGEFILE64


418 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

419 
__off64_t
 
__Àn
);

424 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

425 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

426 
__Êags
Ë
__THROW
;

432 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

433 
__Êags
);

437 
__END_DECLS


	@/usr/include/bits/ioctl-types.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	swösize


29 
	mws_row
;

30 
	mws_cﬁ
;

31 
	mws_xpixñ
;

32 
	mws_ypixñ
;

35 
	#NCC
 8

	)

36 
	sãrmio


38 
	mc_iÊag
;

39 
	mc_oÊag
;

40 
	mc_cÊag
;

41 
	mc_lÊag
;

42 
	mc_löe
;

43 
	mc_cc
[
NCC
];

47 
	#TIOCM_LE
 0x001

	)

48 
	#TIOCM_DTR
 0x002

	)

49 
	#TIOCM_RTS
 0x004

	)

50 
	#TIOCM_ST
 0x008

	)

51 
	#TIOCM_SR
 0x010

	)

52 
	#TIOCM_CTS
 0x020

	)

53 
	#TIOCM_CAR
 0x040

	)

54 
	#TIOCM_RNG
 0x080

	)

55 
	#TIOCM_DSR
 0x100

	)

56 
	#TIOCM_CD
 
TIOCM_CAR


	)

57 
	#TIOCM_RI
 
TIOCM_RNG


	)

62 
	#N_TTY
 0

	)

63 
	#N_SLIP
 1

	)

64 
	#N_MOUSE
 2

	)

65 
	#N_PPP
 3

	)

66 
	#N_STRIP
 4

	)

67 
	#N_AX25
 5

	)

68 
	#N_X25
 6

	)

69 
	#N_6PACK
 7

	)

70 
	#N_MASC
 8

	)

71 
	#N_R3964
 9

	)

72 
	#N_PROFIBUS_FDL
 10

	)

73 
	#N_IRDA
 11

	)

74 
	#N_SMSBLOCK
 12

	)

75 
	#N_HDLC
 13

	)

76 
	#N_SYNC_PPP
 14

	)

77 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

18 #i‚de‡
_SYS_IOCTL_H


23 
	~<asm/io˘ls.h
>

26 
	#SIOCADDRT
 0x890B

	)

27 
	#SIOCDELRT
 0x890C

	)

28 
	#SIOCRTMSG
 0x890D

	)

31 
	#SIOCGIFNAME
 0x8910

	)

32 
	#SIOCSIFLINK
 0x8911

	)

33 
	#SIOCGIFCONF
 0x8912

	)

34 
	#SIOCGIFFLAGS
 0x8913

	)

35 
	#SIOCSIFFLAGS
 0x8914

	)

36 
	#SIOCGIFADDR
 0x8915

	)

37 
	#SIOCSIFADDR
 0x8916

	)

38 
	#SIOCGIFDSTADDR
 0x8917

	)

39 
	#SIOCSIFDSTADDR
 0x8918

	)

40 
	#SIOCGIFBRDADDR
 0x8919

	)

41 
	#SIOCSIFBRDADDR
 0x891®

	)

42 
	#SIOCGIFNETMASK
 0x891b

	)

43 
	#SIOCSIFNETMASK
 0x891¯

	)

44 
	#SIOCGIFMETRIC
 0x891d

	)

45 
	#SIOCSIFMETRIC
 0x891ê

	)

46 
	#SIOCGIFMEM
 0x891‡

	)

47 
	#SIOCSIFMEM
 0x8920

	)

48 
	#SIOCGIFMTU
 0x8921

	)

49 
	#SIOCSIFMTU
 0x8922

	)

50 
	#SIOCSIFNAME
 0x8923

	)

51 
	#SIOCSIFHWADDR
 0x8924

	)

52 
	#SIOCGIFENCAP
 0x8925

	)

53 
	#SIOCSIFENCAP
 0x8926

	)

54 
	#SIOCGIFHWADDR
 0x8927

	)

55 
	#SIOCGIFSLAVE
 0x8929

	)

56 
	#SIOCSIFSLAVE
 0x8930

	)

57 
	#SIOCADDMULTI
 0x8931

	)

58 
	#SIOCDELMULTI
 0x8932

	)

59 
	#SIOCGIFINDEX
 0x8933

	)

60 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

61 
	#SIOCSIFPFLAGS
 0x8934

	)

62 
	#SIOCGIFPFLAGS
 0x8935

	)

63 
	#SIOCDIFADDR
 0x8936

	)

64 
	#SIOCSIFHWBROADCAST
 0x8937

	)

65 
	#SIOCGIFCOUNT
 0x8938

	)

67 
	#SIOCGIFBR
 0x8940

	)

68 
	#SIOCSIFBR
 0x8941

	)

70 
	#SIOCGIFTXQLEN
 0x8942

	)

71 
	#SIOCSIFTXQLEN
 0x8943

	)

76 
	#SIOCDARP
 0x8953

	)

77 
	#SIOCGARP
 0x8954

	)

78 
	#SIOCSARP
 0x8955

	)

81 
	#SIOCDRARP
 0x8960

	)

82 
	#SIOCGRARP
 0x8961

	)

83 
	#SIOCSRARP
 0x8962

	)

87 
	#SIOCGIFMAP
 0x8970

	)

88 
	#SIOCSIFMAP
 0x8971

	)

92 
	#SIOCADDDLCI
 0x8980

	)

93 
	#SIOCDELDLCI
 0x8981

	)

102 
	#SIOCDEVPRIVATE
 0x89F0

	)

108 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/libm-simd-decl-stubs.h

19 #i‚de‡
_MATH_H


33 #i‚de‡
_BITS_LIBM_SIMD_DECL_STUBS_H


34 
	#_BITS_LIBM_SIMD_DECL_STUBS_H
 1

	)

36 
	#__DECL_SIMD_cos


	)

37 
	#__DECL_SIMD_cosf


	)

38 
	#__DECL_SIMD_co¶


	)

40 
	#__DECL_SIMD_sö


	)

41 
	#__DECL_SIMD_söf


	)

42 
	#__DECL_SIMD_söl


	)

44 
	#__DECL_SIMD_söcos


	)

45 
	#__DECL_SIMD_söcosf


	)

46 
	#__DECL_SIMD_söco¶


	)

48 
	#__DECL_SIMD_log


	)

49 
	#__DECL_SIMD_logf


	)

50 
	#__DECL_SIMD_logl


	)

52 
	#__DECL_SIMD_exp


	)

53 
	#__DECL_SIMD_expf


	)

54 
	#__DECL_SIMD_ex∂


	)

56 
	#__DECL_SIMD_pow


	)

57 
	#__DECL_SIMD_powf


	)

58 
	#__DECL_SIMD_powl


	)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/mman-linux.h

19 #i‚de‡
_SYS_MMAN_H


35 
	#PROT_READ
 0x1

	)

36 
	#PROT_WRITE
 0x2

	)

37 
	#PROT_EXEC
 0x4

	)

38 
	#PROT_NONE
 0x0

	)

39 
	#PROT_GROWSDOWN
 0x01000000

	)

41 
	#PROT_GROWSUP
 0x02000000

	)

45 
	#MAP_SHARED
 0x01

	)

46 
	#MAP_PRIVATE
 0x02

	)

47 #ifde‡
__USE_MISC


48 
	#MAP_TYPE
 0x0‡

	)

52 
	#MAP_FIXED
 0x10

	)

53 #ifde‡
__USE_MISC


54 
	#MAP_FILE
 0

	)

55 #ifde‡
__MAP_ANONYMOUS


56 
	#MAP_ANONYMOUS
 
__MAP_ANONYMOUS


	)

58 
	#MAP_ANONYMOUS
 0x20

	)

60 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

62 
	#MAP_HUGE_SHIFT
 26

	)

63 
	#MAP_HUGE_MASK
 0x3f

	)

67 
	#MS_ASYNC
 1

	)

68 
	#MS_SYNC
 4

	)

69 
	#MS_INVALIDATE
 2

	)

72 #ifde‡
__USE_GNU


73 
	#MREMAP_MAYMOVE
 1

	)

74 
	#MREMAP_FIXED
 2

	)

78 #ifde‡
__USE_MISC


79 
	#MADV_NORMAL
 0

	)

80 
	#MADV_RANDOM
 1

	)

81 
	#MADV_SEQUENTIAL
 2

	)

82 
	#MADV_WILLNEED
 3

	)

83 
	#MADV_DONTNEED
 4

	)

84 
	#MADV_REMOVE
 9

	)

85 
	#MADV_DONTFORK
 10

	)

86 
	#MADV_DOFORK
 11

	)

87 
	#MADV_MERGEABLE
 12

	)

88 
	#MADV_UNMERGEABLE
 13

	)

89 
	#MADV_HUGEPAGE
 14

	)

90 
	#MADV_NOHUGEPAGE
 15

	)

91 
	#MADV_DONTDUMP
 16

	)

93 
	#MADV_DODUMP
 17

	)

94 
	#MADV_HWPOISON
 100

	)

98 #ifde‡
__USE_XOPEN2K


99 
	#POSIX_MADV_NORMAL
 0

	)

100 
	#POSIX_MADV_RANDOM
 1

	)

101 
	#POSIX_MADV_SEQUENTIAL
 2

	)

102 
	#POSIX_MADV_WILLNEED
 3

	)

103 
	#POSIX_MADV_DONTNEED
 4

	)

107 #i‚de‡
MCL_CURRENT


108 
	#MCL_CURRENT
 1

	)

109 
	#MCL_FUTURE
 2

	)

111 
	#MCL_ONFAULT
 4

	)

	@/usr/include/bits/resource.h

19 #i‚de‡
_SYS_RESOURCE_H


23 
	~<bôs/ty≥s.h
>

31 
	e__æimô_ªsour˚


34 
	mRLIMIT_CPU
 = 0,

35 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

38 
	mRLIMIT_FSIZE
 = 1,

39 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

42 
	mRLIMIT_DATA
 = 2,

43 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

46 
	mRLIMIT_STACK
 = 3,

47 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

50 
	mRLIMIT_CORE
 = 4,

51 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

57 
	m__RLIMIT_RSS
 = 5,

58 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

61 
	mRLIMIT_NOFILE
 = 7,

62 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

63 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

64 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

67 
	mRLIMIT_AS
 = 9,

68 
	#RLIMIT_AS
 
RLIMIT_AS


	)

71 
	m__RLIMIT_NPROC
 = 6,

72 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

75 
	m__RLIMIT_MEMLOCK
 = 8,

76 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

79 
	m__RLIMIT_LOCKS
 = 10,

80 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

83 
	m__RLIMIT_SIGPENDING
 = 11,

84 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

87 
	m__RLIMIT_MSGQUEUE
 = 12,

88 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

93 
	m__RLIMIT_NICE
 = 13,

94 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

98 
	m__RLIMIT_RTPRIO
 = 14,

99 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

104 
	m__RLIMIT_RTTIME
 = 15,

105 
	#RLIMIT_RTTIME
 
__RLIMIT_RTTIME


	)

107 
	m__RLIMIT_NLIMITS
 = 16,

108 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


109 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

110 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

114 #i‚de‡
__USE_FILE_OFFSET64


115 
	#RLIM_INFINITY
 ((
__æim_t
Ë-1)

	)

117 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

120 #ifde‡
__USE_LARGEFILE64


121 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

125 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

126 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

130 #i‚de‡
__USE_FILE_OFFSET64


131 
__æim_t
 
	tæim_t
;

133 
__æim64_t
 
	tæim_t
;

135 #ifde‡
__USE_LARGEFILE64


136 
__æim64_t
 
	tæim64_t
;

139 
	sæimô


142 
æim_t
 
	mæim_cur
;

144 
æim_t
 
	mæim_max
;

147 #ifde‡
__USE_LARGEFILE64


148 
	sæimô64


151 
æim64_t
 
	mæim_cur
;

153 
æim64_t
 
	mæim_max
;

158 
	e__rußge_who


161 
	mRUSAGE_SELF
 = 0,

162 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

165 
	mRUSAGE_CHILDREN
 = -1

166 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

168 #ifde‡
__USE_GNU


171 
	mRUSAGE_THREAD
 = 1

172 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

174 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

178 
	#__√ed_timevÆ


	)

179 
	~<bôs/time.h
>

187 
	srußge


190 
timevÆ
 
	mru_utime
;

192 
timevÆ
 
	mru_°ime
;

194 
__exãnsi⁄__
 union

196 
	mru_maxrss
;

197 
__sysˇŒ_¶⁄g_t
 
	m__ru_maxrss_w‹d
;

202 
__exãnsi⁄__
 union

204 
	mru_ixrss
;

205 
__sysˇŒ_¶⁄g_t
 
	m__ru_ixrss_w‹d
;

208 
__exãnsi⁄__
 union

210 
	mru_idrss
;

211 
__sysˇŒ_¶⁄g_t
 
	m__ru_idrss_w‹d
;

214 
__exãnsi⁄__
 union

216 
	mru_i§ss
;

217 
__sysˇŒ_¶⁄g_t
 
	m__ru_i§ss_w‹d
;

221 
__exãnsi⁄__
 union

223 
	mru_möÊt
;

224 
__sysˇŒ_¶⁄g_t
 
	m__ru_möÊt_w‹d
;

227 
__exãnsi⁄__
 union

229 
	mru_majÊt
;

230 
__sysˇŒ_¶⁄g_t
 
	m__ru_majÊt_w‹d
;

233 
__exãnsi⁄__
 union

235 
	mru_nsw≠
;

236 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsw≠_w‹d
;

240 
__exãnsi⁄__
 union

242 
	mru_öblock
;

243 
__sysˇŒ_¶⁄g_t
 
	m__ru_öblock_w‹d
;

246 
__exãnsi⁄__
 union

248 
	mru_oublock
;

249 
__sysˇŒ_¶⁄g_t
 
	m__ru_oublock_w‹d
;

252 
__exãnsi⁄__
 union

254 
	mru_msg¢d
;

255 
__sysˇŒ_¶⁄g_t
 
	m__ru_msg¢d_w‹d
;

258 
__exãnsi⁄__
 union

260 
	mru_msgrcv
;

261 
__sysˇŒ_¶⁄g_t
 
	m__ru_msgrcv_w‹d
;

264 
__exãnsi⁄__
 union

266 
	mru_nsig«ls
;

267 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsig«ls_w‹d
;

272 
__exãnsi⁄__
 union

274 
	mru_nvcsw
;

275 
__sysˇŒ_¶⁄g_t
 
	m__ru_nvcsw_w‹d
;

279 
__exãnsi⁄__
 union

281 
	mru_nivcsw
;

282 
__sysˇŒ_¶⁄g_t
 
	m__ru_nivcsw_w‹d
;

287 
	#PRIO_MIN
 -20

	)

288 
	#PRIO_MAX
 20

	)

292 
	e__¥i‹ôy_which


294 
	mPRIO_PROCESS
 = 0,

295 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

296 
	mPRIO_PGRP
 = 1,

297 
	#PRIO_PGRP
 
PRIO_PGRP


	)

298 
	mPRIO_USER
 = 2

299 
	#PRIO_USER
 
PRIO_USER


	)

303 
	g__BEGIN_DECLS


305 #ifde‡
__USE_GNU


307 #i‚de‡
__USE_FILE_OFFSET64


308 
	$¥limô
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

309 c⁄° 
æimô
 *
__√w_limô
,

310 
æimô
 *
__ﬁd_limô
Ë
__THROW
;

312 #ifde‡
__REDIRECT_NTH


313 
	`__REDIRECT_NTH
 (
¥limô
, (
__pid_t
 
__pid
,

314 
__æimô_ªsour˚
 
__ªsour˚
,

315 c⁄° 
æimô
 *
__√w_limô
,

316 
æimô
 *
__ﬁd_limô
), 
¥limô64
);

318 
	#¥limô
 
¥limô64


	)

321 #ifde‡
__USE_LARGEFILE64


322 
	$¥limô64
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

323 c⁄° 
æimô64
 *
__√w_limô
,

324 
æimô64
 *
__ﬁd_limô
Ë
__THROW
;

328 
__END_DECLS


	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sockaddr.h

23 #i‚de‡
_BITS_SOCKADDR_H


24 
	#_BITS_SOCKADDR_H
 1

	)

28 
	tß_Ámûy_t
;

34 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

35 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

37 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

40 
	#_SS_SIZE
 128

	)

	@/usr/include/bits/socket_type.h

19 #i‚de‡
_SYS_SOCKET_H


24 
	e__sockë_ty≥


26 
	mSOCK_STREAM
 = 1,

28 
	#SOCK_STREAM
 
SOCK_STREAM


	)

29 
	mSOCK_DGRAM
 = 2,

31 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

32 
	mSOCK_RAW
 = 3,

33 
	#SOCK_RAW
 
SOCK_RAW


	)

34 
	mSOCK_RDM
 = 4,

35 
	#SOCK_RDM
 
SOCK_RDM


	)

36 
	mSOCK_SEQPACKET
 = 5,

38 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

39 
	mSOCK_DCCP
 = 6,

40 
	#SOCK_DCCP
 
SOCK_DCCP


	)

41 
	mSOCK_PACKET
 = 10,

44 
	#SOCK_PACKET
 
SOCK_PACKET


	)

49 
	mSOCK_CLOEXEC
 = 02000000,

51 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

52 
	mSOCK_NONBLOCK
 = 00004000

54 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_SETOFFSET
 0x0100

	)

64 
	#ADJ_MICRO
 0x1000

	)

65 
	#ADJ_NANO
 0x2000

	)

66 
	#ADJ_TICK
 0x4000

	)

67 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

68 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

71 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

72 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

73 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

74 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

75 
	#MOD_STATUS
 
ADJ_STATUS


	)

76 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

77 
	#MOD_CLKB
 
ADJ_TICK


	)

78 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

79 
	#MOD_TAI
 
ADJ_TAI


	)

80 
	#MOD_MICRO
 
ADJ_MICRO


	)

81 
	#MOD_NANO
 
ADJ_NANO


	)

85 
	#STA_PLL
 0x0001

	)

86 
	#STA_PPSFREQ
 0x0002

	)

87 
	#STA_PPSTIME
 0x0004

	)

88 
	#STA_FLL
 0x0008

	)

90 
	#STA_INS
 0x0010

	)

91 
	#STA_DEL
 0x0020

	)

92 
	#STA_UNSYNC
 0x0040

	)

93 
	#STA_FREQHOLD
 0x0080

	)

95 
	#STA_PPSSIGNAL
 0x0100

	)

96 
	#STA_PPSJITTER
 0x0200

	)

97 
	#STA_PPSWANDER
 0x0400

	)

98 
	#STA_PPSERROR
 0x0800

	)

100 
	#STA_CLOCKERR
 0x1000

	)

101 
	#STA_NANO
 0x2000

	)

102 
	#STA_MODE
 0x4000

	)

103 
	#STA_CLK
 0x8000

	)

106 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

107 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

74 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

76 #ifde‡
__x86_64__


80 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

83 
	#__INO_T_MATCHES_INO64_T
 1

	)

87 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/boost/preprocessor/arithmetic/inc.hpp

1 #/* 
C›yright
 (
C
) 2001

2 #* 
Hou£m¨que
 
Oy


3 #* 
hâp
:

5 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


6 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


7 #* 
hâp
:

9 #
#/* 
Revi£d
 
by
 
Paul
 
Mís⁄ides
 (2002) */

11 #
#/* 
Sì
 
hâp
:

13 #
#i‚de‡
BOOST_PREPROCESSOR_ARITHMETIC_INC_HPP


15 
	#BOOST_PREPROCESSOR_ARITHMETIC_INC_HPP


	)

16 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

18 #
#/* 
BOOST_PP_INC
 */

20 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MWCC
()

22 
	#BOOST_PP_INC
(
x
Ë
	`BOOST_PP_INC_I
(x)

	)

24 
	#BOOST_PP_INC
(
x
Ë
	`BOOST_PP_INC_OO
((x))

	)

25 
	#BOOST_PP_INC_OO
(
∑r
Ë
BOOST_PP_INC_I
 ## 
	)
par

27 
#deföê
	#BOOST_PP_INC_I
(
x
Ë
BOOST_PP_INC_
 ## 
	)
x

29 
#deföê
	#BOOST_PP_INC_0
 1

	)

31 
	#BOOST_PP_INC_1
 2

	)

32 
	#BOOST_PP_INC_2
 3

	)

33 
	#BOOST_PP_INC_3
 4

	)

34 
	#BOOST_PP_INC_4
 5

	)

35 
	#BOOST_PP_INC_5
 6

	)

36 
	#BOOST_PP_INC_6
 7

	)

37 
	#BOOST_PP_INC_7
 8

	)

38 
	#BOOST_PP_INC_8
 9

	)

39 
	#BOOST_PP_INC_9
 10

	)

40 
	#BOOST_PP_INC_10
 11

	)

41 
	#BOOST_PP_INC_11
 12

	)

42 
	#BOOST_PP_INC_12
 13

	)

43 
	#BOOST_PP_INC_13
 14

	)

44 
	#BOOST_PP_INC_14
 15

	)

45 
	#BOOST_PP_INC_15
 16

	)

46 
	#BOOST_PP_INC_16
 17

	)

47 
	#BOOST_PP_INC_17
 18

	)

48 
	#BOOST_PP_INC_18
 19

	)

49 
	#BOOST_PP_INC_19
 20

	)

50 
	#BOOST_PP_INC_20
 21

	)

51 
	#BOOST_PP_INC_21
 22

	)

52 
	#BOOST_PP_INC_22
 23

	)

53 
	#BOOST_PP_INC_23
 24

	)

54 
	#BOOST_PP_INC_24
 25

	)

55 
	#BOOST_PP_INC_25
 26

	)

56 
	#BOOST_PP_INC_26
 27

	)

57 
	#BOOST_PP_INC_27
 28

	)

58 
	#BOOST_PP_INC_28
 29

	)

59 
	#BOOST_PP_INC_29
 30

	)

60 
	#BOOST_PP_INC_30
 31

	)

61 
	#BOOST_PP_INC_31
 32

	)

62 
	#BOOST_PP_INC_32
 33

	)

63 
	#BOOST_PP_INC_33
 34

	)

64 
	#BOOST_PP_INC_34
 35

	)

65 
	#BOOST_PP_INC_35
 36

	)

66 
	#BOOST_PP_INC_36
 37

	)

67 
	#BOOST_PP_INC_37
 38

	)

68 
	#BOOST_PP_INC_38
 39

	)

69 
	#BOOST_PP_INC_39
 40

	)

70 
	#BOOST_PP_INC_40
 41

	)

71 
	#BOOST_PP_INC_41
 42

	)

72 
	#BOOST_PP_INC_42
 43

	)

73 
	#BOOST_PP_INC_43
 44

	)

74 
	#BOOST_PP_INC_44
 45

	)

75 
	#BOOST_PP_INC_45
 46

	)

76 
	#BOOST_PP_INC_46
 47

	)

77 
	#BOOST_PP_INC_47
 48

	)

78 
	#BOOST_PP_INC_48
 49

	)

79 
	#BOOST_PP_INC_49
 50

	)

80 
	#BOOST_PP_INC_50
 51

	)

81 
	#BOOST_PP_INC_51
 52

	)

82 
	#BOOST_PP_INC_52
 53

	)

83 
	#BOOST_PP_INC_53
 54

	)

84 
	#BOOST_PP_INC_54
 55

	)

85 
	#BOOST_PP_INC_55
 56

	)

86 
	#BOOST_PP_INC_56
 57

	)

87 
	#BOOST_PP_INC_57
 58

	)

88 
	#BOOST_PP_INC_58
 59

	)

89 
	#BOOST_PP_INC_59
 60

	)

90 
	#BOOST_PP_INC_60
 61

	)

91 
	#BOOST_PP_INC_61
 62

	)

92 
	#BOOST_PP_INC_62
 63

	)

93 
	#BOOST_PP_INC_63
 64

	)

94 
	#BOOST_PP_INC_64
 65

	)

95 
	#BOOST_PP_INC_65
 66

	)

96 
	#BOOST_PP_INC_66
 67

	)

97 
	#BOOST_PP_INC_67
 68

	)

98 
	#BOOST_PP_INC_68
 69

	)

99 
	#BOOST_PP_INC_69
 70

	)

100 
	#BOOST_PP_INC_70
 71

	)

101 
	#BOOST_PP_INC_71
 72

	)

102 
	#BOOST_PP_INC_72
 73

	)

103 
	#BOOST_PP_INC_73
 74

	)

104 
	#BOOST_PP_INC_74
 75

	)

105 
	#BOOST_PP_INC_75
 76

	)

106 
	#BOOST_PP_INC_76
 77

	)

107 
	#BOOST_PP_INC_77
 78

	)

108 
	#BOOST_PP_INC_78
 79

	)

109 
	#BOOST_PP_INC_79
 80

	)

110 
	#BOOST_PP_INC_80
 81

	)

111 
	#BOOST_PP_INC_81
 82

	)

112 
	#BOOST_PP_INC_82
 83

	)

113 
	#BOOST_PP_INC_83
 84

	)

114 
	#BOOST_PP_INC_84
 85

	)

115 
	#BOOST_PP_INC_85
 86

	)

116 
	#BOOST_PP_INC_86
 87

	)

117 
	#BOOST_PP_INC_87
 88

	)

118 
	#BOOST_PP_INC_88
 89

	)

119 
	#BOOST_PP_INC_89
 90

	)

120 
	#BOOST_PP_INC_90
 91

	)

121 
	#BOOST_PP_INC_91
 92

	)

122 
	#BOOST_PP_INC_92
 93

	)

123 
	#BOOST_PP_INC_93
 94

	)

124 
	#BOOST_PP_INC_94
 95

	)

125 
	#BOOST_PP_INC_95
 96

	)

126 
	#BOOST_PP_INC_96
 97

	)

127 
	#BOOST_PP_INC_97
 98

	)

128 
	#BOOST_PP_INC_98
 99

	)

129 
	#BOOST_PP_INC_99
 100

	)

130 
	#BOOST_PP_INC_100
 101

	)

131 
	#BOOST_PP_INC_101
 102

	)

132 
	#BOOST_PP_INC_102
 103

	)

133 
	#BOOST_PP_INC_103
 104

	)

134 
	#BOOST_PP_INC_104
 105

	)

135 
	#BOOST_PP_INC_105
 106

	)

136 
	#BOOST_PP_INC_106
 107

	)

137 
	#BOOST_PP_INC_107
 108

	)

138 
	#BOOST_PP_INC_108
 109

	)

139 
	#BOOST_PP_INC_109
 110

	)

140 
	#BOOST_PP_INC_110
 111

	)

141 
	#BOOST_PP_INC_111
 112

	)

142 
	#BOOST_PP_INC_112
 113

	)

143 
	#BOOST_PP_INC_113
 114

	)

144 
	#BOOST_PP_INC_114
 115

	)

145 
	#BOOST_PP_INC_115
 116

	)

146 
	#BOOST_PP_INC_116
 117

	)

147 
	#BOOST_PP_INC_117
 118

	)

148 
	#BOOST_PP_INC_118
 119

	)

149 
	#BOOST_PP_INC_119
 120

	)

150 
	#BOOST_PP_INC_120
 121

	)

151 
	#BOOST_PP_INC_121
 122

	)

152 
	#BOOST_PP_INC_122
 123

	)

153 
	#BOOST_PP_INC_123
 124

	)

154 
	#BOOST_PP_INC_124
 125

	)

155 
	#BOOST_PP_INC_125
 126

	)

156 
	#BOOST_PP_INC_126
 127

	)

157 
	#BOOST_PP_INC_127
 128

	)

158 
	#BOOST_PP_INC_128
 129

	)

159 
	#BOOST_PP_INC_129
 130

	)

160 
	#BOOST_PP_INC_130
 131

	)

161 
	#BOOST_PP_INC_131
 132

	)

162 
	#BOOST_PP_INC_132
 133

	)

163 
	#BOOST_PP_INC_133
 134

	)

164 
	#BOOST_PP_INC_134
 135

	)

165 
	#BOOST_PP_INC_135
 136

	)

166 
	#BOOST_PP_INC_136
 137

	)

167 
	#BOOST_PP_INC_137
 138

	)

168 
	#BOOST_PP_INC_138
 139

	)

169 
	#BOOST_PP_INC_139
 140

	)

170 
	#BOOST_PP_INC_140
 141

	)

171 
	#BOOST_PP_INC_141
 142

	)

172 
	#BOOST_PP_INC_142
 143

	)

173 
	#BOOST_PP_INC_143
 144

	)

174 
	#BOOST_PP_INC_144
 145

	)

175 
	#BOOST_PP_INC_145
 146

	)

176 
	#BOOST_PP_INC_146
 147

	)

177 
	#BOOST_PP_INC_147
 148

	)

178 
	#BOOST_PP_INC_148
 149

	)

179 
	#BOOST_PP_INC_149
 150

	)

180 
	#BOOST_PP_INC_150
 151

	)

181 
	#BOOST_PP_INC_151
 152

	)

182 
	#BOOST_PP_INC_152
 153

	)

183 
	#BOOST_PP_INC_153
 154

	)

184 
	#BOOST_PP_INC_154
 155

	)

185 
	#BOOST_PP_INC_155
 156

	)

186 
	#BOOST_PP_INC_156
 157

	)

187 
	#BOOST_PP_INC_157
 158

	)

188 
	#BOOST_PP_INC_158
 159

	)

189 
	#BOOST_PP_INC_159
 160

	)

190 
	#BOOST_PP_INC_160
 161

	)

191 
	#BOOST_PP_INC_161
 162

	)

192 
	#BOOST_PP_INC_162
 163

	)

193 
	#BOOST_PP_INC_163
 164

	)

194 
	#BOOST_PP_INC_164
 165

	)

195 
	#BOOST_PP_INC_165
 166

	)

196 
	#BOOST_PP_INC_166
 167

	)

197 
	#BOOST_PP_INC_167
 168

	)

198 
	#BOOST_PP_INC_168
 169

	)

199 
	#BOOST_PP_INC_169
 170

	)

200 
	#BOOST_PP_INC_170
 171

	)

201 
	#BOOST_PP_INC_171
 172

	)

202 
	#BOOST_PP_INC_172
 173

	)

203 
	#BOOST_PP_INC_173
 174

	)

204 
	#BOOST_PP_INC_174
 175

	)

205 
	#BOOST_PP_INC_175
 176

	)

206 
	#BOOST_PP_INC_176
 177

	)

207 
	#BOOST_PP_INC_177
 178

	)

208 
	#BOOST_PP_INC_178
 179

	)

209 
	#BOOST_PP_INC_179
 180

	)

210 
	#BOOST_PP_INC_180
 181

	)

211 
	#BOOST_PP_INC_181
 182

	)

212 
	#BOOST_PP_INC_182
 183

	)

213 
	#BOOST_PP_INC_183
 184

	)

214 
	#BOOST_PP_INC_184
 185

	)

215 
	#BOOST_PP_INC_185
 186

	)

216 
	#BOOST_PP_INC_186
 187

	)

217 
	#BOOST_PP_INC_187
 188

	)

218 
	#BOOST_PP_INC_188
 189

	)

219 
	#BOOST_PP_INC_189
 190

	)

220 
	#BOOST_PP_INC_190
 191

	)

221 
	#BOOST_PP_INC_191
 192

	)

222 
	#BOOST_PP_INC_192
 193

	)

223 
	#BOOST_PP_INC_193
 194

	)

224 
	#BOOST_PP_INC_194
 195

	)

225 
	#BOOST_PP_INC_195
 196

	)

226 
	#BOOST_PP_INC_196
 197

	)

227 
	#BOOST_PP_INC_197
 198

	)

228 
	#BOOST_PP_INC_198
 199

	)

229 
	#BOOST_PP_INC_199
 200

	)

230 
	#BOOST_PP_INC_200
 201

	)

231 
	#BOOST_PP_INC_201
 202

	)

232 
	#BOOST_PP_INC_202
 203

	)

233 
	#BOOST_PP_INC_203
 204

	)

234 
	#BOOST_PP_INC_204
 205

	)

235 
	#BOOST_PP_INC_205
 206

	)

236 
	#BOOST_PP_INC_206
 207

	)

237 
	#BOOST_PP_INC_207
 208

	)

238 
	#BOOST_PP_INC_208
 209

	)

239 
	#BOOST_PP_INC_209
 210

	)

240 
	#BOOST_PP_INC_210
 211

	)

241 
	#BOOST_PP_INC_211
 212

	)

242 
	#BOOST_PP_INC_212
 213

	)

243 
	#BOOST_PP_INC_213
 214

	)

244 
	#BOOST_PP_INC_214
 215

	)

245 
	#BOOST_PP_INC_215
 216

	)

246 
	#BOOST_PP_INC_216
 217

	)

247 
	#BOOST_PP_INC_217
 218

	)

248 
	#BOOST_PP_INC_218
 219

	)

249 
	#BOOST_PP_INC_219
 220

	)

250 
	#BOOST_PP_INC_220
 221

	)

251 
	#BOOST_PP_INC_221
 222

	)

252 
	#BOOST_PP_INC_222
 223

	)

253 
	#BOOST_PP_INC_223
 224

	)

254 
	#BOOST_PP_INC_224
 225

	)

255 
	#BOOST_PP_INC_225
 226

	)

256 
	#BOOST_PP_INC_226
 227

	)

257 
	#BOOST_PP_INC_227
 228

	)

258 
	#BOOST_PP_INC_228
 229

	)

259 
	#BOOST_PP_INC_229
 230

	)

260 
	#BOOST_PP_INC_230
 231

	)

261 
	#BOOST_PP_INC_231
 232

	)

262 
	#BOOST_PP_INC_232
 233

	)

263 
	#BOOST_PP_INC_233
 234

	)

264 
	#BOOST_PP_INC_234
 235

	)

265 
	#BOOST_PP_INC_235
 236

	)

266 
	#BOOST_PP_INC_236
 237

	)

267 
	#BOOST_PP_INC_237
 238

	)

268 
	#BOOST_PP_INC_238
 239

	)

269 
	#BOOST_PP_INC_239
 240

	)

270 
	#BOOST_PP_INC_240
 241

	)

271 
	#BOOST_PP_INC_241
 242

	)

272 
	#BOOST_PP_INC_242
 243

	)

273 
	#BOOST_PP_INC_243
 244

	)

274 
	#BOOST_PP_INC_244
 245

	)

275 
	#BOOST_PP_INC_245
 246

	)

276 
	#BOOST_PP_INC_246
 247

	)

277 
	#BOOST_PP_INC_247
 248

	)

278 
	#BOOST_PP_INC_248
 249

	)

279 
	#BOOST_PP_INC_249
 250

	)

280 
	#BOOST_PP_INC_250
 251

	)

281 
	#BOOST_PP_INC_251
 252

	)

282 
	#BOOST_PP_INC_252
 253

	)

283 
	#BOOST_PP_INC_253
 254

	)

284 
	#BOOST_PP_INC_254
 255

	)

285 
	#BOOST_PP_INC_255
 256

	)

286 
	#BOOST_PP_INC_256
 256

	)

	@/usr/include/boost/preprocessor/cat.hpp

1 #/* 
C›yright
 (
C
) 2001

2 #* 
Hou£m¨que
 
Oy


3 #* 
hâp
:

5 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


6 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


7 #* 
hâp
:

9 #
#/* 
Revi£d
 
by
 
Paul
 
Mís⁄ides
 (2002) */

11 #
#/* 
Sì
 
hâp
:

13 #
#i‚de‡
BOOST_PREPROCESSOR_CAT_HPP


15 
	#BOOST_PREPROCESSOR_CAT_HPP


	)

16 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

18 #
#/* 
BOOST_PP_CAT
 */

20 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MWCC
()

22 
	#BOOST_PP_CAT
(
a
, 
b
Ë
	`BOOST_PP_CAT_I
◊, b)

	)

24 
	#BOOST_PP_CAT
(
a
, 
b
Ë
	`BOOST_PP_CAT_OO
(◊, b))

	)

25 
	#BOOST_PP_CAT_OO
(
∑r
Ë
BOOST_PP_CAT_I
 ## 
	)
par

27 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MSVC
()

29 
	#BOOST_PP_CAT_I
(
a
, 
b
Ë®## 
	)
b

31 
	#BOOST_PP_CAT_I
(
a
, 
b
Ë
	`BOOST_PP_CAT_II
(~,á ## b)

	)

32 
	#BOOST_PP_CAT_II
(
p
, 
ªs
Ë
	)
res

	@/usr/include/boost/preprocessor/debug/error.hpp

3 #* (
C
Ë
C›yright
 
Paul
 
Mís⁄ides
 2002.

4 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


5 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


6 #* 
hâp
:

9 #
#/* 
Sì
 
hâp
:

11 #
#i‚de‡
BOOST_PREPROCESSOR_DEBUG_ERROR_HPP


13 
	#BOOST_PREPROCESSOR_DEBUG_ERROR_HPP


	)

14 
#ö˛udê
	~<boo°/¥ïro˚ss‹/ˇt.hµ
>

16 
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

17 #
#/* 
BOOST_PP_ERROR
 */

19 #
#i‡
BOOST_PP_CONFIG_ERRORS


21 
	#BOOST_PP_ERROR
(
code
Ë
	`BOOST_PP_CAT
(
BOOST_PP_ERROR_
, code)

	)

23 
#deföê
	#BOOST_PP_ERROR_0x0000
 
	`BOOST_PP_ERROR
(0x0000, 
BOOST_PP_INDEX_OUT_OF_BOUNDS
)

	)

25 
	#BOOST_PP_ERROR_0x0001
 
	`BOOST_PP_ERROR
(0x0001, 
BOOST_PP_WHILE_OVERFLOW
)

	)

26 
	#BOOST_PP_ERROR_0x0002
 
	`BOOST_PP_ERROR
(0x0002, 
BOOST_PP_FOR_OVERFLOW
)

	)

27 
	#BOOST_PP_ERROR_0x0003
 
	`BOOST_PP_ERROR
(0x0003, 
BOOST_PP_REPEAT_OVERFLOW
)

	)

28 
	#BOOST_PP_ERROR_0x0004
 
	`BOOST_PP_ERROR
(0x0004, 
BOOST_PP_LIST_FOLD_OVERFLOW
)

	)

29 
	#BOOST_PP_ERROR_0x0005
 
	`BOOST_PP_ERROR
(0x0005, 
BOOST_PP_SEQ_FOLD_OVERFLOW
)

	)

30 
	#BOOST_PP_ERROR_0x0006
 
	`BOOST_PP_ERROR
(0x0006, 
BOOST_PP_ARITHMETIC_OVERFLOW
)

	)

31 
	#BOOST_PP_ERROR_0x0007
 
	`BOOST_PP_ERROR
(0x0007, 
BOOST_PP_DIVISION_BY_ZERO
)

	)

	@/usr/include/boost/preprocessor/detail/auto_rec.hpp

3 #* (
C
Ë
C›yright
 
Paul
 
Mís⁄ides
 2002.

4 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


5 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


6 #* 
hâp
:

9 #
#/* 
Sì
 
hâp
:

11 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

13 #
#i‡
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_DMC
()

15 
	~<boo°/¥ïro˚ss‹/dëaû/dmc/auto_ªc.hµ
>

17 #
#i‚de‡
BOOST_PREPROCESSOR_DETAIL_AUTO_REC_HPP


19 
	#BOOST_PREPROCESSOR_DETAIL_AUTO_REC_HPP


	)

20 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄åﬁ/iif.hµ
>

22 #
#/* 
BOOST_PP_AUTO_REC
 */

24 
#deföê
	#BOOST_PP_AUTO_REC
(
¥ed
, 
n
Ë
BOOST_PP_NODE_ENTRY_
 ## 
	`n
’ªd)

	)

26 
#deföê
	#BOOST_PP_NODE_ENTRY_256
(
p
Ë
	`BOOST_PP_NODE_128
’)’)’)’)’)’)’)’)

	)

28 
	#BOOST_PP_NODE_ENTRY_128
(
p
Ë
	`BOOST_PP_NODE_64
’)’)’)’)’)’)’)

	)

29 
	#BOOST_PP_NODE_ENTRY_64
(
p
Ë
	`BOOST_PP_NODE_32
’)’)’)’)’)’)

	)

30 
	#BOOST_PP_NODE_ENTRY_32
(
p
Ë
	`BOOST_PP_NODE_16
’)’)’)’)’)

	)

31 
	#BOOST_PP_NODE_ENTRY_16
(
p
Ë
	`BOOST_PP_NODE_8
’)’)’)’)

	)

32 
	#BOOST_PP_NODE_ENTRY_8
(
p
Ë
	`BOOST_PP_NODE_4
’)’)’)

	)

33 
	#BOOST_PP_NODE_ENTRY_4
(
p
Ë
	`BOOST_PP_NODE_2
’)’)

	)

34 
	#BOOST_PP_NODE_ENTRY_2
(
p
Ë
	`BOOST_PP_NODE_1
’)

	)

35 
#deföê
	#BOOST_PP_NODE_128
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(128), 
BOOST_PP_NODE_64
, 
BOOST_PP_NODE_192
)

	)

37 
	#BOOST_PP_NODE_64
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(64), 
BOOST_PP_NODE_32
, 
BOOST_PP_NODE_96
)

	)

38 
	#BOOST_PP_NODE_32
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(32), 
BOOST_PP_NODE_16
, 
BOOST_PP_NODE_48
)

	)

39 
	#BOOST_PP_NODE_16
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(16), 
BOOST_PP_NODE_8
, 
BOOST_PP_NODE_24
)

	)

40 
	#BOOST_PP_NODE_8
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(8), 
BOOST_PP_NODE_4
, 
BOOST_PP_NODE_12
)

	)

41 
	#BOOST_PP_NODE_4
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(4), 
BOOST_PP_NODE_2
, 
BOOST_PP_NODE_6
)

	)

42 
	#BOOST_PP_NODE_2
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(2), 
BOOST_PP_NODE_1
, 
BOOST_PP_NODE_3
)

	)

43 
	#BOOST_PP_NODE_1
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(1), 1, 2)

	)

44 
	#BOOST_PP_NODE_3
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(3), 3, 4)

	)

45 
	#BOOST_PP_NODE_6
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(6), 
BOOST_PP_NODE_5
, 
BOOST_PP_NODE_7
)

	)

46 
	#BOOST_PP_NODE_5
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(5), 5, 6)

	)

47 
	#BOOST_PP_NODE_7
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(7), 7, 8)

	)

48 
	#BOOST_PP_NODE_12
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(12), 
BOOST_PP_NODE_10
, 
BOOST_PP_NODE_14
)

	)

49 
	#BOOST_PP_NODE_10
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(10), 
BOOST_PP_NODE_9
, 
BOOST_PP_NODE_11
)

	)

50 
	#BOOST_PP_NODE_9
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(9), 9, 10)

	)

51 
	#BOOST_PP_NODE_11
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(11), 11, 12)

	)

52 
	#BOOST_PP_NODE_14
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(14), 
BOOST_PP_NODE_13
, 
BOOST_PP_NODE_15
)

	)

53 
	#BOOST_PP_NODE_13
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(13), 13, 14)

	)

54 
	#BOOST_PP_NODE_15
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(15), 15, 16)

	)

55 
	#BOOST_PP_NODE_24
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(24), 
BOOST_PP_NODE_20
, 
BOOST_PP_NODE_28
)

	)

56 
	#BOOST_PP_NODE_20
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(20), 
BOOST_PP_NODE_18
, 
BOOST_PP_NODE_22
)

	)

57 
	#BOOST_PP_NODE_18
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(18), 
BOOST_PP_NODE_17
, 
BOOST_PP_NODE_19
)

	)

58 
	#BOOST_PP_NODE_17
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(17), 17, 18)

	)

59 
	#BOOST_PP_NODE_19
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(19), 19, 20)

	)

60 
	#BOOST_PP_NODE_22
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(22), 
BOOST_PP_NODE_21
, 
BOOST_PP_NODE_23
)

	)

61 
	#BOOST_PP_NODE_21
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(21), 21, 22)

	)

62 
	#BOOST_PP_NODE_23
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(23), 23, 24)

	)

63 
	#BOOST_PP_NODE_28
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(28), 
BOOST_PP_NODE_26
, 
BOOST_PP_NODE_30
)

	)

64 
	#BOOST_PP_NODE_26
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(26), 
BOOST_PP_NODE_25
, 
BOOST_PP_NODE_27
)

	)

65 
	#BOOST_PP_NODE_25
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(25), 25, 26)

	)

66 
	#BOOST_PP_NODE_27
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(27), 27, 28)

	)

67 
	#BOOST_PP_NODE_30
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(30), 
BOOST_PP_NODE_29
, 
BOOST_PP_NODE_31
)

	)

68 
	#BOOST_PP_NODE_29
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(29), 29, 30)

	)

69 
	#BOOST_PP_NODE_31
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(31), 31, 32)

	)

70 
	#BOOST_PP_NODE_48
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(48), 
BOOST_PP_NODE_40
, 
BOOST_PP_NODE_56
)

	)

71 
	#BOOST_PP_NODE_40
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(40), 
BOOST_PP_NODE_36
, 
BOOST_PP_NODE_44
)

	)

72 
	#BOOST_PP_NODE_36
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(36), 
BOOST_PP_NODE_34
, 
BOOST_PP_NODE_38
)

	)

73 
	#BOOST_PP_NODE_34
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(34), 
BOOST_PP_NODE_33
, 
BOOST_PP_NODE_35
)

	)

74 
	#BOOST_PP_NODE_33
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(33), 33, 34)

	)

75 
	#BOOST_PP_NODE_35
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(35), 35, 36)

	)

76 
	#BOOST_PP_NODE_38
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(38), 
BOOST_PP_NODE_37
, 
BOOST_PP_NODE_39
)

	)

77 
	#BOOST_PP_NODE_37
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(37), 37, 38)

	)

78 
	#BOOST_PP_NODE_39
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(39), 39, 40)

	)

79 
	#BOOST_PP_NODE_44
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(44), 
BOOST_PP_NODE_42
, 
BOOST_PP_NODE_46
)

	)

80 
	#BOOST_PP_NODE_42
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(42), 
BOOST_PP_NODE_41
, 
BOOST_PP_NODE_43
)

	)

81 
	#BOOST_PP_NODE_41
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(41), 41, 42)

	)

82 
	#BOOST_PP_NODE_43
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(43), 43, 44)

	)

83 
	#BOOST_PP_NODE_46
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(46), 
BOOST_PP_NODE_45
, 
BOOST_PP_NODE_47
)

	)

84 
	#BOOST_PP_NODE_45
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(45), 45, 46)

	)

85 
	#BOOST_PP_NODE_47
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(47), 47, 48)

	)

86 
	#BOOST_PP_NODE_56
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(56), 
BOOST_PP_NODE_52
, 
BOOST_PP_NODE_60
)

	)

87 
	#BOOST_PP_NODE_52
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(52), 
BOOST_PP_NODE_50
, 
BOOST_PP_NODE_54
)

	)

88 
	#BOOST_PP_NODE_50
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(50), 
BOOST_PP_NODE_49
, 
BOOST_PP_NODE_51
)

	)

89 
	#BOOST_PP_NODE_49
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(49), 49, 50)

	)

90 
	#BOOST_PP_NODE_51
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(51), 51, 52)

	)

91 
	#BOOST_PP_NODE_54
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(54), 
BOOST_PP_NODE_53
, 
BOOST_PP_NODE_55
)

	)

92 
	#BOOST_PP_NODE_53
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(53), 53, 54)

	)

93 
	#BOOST_PP_NODE_55
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(55), 55, 56)

	)

94 
	#BOOST_PP_NODE_60
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(60), 
BOOST_PP_NODE_58
, 
BOOST_PP_NODE_62
)

	)

95 
	#BOOST_PP_NODE_58
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(58), 
BOOST_PP_NODE_57
, 
BOOST_PP_NODE_59
)

	)

96 
	#BOOST_PP_NODE_57
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(57), 57, 58)

	)

97 
	#BOOST_PP_NODE_59
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(59), 59, 60)

	)

98 
	#BOOST_PP_NODE_62
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(62), 
BOOST_PP_NODE_61
, 
BOOST_PP_NODE_63
)

	)

99 
	#BOOST_PP_NODE_61
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(61), 61, 62)

	)

100 
	#BOOST_PP_NODE_63
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(63), 63, 64)

	)

101 
	#BOOST_PP_NODE_96
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(96), 
BOOST_PP_NODE_80
, 
BOOST_PP_NODE_112
)

	)

102 
	#BOOST_PP_NODE_80
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(80), 
BOOST_PP_NODE_72
, 
BOOST_PP_NODE_88
)

	)

103 
	#BOOST_PP_NODE_72
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(72), 
BOOST_PP_NODE_68
, 
BOOST_PP_NODE_76
)

	)

104 
	#BOOST_PP_NODE_68
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(68), 
BOOST_PP_NODE_66
, 
BOOST_PP_NODE_70
)

	)

105 
	#BOOST_PP_NODE_66
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(66), 
BOOST_PP_NODE_65
, 
BOOST_PP_NODE_67
)

	)

106 
	#BOOST_PP_NODE_65
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(65), 65, 66)

	)

107 
	#BOOST_PP_NODE_67
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(67), 67, 68)

	)

108 
	#BOOST_PP_NODE_70
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(70), 
BOOST_PP_NODE_69
, 
BOOST_PP_NODE_71
)

	)

109 
	#BOOST_PP_NODE_69
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(69), 69, 70)

	)

110 
	#BOOST_PP_NODE_71
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(71), 71, 72)

	)

111 
	#BOOST_PP_NODE_76
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(76), 
BOOST_PP_NODE_74
, 
BOOST_PP_NODE_78
)

	)

112 
	#BOOST_PP_NODE_74
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(74), 
BOOST_PP_NODE_73
, 
BOOST_PP_NODE_75
)

	)

113 
	#BOOST_PP_NODE_73
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(73), 73, 74)

	)

114 
	#BOOST_PP_NODE_75
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(75), 75, 76)

	)

115 
	#BOOST_PP_NODE_78
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(78), 
BOOST_PP_NODE_77
, 
BOOST_PP_NODE_79
)

	)

116 
	#BOOST_PP_NODE_77
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(77), 77, 78)

	)

117 
	#BOOST_PP_NODE_79
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(79), 79, 80)

	)

118 
	#BOOST_PP_NODE_88
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(88), 
BOOST_PP_NODE_84
, 
BOOST_PP_NODE_92
)

	)

119 
	#BOOST_PP_NODE_84
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(84), 
BOOST_PP_NODE_82
, 
BOOST_PP_NODE_86
)

	)

120 
	#BOOST_PP_NODE_82
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(82), 
BOOST_PP_NODE_81
, 
BOOST_PP_NODE_83
)

	)

121 
	#BOOST_PP_NODE_81
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(81), 81, 82)

	)

122 
	#BOOST_PP_NODE_83
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(83), 83, 84)

	)

123 
	#BOOST_PP_NODE_86
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(86), 
BOOST_PP_NODE_85
, 
BOOST_PP_NODE_87
)

	)

124 
	#BOOST_PP_NODE_85
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(85), 85, 86)

	)

125 
	#BOOST_PP_NODE_87
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(87), 87, 88)

	)

126 
	#BOOST_PP_NODE_92
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(92), 
BOOST_PP_NODE_90
, 
BOOST_PP_NODE_94
)

	)

127 
	#BOOST_PP_NODE_90
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(90), 
BOOST_PP_NODE_89
, 
BOOST_PP_NODE_91
)

	)

128 
	#BOOST_PP_NODE_89
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(89), 89, 90)

	)

129 
	#BOOST_PP_NODE_91
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(91), 91, 92)

	)

130 
	#BOOST_PP_NODE_94
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(94), 
BOOST_PP_NODE_93
, 
BOOST_PP_NODE_95
)

	)

131 
	#BOOST_PP_NODE_93
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(93), 93, 94)

	)

132 
	#BOOST_PP_NODE_95
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(95), 95, 96)

	)

133 
	#BOOST_PP_NODE_112
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(112), 
BOOST_PP_NODE_104
, 
BOOST_PP_NODE_120
)

	)

134 
	#BOOST_PP_NODE_104
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(104), 
BOOST_PP_NODE_100
, 
BOOST_PP_NODE_108
)

	)

135 
	#BOOST_PP_NODE_100
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(100), 
BOOST_PP_NODE_98
, 
BOOST_PP_NODE_102
)

	)

136 
	#BOOST_PP_NODE_98
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(98), 
BOOST_PP_NODE_97
, 
BOOST_PP_NODE_99
)

	)

137 
	#BOOST_PP_NODE_97
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(97), 97, 98)

	)

138 
	#BOOST_PP_NODE_99
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(99), 99, 100)

	)

139 
	#BOOST_PP_NODE_102
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(102), 
BOOST_PP_NODE_101
, 
BOOST_PP_NODE_103
)

	)

140 
	#BOOST_PP_NODE_101
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(101), 101, 102)

	)

141 
	#BOOST_PP_NODE_103
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(103), 103, 104)

	)

142 
	#BOOST_PP_NODE_108
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(108), 
BOOST_PP_NODE_106
, 
BOOST_PP_NODE_110
)

	)

143 
	#BOOST_PP_NODE_106
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(106), 
BOOST_PP_NODE_105
, 
BOOST_PP_NODE_107
)

	)

144 
	#BOOST_PP_NODE_105
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(105), 105, 106)

	)

145 
	#BOOST_PP_NODE_107
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(107), 107, 108)

	)

146 
	#BOOST_PP_NODE_110
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(110), 
BOOST_PP_NODE_109
, 
BOOST_PP_NODE_111
)

	)

147 
	#BOOST_PP_NODE_109
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(109), 109, 110)

	)

148 
	#BOOST_PP_NODE_111
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(111), 111, 112)

	)

149 
	#BOOST_PP_NODE_120
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(120), 
BOOST_PP_NODE_116
, 
BOOST_PP_NODE_124
)

	)

150 
	#BOOST_PP_NODE_116
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(116), 
BOOST_PP_NODE_114
, 
BOOST_PP_NODE_118
)

	)

151 
	#BOOST_PP_NODE_114
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(114), 
BOOST_PP_NODE_113
, 
BOOST_PP_NODE_115
)

	)

152 
	#BOOST_PP_NODE_113
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(113), 113, 114)

	)

153 
	#BOOST_PP_NODE_115
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(115), 115, 116)

	)

154 
	#BOOST_PP_NODE_118
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(118), 
BOOST_PP_NODE_117
, 
BOOST_PP_NODE_119
)

	)

155 
	#BOOST_PP_NODE_117
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(117), 117, 118)

	)

156 
	#BOOST_PP_NODE_119
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(119), 119, 120)

	)

157 
	#BOOST_PP_NODE_124
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(124), 
BOOST_PP_NODE_122
, 
BOOST_PP_NODE_126
)

	)

158 
	#BOOST_PP_NODE_122
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(122), 
BOOST_PP_NODE_121
, 
BOOST_PP_NODE_123
)

	)

159 
	#BOOST_PP_NODE_121
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(121), 121, 122)

	)

160 
	#BOOST_PP_NODE_123
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(123), 123, 124)

	)

161 
	#BOOST_PP_NODE_126
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(126), 
BOOST_PP_NODE_125
, 
BOOST_PP_NODE_127
)

	)

162 
	#BOOST_PP_NODE_125
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(125), 125, 126)

	)

163 
	#BOOST_PP_NODE_127
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(127), 127, 128)

	)

164 
	#BOOST_PP_NODE_192
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(192), 
BOOST_PP_NODE_160
, 
BOOST_PP_NODE_224
)

	)

165 
	#BOOST_PP_NODE_160
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(160), 
BOOST_PP_NODE_144
, 
BOOST_PP_NODE_176
)

	)

166 
	#BOOST_PP_NODE_144
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(144), 
BOOST_PP_NODE_136
, 
BOOST_PP_NODE_152
)

	)

167 
	#BOOST_PP_NODE_136
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(136), 
BOOST_PP_NODE_132
, 
BOOST_PP_NODE_140
)

	)

168 
	#BOOST_PP_NODE_132
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(132), 
BOOST_PP_NODE_130
, 
BOOST_PP_NODE_134
)

	)

169 
	#BOOST_PP_NODE_130
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(130), 
BOOST_PP_NODE_129
, 
BOOST_PP_NODE_131
)

	)

170 
	#BOOST_PP_NODE_129
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(129), 129, 130)

	)

171 
	#BOOST_PP_NODE_131
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(131), 131, 132)

	)

172 
	#BOOST_PP_NODE_134
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(134), 
BOOST_PP_NODE_133
, 
BOOST_PP_NODE_135
)

	)

173 
	#BOOST_PP_NODE_133
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(133), 133, 134)

	)

174 
	#BOOST_PP_NODE_135
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(135), 135, 136)

	)

175 
	#BOOST_PP_NODE_140
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(140), 
BOOST_PP_NODE_138
, 
BOOST_PP_NODE_142
)

	)

176 
	#BOOST_PP_NODE_138
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(138), 
BOOST_PP_NODE_137
, 
BOOST_PP_NODE_139
)

	)

177 
	#BOOST_PP_NODE_137
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(137), 137, 138)

	)

178 
	#BOOST_PP_NODE_139
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(139), 139, 140)

	)

179 
	#BOOST_PP_NODE_142
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(142), 
BOOST_PP_NODE_141
, 
BOOST_PP_NODE_143
)

	)

180 
	#BOOST_PP_NODE_141
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(141), 141, 142)

	)

181 
	#BOOST_PP_NODE_143
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(143), 143, 144)

	)

182 
	#BOOST_PP_NODE_152
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(152), 
BOOST_PP_NODE_148
, 
BOOST_PP_NODE_156
)

	)

183 
	#BOOST_PP_NODE_148
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(148), 
BOOST_PP_NODE_146
, 
BOOST_PP_NODE_150
)

	)

184 
	#BOOST_PP_NODE_146
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(146), 
BOOST_PP_NODE_145
, 
BOOST_PP_NODE_147
)

	)

185 
	#BOOST_PP_NODE_145
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(145), 145, 146)

	)

186 
	#BOOST_PP_NODE_147
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(147), 147, 148)

	)

187 
	#BOOST_PP_NODE_150
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(150), 
BOOST_PP_NODE_149
, 
BOOST_PP_NODE_151
)

	)

188 
	#BOOST_PP_NODE_149
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(149), 149, 150)

	)

189 
	#BOOST_PP_NODE_151
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(151), 151, 152)

	)

190 
	#BOOST_PP_NODE_156
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(156), 
BOOST_PP_NODE_154
, 
BOOST_PP_NODE_158
)

	)

191 
	#BOOST_PP_NODE_154
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(154), 
BOOST_PP_NODE_153
, 
BOOST_PP_NODE_155
)

	)

192 
	#BOOST_PP_NODE_153
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(153), 153, 154)

	)

193 
	#BOOST_PP_NODE_155
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(155), 155, 156)

	)

194 
	#BOOST_PP_NODE_158
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(158), 
BOOST_PP_NODE_157
, 
BOOST_PP_NODE_159
)

	)

195 
	#BOOST_PP_NODE_157
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(157), 157, 158)

	)

196 
	#BOOST_PP_NODE_159
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(159), 159, 160)

	)

197 
	#BOOST_PP_NODE_176
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(176), 
BOOST_PP_NODE_168
, 
BOOST_PP_NODE_184
)

	)

198 
	#BOOST_PP_NODE_168
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(168), 
BOOST_PP_NODE_164
, 
BOOST_PP_NODE_172
)

	)

199 
	#BOOST_PP_NODE_164
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(164), 
BOOST_PP_NODE_162
, 
BOOST_PP_NODE_166
)

	)

200 
	#BOOST_PP_NODE_162
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(162), 
BOOST_PP_NODE_161
, 
BOOST_PP_NODE_163
)

	)

201 
	#BOOST_PP_NODE_161
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(161), 161, 162)

	)

202 
	#BOOST_PP_NODE_163
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(163), 163, 164)

	)

203 
	#BOOST_PP_NODE_166
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(166), 
BOOST_PP_NODE_165
, 
BOOST_PP_NODE_167
)

	)

204 
	#BOOST_PP_NODE_165
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(165), 165, 166)

	)

205 
	#BOOST_PP_NODE_167
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(167), 167, 168)

	)

206 
	#BOOST_PP_NODE_172
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(172), 
BOOST_PP_NODE_170
, 
BOOST_PP_NODE_174
)

	)

207 
	#BOOST_PP_NODE_170
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(170), 
BOOST_PP_NODE_169
, 
BOOST_PP_NODE_171
)

	)

208 
	#BOOST_PP_NODE_169
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(169), 169, 170)

	)

209 
	#BOOST_PP_NODE_171
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(171), 171, 172)

	)

210 
	#BOOST_PP_NODE_174
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(174), 
BOOST_PP_NODE_173
, 
BOOST_PP_NODE_175
)

	)

211 
	#BOOST_PP_NODE_173
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(173), 173, 174)

	)

212 
	#BOOST_PP_NODE_175
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(175), 175, 176)

	)

213 
	#BOOST_PP_NODE_184
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(184), 
BOOST_PP_NODE_180
, 
BOOST_PP_NODE_188
)

	)

214 
	#BOOST_PP_NODE_180
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(180), 
BOOST_PP_NODE_178
, 
BOOST_PP_NODE_182
)

	)

215 
	#BOOST_PP_NODE_178
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(178), 
BOOST_PP_NODE_177
, 
BOOST_PP_NODE_179
)

	)

216 
	#BOOST_PP_NODE_177
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(177), 177, 178)

	)

217 
	#BOOST_PP_NODE_179
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(179), 179, 180)

	)

218 
	#BOOST_PP_NODE_182
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(182), 
BOOST_PP_NODE_181
, 
BOOST_PP_NODE_183
)

	)

219 
	#BOOST_PP_NODE_181
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(181), 181, 182)

	)

220 
	#BOOST_PP_NODE_183
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(183), 183, 184)

	)

221 
	#BOOST_PP_NODE_188
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(188), 
BOOST_PP_NODE_186
, 
BOOST_PP_NODE_190
)

	)

222 
	#BOOST_PP_NODE_186
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(186), 
BOOST_PP_NODE_185
, 
BOOST_PP_NODE_187
)

	)

223 
	#BOOST_PP_NODE_185
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(185), 185, 186)

	)

224 
	#BOOST_PP_NODE_187
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(187), 187, 188)

	)

225 
	#BOOST_PP_NODE_190
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(190), 
BOOST_PP_NODE_189
, 
BOOST_PP_NODE_191
)

	)

226 
	#BOOST_PP_NODE_189
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(189), 189, 190)

	)

227 
	#BOOST_PP_NODE_191
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(191), 191, 192)

	)

228 
	#BOOST_PP_NODE_224
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(224), 
BOOST_PP_NODE_208
, 
BOOST_PP_NODE_240
)

	)

229 
	#BOOST_PP_NODE_208
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(208), 
BOOST_PP_NODE_200
, 
BOOST_PP_NODE_216
)

	)

230 
	#BOOST_PP_NODE_200
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(200), 
BOOST_PP_NODE_196
, 
BOOST_PP_NODE_204
)

	)

231 
	#BOOST_PP_NODE_196
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(196), 
BOOST_PP_NODE_194
, 
BOOST_PP_NODE_198
)

	)

232 
	#BOOST_PP_NODE_194
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(194), 
BOOST_PP_NODE_193
, 
BOOST_PP_NODE_195
)

	)

233 
	#BOOST_PP_NODE_193
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(193), 193, 194)

	)

234 
	#BOOST_PP_NODE_195
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(195), 195, 196)

	)

235 
	#BOOST_PP_NODE_198
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(198), 
BOOST_PP_NODE_197
, 
BOOST_PP_NODE_199
)

	)

236 
	#BOOST_PP_NODE_197
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(197), 197, 198)

	)

237 
	#BOOST_PP_NODE_199
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(199), 199, 200)

	)

238 
	#BOOST_PP_NODE_204
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(204), 
BOOST_PP_NODE_202
, 
BOOST_PP_NODE_206
)

	)

239 
	#BOOST_PP_NODE_202
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(202), 
BOOST_PP_NODE_201
, 
BOOST_PP_NODE_203
)

	)

240 
	#BOOST_PP_NODE_201
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(201), 201, 202)

	)

241 
	#BOOST_PP_NODE_203
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(203), 203, 204)

	)

242 
	#BOOST_PP_NODE_206
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(206), 
BOOST_PP_NODE_205
, 
BOOST_PP_NODE_207
)

	)

243 
	#BOOST_PP_NODE_205
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(205), 205, 206)

	)

244 
	#BOOST_PP_NODE_207
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(207), 207, 208)

	)

245 
	#BOOST_PP_NODE_216
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(216), 
BOOST_PP_NODE_212
, 
BOOST_PP_NODE_220
)

	)

246 
	#BOOST_PP_NODE_212
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(212), 
BOOST_PP_NODE_210
, 
BOOST_PP_NODE_214
)

	)

247 
	#BOOST_PP_NODE_210
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(210), 
BOOST_PP_NODE_209
, 
BOOST_PP_NODE_211
)

	)

248 
	#BOOST_PP_NODE_209
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(209), 209, 210)

	)

249 
	#BOOST_PP_NODE_211
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(211), 211, 212)

	)

250 
	#BOOST_PP_NODE_214
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(214), 
BOOST_PP_NODE_213
, 
BOOST_PP_NODE_215
)

	)

251 
	#BOOST_PP_NODE_213
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(213), 213, 214)

	)

252 
	#BOOST_PP_NODE_215
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(215), 215, 216)

	)

253 
	#BOOST_PP_NODE_220
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(220), 
BOOST_PP_NODE_218
, 
BOOST_PP_NODE_222
)

	)

254 
	#BOOST_PP_NODE_218
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(218), 
BOOST_PP_NODE_217
, 
BOOST_PP_NODE_219
)

	)

255 
	#BOOST_PP_NODE_217
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(217), 217, 218)

	)

256 
	#BOOST_PP_NODE_219
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(219), 219, 220)

	)

257 
	#BOOST_PP_NODE_222
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(222), 
BOOST_PP_NODE_221
, 
BOOST_PP_NODE_223
)

	)

258 
	#BOOST_PP_NODE_221
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(221), 221, 222)

	)

259 
	#BOOST_PP_NODE_223
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(223), 223, 224)

	)

260 
	#BOOST_PP_NODE_240
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(240), 
BOOST_PP_NODE_232
, 
BOOST_PP_NODE_248
)

	)

261 
	#BOOST_PP_NODE_232
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(232), 
BOOST_PP_NODE_228
, 
BOOST_PP_NODE_236
)

	)

262 
	#BOOST_PP_NODE_228
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(228), 
BOOST_PP_NODE_226
, 
BOOST_PP_NODE_230
)

	)

263 
	#BOOST_PP_NODE_226
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(226), 
BOOST_PP_NODE_225
, 
BOOST_PP_NODE_227
)

	)

264 
	#BOOST_PP_NODE_225
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(225), 225, 226)

	)

265 
	#BOOST_PP_NODE_227
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(227), 227, 228)

	)

266 
	#BOOST_PP_NODE_230
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(230), 
BOOST_PP_NODE_229
, 
BOOST_PP_NODE_231
)

	)

267 
	#BOOST_PP_NODE_229
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(229), 229, 230)

	)

268 
	#BOOST_PP_NODE_231
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(231), 231, 232)

	)

269 
	#BOOST_PP_NODE_236
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(236), 
BOOST_PP_NODE_234
, 
BOOST_PP_NODE_238
)

	)

270 
	#BOOST_PP_NODE_234
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(234), 
BOOST_PP_NODE_233
, 
BOOST_PP_NODE_235
)

	)

271 
	#BOOST_PP_NODE_233
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(233), 233, 234)

	)

272 
	#BOOST_PP_NODE_235
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(235), 235, 236)

	)

273 
	#BOOST_PP_NODE_238
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(238), 
BOOST_PP_NODE_237
, 
BOOST_PP_NODE_239
)

	)

274 
	#BOOST_PP_NODE_237
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(237), 237, 238)

	)

275 
	#BOOST_PP_NODE_239
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(239), 239, 240)

	)

276 
	#BOOST_PP_NODE_248
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(248), 
BOOST_PP_NODE_244
, 
BOOST_PP_NODE_252
)

	)

277 
	#BOOST_PP_NODE_244
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(244), 
BOOST_PP_NODE_242
, 
BOOST_PP_NODE_246
)

	)

278 
	#BOOST_PP_NODE_242
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(242), 
BOOST_PP_NODE_241
, 
BOOST_PP_NODE_243
)

	)

279 
	#BOOST_PP_NODE_241
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(241), 241, 242)

	)

280 
	#BOOST_PP_NODE_243
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(243), 243, 244)

	)

281 
	#BOOST_PP_NODE_246
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(246), 
BOOST_PP_NODE_245
, 
BOOST_PP_NODE_247
)

	)

282 
	#BOOST_PP_NODE_245
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(245), 245, 246)

	)

283 
	#BOOST_PP_NODE_247
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(247), 247, 248)

	)

284 
	#BOOST_PP_NODE_252
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(252), 
BOOST_PP_NODE_250
, 
BOOST_PP_NODE_254
)

	)

285 
	#BOOST_PP_NODE_250
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(250), 
BOOST_PP_NODE_249
, 
BOOST_PP_NODE_251
)

	)

286 
	#BOOST_PP_NODE_249
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(249), 249, 250)

	)

287 
	#BOOST_PP_NODE_251
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(251), 251, 252)

	)

288 
	#BOOST_PP_NODE_254
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(254), 
BOOST_PP_NODE_253
, 
BOOST_PP_NODE_255
)

	)

289 
	#BOOST_PP_NODE_253
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(253), 253, 254)

	)

290 
	#BOOST_PP_NODE_255
(
p
Ë
	`BOOST_PP_IIF
(
	`p
(255), 255, 256)

	)

	@/usr/include/boost/preprocessor/facilities/expand.hpp

1 #/* 
C›yright
 (
C
) 2001

2 #* 
Hou£m¨que
 
Oy


3 #* 
hâp
:

5 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


6 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


7 #* 
hâp
:

9 #
#/* 
Revi£d
 
by
 
Paul
 
Mís⁄ides
 (2002) */

11 #
#/* 
Sì
 
hâp
:

13 #
#i‚de‡
BOOST_PREPROCESSOR_FACILITIES_EXPAND_HPP


15 
	#BOOST_PREPROCESSOR_FACILITIES_EXPAND_HPP


	)

16 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

18 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MWCC
(Ë&& ~BOOST_PP_CONFIG_FLAGS(Ë& 
BOOST_PP_CONFIG_DMC
()

20 
	#BOOST_PP_EXPAND
(
x
Ë
	`BOOST_PP_EXPAND_I
(x)

	)

22 
	#BOOST_PP_EXPAND
(
x
Ë
	`BOOST_PP_EXPAND_OO
((x))

	)

23 
	#BOOST_PP_EXPAND_OO
(
∑r
Ë
BOOST_PP_EXPAND_I
 ## 
	)
par

25 
#deföê
	#BOOST_PP_EXPAND_I
(
x
Ë
	)
x

	@/usr/include/boost/preprocessor/facilities/overload.hpp

3 #* (
C
Ë
C›yright
 
Paul
 
Mís⁄ides
 2011. *

4 #* (
C
Ë
C›yright
 
Edw¨d
 
Dõ√r
 2011. *

5 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì
 *

6 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©
 *

7 #* 
hâp
:

10 #
#/* 
Sì
 
hâp
:

12 #
#i‚de‡
BOOST_PREPROCESSOR_FACILITIES_OVERLOAD_HPP


14 
	#BOOST_PREPROCESSOR_FACILITIES_OVERLOAD_HPP


	)

15 
#ö˛udê
	~<boo°/¥ïro˚ss‹/ˇt.hµ
>

17 
	~<boo°/¥ïro˚ss‹/v¨üdic/size.hµ
>

18 #
#/* 
BOOST_PP_OVERLOAD
 */

20 #
#i‡
BOOST_PP_VARIADICS


22 
	#BOOST_PP_OVERLOAD
(
¥efix
, ...Ë
	`BOOST_PP_CAT
’ªfix, 
	`BOOST_PP_VARIADIC_SIZE
(
__VA_ARGS__
))

	)

	@/usr/include/boost/preprocessor/list/adt.hpp

1 #/* 
C›yright
 (
C
) 2001

2 #* 
Hou£m¨que
 
Oy


3 #* 
hâp
:

5 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


6 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


7 #* 
hâp
:

9 #* 
Sì
 
hâp
:

11 #
#/* 
Revi£d
 
by
 
Paul
 
Mís⁄ides
 (2002) */

13 #
#i‚de‡
BOOST_PREPROCESSOR_LIST_ADT_HPP


15 
	#BOOST_PREPROCESSOR_LIST_ADT_HPP


	)

16 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

18 
	~<boo°/¥ïro˚ss‹/dëaû/is_bö¨y.hµ
>

19 
	~<boo°/¥ïro˚ss‹/logiˇl/com∂.hµ
>

20 
	~<boo°/¥ïro˚ss‹/tu∂e/ót.hµ
>

21 #
#/* 
BOOST_PP_LIST_CONS
 */

23 
#deföê
	#BOOST_PP_LIST_CONS
(
hód
, 
èû
Ë(hód,Åaû)

	)

25 #
#/* 
BOOST_PP_LIST_NIL
 */

27 
#deföê
	#BOOST_PP_LIST_NIL
 
BOOST_PP_NIL


	)

29 #
#/* 
BOOST_PP_LIST_FIRST
 */

31 
#deföê
	#BOOST_PP_LIST_FIRST
(
li°
Ë
	`BOOST_PP_LIST_FIRST_D
÷i°)

	)

33 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MWCC
()

35 
	#BOOST_PP_LIST_FIRST_D
(
li°
Ë
BOOST_PP_LIST_FIRST_I
 
	)
list

37 
	#BOOST_PP_LIST_FIRST_D
(
li°
Ë
BOOST_PP_LIST_FIRST_I
 ## 
	)
list

39 
#deföê
	#BOOST_PP_LIST_FIRST_I
(
hód
, 
èû
Ë
	)
head

41 #
#/* 
BOOST_PP_LIST_REST
 */

43 
#deföê
	#BOOST_PP_LIST_REST
(
li°
Ë
	`BOOST_PP_LIST_REST_D
÷i°)

	)

45 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MWCC
()

47 
	#BOOST_PP_LIST_REST_D
(
li°
Ë
BOOST_PP_LIST_REST_I
 
	)
list

49 
	#BOOST_PP_LIST_REST_D
(
li°
Ë
BOOST_PP_LIST_REST_I
 ## 
	)
list

51 
#deföê
	#BOOST_PP_LIST_REST_I
(
hód
, 
èû
Ë
	)
tail

53 #
#/* 
BOOST_PP_LIST_IS_CONS
 */

55 #
#i‡
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_BCC
()

57 
	#BOOST_PP_LIST_IS_CONS
(
li°
Ë
	`BOOST_PP_LIST_IS_CONS_D
÷i°)

	)

58 
	#BOOST_PP_LIST_IS_CONS_D
(
li°
Ë
BOOST_PP_LIST_IS_CONS_
 ## 
	)
list

59 
	#BOOST_PP_LIST_IS_CONS_
(
hód
, 
èû
Ë1

	)

60 
	#BOOST_PP_LIST_IS_CONS_BOOST_PP_NIL
 0

	)

62 
	#BOOST_PP_LIST_IS_CONS
(
li°
Ë
	`BOOST_PP_IS_BINARY
÷i°)

	)

64 #
#/* 
BOOST_PP_LIST_IS_NIL
 */

66 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_BCC
()

68 
	#BOOST_PP_LIST_IS_NIL
(
li°
Ë
	`BOOST_PP_COMPL
(
	`BOOST_PP_IS_BINARY
÷i°))

	)

70 
	#BOOST_PP_LIST_IS_NIL
(
li°
Ë
	`BOOST_PP_COMPL
(
	`BOOST_PP_LIST_IS_CONS
÷i°))

	)

	@/usr/include/boost/preprocessor/repetition/detail/dmc/for.hpp

1 #/* 
C›yright
 (
C
) 2001

2 #* 
Hou£m¨que
 
Oy


3 #* 
hâp
:

5 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


6 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


7 #* 
hâp
:

9 #
#/* 
Revi£d
 
by
 
Paul
 
Mís⁄ides
 (2002) */

11 #
#/* 
Sì
 
hâp
:

13 #
#i‚de‡
BOOST_PREPROCESSOR_REPETITION_DETAIL_FOR_HPP


15 
	#BOOST_PREPROCESSOR_REPETITION_DETAIL_FOR_HPP


	)

16 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄åﬁ/ex¥_iif.hµ
>

18 
	~<boo°/¥ïro˚ss‹/c⁄åﬁ/iif.hµ
>

19 
	~<boo°/¥ïro˚ss‹/logiˇl/boﬁ.hµ
>

20 
	~<boo°/¥ïro˚ss‹/tu∂e/ót.hµ
>

21 
#deföê
	#BOOST_PP_FOR_1
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_1_C
(
	`BOOST_PP_BOOL
’##(2, s)), s,Ö, o, m)

	)

23 
	#BOOST_PP_FOR_2
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_2_C
(
	`BOOST_PP_BOOL
’##(3, s)), s,Ö, o, m)

	)

24 
	#BOOST_PP_FOR_3
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_3_C
(
	`BOOST_PP_BOOL
’##(4, s)), s,Ö, o, m)

	)

25 
	#BOOST_PP_FOR_4
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_4_C
(
	`BOOST_PP_BOOL
’##(5, s)), s,Ö, o, m)

	)

26 
	#BOOST_PP_FOR_5
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_5_C
(
	`BOOST_PP_BOOL
’##(6, s)), s,Ö, o, m)

	)

27 
	#BOOST_PP_FOR_6
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_6_C
(
	`BOOST_PP_BOOL
’##(7, s)), s,Ö, o, m)

	)

28 
	#BOOST_PP_FOR_7
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_7_C
(
	`BOOST_PP_BOOL
’##(8, s)), s,Ö, o, m)

	)

29 
	#BOOST_PP_FOR_8
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_8_C
(
	`BOOST_PP_BOOL
’##(9, s)), s,Ö, o, m)

	)

30 
	#BOOST_PP_FOR_9
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_9_C
(
	`BOOST_PP_BOOL
’##(10, s)), s,Ö, o, m)

	)

31 
	#BOOST_PP_FOR_10
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_10_C
(
	`BOOST_PP_BOOL
’##(11, s)), s,Ö, o, m)

	)

32 
	#BOOST_PP_FOR_11
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_11_C
(
	`BOOST_PP_BOOL
’##(12, s)), s,Ö, o, m)

	)

33 
	#BOOST_PP_FOR_12
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_12_C
(
	`BOOST_PP_BOOL
’##(13, s)), s,Ö, o, m)

	)

34 
	#BOOST_PP_FOR_13
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_13_C
(
	`BOOST_PP_BOOL
’##(14, s)), s,Ö, o, m)

	)

35 
	#BOOST_PP_FOR_14
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_14_C
(
	`BOOST_PP_BOOL
’##(15, s)), s,Ö, o, m)

	)

36 
	#BOOST_PP_FOR_15
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_15_C
(
	`BOOST_PP_BOOL
’##(16, s)), s,Ö, o, m)

	)

37 
	#BOOST_PP_FOR_16
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_16_C
(
	`BOOST_PP_BOOL
’##(17, s)), s,Ö, o, m)

	)

38 
	#BOOST_PP_FOR_17
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_17_C
(
	`BOOST_PP_BOOL
’##(18, s)), s,Ö, o, m)

	)

39 
	#BOOST_PP_FOR_18
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_18_C
(
	`BOOST_PP_BOOL
’##(19, s)), s,Ö, o, m)

	)

40 
	#BOOST_PP_FOR_19
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_19_C
(
	`BOOST_PP_BOOL
’##(20, s)), s,Ö, o, m)

	)

41 
	#BOOST_PP_FOR_20
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_20_C
(
	`BOOST_PP_BOOL
’##(21, s)), s,Ö, o, m)

	)

42 
	#BOOST_PP_FOR_21
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_21_C
(
	`BOOST_PP_BOOL
’##(22, s)), s,Ö, o, m)

	)

43 
	#BOOST_PP_FOR_22
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_22_C
(
	`BOOST_PP_BOOL
’##(23, s)), s,Ö, o, m)

	)

44 
	#BOOST_PP_FOR_23
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_23_C
(
	`BOOST_PP_BOOL
’##(24, s)), s,Ö, o, m)

	)

45 
	#BOOST_PP_FOR_24
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_24_C
(
	`BOOST_PP_BOOL
’##(25, s)), s,Ö, o, m)

	)

46 
	#BOOST_PP_FOR_25
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_25_C
(
	`BOOST_PP_BOOL
’##(26, s)), s,Ö, o, m)

	)

47 
	#BOOST_PP_FOR_26
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_26_C
(
	`BOOST_PP_BOOL
’##(27, s)), s,Ö, o, m)

	)

48 
	#BOOST_PP_FOR_27
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_27_C
(
	`BOOST_PP_BOOL
’##(28, s)), s,Ö, o, m)

	)

49 
	#BOOST_PP_FOR_28
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_28_C
(
	`BOOST_PP_BOOL
’##(29, s)), s,Ö, o, m)

	)

50 
	#BOOST_PP_FOR_29
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_29_C
(
	`BOOST_PP_BOOL
’##(30, s)), s,Ö, o, m)

	)

51 
	#BOOST_PP_FOR_30
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_30_C
(
	`BOOST_PP_BOOL
’##(31, s)), s,Ö, o, m)

	)

52 
	#BOOST_PP_FOR_31
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_31_C
(
	`BOOST_PP_BOOL
’##(32, s)), s,Ö, o, m)

	)

53 
	#BOOST_PP_FOR_32
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_32_C
(
	`BOOST_PP_BOOL
’##(33, s)), s,Ö, o, m)

	)

54 
	#BOOST_PP_FOR_33
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_33_C
(
	`BOOST_PP_BOOL
’##(34, s)), s,Ö, o, m)

	)

55 
	#BOOST_PP_FOR_34
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_34_C
(
	`BOOST_PP_BOOL
’##(35, s)), s,Ö, o, m)

	)

56 
	#BOOST_PP_FOR_35
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_35_C
(
	`BOOST_PP_BOOL
’##(36, s)), s,Ö, o, m)

	)

57 
	#BOOST_PP_FOR_36
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_36_C
(
	`BOOST_PP_BOOL
’##(37, s)), s,Ö, o, m)

	)

58 
	#BOOST_PP_FOR_37
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_37_C
(
	`BOOST_PP_BOOL
’##(38, s)), s,Ö, o, m)

	)

59 
	#BOOST_PP_FOR_38
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_38_C
(
	`BOOST_PP_BOOL
’##(39, s)), s,Ö, o, m)

	)

60 
	#BOOST_PP_FOR_39
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_39_C
(
	`BOOST_PP_BOOL
’##(40, s)), s,Ö, o, m)

	)

61 
	#BOOST_PP_FOR_40
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_40_C
(
	`BOOST_PP_BOOL
’##(41, s)), s,Ö, o, m)

	)

62 
	#BOOST_PP_FOR_41
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_41_C
(
	`BOOST_PP_BOOL
’##(42, s)), s,Ö, o, m)

	)

63 
	#BOOST_PP_FOR_42
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_42_C
(
	`BOOST_PP_BOOL
’##(43, s)), s,Ö, o, m)

	)

64 
	#BOOST_PP_FOR_43
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_43_C
(
	`BOOST_PP_BOOL
’##(44, s)), s,Ö, o, m)

	)

65 
	#BOOST_PP_FOR_44
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_44_C
(
	`BOOST_PP_BOOL
’##(45, s)), s,Ö, o, m)

	)

66 
	#BOOST_PP_FOR_45
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_45_C
(
	`BOOST_PP_BOOL
’##(46, s)), s,Ö, o, m)

	)

67 
	#BOOST_PP_FOR_46
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_46_C
(
	`BOOST_PP_BOOL
’##(47, s)), s,Ö, o, m)

	)

68 
	#BOOST_PP_FOR_47
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_47_C
(
	`BOOST_PP_BOOL
’##(48, s)), s,Ö, o, m)

	)

69 
	#BOOST_PP_FOR_48
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_48_C
(
	`BOOST_PP_BOOL
’##(49, s)), s,Ö, o, m)

	)

70 
	#BOOST_PP_FOR_49
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_49_C
(
	`BOOST_PP_BOOL
’##(50, s)), s,Ö, o, m)

	)

71 
	#BOOST_PP_FOR_50
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_50_C
(
	`BOOST_PP_BOOL
’##(51, s)), s,Ö, o, m)

	)

72 
	#BOOST_PP_FOR_51
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_51_C
(
	`BOOST_PP_BOOL
’##(52, s)), s,Ö, o, m)

	)

73 
	#BOOST_PP_FOR_52
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_52_C
(
	`BOOST_PP_BOOL
’##(53, s)), s,Ö, o, m)

	)

74 
	#BOOST_PP_FOR_53
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_53_C
(
	`BOOST_PP_BOOL
’##(54, s)), s,Ö, o, m)

	)

75 
	#BOOST_PP_FOR_54
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_54_C
(
	`BOOST_PP_BOOL
’##(55, s)), s,Ö, o, m)

	)

76 
	#BOOST_PP_FOR_55
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_55_C
(
	`BOOST_PP_BOOL
’##(56, s)), s,Ö, o, m)

	)

77 
	#BOOST_PP_FOR_56
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_56_C
(
	`BOOST_PP_BOOL
’##(57, s)), s,Ö, o, m)

	)

78 
	#BOOST_PP_FOR_57
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_57_C
(
	`BOOST_PP_BOOL
’##(58, s)), s,Ö, o, m)

	)

79 
	#BOOST_PP_FOR_58
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_58_C
(
	`BOOST_PP_BOOL
’##(59, s)), s,Ö, o, m)

	)

80 
	#BOOST_PP_FOR_59
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_59_C
(
	`BOOST_PP_BOOL
’##(60, s)), s,Ö, o, m)

	)

81 
	#BOOST_PP_FOR_60
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_60_C
(
	`BOOST_PP_BOOL
’##(61, s)), s,Ö, o, m)

	)

82 
	#BOOST_PP_FOR_61
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_61_C
(
	`BOOST_PP_BOOL
’##(62, s)), s,Ö, o, m)

	)

83 
	#BOOST_PP_FOR_62
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_62_C
(
	`BOOST_PP_BOOL
’##(63, s)), s,Ö, o, m)

	)

84 
	#BOOST_PP_FOR_63
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_63_C
(
	`BOOST_PP_BOOL
’##(64, s)), s,Ö, o, m)

	)

85 
	#BOOST_PP_FOR_64
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_64_C
(
	`BOOST_PP_BOOL
’##(65, s)), s,Ö, o, m)

	)

86 
	#BOOST_PP_FOR_65
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_65_C
(
	`BOOST_PP_BOOL
’##(66, s)), s,Ö, o, m)

	)

87 
	#BOOST_PP_FOR_66
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_66_C
(
	`BOOST_PP_BOOL
’##(67, s)), s,Ö, o, m)

	)

88 
	#BOOST_PP_FOR_67
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_67_C
(
	`BOOST_PP_BOOL
’##(68, s)), s,Ö, o, m)

	)

89 
	#BOOST_PP_FOR_68
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_68_C
(
	`BOOST_PP_BOOL
’##(69, s)), s,Ö, o, m)

	)

90 
	#BOOST_PP_FOR_69
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_69_C
(
	`BOOST_PP_BOOL
’##(70, s)), s,Ö, o, m)

	)

91 
	#BOOST_PP_FOR_70
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_70_C
(
	`BOOST_PP_BOOL
’##(71, s)), s,Ö, o, m)

	)

92 
	#BOOST_PP_FOR_71
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_71_C
(
	`BOOST_PP_BOOL
’##(72, s)), s,Ö, o, m)

	)

93 
	#BOOST_PP_FOR_72
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_72_C
(
	`BOOST_PP_BOOL
’##(73, s)), s,Ö, o, m)

	)

94 
	#BOOST_PP_FOR_73
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_73_C
(
	`BOOST_PP_BOOL
’##(74, s)), s,Ö, o, m)

	)

95 
	#BOOST_PP_FOR_74
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_74_C
(
	`BOOST_PP_BOOL
’##(75, s)), s,Ö, o, m)

	)

96 
	#BOOST_PP_FOR_75
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_75_C
(
	`BOOST_PP_BOOL
’##(76, s)), s,Ö, o, m)

	)

97 
	#BOOST_PP_FOR_76
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_76_C
(
	`BOOST_PP_BOOL
’##(77, s)), s,Ö, o, m)

	)

98 
	#BOOST_PP_FOR_77
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_77_C
(
	`BOOST_PP_BOOL
’##(78, s)), s,Ö, o, m)

	)

99 
	#BOOST_PP_FOR_78
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_78_C
(
	`BOOST_PP_BOOL
’##(79, s)), s,Ö, o, m)

	)

100 
	#BOOST_PP_FOR_79
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_79_C
(
	`BOOST_PP_BOOL
’##(80, s)), s,Ö, o, m)

	)

101 
	#BOOST_PP_FOR_80
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_80_C
(
	`BOOST_PP_BOOL
’##(81, s)), s,Ö, o, m)

	)

102 
	#BOOST_PP_FOR_81
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_81_C
(
	`BOOST_PP_BOOL
’##(82, s)), s,Ö, o, m)

	)

103 
	#BOOST_PP_FOR_82
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_82_C
(
	`BOOST_PP_BOOL
’##(83, s)), s,Ö, o, m)

	)

104 
	#BOOST_PP_FOR_83
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_83_C
(
	`BOOST_PP_BOOL
’##(84, s)), s,Ö, o, m)

	)

105 
	#BOOST_PP_FOR_84
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_84_C
(
	`BOOST_PP_BOOL
’##(85, s)), s,Ö, o, m)

	)

106 
	#BOOST_PP_FOR_85
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_85_C
(
	`BOOST_PP_BOOL
’##(86, s)), s,Ö, o, m)

	)

107 
	#BOOST_PP_FOR_86
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_86_C
(
	`BOOST_PP_BOOL
’##(87, s)), s,Ö, o, m)

	)

108 
	#BOOST_PP_FOR_87
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_87_C
(
	`BOOST_PP_BOOL
’##(88, s)), s,Ö, o, m)

	)

109 
	#BOOST_PP_FOR_88
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_88_C
(
	`BOOST_PP_BOOL
’##(89, s)), s,Ö, o, m)

	)

110 
	#BOOST_PP_FOR_89
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_89_C
(
	`BOOST_PP_BOOL
’##(90, s)), s,Ö, o, m)

	)

111 
	#BOOST_PP_FOR_90
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_90_C
(
	`BOOST_PP_BOOL
’##(91, s)), s,Ö, o, m)

	)

112 
	#BOOST_PP_FOR_91
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_91_C
(
	`BOOST_PP_BOOL
’##(92, s)), s,Ö, o, m)

	)

113 
	#BOOST_PP_FOR_92
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_92_C
(
	`BOOST_PP_BOOL
’##(93, s)), s,Ö, o, m)

	)

114 
	#BOOST_PP_FOR_93
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_93_C
(
	`BOOST_PP_BOOL
’##(94, s)), s,Ö, o, m)

	)

115 
	#BOOST_PP_FOR_94
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_94_C
(
	`BOOST_PP_BOOL
’##(95, s)), s,Ö, o, m)

	)

116 
	#BOOST_PP_FOR_95
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_95_C
(
	`BOOST_PP_BOOL
’##(96, s)), s,Ö, o, m)

	)

117 
	#BOOST_PP_FOR_96
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_96_C
(
	`BOOST_PP_BOOL
’##(97, s)), s,Ö, o, m)

	)

118 
	#BOOST_PP_FOR_97
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_97_C
(
	`BOOST_PP_BOOL
’##(98, s)), s,Ö, o, m)

	)

119 
	#BOOST_PP_FOR_98
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_98_C
(
	`BOOST_PP_BOOL
’##(99, s)), s,Ö, o, m)

	)

120 
	#BOOST_PP_FOR_99
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_99_C
(
	`BOOST_PP_BOOL
’##(100, s)), s,Ö, o, m)

	)

121 
	#BOOST_PP_FOR_100
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_100_C
(
	`BOOST_PP_BOOL
’##(101, s)), s,Ö, o, m)

	)

122 
	#BOOST_PP_FOR_101
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_101_C
(
	`BOOST_PP_BOOL
’##(102, s)), s,Ö, o, m)

	)

123 
	#BOOST_PP_FOR_102
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_102_C
(
	`BOOST_PP_BOOL
’##(103, s)), s,Ö, o, m)

	)

124 
	#BOOST_PP_FOR_103
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_103_C
(
	`BOOST_PP_BOOL
’##(104, s)), s,Ö, o, m)

	)

125 
	#BOOST_PP_FOR_104
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_104_C
(
	`BOOST_PP_BOOL
’##(105, s)), s,Ö, o, m)

	)

126 
	#BOOST_PP_FOR_105
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_105_C
(
	`BOOST_PP_BOOL
’##(106, s)), s,Ö, o, m)

	)

127 
	#BOOST_PP_FOR_106
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_106_C
(
	`BOOST_PP_BOOL
’##(107, s)), s,Ö, o, m)

	)

128 
	#BOOST_PP_FOR_107
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_107_C
(
	`BOOST_PP_BOOL
’##(108, s)), s,Ö, o, m)

	)

129 
	#BOOST_PP_FOR_108
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_108_C
(
	`BOOST_PP_BOOL
’##(109, s)), s,Ö, o, m)

	)

130 
	#BOOST_PP_FOR_109
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_109_C
(
	`BOOST_PP_BOOL
’##(110, s)), s,Ö, o, m)

	)

131 
	#BOOST_PP_FOR_110
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_110_C
(
	`BOOST_PP_BOOL
’##(111, s)), s,Ö, o, m)

	)

132 
	#BOOST_PP_FOR_111
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_111_C
(
	`BOOST_PP_BOOL
’##(112, s)), s,Ö, o, m)

	)

133 
	#BOOST_PP_FOR_112
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_112_C
(
	`BOOST_PP_BOOL
’##(113, s)), s,Ö, o, m)

	)

134 
	#BOOST_PP_FOR_113
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_113_C
(
	`BOOST_PP_BOOL
’##(114, s)), s,Ö, o, m)

	)

135 
	#BOOST_PP_FOR_114
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_114_C
(
	`BOOST_PP_BOOL
’##(115, s)), s,Ö, o, m)

	)

136 
	#BOOST_PP_FOR_115
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_115_C
(
	`BOOST_PP_BOOL
’##(116, s)), s,Ö, o, m)

	)

137 
	#BOOST_PP_FOR_116
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_116_C
(
	`BOOST_PP_BOOL
’##(117, s)), s,Ö, o, m)

	)

138 
	#BOOST_PP_FOR_117
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_117_C
(
	`BOOST_PP_BOOL
’##(118, s)), s,Ö, o, m)

	)

139 
	#BOOST_PP_FOR_118
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_118_C
(
	`BOOST_PP_BOOL
’##(119, s)), s,Ö, o, m)

	)

140 
	#BOOST_PP_FOR_119
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_119_C
(
	`BOOST_PP_BOOL
’##(120, s)), s,Ö, o, m)

	)

141 
	#BOOST_PP_FOR_120
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_120_C
(
	`BOOST_PP_BOOL
’##(121, s)), s,Ö, o, m)

	)

142 
	#BOOST_PP_FOR_121
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_121_C
(
	`BOOST_PP_BOOL
’##(122, s)), s,Ö, o, m)

	)

143 
	#BOOST_PP_FOR_122
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_122_C
(
	`BOOST_PP_BOOL
’##(123, s)), s,Ö, o, m)

	)

144 
	#BOOST_PP_FOR_123
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_123_C
(
	`BOOST_PP_BOOL
’##(124, s)), s,Ö, o, m)

	)

145 
	#BOOST_PP_FOR_124
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_124_C
(
	`BOOST_PP_BOOL
’##(125, s)), s,Ö, o, m)

	)

146 
	#BOOST_PP_FOR_125
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_125_C
(
	`BOOST_PP_BOOL
’##(126, s)), s,Ö, o, m)

	)

147 
	#BOOST_PP_FOR_126
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_126_C
(
	`BOOST_PP_BOOL
’##(127, s)), s,Ö, o, m)

	)

148 
	#BOOST_PP_FOR_127
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_127_C
(
	`BOOST_PP_BOOL
’##(128, s)), s,Ö, o, m)

	)

149 
	#BOOST_PP_FOR_128
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_128_C
(
	`BOOST_PP_BOOL
’##(129, s)), s,Ö, o, m)

	)

150 
	#BOOST_PP_FOR_129
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_129_C
(
	`BOOST_PP_BOOL
’##(130, s)), s,Ö, o, m)

	)

151 
	#BOOST_PP_FOR_130
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_130_C
(
	`BOOST_PP_BOOL
’##(131, s)), s,Ö, o, m)

	)

152 
	#BOOST_PP_FOR_131
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_131_C
(
	`BOOST_PP_BOOL
’##(132, s)), s,Ö, o, m)

	)

153 
	#BOOST_PP_FOR_132
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_132_C
(
	`BOOST_PP_BOOL
’##(133, s)), s,Ö, o, m)

	)

154 
	#BOOST_PP_FOR_133
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_133_C
(
	`BOOST_PP_BOOL
’##(134, s)), s,Ö, o, m)

	)

155 
	#BOOST_PP_FOR_134
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_134_C
(
	`BOOST_PP_BOOL
’##(135, s)), s,Ö, o, m)

	)

156 
	#BOOST_PP_FOR_135
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_135_C
(
	`BOOST_PP_BOOL
’##(136, s)), s,Ö, o, m)

	)

157 
	#BOOST_PP_FOR_136
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_136_C
(
	`BOOST_PP_BOOL
’##(137, s)), s,Ö, o, m)

	)

158 
	#BOOST_PP_FOR_137
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_137_C
(
	`BOOST_PP_BOOL
’##(138, s)), s,Ö, o, m)

	)

159 
	#BOOST_PP_FOR_138
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_138_C
(
	`BOOST_PP_BOOL
’##(139, s)), s,Ö, o, m)

	)

160 
	#BOOST_PP_FOR_139
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_139_C
(
	`BOOST_PP_BOOL
’##(140, s)), s,Ö, o, m)

	)

161 
	#BOOST_PP_FOR_140
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_140_C
(
	`BOOST_PP_BOOL
’##(141, s)), s,Ö, o, m)

	)

162 
	#BOOST_PP_FOR_141
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_141_C
(
	`BOOST_PP_BOOL
’##(142, s)), s,Ö, o, m)

	)

163 
	#BOOST_PP_FOR_142
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_142_C
(
	`BOOST_PP_BOOL
’##(143, s)), s,Ö, o, m)

	)

164 
	#BOOST_PP_FOR_143
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_143_C
(
	`BOOST_PP_BOOL
’##(144, s)), s,Ö, o, m)

	)

165 
	#BOOST_PP_FOR_144
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_144_C
(
	`BOOST_PP_BOOL
’##(145, s)), s,Ö, o, m)

	)

166 
	#BOOST_PP_FOR_145
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_145_C
(
	`BOOST_PP_BOOL
’##(146, s)), s,Ö, o, m)

	)

167 
	#BOOST_PP_FOR_146
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_146_C
(
	`BOOST_PP_BOOL
’##(147, s)), s,Ö, o, m)

	)

168 
	#BOOST_PP_FOR_147
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_147_C
(
	`BOOST_PP_BOOL
’##(148, s)), s,Ö, o, m)

	)

169 
	#BOOST_PP_FOR_148
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_148_C
(
	`BOOST_PP_BOOL
’##(149, s)), s,Ö, o, m)

	)

170 
	#BOOST_PP_FOR_149
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_149_C
(
	`BOOST_PP_BOOL
’##(150, s)), s,Ö, o, m)

	)

171 
	#BOOST_PP_FOR_150
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_150_C
(
	`BOOST_PP_BOOL
’##(151, s)), s,Ö, o, m)

	)

172 
	#BOOST_PP_FOR_151
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_151_C
(
	`BOOST_PP_BOOL
’##(152, s)), s,Ö, o, m)

	)

173 
	#BOOST_PP_FOR_152
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_152_C
(
	`BOOST_PP_BOOL
’##(153, s)), s,Ö, o, m)

	)

174 
	#BOOST_PP_FOR_153
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_153_C
(
	`BOOST_PP_BOOL
’##(154, s)), s,Ö, o, m)

	)

175 
	#BOOST_PP_FOR_154
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_154_C
(
	`BOOST_PP_BOOL
’##(155, s)), s,Ö, o, m)

	)

176 
	#BOOST_PP_FOR_155
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_155_C
(
	`BOOST_PP_BOOL
’##(156, s)), s,Ö, o, m)

	)

177 
	#BOOST_PP_FOR_156
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_156_C
(
	`BOOST_PP_BOOL
’##(157, s)), s,Ö, o, m)

	)

178 
	#BOOST_PP_FOR_157
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_157_C
(
	`BOOST_PP_BOOL
’##(158, s)), s,Ö, o, m)

	)

179 
	#BOOST_PP_FOR_158
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_158_C
(
	`BOOST_PP_BOOL
’##(159, s)), s,Ö, o, m)

	)

180 
	#BOOST_PP_FOR_159
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_159_C
(
	`BOOST_PP_BOOL
’##(160, s)), s,Ö, o, m)

	)

181 
	#BOOST_PP_FOR_160
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_160_C
(
	`BOOST_PP_BOOL
’##(161, s)), s,Ö, o, m)

	)

182 
	#BOOST_PP_FOR_161
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_161_C
(
	`BOOST_PP_BOOL
’##(162, s)), s,Ö, o, m)

	)

183 
	#BOOST_PP_FOR_162
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_162_C
(
	`BOOST_PP_BOOL
’##(163, s)), s,Ö, o, m)

	)

184 
	#BOOST_PP_FOR_163
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_163_C
(
	`BOOST_PP_BOOL
’##(164, s)), s,Ö, o, m)

	)

185 
	#BOOST_PP_FOR_164
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_164_C
(
	`BOOST_PP_BOOL
’##(165, s)), s,Ö, o, m)

	)

186 
	#BOOST_PP_FOR_165
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_165_C
(
	`BOOST_PP_BOOL
’##(166, s)), s,Ö, o, m)

	)

187 
	#BOOST_PP_FOR_166
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_166_C
(
	`BOOST_PP_BOOL
’##(167, s)), s,Ö, o, m)

	)

188 
	#BOOST_PP_FOR_167
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_167_C
(
	`BOOST_PP_BOOL
’##(168, s)), s,Ö, o, m)

	)

189 
	#BOOST_PP_FOR_168
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_168_C
(
	`BOOST_PP_BOOL
’##(169, s)), s,Ö, o, m)

	)

190 
	#BOOST_PP_FOR_169
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_169_C
(
	`BOOST_PP_BOOL
’##(170, s)), s,Ö, o, m)

	)

191 
	#BOOST_PP_FOR_170
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_170_C
(
	`BOOST_PP_BOOL
’##(171, s)), s,Ö, o, m)

	)

192 
	#BOOST_PP_FOR_171
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_171_C
(
	`BOOST_PP_BOOL
’##(172, s)), s,Ö, o, m)

	)

193 
	#BOOST_PP_FOR_172
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_172_C
(
	`BOOST_PP_BOOL
’##(173, s)), s,Ö, o, m)

	)

194 
	#BOOST_PP_FOR_173
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_173_C
(
	`BOOST_PP_BOOL
’##(174, s)), s,Ö, o, m)

	)

195 
	#BOOST_PP_FOR_174
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_174_C
(
	`BOOST_PP_BOOL
’##(175, s)), s,Ö, o, m)

	)

196 
	#BOOST_PP_FOR_175
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_175_C
(
	`BOOST_PP_BOOL
’##(176, s)), s,Ö, o, m)

	)

197 
	#BOOST_PP_FOR_176
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_176_C
(
	`BOOST_PP_BOOL
’##(177, s)), s,Ö, o, m)

	)

198 
	#BOOST_PP_FOR_177
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_177_C
(
	`BOOST_PP_BOOL
’##(178, s)), s,Ö, o, m)

	)

199 
	#BOOST_PP_FOR_178
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_178_C
(
	`BOOST_PP_BOOL
’##(179, s)), s,Ö, o, m)

	)

200 
	#BOOST_PP_FOR_179
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_179_C
(
	`BOOST_PP_BOOL
’##(180, s)), s,Ö, o, m)

	)

201 
	#BOOST_PP_FOR_180
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_180_C
(
	`BOOST_PP_BOOL
’##(181, s)), s,Ö, o, m)

	)

202 
	#BOOST_PP_FOR_181
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_181_C
(
	`BOOST_PP_BOOL
’##(182, s)), s,Ö, o, m)

	)

203 
	#BOOST_PP_FOR_182
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_182_C
(
	`BOOST_PP_BOOL
’##(183, s)), s,Ö, o, m)

	)

204 
	#BOOST_PP_FOR_183
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_183_C
(
	`BOOST_PP_BOOL
’##(184, s)), s,Ö, o, m)

	)

205 
	#BOOST_PP_FOR_184
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_184_C
(
	`BOOST_PP_BOOL
’##(185, s)), s,Ö, o, m)

	)

206 
	#BOOST_PP_FOR_185
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_185_C
(
	`BOOST_PP_BOOL
’##(186, s)), s,Ö, o, m)

	)

207 
	#BOOST_PP_FOR_186
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_186_C
(
	`BOOST_PP_BOOL
’##(187, s)), s,Ö, o, m)

	)

208 
	#BOOST_PP_FOR_187
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_187_C
(
	`BOOST_PP_BOOL
’##(188, s)), s,Ö, o, m)

	)

209 
	#BOOST_PP_FOR_188
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_188_C
(
	`BOOST_PP_BOOL
’##(189, s)), s,Ö, o, m)

	)

210 
	#BOOST_PP_FOR_189
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_189_C
(
	`BOOST_PP_BOOL
’##(190, s)), s,Ö, o, m)

	)

211 
	#BOOST_PP_FOR_190
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_190_C
(
	`BOOST_PP_BOOL
’##(191, s)), s,Ö, o, m)

	)

212 
	#BOOST_PP_FOR_191
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_191_C
(
	`BOOST_PP_BOOL
’##(192, s)), s,Ö, o, m)

	)

213 
	#BOOST_PP_FOR_192
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_192_C
(
	`BOOST_PP_BOOL
’##(193, s)), s,Ö, o, m)

	)

214 
	#BOOST_PP_FOR_193
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_193_C
(
	`BOOST_PP_BOOL
’##(194, s)), s,Ö, o, m)

	)

215 
	#BOOST_PP_FOR_194
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_194_C
(
	`BOOST_PP_BOOL
’##(195, s)), s,Ö, o, m)

	)

216 
	#BOOST_PP_FOR_195
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_195_C
(
	`BOOST_PP_BOOL
’##(196, s)), s,Ö, o, m)

	)

217 
	#BOOST_PP_FOR_196
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_196_C
(
	`BOOST_PP_BOOL
’##(197, s)), s,Ö, o, m)

	)

218 
	#BOOST_PP_FOR_197
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_197_C
(
	`BOOST_PP_BOOL
’##(198, s)), s,Ö, o, m)

	)

219 
	#BOOST_PP_FOR_198
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_198_C
(
	`BOOST_PP_BOOL
’##(199, s)), s,Ö, o, m)

	)

220 
	#BOOST_PP_FOR_199
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_199_C
(
	`BOOST_PP_BOOL
’##(200, s)), s,Ö, o, m)

	)

221 
	#BOOST_PP_FOR_200
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_200_C
(
	`BOOST_PP_BOOL
’##(201, s)), s,Ö, o, m)

	)

222 
	#BOOST_PP_FOR_201
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_201_C
(
	`BOOST_PP_BOOL
’##(202, s)), s,Ö, o, m)

	)

223 
	#BOOST_PP_FOR_202
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_202_C
(
	`BOOST_PP_BOOL
’##(203, s)), s,Ö, o, m)

	)

224 
	#BOOST_PP_FOR_203
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_203_C
(
	`BOOST_PP_BOOL
’##(204, s)), s,Ö, o, m)

	)

225 
	#BOOST_PP_FOR_204
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_204_C
(
	`BOOST_PP_BOOL
’##(205, s)), s,Ö, o, m)

	)

226 
	#BOOST_PP_FOR_205
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_205_C
(
	`BOOST_PP_BOOL
’##(206, s)), s,Ö, o, m)

	)

227 
	#BOOST_PP_FOR_206
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_206_C
(
	`BOOST_PP_BOOL
’##(207, s)), s,Ö, o, m)

	)

228 
	#BOOST_PP_FOR_207
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_207_C
(
	`BOOST_PP_BOOL
’##(208, s)), s,Ö, o, m)

	)

229 
	#BOOST_PP_FOR_208
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_208_C
(
	`BOOST_PP_BOOL
’##(209, s)), s,Ö, o, m)

	)

230 
	#BOOST_PP_FOR_209
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_209_C
(
	`BOOST_PP_BOOL
’##(210, s)), s,Ö, o, m)

	)

231 
	#BOOST_PP_FOR_210
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_210_C
(
	`BOOST_PP_BOOL
’##(211, s)), s,Ö, o, m)

	)

232 
	#BOOST_PP_FOR_211
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_211_C
(
	`BOOST_PP_BOOL
’##(212, s)), s,Ö, o, m)

	)

233 
	#BOOST_PP_FOR_212
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_212_C
(
	`BOOST_PP_BOOL
’##(213, s)), s,Ö, o, m)

	)

234 
	#BOOST_PP_FOR_213
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_213_C
(
	`BOOST_PP_BOOL
’##(214, s)), s,Ö, o, m)

	)

235 
	#BOOST_PP_FOR_214
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_214_C
(
	`BOOST_PP_BOOL
’##(215, s)), s,Ö, o, m)

	)

236 
	#BOOST_PP_FOR_215
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_215_C
(
	`BOOST_PP_BOOL
’##(216, s)), s,Ö, o, m)

	)

237 
	#BOOST_PP_FOR_216
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_216_C
(
	`BOOST_PP_BOOL
’##(217, s)), s,Ö, o, m)

	)

238 
	#BOOST_PP_FOR_217
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_217_C
(
	`BOOST_PP_BOOL
’##(218, s)), s,Ö, o, m)

	)

239 
	#BOOST_PP_FOR_218
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_218_C
(
	`BOOST_PP_BOOL
’##(219, s)), s,Ö, o, m)

	)

240 
	#BOOST_PP_FOR_219
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_219_C
(
	`BOOST_PP_BOOL
’##(220, s)), s,Ö, o, m)

	)

241 
	#BOOST_PP_FOR_220
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_220_C
(
	`BOOST_PP_BOOL
’##(221, s)), s,Ö, o, m)

	)

242 
	#BOOST_PP_FOR_221
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_221_C
(
	`BOOST_PP_BOOL
’##(222, s)), s,Ö, o, m)

	)

243 
	#BOOST_PP_FOR_222
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_222_C
(
	`BOOST_PP_BOOL
’##(223, s)), s,Ö, o, m)

	)

244 
	#BOOST_PP_FOR_223
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_223_C
(
	`BOOST_PP_BOOL
’##(224, s)), s,Ö, o, m)

	)

245 
	#BOOST_PP_FOR_224
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_224_C
(
	`BOOST_PP_BOOL
’##(225, s)), s,Ö, o, m)

	)

246 
	#BOOST_PP_FOR_225
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_225_C
(
	`BOOST_PP_BOOL
’##(226, s)), s,Ö, o, m)

	)

247 
	#BOOST_PP_FOR_226
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_226_C
(
	`BOOST_PP_BOOL
’##(227, s)), s,Ö, o, m)

	)

248 
	#BOOST_PP_FOR_227
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_227_C
(
	`BOOST_PP_BOOL
’##(228, s)), s,Ö, o, m)

	)

249 
	#BOOST_PP_FOR_228
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_228_C
(
	`BOOST_PP_BOOL
’##(229, s)), s,Ö, o, m)

	)

250 
	#BOOST_PP_FOR_229
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_229_C
(
	`BOOST_PP_BOOL
’##(230, s)), s,Ö, o, m)

	)

251 
	#BOOST_PP_FOR_230
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_230_C
(
	`BOOST_PP_BOOL
’##(231, s)), s,Ö, o, m)

	)

252 
	#BOOST_PP_FOR_231
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_231_C
(
	`BOOST_PP_BOOL
’##(232, s)), s,Ö, o, m)

	)

253 
	#BOOST_PP_FOR_232
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_232_C
(
	`BOOST_PP_BOOL
’##(233, s)), s,Ö, o, m)

	)

254 
	#BOOST_PP_FOR_233
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_233_C
(
	`BOOST_PP_BOOL
’##(234, s)), s,Ö, o, m)

	)

255 
	#BOOST_PP_FOR_234
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_234_C
(
	`BOOST_PP_BOOL
’##(235, s)), s,Ö, o, m)

	)

256 
	#BOOST_PP_FOR_235
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_235_C
(
	`BOOST_PP_BOOL
’##(236, s)), s,Ö, o, m)

	)

257 
	#BOOST_PP_FOR_236
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_236_C
(
	`BOOST_PP_BOOL
’##(237, s)), s,Ö, o, m)

	)

258 
	#BOOST_PP_FOR_237
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_237_C
(
	`BOOST_PP_BOOL
’##(238, s)), s,Ö, o, m)

	)

259 
	#BOOST_PP_FOR_238
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_238_C
(
	`BOOST_PP_BOOL
’##(239, s)), s,Ö, o, m)

	)

260 
	#BOOST_PP_FOR_239
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_239_C
(
	`BOOST_PP_BOOL
’##(240, s)), s,Ö, o, m)

	)

261 
	#BOOST_PP_FOR_240
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_240_C
(
	`BOOST_PP_BOOL
’##(241, s)), s,Ö, o, m)

	)

262 
	#BOOST_PP_FOR_241
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_241_C
(
	`BOOST_PP_BOOL
’##(242, s)), s,Ö, o, m)

	)

263 
	#BOOST_PP_FOR_242
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_242_C
(
	`BOOST_PP_BOOL
’##(243, s)), s,Ö, o, m)

	)

264 
	#BOOST_PP_FOR_243
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_243_C
(
	`BOOST_PP_BOOL
’##(244, s)), s,Ö, o, m)

	)

265 
	#BOOST_PP_FOR_244
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_244_C
(
	`BOOST_PP_BOOL
’##(245, s)), s,Ö, o, m)

	)

266 
	#BOOST_PP_FOR_245
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_245_C
(
	`BOOST_PP_BOOL
’##(246, s)), s,Ö, o, m)

	)

267 
	#BOOST_PP_FOR_246
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_246_C
(
	`BOOST_PP_BOOL
’##(247, s)), s,Ö, o, m)

	)

268 
	#BOOST_PP_FOR_247
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_247_C
(
	`BOOST_PP_BOOL
’##(248, s)), s,Ö, o, m)

	)

269 
	#BOOST_PP_FOR_248
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_248_C
(
	`BOOST_PP_BOOL
’##(249, s)), s,Ö, o, m)

	)

270 
	#BOOST_PP_FOR_249
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_249_C
(
	`BOOST_PP_BOOL
’##(250, s)), s,Ö, o, m)

	)

271 
	#BOOST_PP_FOR_250
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_250_C
(
	`BOOST_PP_BOOL
’##(251, s)), s,Ö, o, m)

	)

272 
	#BOOST_PP_FOR_251
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_251_C
(
	`BOOST_PP_BOOL
’##(252, s)), s,Ö, o, m)

	)

273 
	#BOOST_PP_FOR_252
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_252_C
(
	`BOOST_PP_BOOL
’##(253, s)), s,Ö, o, m)

	)

274 
	#BOOST_PP_FOR_253
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_253_C
(
	`BOOST_PP_BOOL
’##(254, s)), s,Ö, o, m)

	)

275 
	#BOOST_PP_FOR_254
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_254_C
(
	`BOOST_PP_BOOL
’##(255, s)), s,Ö, o, m)

	)

276 
	#BOOST_PP_FOR_255
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_255_C
(
	`BOOST_PP_BOOL
’##(256, s)), s,Ö, o, m)

	)

277 
	#BOOST_PP_FOR_256
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_256_C
(
	`BOOST_PP_BOOL
’##(257, s)), s,Ö, o, m)

	)

278 
#deföê
	#BOOST_PP_FOR_1_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(2, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_2
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(2, s),Ö, o, m)

	)

280 
	#BOOST_PP_FOR_2_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(3, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_3
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(3, s),Ö, o, m)

	)

281 
	#BOOST_PP_FOR_3_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(4, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_4
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(4, s),Ö, o, m)

	)

282 
	#BOOST_PP_FOR_4_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(5, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_5
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(5, s),Ö, o, m)

	)

283 
	#BOOST_PP_FOR_5_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(6, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_6
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(6, s),Ö, o, m)

	)

284 
	#BOOST_PP_FOR_6_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(7, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_7
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(7, s),Ö, o, m)

	)

285 
	#BOOST_PP_FOR_7_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(8, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_8
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(8, s),Ö, o, m)

	)

286 
	#BOOST_PP_FOR_8_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(9, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_9
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(9, s),Ö, o, m)

	)

287 
	#BOOST_PP_FOR_9_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(10, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_10
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(10, s),Ö, o, m)

	)

288 
	#BOOST_PP_FOR_10_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(11, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_11
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(11, s),Ö, o, m)

	)

289 
	#BOOST_PP_FOR_11_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(12, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_12
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(12, s),Ö, o, m)

	)

290 
	#BOOST_PP_FOR_12_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(13, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_13
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(13, s),Ö, o, m)

	)

291 
	#BOOST_PP_FOR_13_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(14, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_14
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(14, s),Ö, o, m)

	)

292 
	#BOOST_PP_FOR_14_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(15, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_15
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(15, s),Ö, o, m)

	)

293 
	#BOOST_PP_FOR_15_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(16, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_16
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(16, s),Ö, o, m)

	)

294 
	#BOOST_PP_FOR_16_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(17, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_17
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(17, s),Ö, o, m)

	)

295 
	#BOOST_PP_FOR_17_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(18, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_18
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(18, s),Ö, o, m)

	)

296 
	#BOOST_PP_FOR_18_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(19, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_19
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(19, s),Ö, o, m)

	)

297 
	#BOOST_PP_FOR_19_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(20, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_20
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(20, s),Ö, o, m)

	)

298 
	#BOOST_PP_FOR_20_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(21, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_21
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(21, s),Ö, o, m)

	)

299 
	#BOOST_PP_FOR_21_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(22, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_22
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(22, s),Ö, o, m)

	)

300 
	#BOOST_PP_FOR_22_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(23, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_23
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(23, s),Ö, o, m)

	)

301 
	#BOOST_PP_FOR_23_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(24, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_24
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(24, s),Ö, o, m)

	)

302 
	#BOOST_PP_FOR_24_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(25, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_25
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(25, s),Ö, o, m)

	)

303 
	#BOOST_PP_FOR_25_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(26, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_26
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(26, s),Ö, o, m)

	)

304 
	#BOOST_PP_FOR_26_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(27, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_27
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(27, s),Ö, o, m)

	)

305 
	#BOOST_PP_FOR_27_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(28, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_28
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(28, s),Ö, o, m)

	)

306 
	#BOOST_PP_FOR_28_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(29, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_29
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(29, s),Ö, o, m)

	)

307 
	#BOOST_PP_FOR_29_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(30, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_30
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(30, s),Ö, o, m)

	)

308 
	#BOOST_PP_FOR_30_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(31, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_31
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(31, s),Ö, o, m)

	)

309 
	#BOOST_PP_FOR_31_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(32, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_32
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(32, s),Ö, o, m)

	)

310 
	#BOOST_PP_FOR_32_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(33, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_33
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(33, s),Ö, o, m)

	)

311 
	#BOOST_PP_FOR_33_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(34, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_34
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(34, s),Ö, o, m)

	)

312 
	#BOOST_PP_FOR_34_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(35, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_35
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(35, s),Ö, o, m)

	)

313 
	#BOOST_PP_FOR_35_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(36, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_36
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(36, s),Ö, o, m)

	)

314 
	#BOOST_PP_FOR_36_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(37, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_37
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(37, s),Ö, o, m)

	)

315 
	#BOOST_PP_FOR_37_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(38, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_38
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(38, s),Ö, o, m)

	)

316 
	#BOOST_PP_FOR_38_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(39, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_39
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(39, s),Ö, o, m)

	)

317 
	#BOOST_PP_FOR_39_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(40, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_40
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(40, s),Ö, o, m)

	)

318 
	#BOOST_PP_FOR_40_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(41, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_41
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(41, s),Ö, o, m)

	)

319 
	#BOOST_PP_FOR_41_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(42, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_42
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(42, s),Ö, o, m)

	)

320 
	#BOOST_PP_FOR_42_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(43, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_43
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(43, s),Ö, o, m)

	)

321 
	#BOOST_PP_FOR_43_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(44, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_44
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(44, s),Ö, o, m)

	)

322 
	#BOOST_PP_FOR_44_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(45, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_45
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(45, s),Ö, o, m)

	)

323 
	#BOOST_PP_FOR_45_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(46, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_46
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(46, s),Ö, o, m)

	)

324 
	#BOOST_PP_FOR_46_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(47, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_47
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(47, s),Ö, o, m)

	)

325 
	#BOOST_PP_FOR_47_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(48, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_48
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(48, s),Ö, o, m)

	)

326 
	#BOOST_PP_FOR_48_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(49, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_49
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(49, s),Ö, o, m)

	)

327 
	#BOOST_PP_FOR_49_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(50, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_50
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(50, s),Ö, o, m)

	)

328 
	#BOOST_PP_FOR_50_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(51, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_51
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(51, s),Ö, o, m)

	)

329 
	#BOOST_PP_FOR_51_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(52, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_52
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(52, s),Ö, o, m)

	)

330 
	#BOOST_PP_FOR_52_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(53, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_53
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(53, s),Ö, o, m)

	)

331 
	#BOOST_PP_FOR_53_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(54, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_54
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(54, s),Ö, o, m)

	)

332 
	#BOOST_PP_FOR_54_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(55, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_55
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(55, s),Ö, o, m)

	)

333 
	#BOOST_PP_FOR_55_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(56, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_56
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(56, s),Ö, o, m)

	)

334 
	#BOOST_PP_FOR_56_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(57, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_57
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(57, s),Ö, o, m)

	)

335 
	#BOOST_PP_FOR_57_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(58, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_58
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(58, s),Ö, o, m)

	)

336 
	#BOOST_PP_FOR_58_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(59, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_59
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(59, s),Ö, o, m)

	)

337 
	#BOOST_PP_FOR_59_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(60, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_60
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(60, s),Ö, o, m)

	)

338 
	#BOOST_PP_FOR_60_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(61, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_61
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(61, s),Ö, o, m)

	)

339 
	#BOOST_PP_FOR_61_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(62, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_62
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(62, s),Ö, o, m)

	)

340 
	#BOOST_PP_FOR_62_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(63, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_63
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(63, s),Ö, o, m)

	)

341 
	#BOOST_PP_FOR_63_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(64, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_64
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(64, s),Ö, o, m)

	)

342 
	#BOOST_PP_FOR_64_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(65, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_65
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(65, s),Ö, o, m)

	)

343 
	#BOOST_PP_FOR_65_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(66, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_66
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(66, s),Ö, o, m)

	)

344 
	#BOOST_PP_FOR_66_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(67, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_67
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(67, s),Ö, o, m)

	)

345 
	#BOOST_PP_FOR_67_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(68, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_68
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(68, s),Ö, o, m)

	)

346 
	#BOOST_PP_FOR_68_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(69, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_69
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(69, s),Ö, o, m)

	)

347 
	#BOOST_PP_FOR_69_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(70, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_70
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(70, s),Ö, o, m)

	)

348 
	#BOOST_PP_FOR_70_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(71, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_71
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(71, s),Ö, o, m)

	)

349 
	#BOOST_PP_FOR_71_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(72, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_72
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(72, s),Ö, o, m)

	)

350 
	#BOOST_PP_FOR_72_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(73, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_73
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(73, s),Ö, o, m)

	)

351 
	#BOOST_PP_FOR_73_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(74, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_74
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(74, s),Ö, o, m)

	)

352 
	#BOOST_PP_FOR_74_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(75, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_75
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(75, s),Ö, o, m)

	)

353 
	#BOOST_PP_FOR_75_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(76, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_76
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(76, s),Ö, o, m)

	)

354 
	#BOOST_PP_FOR_76_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(77, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_77
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(77, s),Ö, o, m)

	)

355 
	#BOOST_PP_FOR_77_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(78, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_78
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(78, s),Ö, o, m)

	)

356 
	#BOOST_PP_FOR_78_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(79, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_79
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(79, s),Ö, o, m)

	)

357 
	#BOOST_PP_FOR_79_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(80, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_80
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(80, s),Ö, o, m)

	)

358 
	#BOOST_PP_FOR_80_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(81, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_81
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(81, s),Ö, o, m)

	)

359 
	#BOOST_PP_FOR_81_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(82, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_82
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(82, s),Ö, o, m)

	)

360 
	#BOOST_PP_FOR_82_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(83, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_83
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(83, s),Ö, o, m)

	)

361 
	#BOOST_PP_FOR_83_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(84, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_84
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(84, s),Ö, o, m)

	)

362 
	#BOOST_PP_FOR_84_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(85, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_85
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(85, s),Ö, o, m)

	)

363 
	#BOOST_PP_FOR_85_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(86, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_86
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(86, s),Ö, o, m)

	)

364 
	#BOOST_PP_FOR_86_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(87, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_87
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(87, s),Ö, o, m)

	)

365 
	#BOOST_PP_FOR_87_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(88, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_88
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(88, s),Ö, o, m)

	)

366 
	#BOOST_PP_FOR_88_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(89, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_89
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(89, s),Ö, o, m)

	)

367 
	#BOOST_PP_FOR_89_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(90, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_90
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(90, s),Ö, o, m)

	)

368 
	#BOOST_PP_FOR_90_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(91, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_91
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(91, s),Ö, o, m)

	)

369 
	#BOOST_PP_FOR_91_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(92, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_92
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(92, s),Ö, o, m)

	)

370 
	#BOOST_PP_FOR_92_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(93, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_93
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(93, s),Ö, o, m)

	)

371 
	#BOOST_PP_FOR_93_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(94, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_94
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(94, s),Ö, o, m)

	)

372 
	#BOOST_PP_FOR_94_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(95, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_95
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(95, s),Ö, o, m)

	)

373 
	#BOOST_PP_FOR_95_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(96, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_96
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(96, s),Ö, o, m)

	)

374 
	#BOOST_PP_FOR_96_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(97, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_97
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(97, s),Ö, o, m)

	)

375 
	#BOOST_PP_FOR_97_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(98, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_98
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(98, s),Ö, o, m)

	)

376 
	#BOOST_PP_FOR_98_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(99, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_99
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(99, s),Ö, o, m)

	)

377 
	#BOOST_PP_FOR_99_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(100, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_100
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(100, s),Ö, o, m)

	)

378 
	#BOOST_PP_FOR_100_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(101, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_101
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(101, s),Ö, o, m)

	)

379 
	#BOOST_PP_FOR_101_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(102, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_102
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(102, s),Ö, o, m)

	)

380 
	#BOOST_PP_FOR_102_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(103, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_103
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(103, s),Ö, o, m)

	)

381 
	#BOOST_PP_FOR_103_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(104, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_104
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(104, s),Ö, o, m)

	)

382 
	#BOOST_PP_FOR_104_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(105, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_105
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(105, s),Ö, o, m)

	)

383 
	#BOOST_PP_FOR_105_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(106, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_106
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(106, s),Ö, o, m)

	)

384 
	#BOOST_PP_FOR_106_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(107, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_107
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(107, s),Ö, o, m)

	)

385 
	#BOOST_PP_FOR_107_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(108, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_108
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(108, s),Ö, o, m)

	)

386 
	#BOOST_PP_FOR_108_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(109, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_109
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(109, s),Ö, o, m)

	)

387 
	#BOOST_PP_FOR_109_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(110, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_110
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(110, s),Ö, o, m)

	)

388 
	#BOOST_PP_FOR_110_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(111, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_111
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(111, s),Ö, o, m)

	)

389 
	#BOOST_PP_FOR_111_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(112, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_112
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(112, s),Ö, o, m)

	)

390 
	#BOOST_PP_FOR_112_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(113, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_113
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(113, s),Ö, o, m)

	)

391 
	#BOOST_PP_FOR_113_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(114, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_114
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(114, s),Ö, o, m)

	)

392 
	#BOOST_PP_FOR_114_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(115, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_115
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(115, s),Ö, o, m)

	)

393 
	#BOOST_PP_FOR_115_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(116, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_116
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(116, s),Ö, o, m)

	)

394 
	#BOOST_PP_FOR_116_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(117, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_117
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(117, s),Ö, o, m)

	)

395 
	#BOOST_PP_FOR_117_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(118, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_118
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(118, s),Ö, o, m)

	)

396 
	#BOOST_PP_FOR_118_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(119, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_119
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(119, s),Ö, o, m)

	)

397 
	#BOOST_PP_FOR_119_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(120, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_120
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(120, s),Ö, o, m)

	)

398 
	#BOOST_PP_FOR_120_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(121, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_121
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(121, s),Ö, o, m)

	)

399 
	#BOOST_PP_FOR_121_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(122, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_122
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(122, s),Ö, o, m)

	)

400 
	#BOOST_PP_FOR_122_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(123, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_123
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(123, s),Ö, o, m)

	)

401 
	#BOOST_PP_FOR_123_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(124, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_124
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(124, s),Ö, o, m)

	)

402 
	#BOOST_PP_FOR_124_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(125, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_125
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(125, s),Ö, o, m)

	)

403 
	#BOOST_PP_FOR_125_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(126, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_126
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(126, s),Ö, o, m)

	)

404 
	#BOOST_PP_FOR_126_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(127, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_127
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(127, s),Ö, o, m)

	)

405 
	#BOOST_PP_FOR_127_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(128, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_128
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(128, s),Ö, o, m)

	)

406 
	#BOOST_PP_FOR_128_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(129, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_129
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(129, s),Ö, o, m)

	)

407 
	#BOOST_PP_FOR_129_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(130, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_130
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(130, s),Ö, o, m)

	)

408 
	#BOOST_PP_FOR_130_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(131, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_131
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(131, s),Ö, o, m)

	)

409 
	#BOOST_PP_FOR_131_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(132, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_132
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(132, s),Ö, o, m)

	)

410 
	#BOOST_PP_FOR_132_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(133, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_133
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(133, s),Ö, o, m)

	)

411 
	#BOOST_PP_FOR_133_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(134, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_134
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(134, s),Ö, o, m)

	)

412 
	#BOOST_PP_FOR_134_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(135, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_135
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(135, s),Ö, o, m)

	)

413 
	#BOOST_PP_FOR_135_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(136, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_136
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(136, s),Ö, o, m)

	)

414 
	#BOOST_PP_FOR_136_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(137, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_137
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(137, s),Ö, o, m)

	)

415 
	#BOOST_PP_FOR_137_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(138, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_138
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(138, s),Ö, o, m)

	)

416 
	#BOOST_PP_FOR_138_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(139, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_139
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(139, s),Ö, o, m)

	)

417 
	#BOOST_PP_FOR_139_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(140, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_140
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(140, s),Ö, o, m)

	)

418 
	#BOOST_PP_FOR_140_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(141, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_141
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(141, s),Ö, o, m)

	)

419 
	#BOOST_PP_FOR_141_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(142, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_142
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(142, s),Ö, o, m)

	)

420 
	#BOOST_PP_FOR_142_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(143, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_143
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(143, s),Ö, o, m)

	)

421 
	#BOOST_PP_FOR_143_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(144, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_144
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(144, s),Ö, o, m)

	)

422 
	#BOOST_PP_FOR_144_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(145, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_145
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(145, s),Ö, o, m)

	)

423 
	#BOOST_PP_FOR_145_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(146, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_146
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(146, s),Ö, o, m)

	)

424 
	#BOOST_PP_FOR_146_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(147, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_147
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(147, s),Ö, o, m)

	)

425 
	#BOOST_PP_FOR_147_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(148, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_148
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(148, s),Ö, o, m)

	)

426 
	#BOOST_PP_FOR_148_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(149, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_149
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(149, s),Ö, o, m)

	)

427 
	#BOOST_PP_FOR_149_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(150, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_150
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(150, s),Ö, o, m)

	)

428 
	#BOOST_PP_FOR_150_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(151, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_151
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(151, s),Ö, o, m)

	)

429 
	#BOOST_PP_FOR_151_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(152, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_152
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(152, s),Ö, o, m)

	)

430 
	#BOOST_PP_FOR_152_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(153, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_153
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(153, s),Ö, o, m)

	)

431 
	#BOOST_PP_FOR_153_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(154, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_154
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(154, s),Ö, o, m)

	)

432 
	#BOOST_PP_FOR_154_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(155, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_155
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(155, s),Ö, o, m)

	)

433 
	#BOOST_PP_FOR_155_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(156, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_156
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(156, s),Ö, o, m)

	)

434 
	#BOOST_PP_FOR_156_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(157, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_157
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(157, s),Ö, o, m)

	)

435 
	#BOOST_PP_FOR_157_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(158, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_158
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(158, s),Ö, o, m)

	)

436 
	#BOOST_PP_FOR_158_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(159, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_159
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(159, s),Ö, o, m)

	)

437 
	#BOOST_PP_FOR_159_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(160, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_160
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(160, s),Ö, o, m)

	)

438 
	#BOOST_PP_FOR_160_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(161, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_161
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(161, s),Ö, o, m)

	)

439 
	#BOOST_PP_FOR_161_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(162, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_162
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(162, s),Ö, o, m)

	)

440 
	#BOOST_PP_FOR_162_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(163, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_163
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(163, s),Ö, o, m)

	)

441 
	#BOOST_PP_FOR_163_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(164, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_164
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(164, s),Ö, o, m)

	)

442 
	#BOOST_PP_FOR_164_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(165, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_165
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(165, s),Ö, o, m)

	)

443 
	#BOOST_PP_FOR_165_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(166, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_166
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(166, s),Ö, o, m)

	)

444 
	#BOOST_PP_FOR_166_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(167, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_167
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(167, s),Ö, o, m)

	)

445 
	#BOOST_PP_FOR_167_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(168, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_168
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(168, s),Ö, o, m)

	)

446 
	#BOOST_PP_FOR_168_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(169, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_169
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(169, s),Ö, o, m)

	)

447 
	#BOOST_PP_FOR_169_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(170, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_170
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(170, s),Ö, o, m)

	)

448 
	#BOOST_PP_FOR_170_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(171, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_171
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(171, s),Ö, o, m)

	)

449 
	#BOOST_PP_FOR_171_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(172, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_172
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(172, s),Ö, o, m)

	)

450 
	#BOOST_PP_FOR_172_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(173, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_173
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(173, s),Ö, o, m)

	)

451 
	#BOOST_PP_FOR_173_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(174, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_174
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(174, s),Ö, o, m)

	)

452 
	#BOOST_PP_FOR_174_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(175, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_175
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(175, s),Ö, o, m)

	)

453 
	#BOOST_PP_FOR_175_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(176, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_176
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(176, s),Ö, o, m)

	)

454 
	#BOOST_PP_FOR_176_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(177, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_177
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(177, s),Ö, o, m)

	)

455 
	#BOOST_PP_FOR_177_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(178, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_178
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(178, s),Ö, o, m)

	)

456 
	#BOOST_PP_FOR_178_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(179, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_179
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(179, s),Ö, o, m)

	)

457 
	#BOOST_PP_FOR_179_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(180, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_180
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(180, s),Ö, o, m)

	)

458 
	#BOOST_PP_FOR_180_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(181, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_181
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(181, s),Ö, o, m)

	)

459 
	#BOOST_PP_FOR_181_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(182, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_182
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(182, s),Ö, o, m)

	)

460 
	#BOOST_PP_FOR_182_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(183, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_183
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(183, s),Ö, o, m)

	)

461 
	#BOOST_PP_FOR_183_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(184, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_184
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(184, s),Ö, o, m)

	)

462 
	#BOOST_PP_FOR_184_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(185, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_185
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(185, s),Ö, o, m)

	)

463 
	#BOOST_PP_FOR_185_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(186, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_186
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(186, s),Ö, o, m)

	)

464 
	#BOOST_PP_FOR_186_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(187, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_187
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(187, s),Ö, o, m)

	)

465 
	#BOOST_PP_FOR_187_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(188, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_188
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(188, s),Ö, o, m)

	)

466 
	#BOOST_PP_FOR_188_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(189, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_189
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(189, s),Ö, o, m)

	)

467 
	#BOOST_PP_FOR_189_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(190, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_190
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(190, s),Ö, o, m)

	)

468 
	#BOOST_PP_FOR_190_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(191, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_191
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(191, s),Ö, o, m)

	)

469 
	#BOOST_PP_FOR_191_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(192, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_192
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(192, s),Ö, o, m)

	)

470 
	#BOOST_PP_FOR_192_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(193, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_193
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(193, s),Ö, o, m)

	)

471 
	#BOOST_PP_FOR_193_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(194, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_194
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(194, s),Ö, o, m)

	)

472 
	#BOOST_PP_FOR_194_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(195, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_195
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(195, s),Ö, o, m)

	)

473 
	#BOOST_PP_FOR_195_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(196, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_196
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(196, s),Ö, o, m)

	)

474 
	#BOOST_PP_FOR_196_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(197, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_197
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(197, s),Ö, o, m)

	)

475 
	#BOOST_PP_FOR_197_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(198, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_198
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(198, s),Ö, o, m)

	)

476 
	#BOOST_PP_FOR_198_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(199, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_199
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(199, s),Ö, o, m)

	)

477 
	#BOOST_PP_FOR_199_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(200, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_200
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(200, s),Ö, o, m)

	)

478 
	#BOOST_PP_FOR_200_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(201, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_201
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(201, s),Ö, o, m)

	)

479 
	#BOOST_PP_FOR_201_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(202, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_202
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(202, s),Ö, o, m)

	)

480 
	#BOOST_PP_FOR_202_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(203, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_203
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(203, s),Ö, o, m)

	)

481 
	#BOOST_PP_FOR_203_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(204, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_204
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(204, s),Ö, o, m)

	)

482 
	#BOOST_PP_FOR_204_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(205, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_205
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(205, s),Ö, o, m)

	)

483 
	#BOOST_PP_FOR_205_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(206, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_206
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(206, s),Ö, o, m)

	)

484 
	#BOOST_PP_FOR_206_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(207, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_207
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(207, s),Ö, o, m)

	)

485 
	#BOOST_PP_FOR_207_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(208, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_208
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(208, s),Ö, o, m)

	)

486 
	#BOOST_PP_FOR_208_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(209, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_209
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(209, s),Ö, o, m)

	)

487 
	#BOOST_PP_FOR_209_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(210, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_210
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(210, s),Ö, o, m)

	)

488 
	#BOOST_PP_FOR_210_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(211, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_211
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(211, s),Ö, o, m)

	)

489 
	#BOOST_PP_FOR_211_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(212, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_212
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(212, s),Ö, o, m)

	)

490 
	#BOOST_PP_FOR_212_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(213, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_213
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(213, s),Ö, o, m)

	)

491 
	#BOOST_PP_FOR_213_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(214, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_214
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(214, s),Ö, o, m)

	)

492 
	#BOOST_PP_FOR_214_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(215, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_215
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(215, s),Ö, o, m)

	)

493 
	#BOOST_PP_FOR_215_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(216, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_216
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(216, s),Ö, o, m)

	)

494 
	#BOOST_PP_FOR_216_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(217, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_217
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(217, s),Ö, o, m)

	)

495 
	#BOOST_PP_FOR_217_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(218, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_218
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(218, s),Ö, o, m)

	)

496 
	#BOOST_PP_FOR_218_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(219, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_219
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(219, s),Ö, o, m)

	)

497 
	#BOOST_PP_FOR_219_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(220, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_220
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(220, s),Ö, o, m)

	)

498 
	#BOOST_PP_FOR_220_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(221, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_221
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(221, s),Ö, o, m)

	)

499 
	#BOOST_PP_FOR_221_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(222, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_222
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(222, s),Ö, o, m)

	)

500 
	#BOOST_PP_FOR_222_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(223, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_223
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(223, s),Ö, o, m)

	)

501 
	#BOOST_PP_FOR_223_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(224, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_224
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(224, s),Ö, o, m)

	)

502 
	#BOOST_PP_FOR_224_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(225, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_225
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(225, s),Ö, o, m)

	)

503 
	#BOOST_PP_FOR_225_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(226, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_226
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(226, s),Ö, o, m)

	)

504 
	#BOOST_PP_FOR_226_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(227, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_227
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(227, s),Ö, o, m)

	)

505 
	#BOOST_PP_FOR_227_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(228, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_228
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(228, s),Ö, o, m)

	)

506 
	#BOOST_PP_FOR_228_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(229, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_229
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(229, s),Ö, o, m)

	)

507 
	#BOOST_PP_FOR_229_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(230, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_230
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(230, s),Ö, o, m)

	)

508 
	#BOOST_PP_FOR_230_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(231, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_231
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(231, s),Ö, o, m)

	)

509 
	#BOOST_PP_FOR_231_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(232, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_232
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(232, s),Ö, o, m)

	)

510 
	#BOOST_PP_FOR_232_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(233, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_233
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(233, s),Ö, o, m)

	)

511 
	#BOOST_PP_FOR_233_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(234, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_234
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(234, s),Ö, o, m)

	)

512 
	#BOOST_PP_FOR_234_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(235, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_235
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(235, s),Ö, o, m)

	)

513 
	#BOOST_PP_FOR_235_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(236, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_236
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(236, s),Ö, o, m)

	)

514 
	#BOOST_PP_FOR_236_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(237, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_237
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(237, s),Ö, o, m)

	)

515 
	#BOOST_PP_FOR_237_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(238, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_238
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(238, s),Ö, o, m)

	)

516 
	#BOOST_PP_FOR_238_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(239, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_239
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(239, s),Ö, o, m)

	)

517 
	#BOOST_PP_FOR_239_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(240, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_240
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(240, s),Ö, o, m)

	)

518 
	#BOOST_PP_FOR_240_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(241, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_241
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(241, s),Ö, o, m)

	)

519 
	#BOOST_PP_FOR_241_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(242, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_242
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(242, s),Ö, o, m)

	)

520 
	#BOOST_PP_FOR_242_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(243, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_243
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(243, s),Ö, o, m)

	)

521 
	#BOOST_PP_FOR_243_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(244, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_244
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(244, s),Ö, o, m)

	)

522 
	#BOOST_PP_FOR_244_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(245, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_245
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(245, s),Ö, o, m)

	)

523 
	#BOOST_PP_FOR_245_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(246, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_246
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(246, s),Ö, o, m)

	)

524 
	#BOOST_PP_FOR_246_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(247, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_247
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(247, s),Ö, o, m)

	)

525 
	#BOOST_PP_FOR_247_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(248, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_248
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(248, s),Ö, o, m)

	)

526 
	#BOOST_PP_FOR_248_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(249, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_249
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(249, s),Ö, o, m)

	)

527 
	#BOOST_PP_FOR_249_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(250, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_250
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(250, s),Ö, o, m)

	)

528 
	#BOOST_PP_FOR_250_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(251, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_251
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(251, s),Ö, o, m)

	)

529 
	#BOOST_PP_FOR_251_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(252, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_252
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(252, s),Ö, o, m)

	)

530 
	#BOOST_PP_FOR_252_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(253, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_253
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(253, s),Ö, o, m)

	)

531 
	#BOOST_PP_FOR_253_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(254, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_254
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(254, s),Ö, o, m)

	)

532 
	#BOOST_PP_FOR_254_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(255, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_255
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(255, s),Ö, o, m)

	)

533 
	#BOOST_PP_FOR_255_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(256, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_256
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(256, s),Ö, o, m)

	)

534 
	#BOOST_PP_FOR_256_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(257, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_257
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(257, s),Ö, o, m)

	)

	@/usr/include/boost/preprocessor/repetition/detail/edg/for.hpp

1 #/* 
C›yright
 (
C
) 2001

2 #* 
Hou£m¨que
 
Oy


3 #* 
hâp
:

5 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


6 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


7 #* 
hâp
:

9 #
#/* 
Revi£d
 
by
 
Paul
 
Mís⁄ides
 (2002) */

11 #
#/* 
Sì
 
hâp
:

13 #
#i‚de‡
BOOST_PREPROCESSOR_REPETITION_DETAIL_EDG_FOR_HPP


15 
	#BOOST_PREPROCESSOR_REPETITION_DETAIL_EDG_FOR_HPP


	)

16 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄åﬁ/if.hµ
>

18 
	~<boo°/¥ïro˚ss‹/tu∂e/ót.hµ
>

19 
#deföê
	#BOOST_PP_FOR_1
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_1_I
(s,Ö, o, m)

	)

21 
	#BOOST_PP_FOR_2
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_2_I
(s,Ö, o, m)

	)

22 
	#BOOST_PP_FOR_3
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_3_I
(s,Ö, o, m)

	)

23 
	#BOOST_PP_FOR_4
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_4_I
(s,Ö, o, m)

	)

24 
	#BOOST_PP_FOR_5
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_5_I
(s,Ö, o, m)

	)

25 
	#BOOST_PP_FOR_6
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_6_I
(s,Ö, o, m)

	)

26 
	#BOOST_PP_FOR_7
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_7_I
(s,Ö, o, m)

	)

27 
	#BOOST_PP_FOR_8
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_8_I
(s,Ö, o, m)

	)

28 
	#BOOST_PP_FOR_9
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_9_I
(s,Ö, o, m)

	)

29 
	#BOOST_PP_FOR_10
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_10_I
(s,Ö, o, m)

	)

30 
	#BOOST_PP_FOR_11
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_11_I
(s,Ö, o, m)

	)

31 
	#BOOST_PP_FOR_12
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_12_I
(s,Ö, o, m)

	)

32 
	#BOOST_PP_FOR_13
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_13_I
(s,Ö, o, m)

	)

33 
	#BOOST_PP_FOR_14
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_14_I
(s,Ö, o, m)

	)

34 
	#BOOST_PP_FOR_15
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_15_I
(s,Ö, o, m)

	)

35 
	#BOOST_PP_FOR_16
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_16_I
(s,Ö, o, m)

	)

36 
	#BOOST_PP_FOR_17
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_17_I
(s,Ö, o, m)

	)

37 
	#BOOST_PP_FOR_18
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_18_I
(s,Ö, o, m)

	)

38 
	#BOOST_PP_FOR_19
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_19_I
(s,Ö, o, m)

	)

39 
	#BOOST_PP_FOR_20
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_20_I
(s,Ö, o, m)

	)

40 
	#BOOST_PP_FOR_21
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_21_I
(s,Ö, o, m)

	)

41 
	#BOOST_PP_FOR_22
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_22_I
(s,Ö, o, m)

	)

42 
	#BOOST_PP_FOR_23
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_23_I
(s,Ö, o, m)

	)

43 
	#BOOST_PP_FOR_24
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_24_I
(s,Ö, o, m)

	)

44 
	#BOOST_PP_FOR_25
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_25_I
(s,Ö, o, m)

	)

45 
	#BOOST_PP_FOR_26
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_26_I
(s,Ö, o, m)

	)

46 
	#BOOST_PP_FOR_27
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_27_I
(s,Ö, o, m)

	)

47 
	#BOOST_PP_FOR_28
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_28_I
(s,Ö, o, m)

	)

48 
	#BOOST_PP_FOR_29
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_29_I
(s,Ö, o, m)

	)

49 
	#BOOST_PP_FOR_30
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_30_I
(s,Ö, o, m)

	)

50 
	#BOOST_PP_FOR_31
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_31_I
(s,Ö, o, m)

	)

51 
	#BOOST_PP_FOR_32
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_32_I
(s,Ö, o, m)

	)

52 
	#BOOST_PP_FOR_33
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_33_I
(s,Ö, o, m)

	)

53 
	#BOOST_PP_FOR_34
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_34_I
(s,Ö, o, m)

	)

54 
	#BOOST_PP_FOR_35
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_35_I
(s,Ö, o, m)

	)

55 
	#BOOST_PP_FOR_36
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_36_I
(s,Ö, o, m)

	)

56 
	#BOOST_PP_FOR_37
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_37_I
(s,Ö, o, m)

	)

57 
	#BOOST_PP_FOR_38
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_38_I
(s,Ö, o, m)

	)

58 
	#BOOST_PP_FOR_39
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_39_I
(s,Ö, o, m)

	)

59 
	#BOOST_PP_FOR_40
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_40_I
(s,Ö, o, m)

	)

60 
	#BOOST_PP_FOR_41
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_41_I
(s,Ö, o, m)

	)

61 
	#BOOST_PP_FOR_42
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_42_I
(s,Ö, o, m)

	)

62 
	#BOOST_PP_FOR_43
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_43_I
(s,Ö, o, m)

	)

63 
	#BOOST_PP_FOR_44
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_44_I
(s,Ö, o, m)

	)

64 
	#BOOST_PP_FOR_45
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_45_I
(s,Ö, o, m)

	)

65 
	#BOOST_PP_FOR_46
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_46_I
(s,Ö, o, m)

	)

66 
	#BOOST_PP_FOR_47
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_47_I
(s,Ö, o, m)

	)

67 
	#BOOST_PP_FOR_48
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_48_I
(s,Ö, o, m)

	)

68 
	#BOOST_PP_FOR_49
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_49_I
(s,Ö, o, m)

	)

69 
	#BOOST_PP_FOR_50
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_50_I
(s,Ö, o, m)

	)

70 
	#BOOST_PP_FOR_51
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_51_I
(s,Ö, o, m)

	)

71 
	#BOOST_PP_FOR_52
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_52_I
(s,Ö, o, m)

	)

72 
	#BOOST_PP_FOR_53
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_53_I
(s,Ö, o, m)

	)

73 
	#BOOST_PP_FOR_54
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_54_I
(s,Ö, o, m)

	)

74 
	#BOOST_PP_FOR_55
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_55_I
(s,Ö, o, m)

	)

75 
	#BOOST_PP_FOR_56
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_56_I
(s,Ö, o, m)

	)

76 
	#BOOST_PP_FOR_57
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_57_I
(s,Ö, o, m)

	)

77 
	#BOOST_PP_FOR_58
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_58_I
(s,Ö, o, m)

	)

78 
	#BOOST_PP_FOR_59
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_59_I
(s,Ö, o, m)

	)

79 
	#BOOST_PP_FOR_60
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_60_I
(s,Ö, o, m)

	)

80 
	#BOOST_PP_FOR_61
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_61_I
(s,Ö, o, m)

	)

81 
	#BOOST_PP_FOR_62
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_62_I
(s,Ö, o, m)

	)

82 
	#BOOST_PP_FOR_63
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_63_I
(s,Ö, o, m)

	)

83 
	#BOOST_PP_FOR_64
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_64_I
(s,Ö, o, m)

	)

84 
	#BOOST_PP_FOR_65
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_65_I
(s,Ö, o, m)

	)

85 
	#BOOST_PP_FOR_66
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_66_I
(s,Ö, o, m)

	)

86 
	#BOOST_PP_FOR_67
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_67_I
(s,Ö, o, m)

	)

87 
	#BOOST_PP_FOR_68
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_68_I
(s,Ö, o, m)

	)

88 
	#BOOST_PP_FOR_69
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_69_I
(s,Ö, o, m)

	)

89 
	#BOOST_PP_FOR_70
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_70_I
(s,Ö, o, m)

	)

90 
	#BOOST_PP_FOR_71
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_71_I
(s,Ö, o, m)

	)

91 
	#BOOST_PP_FOR_72
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_72_I
(s,Ö, o, m)

	)

92 
	#BOOST_PP_FOR_73
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_73_I
(s,Ö, o, m)

	)

93 
	#BOOST_PP_FOR_74
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_74_I
(s,Ö, o, m)

	)

94 
	#BOOST_PP_FOR_75
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_75_I
(s,Ö, o, m)

	)

95 
	#BOOST_PP_FOR_76
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_76_I
(s,Ö, o, m)

	)

96 
	#BOOST_PP_FOR_77
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_77_I
(s,Ö, o, m)

	)

97 
	#BOOST_PP_FOR_78
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_78_I
(s,Ö, o, m)

	)

98 
	#BOOST_PP_FOR_79
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_79_I
(s,Ö, o, m)

	)

99 
	#BOOST_PP_FOR_80
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_80_I
(s,Ö, o, m)

	)

100 
	#BOOST_PP_FOR_81
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_81_I
(s,Ö, o, m)

	)

101 
	#BOOST_PP_FOR_82
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_82_I
(s,Ö, o, m)

	)

102 
	#BOOST_PP_FOR_83
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_83_I
(s,Ö, o, m)

	)

103 
	#BOOST_PP_FOR_84
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_84_I
(s,Ö, o, m)

	)

104 
	#BOOST_PP_FOR_85
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_85_I
(s,Ö, o, m)

	)

105 
	#BOOST_PP_FOR_86
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_86_I
(s,Ö, o, m)

	)

106 
	#BOOST_PP_FOR_87
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_87_I
(s,Ö, o, m)

	)

107 
	#BOOST_PP_FOR_88
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_88_I
(s,Ö, o, m)

	)

108 
	#BOOST_PP_FOR_89
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_89_I
(s,Ö, o, m)

	)

109 
	#BOOST_PP_FOR_90
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_90_I
(s,Ö, o, m)

	)

110 
	#BOOST_PP_FOR_91
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_91_I
(s,Ö, o, m)

	)

111 
	#BOOST_PP_FOR_92
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_92_I
(s,Ö, o, m)

	)

112 
	#BOOST_PP_FOR_93
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_93_I
(s,Ö, o, m)

	)

113 
	#BOOST_PP_FOR_94
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_94_I
(s,Ö, o, m)

	)

114 
	#BOOST_PP_FOR_95
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_95_I
(s,Ö, o, m)

	)

115 
	#BOOST_PP_FOR_96
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_96_I
(s,Ö, o, m)

	)

116 
	#BOOST_PP_FOR_97
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_97_I
(s,Ö, o, m)

	)

117 
	#BOOST_PP_FOR_98
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_98_I
(s,Ö, o, m)

	)

118 
	#BOOST_PP_FOR_99
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_99_I
(s,Ö, o, m)

	)

119 
	#BOOST_PP_FOR_100
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_100_I
(s,Ö, o, m)

	)

120 
	#BOOST_PP_FOR_101
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_101_I
(s,Ö, o, m)

	)

121 
	#BOOST_PP_FOR_102
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_102_I
(s,Ö, o, m)

	)

122 
	#BOOST_PP_FOR_103
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_103_I
(s,Ö, o, m)

	)

123 
	#BOOST_PP_FOR_104
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_104_I
(s,Ö, o, m)

	)

124 
	#BOOST_PP_FOR_105
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_105_I
(s,Ö, o, m)

	)

125 
	#BOOST_PP_FOR_106
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_106_I
(s,Ö, o, m)

	)

126 
	#BOOST_PP_FOR_107
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_107_I
(s,Ö, o, m)

	)

127 
	#BOOST_PP_FOR_108
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_108_I
(s,Ö, o, m)

	)

128 
	#BOOST_PP_FOR_109
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_109_I
(s,Ö, o, m)

	)

129 
	#BOOST_PP_FOR_110
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_110_I
(s,Ö, o, m)

	)

130 
	#BOOST_PP_FOR_111
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_111_I
(s,Ö, o, m)

	)

131 
	#BOOST_PP_FOR_112
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_112_I
(s,Ö, o, m)

	)

132 
	#BOOST_PP_FOR_113
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_113_I
(s,Ö, o, m)

	)

133 
	#BOOST_PP_FOR_114
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_114_I
(s,Ö, o, m)

	)

134 
	#BOOST_PP_FOR_115
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_115_I
(s,Ö, o, m)

	)

135 
	#BOOST_PP_FOR_116
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_116_I
(s,Ö, o, m)

	)

136 
	#BOOST_PP_FOR_117
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_117_I
(s,Ö, o, m)

	)

137 
	#BOOST_PP_FOR_118
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_118_I
(s,Ö, o, m)

	)

138 
	#BOOST_PP_FOR_119
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_119_I
(s,Ö, o, m)

	)

139 
	#BOOST_PP_FOR_120
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_120_I
(s,Ö, o, m)

	)

140 
	#BOOST_PP_FOR_121
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_121_I
(s,Ö, o, m)

	)

141 
	#BOOST_PP_FOR_122
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_122_I
(s,Ö, o, m)

	)

142 
	#BOOST_PP_FOR_123
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_123_I
(s,Ö, o, m)

	)

143 
	#BOOST_PP_FOR_124
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_124_I
(s,Ö, o, m)

	)

144 
	#BOOST_PP_FOR_125
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_125_I
(s,Ö, o, m)

	)

145 
	#BOOST_PP_FOR_126
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_126_I
(s,Ö, o, m)

	)

146 
	#BOOST_PP_FOR_127
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_127_I
(s,Ö, o, m)

	)

147 
	#BOOST_PP_FOR_128
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_128_I
(s,Ö, o, m)

	)

148 
	#BOOST_PP_FOR_129
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_129_I
(s,Ö, o, m)

	)

149 
	#BOOST_PP_FOR_130
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_130_I
(s,Ö, o, m)

	)

150 
	#BOOST_PP_FOR_131
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_131_I
(s,Ö, o, m)

	)

151 
	#BOOST_PP_FOR_132
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_132_I
(s,Ö, o, m)

	)

152 
	#BOOST_PP_FOR_133
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_133_I
(s,Ö, o, m)

	)

153 
	#BOOST_PP_FOR_134
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_134_I
(s,Ö, o, m)

	)

154 
	#BOOST_PP_FOR_135
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_135_I
(s,Ö, o, m)

	)

155 
	#BOOST_PP_FOR_136
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_136_I
(s,Ö, o, m)

	)

156 
	#BOOST_PP_FOR_137
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_137_I
(s,Ö, o, m)

	)

157 
	#BOOST_PP_FOR_138
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_138_I
(s,Ö, o, m)

	)

158 
	#BOOST_PP_FOR_139
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_139_I
(s,Ö, o, m)

	)

159 
	#BOOST_PP_FOR_140
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_140_I
(s,Ö, o, m)

	)

160 
	#BOOST_PP_FOR_141
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_141_I
(s,Ö, o, m)

	)

161 
	#BOOST_PP_FOR_142
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_142_I
(s,Ö, o, m)

	)

162 
	#BOOST_PP_FOR_143
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_143_I
(s,Ö, o, m)

	)

163 
	#BOOST_PP_FOR_144
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_144_I
(s,Ö, o, m)

	)

164 
	#BOOST_PP_FOR_145
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_145_I
(s,Ö, o, m)

	)

165 
	#BOOST_PP_FOR_146
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_146_I
(s,Ö, o, m)

	)

166 
	#BOOST_PP_FOR_147
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_147_I
(s,Ö, o, m)

	)

167 
	#BOOST_PP_FOR_148
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_148_I
(s,Ö, o, m)

	)

168 
	#BOOST_PP_FOR_149
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_149_I
(s,Ö, o, m)

	)

169 
	#BOOST_PP_FOR_150
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_150_I
(s,Ö, o, m)

	)

170 
	#BOOST_PP_FOR_151
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_151_I
(s,Ö, o, m)

	)

171 
	#BOOST_PP_FOR_152
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_152_I
(s,Ö, o, m)

	)

172 
	#BOOST_PP_FOR_153
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_153_I
(s,Ö, o, m)

	)

173 
	#BOOST_PP_FOR_154
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_154_I
(s,Ö, o, m)

	)

174 
	#BOOST_PP_FOR_155
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_155_I
(s,Ö, o, m)

	)

175 
	#BOOST_PP_FOR_156
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_156_I
(s,Ö, o, m)

	)

176 
	#BOOST_PP_FOR_157
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_157_I
(s,Ö, o, m)

	)

177 
	#BOOST_PP_FOR_158
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_158_I
(s,Ö, o, m)

	)

178 
	#BOOST_PP_FOR_159
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_159_I
(s,Ö, o, m)

	)

179 
	#BOOST_PP_FOR_160
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_160_I
(s,Ö, o, m)

	)

180 
	#BOOST_PP_FOR_161
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_161_I
(s,Ö, o, m)

	)

181 
	#BOOST_PP_FOR_162
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_162_I
(s,Ö, o, m)

	)

182 
	#BOOST_PP_FOR_163
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_163_I
(s,Ö, o, m)

	)

183 
	#BOOST_PP_FOR_164
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_164_I
(s,Ö, o, m)

	)

184 
	#BOOST_PP_FOR_165
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_165_I
(s,Ö, o, m)

	)

185 
	#BOOST_PP_FOR_166
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_166_I
(s,Ö, o, m)

	)

186 
	#BOOST_PP_FOR_167
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_167_I
(s,Ö, o, m)

	)

187 
	#BOOST_PP_FOR_168
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_168_I
(s,Ö, o, m)

	)

188 
	#BOOST_PP_FOR_169
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_169_I
(s,Ö, o, m)

	)

189 
	#BOOST_PP_FOR_170
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_170_I
(s,Ö, o, m)

	)

190 
	#BOOST_PP_FOR_171
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_171_I
(s,Ö, o, m)

	)

191 
	#BOOST_PP_FOR_172
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_172_I
(s,Ö, o, m)

	)

192 
	#BOOST_PP_FOR_173
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_173_I
(s,Ö, o, m)

	)

193 
	#BOOST_PP_FOR_174
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_174_I
(s,Ö, o, m)

	)

194 
	#BOOST_PP_FOR_175
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_175_I
(s,Ö, o, m)

	)

195 
	#BOOST_PP_FOR_176
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_176_I
(s,Ö, o, m)

	)

196 
	#BOOST_PP_FOR_177
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_177_I
(s,Ö, o, m)

	)

197 
	#BOOST_PP_FOR_178
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_178_I
(s,Ö, o, m)

	)

198 
	#BOOST_PP_FOR_179
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_179_I
(s,Ö, o, m)

	)

199 
	#BOOST_PP_FOR_180
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_180_I
(s,Ö, o, m)

	)

200 
	#BOOST_PP_FOR_181
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_181_I
(s,Ö, o, m)

	)

201 
	#BOOST_PP_FOR_182
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_182_I
(s,Ö, o, m)

	)

202 
	#BOOST_PP_FOR_183
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_183_I
(s,Ö, o, m)

	)

203 
	#BOOST_PP_FOR_184
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_184_I
(s,Ö, o, m)

	)

204 
	#BOOST_PP_FOR_185
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_185_I
(s,Ö, o, m)

	)

205 
	#BOOST_PP_FOR_186
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_186_I
(s,Ö, o, m)

	)

206 
	#BOOST_PP_FOR_187
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_187_I
(s,Ö, o, m)

	)

207 
	#BOOST_PP_FOR_188
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_188_I
(s,Ö, o, m)

	)

208 
	#BOOST_PP_FOR_189
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_189_I
(s,Ö, o, m)

	)

209 
	#BOOST_PP_FOR_190
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_190_I
(s,Ö, o, m)

	)

210 
	#BOOST_PP_FOR_191
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_191_I
(s,Ö, o, m)

	)

211 
	#BOOST_PP_FOR_192
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_192_I
(s,Ö, o, m)

	)

212 
	#BOOST_PP_FOR_193
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_193_I
(s,Ö, o, m)

	)

213 
	#BOOST_PP_FOR_194
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_194_I
(s,Ö, o, m)

	)

214 
	#BOOST_PP_FOR_195
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_195_I
(s,Ö, o, m)

	)

215 
	#BOOST_PP_FOR_196
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_196_I
(s,Ö, o, m)

	)

216 
	#BOOST_PP_FOR_197
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_197_I
(s,Ö, o, m)

	)

217 
	#BOOST_PP_FOR_198
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_198_I
(s,Ö, o, m)

	)

218 
	#BOOST_PP_FOR_199
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_199_I
(s,Ö, o, m)

	)

219 
	#BOOST_PP_FOR_200
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_200_I
(s,Ö, o, m)

	)

220 
	#BOOST_PP_FOR_201
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_201_I
(s,Ö, o, m)

	)

221 
	#BOOST_PP_FOR_202
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_202_I
(s,Ö, o, m)

	)

222 
	#BOOST_PP_FOR_203
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_203_I
(s,Ö, o, m)

	)

223 
	#BOOST_PP_FOR_204
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_204_I
(s,Ö, o, m)

	)

224 
	#BOOST_PP_FOR_205
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_205_I
(s,Ö, o, m)

	)

225 
	#BOOST_PP_FOR_206
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_206_I
(s,Ö, o, m)

	)

226 
	#BOOST_PP_FOR_207
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_207_I
(s,Ö, o, m)

	)

227 
	#BOOST_PP_FOR_208
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_208_I
(s,Ö, o, m)

	)

228 
	#BOOST_PP_FOR_209
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_209_I
(s,Ö, o, m)

	)

229 
	#BOOST_PP_FOR_210
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_210_I
(s,Ö, o, m)

	)

230 
	#BOOST_PP_FOR_211
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_211_I
(s,Ö, o, m)

	)

231 
	#BOOST_PP_FOR_212
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_212_I
(s,Ö, o, m)

	)

232 
	#BOOST_PP_FOR_213
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_213_I
(s,Ö, o, m)

	)

233 
	#BOOST_PP_FOR_214
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_214_I
(s,Ö, o, m)

	)

234 
	#BOOST_PP_FOR_215
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_215_I
(s,Ö, o, m)

	)

235 
	#BOOST_PP_FOR_216
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_216_I
(s,Ö, o, m)

	)

236 
	#BOOST_PP_FOR_217
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_217_I
(s,Ö, o, m)

	)

237 
	#BOOST_PP_FOR_218
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_218_I
(s,Ö, o, m)

	)

238 
	#BOOST_PP_FOR_219
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_219_I
(s,Ö, o, m)

	)

239 
	#BOOST_PP_FOR_220
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_220_I
(s,Ö, o, m)

	)

240 
	#BOOST_PP_FOR_221
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_221_I
(s,Ö, o, m)

	)

241 
	#BOOST_PP_FOR_222
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_222_I
(s,Ö, o, m)

	)

242 
	#BOOST_PP_FOR_223
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_223_I
(s,Ö, o, m)

	)

243 
	#BOOST_PP_FOR_224
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_224_I
(s,Ö, o, m)

	)

244 
	#BOOST_PP_FOR_225
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_225_I
(s,Ö, o, m)

	)

245 
	#BOOST_PP_FOR_226
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_226_I
(s,Ö, o, m)

	)

246 
	#BOOST_PP_FOR_227
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_227_I
(s,Ö, o, m)

	)

247 
	#BOOST_PP_FOR_228
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_228_I
(s,Ö, o, m)

	)

248 
	#BOOST_PP_FOR_229
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_229_I
(s,Ö, o, m)

	)

249 
	#BOOST_PP_FOR_230
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_230_I
(s,Ö, o, m)

	)

250 
	#BOOST_PP_FOR_231
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_231_I
(s,Ö, o, m)

	)

251 
	#BOOST_PP_FOR_232
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_232_I
(s,Ö, o, m)

	)

252 
	#BOOST_PP_FOR_233
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_233_I
(s,Ö, o, m)

	)

253 
	#BOOST_PP_FOR_234
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_234_I
(s,Ö, o, m)

	)

254 
	#BOOST_PP_FOR_235
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_235_I
(s,Ö, o, m)

	)

255 
	#BOOST_PP_FOR_236
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_236_I
(s,Ö, o, m)

	)

256 
	#BOOST_PP_FOR_237
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_237_I
(s,Ö, o, m)

	)

257 
	#BOOST_PP_FOR_238
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_238_I
(s,Ö, o, m)

	)

258 
	#BOOST_PP_FOR_239
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_239_I
(s,Ö, o, m)

	)

259 
	#BOOST_PP_FOR_240
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_240_I
(s,Ö, o, m)

	)

260 
	#BOOST_PP_FOR_241
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_241_I
(s,Ö, o, m)

	)

261 
	#BOOST_PP_FOR_242
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_242_I
(s,Ö, o, m)

	)

262 
	#BOOST_PP_FOR_243
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_243_I
(s,Ö, o, m)

	)

263 
	#BOOST_PP_FOR_244
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_244_I
(s,Ö, o, m)

	)

264 
	#BOOST_PP_FOR_245
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_245_I
(s,Ö, o, m)

	)

265 
	#BOOST_PP_FOR_246
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_246_I
(s,Ö, o, m)

	)

266 
	#BOOST_PP_FOR_247
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_247_I
(s,Ö, o, m)

	)

267 
	#BOOST_PP_FOR_248
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_248_I
(s,Ö, o, m)

	)

268 
	#BOOST_PP_FOR_249
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_249_I
(s,Ö, o, m)

	)

269 
	#BOOST_PP_FOR_250
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_250_I
(s,Ö, o, m)

	)

270 
	#BOOST_PP_FOR_251
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_251_I
(s,Ö, o, m)

	)

271 
	#BOOST_PP_FOR_252
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_252_I
(s,Ö, o, m)

	)

272 
	#BOOST_PP_FOR_253
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_253_I
(s,Ö, o, m)

	)

273 
	#BOOST_PP_FOR_254
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_254_I
(s,Ö, o, m)

	)

274 
	#BOOST_PP_FOR_255
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_255_I
(s,Ö, o, m)

	)

275 
	#BOOST_PP_FOR_256
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_256_I
(s,Ö, o, m)

	)

276 
#deföê
	#BOOST_PP_FOR_1_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(2, s), m, 
BOOST_PP_TUPLE_EAT_2
)(2, sËBOOST_PP_IF’(2, s), 
BOOST_PP_FOR_2
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(2, s),Ö, o, m)

	)

278 
	#BOOST_PP_FOR_2_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(3, s), m, 
BOOST_PP_TUPLE_EAT_2
)(3, sËBOOST_PP_IF’(3, s), 
BOOST_PP_FOR_3
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(3, s),Ö, o, m)

	)

279 
	#BOOST_PP_FOR_3_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(4, s), m, 
BOOST_PP_TUPLE_EAT_2
)(4, sËBOOST_PP_IF’(4, s), 
BOOST_PP_FOR_4
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(4, s),Ö, o, m)

	)

280 
	#BOOST_PP_FOR_4_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(5, s), m, 
BOOST_PP_TUPLE_EAT_2
)(5, sËBOOST_PP_IF’(5, s), 
BOOST_PP_FOR_5
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(5, s),Ö, o, m)

	)

281 
	#BOOST_PP_FOR_5_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(6, s), m, 
BOOST_PP_TUPLE_EAT_2
)(6, sËBOOST_PP_IF’(6, s), 
BOOST_PP_FOR_6
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(6, s),Ö, o, m)

	)

282 
	#BOOST_PP_FOR_6_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(7, s), m, 
BOOST_PP_TUPLE_EAT_2
)(7, sËBOOST_PP_IF’(7, s), 
BOOST_PP_FOR_7
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(7, s),Ö, o, m)

	)

283 
	#BOOST_PP_FOR_7_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(8, s), m, 
BOOST_PP_TUPLE_EAT_2
)(8, sËBOOST_PP_IF’(8, s), 
BOOST_PP_FOR_8
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(8, s),Ö, o, m)

	)

284 
	#BOOST_PP_FOR_8_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(9, s), m, 
BOOST_PP_TUPLE_EAT_2
)(9, sËBOOST_PP_IF’(9, s), 
BOOST_PP_FOR_9
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(9, s),Ö, o, m)

	)

285 
	#BOOST_PP_FOR_9_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(10, s), m, 
BOOST_PP_TUPLE_EAT_2
)(10, sËBOOST_PP_IF’(10, s), 
BOOST_PP_FOR_10
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(10, s),Ö, o, m)

	)

286 
	#BOOST_PP_FOR_10_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(11, s), m, 
BOOST_PP_TUPLE_EAT_2
)(11, sËBOOST_PP_IF’(11, s), 
BOOST_PP_FOR_11
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(11, s),Ö, o, m)

	)

287 
	#BOOST_PP_FOR_11_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(12, s), m, 
BOOST_PP_TUPLE_EAT_2
)(12, sËBOOST_PP_IF’(12, s), 
BOOST_PP_FOR_12
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(12, s),Ö, o, m)

	)

288 
	#BOOST_PP_FOR_12_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(13, s), m, 
BOOST_PP_TUPLE_EAT_2
)(13, sËBOOST_PP_IF’(13, s), 
BOOST_PP_FOR_13
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(13, s),Ö, o, m)

	)

289 
	#BOOST_PP_FOR_13_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(14, s), m, 
BOOST_PP_TUPLE_EAT_2
)(14, sËBOOST_PP_IF’(14, s), 
BOOST_PP_FOR_14
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(14, s),Ö, o, m)

	)

290 
	#BOOST_PP_FOR_14_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(15, s), m, 
BOOST_PP_TUPLE_EAT_2
)(15, sËBOOST_PP_IF’(15, s), 
BOOST_PP_FOR_15
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(15, s),Ö, o, m)

	)

291 
	#BOOST_PP_FOR_15_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(16, s), m, 
BOOST_PP_TUPLE_EAT_2
)(16, sËBOOST_PP_IF’(16, s), 
BOOST_PP_FOR_16
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(16, s),Ö, o, m)

	)

292 
	#BOOST_PP_FOR_16_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(17, s), m, 
BOOST_PP_TUPLE_EAT_2
)(17, sËBOOST_PP_IF’(17, s), 
BOOST_PP_FOR_17
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(17, s),Ö, o, m)

	)

293 
	#BOOST_PP_FOR_17_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(18, s), m, 
BOOST_PP_TUPLE_EAT_2
)(18, sËBOOST_PP_IF’(18, s), 
BOOST_PP_FOR_18
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(18, s),Ö, o, m)

	)

294 
	#BOOST_PP_FOR_18_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(19, s), m, 
BOOST_PP_TUPLE_EAT_2
)(19, sËBOOST_PP_IF’(19, s), 
BOOST_PP_FOR_19
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(19, s),Ö, o, m)

	)

295 
	#BOOST_PP_FOR_19_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(20, s), m, 
BOOST_PP_TUPLE_EAT_2
)(20, sËBOOST_PP_IF’(20, s), 
BOOST_PP_FOR_20
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(20, s),Ö, o, m)

	)

296 
	#BOOST_PP_FOR_20_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(21, s), m, 
BOOST_PP_TUPLE_EAT_2
)(21, sËBOOST_PP_IF’(21, s), 
BOOST_PP_FOR_21
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(21, s),Ö, o, m)

	)

297 
	#BOOST_PP_FOR_21_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(22, s), m, 
BOOST_PP_TUPLE_EAT_2
)(22, sËBOOST_PP_IF’(22, s), 
BOOST_PP_FOR_22
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(22, s),Ö, o, m)

	)

298 
	#BOOST_PP_FOR_22_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(23, s), m, 
BOOST_PP_TUPLE_EAT_2
)(23, sËBOOST_PP_IF’(23, s), 
BOOST_PP_FOR_23
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(23, s),Ö, o, m)

	)

299 
	#BOOST_PP_FOR_23_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(24, s), m, 
BOOST_PP_TUPLE_EAT_2
)(24, sËBOOST_PP_IF’(24, s), 
BOOST_PP_FOR_24
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(24, s),Ö, o, m)

	)

300 
	#BOOST_PP_FOR_24_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(25, s), m, 
BOOST_PP_TUPLE_EAT_2
)(25, sËBOOST_PP_IF’(25, s), 
BOOST_PP_FOR_25
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(25, s),Ö, o, m)

	)

301 
	#BOOST_PP_FOR_25_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(26, s), m, 
BOOST_PP_TUPLE_EAT_2
)(26, sËBOOST_PP_IF’(26, s), 
BOOST_PP_FOR_26
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(26, s),Ö, o, m)

	)

302 
	#BOOST_PP_FOR_26_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(27, s), m, 
BOOST_PP_TUPLE_EAT_2
)(27, sËBOOST_PP_IF’(27, s), 
BOOST_PP_FOR_27
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(27, s),Ö, o, m)

	)

303 
	#BOOST_PP_FOR_27_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(28, s), m, 
BOOST_PP_TUPLE_EAT_2
)(28, sËBOOST_PP_IF’(28, s), 
BOOST_PP_FOR_28
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(28, s),Ö, o, m)

	)

304 
	#BOOST_PP_FOR_28_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(29, s), m, 
BOOST_PP_TUPLE_EAT_2
)(29, sËBOOST_PP_IF’(29, s), 
BOOST_PP_FOR_29
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(29, s),Ö, o, m)

	)

305 
	#BOOST_PP_FOR_29_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(30, s), m, 
BOOST_PP_TUPLE_EAT_2
)(30, sËBOOST_PP_IF’(30, s), 
BOOST_PP_FOR_30
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(30, s),Ö, o, m)

	)

306 
	#BOOST_PP_FOR_30_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(31, s), m, 
BOOST_PP_TUPLE_EAT_2
)(31, sËBOOST_PP_IF’(31, s), 
BOOST_PP_FOR_31
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(31, s),Ö, o, m)

	)

307 
	#BOOST_PP_FOR_31_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(32, s), m, 
BOOST_PP_TUPLE_EAT_2
)(32, sËBOOST_PP_IF’(32, s), 
BOOST_PP_FOR_32
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(32, s),Ö, o, m)

	)

308 
	#BOOST_PP_FOR_32_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(33, s), m, 
BOOST_PP_TUPLE_EAT_2
)(33, sËBOOST_PP_IF’(33, s), 
BOOST_PP_FOR_33
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(33, s),Ö, o, m)

	)

309 
	#BOOST_PP_FOR_33_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(34, s), m, 
BOOST_PP_TUPLE_EAT_2
)(34, sËBOOST_PP_IF’(34, s), 
BOOST_PP_FOR_34
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(34, s),Ö, o, m)

	)

310 
	#BOOST_PP_FOR_34_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(35, s), m, 
BOOST_PP_TUPLE_EAT_2
)(35, sËBOOST_PP_IF’(35, s), 
BOOST_PP_FOR_35
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(35, s),Ö, o, m)

	)

311 
	#BOOST_PP_FOR_35_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(36, s), m, 
BOOST_PP_TUPLE_EAT_2
)(36, sËBOOST_PP_IF’(36, s), 
BOOST_PP_FOR_36
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(36, s),Ö, o, m)

	)

312 
	#BOOST_PP_FOR_36_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(37, s), m, 
BOOST_PP_TUPLE_EAT_2
)(37, sËBOOST_PP_IF’(37, s), 
BOOST_PP_FOR_37
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(37, s),Ö, o, m)

	)

313 
	#BOOST_PP_FOR_37_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(38, s), m, 
BOOST_PP_TUPLE_EAT_2
)(38, sËBOOST_PP_IF’(38, s), 
BOOST_PP_FOR_38
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(38, s),Ö, o, m)

	)

314 
	#BOOST_PP_FOR_38_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(39, s), m, 
BOOST_PP_TUPLE_EAT_2
)(39, sËBOOST_PP_IF’(39, s), 
BOOST_PP_FOR_39
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(39, s),Ö, o, m)

	)

315 
	#BOOST_PP_FOR_39_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(40, s), m, 
BOOST_PP_TUPLE_EAT_2
)(40, sËBOOST_PP_IF’(40, s), 
BOOST_PP_FOR_40
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(40, s),Ö, o, m)

	)

316 
	#BOOST_PP_FOR_40_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(41, s), m, 
BOOST_PP_TUPLE_EAT_2
)(41, sËBOOST_PP_IF’(41, s), 
BOOST_PP_FOR_41
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(41, s),Ö, o, m)

	)

317 
	#BOOST_PP_FOR_41_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(42, s), m, 
BOOST_PP_TUPLE_EAT_2
)(42, sËBOOST_PP_IF’(42, s), 
BOOST_PP_FOR_42
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(42, s),Ö, o, m)

	)

318 
	#BOOST_PP_FOR_42_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(43, s), m, 
BOOST_PP_TUPLE_EAT_2
)(43, sËBOOST_PP_IF’(43, s), 
BOOST_PP_FOR_43
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(43, s),Ö, o, m)

	)

319 
	#BOOST_PP_FOR_43_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(44, s), m, 
BOOST_PP_TUPLE_EAT_2
)(44, sËBOOST_PP_IF’(44, s), 
BOOST_PP_FOR_44
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(44, s),Ö, o, m)

	)

320 
	#BOOST_PP_FOR_44_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(45, s), m, 
BOOST_PP_TUPLE_EAT_2
)(45, sËBOOST_PP_IF’(45, s), 
BOOST_PP_FOR_45
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(45, s),Ö, o, m)

	)

321 
	#BOOST_PP_FOR_45_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(46, s), m, 
BOOST_PP_TUPLE_EAT_2
)(46, sËBOOST_PP_IF’(46, s), 
BOOST_PP_FOR_46
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(46, s),Ö, o, m)

	)

322 
	#BOOST_PP_FOR_46_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(47, s), m, 
BOOST_PP_TUPLE_EAT_2
)(47, sËBOOST_PP_IF’(47, s), 
BOOST_PP_FOR_47
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(47, s),Ö, o, m)

	)

323 
	#BOOST_PP_FOR_47_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(48, s), m, 
BOOST_PP_TUPLE_EAT_2
)(48, sËBOOST_PP_IF’(48, s), 
BOOST_PP_FOR_48
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(48, s),Ö, o, m)

	)

324 
	#BOOST_PP_FOR_48_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(49, s), m, 
BOOST_PP_TUPLE_EAT_2
)(49, sËBOOST_PP_IF’(49, s), 
BOOST_PP_FOR_49
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(49, s),Ö, o, m)

	)

325 
	#BOOST_PP_FOR_49_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(50, s), m, 
BOOST_PP_TUPLE_EAT_2
)(50, sËBOOST_PP_IF’(50, s), 
BOOST_PP_FOR_50
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(50, s),Ö, o, m)

	)

326 
	#BOOST_PP_FOR_50_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(51, s), m, 
BOOST_PP_TUPLE_EAT_2
)(51, sËBOOST_PP_IF’(51, s), 
BOOST_PP_FOR_51
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(51, s),Ö, o, m)

	)

327 
	#BOOST_PP_FOR_51_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(52, s), m, 
BOOST_PP_TUPLE_EAT_2
)(52, sËBOOST_PP_IF’(52, s), 
BOOST_PP_FOR_52
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(52, s),Ö, o, m)

	)

328 
	#BOOST_PP_FOR_52_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(53, s), m, 
BOOST_PP_TUPLE_EAT_2
)(53, sËBOOST_PP_IF’(53, s), 
BOOST_PP_FOR_53
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(53, s),Ö, o, m)

	)

329 
	#BOOST_PP_FOR_53_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(54, s), m, 
BOOST_PP_TUPLE_EAT_2
)(54, sËBOOST_PP_IF’(54, s), 
BOOST_PP_FOR_54
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(54, s),Ö, o, m)

	)

330 
	#BOOST_PP_FOR_54_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(55, s), m, 
BOOST_PP_TUPLE_EAT_2
)(55, sËBOOST_PP_IF’(55, s), 
BOOST_PP_FOR_55
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(55, s),Ö, o, m)

	)

331 
	#BOOST_PP_FOR_55_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(56, s), m, 
BOOST_PP_TUPLE_EAT_2
)(56, sËBOOST_PP_IF’(56, s), 
BOOST_PP_FOR_56
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(56, s),Ö, o, m)

	)

332 
	#BOOST_PP_FOR_56_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(57, s), m, 
BOOST_PP_TUPLE_EAT_2
)(57, sËBOOST_PP_IF’(57, s), 
BOOST_PP_FOR_57
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(57, s),Ö, o, m)

	)

333 
	#BOOST_PP_FOR_57_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(58, s), m, 
BOOST_PP_TUPLE_EAT_2
)(58, sËBOOST_PP_IF’(58, s), 
BOOST_PP_FOR_58
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(58, s),Ö, o, m)

	)

334 
	#BOOST_PP_FOR_58_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(59, s), m, 
BOOST_PP_TUPLE_EAT_2
)(59, sËBOOST_PP_IF’(59, s), 
BOOST_PP_FOR_59
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(59, s),Ö, o, m)

	)

335 
	#BOOST_PP_FOR_59_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(60, s), m, 
BOOST_PP_TUPLE_EAT_2
)(60, sËBOOST_PP_IF’(60, s), 
BOOST_PP_FOR_60
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(60, s),Ö, o, m)

	)

336 
	#BOOST_PP_FOR_60_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(61, s), m, 
BOOST_PP_TUPLE_EAT_2
)(61, sËBOOST_PP_IF’(61, s), 
BOOST_PP_FOR_61
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(61, s),Ö, o, m)

	)

337 
	#BOOST_PP_FOR_61_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(62, s), m, 
BOOST_PP_TUPLE_EAT_2
)(62, sËBOOST_PP_IF’(62, s), 
BOOST_PP_FOR_62
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(62, s),Ö, o, m)

	)

338 
	#BOOST_PP_FOR_62_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(63, s), m, 
BOOST_PP_TUPLE_EAT_2
)(63, sËBOOST_PP_IF’(63, s), 
BOOST_PP_FOR_63
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(63, s),Ö, o, m)

	)

339 
	#BOOST_PP_FOR_63_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(64, s), m, 
BOOST_PP_TUPLE_EAT_2
)(64, sËBOOST_PP_IF’(64, s), 
BOOST_PP_FOR_64
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(64, s),Ö, o, m)

	)

340 
	#BOOST_PP_FOR_64_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(65, s), m, 
BOOST_PP_TUPLE_EAT_2
)(65, sËBOOST_PP_IF’(65, s), 
BOOST_PP_FOR_65
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(65, s),Ö, o, m)

	)

341 
	#BOOST_PP_FOR_65_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(66, s), m, 
BOOST_PP_TUPLE_EAT_2
)(66, sËBOOST_PP_IF’(66, s), 
BOOST_PP_FOR_66
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(66, s),Ö, o, m)

	)

342 
	#BOOST_PP_FOR_66_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(67, s), m, 
BOOST_PP_TUPLE_EAT_2
)(67, sËBOOST_PP_IF’(67, s), 
BOOST_PP_FOR_67
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(67, s),Ö, o, m)

	)

343 
	#BOOST_PP_FOR_67_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(68, s), m, 
BOOST_PP_TUPLE_EAT_2
)(68, sËBOOST_PP_IF’(68, s), 
BOOST_PP_FOR_68
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(68, s),Ö, o, m)

	)

344 
	#BOOST_PP_FOR_68_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(69, s), m, 
BOOST_PP_TUPLE_EAT_2
)(69, sËBOOST_PP_IF’(69, s), 
BOOST_PP_FOR_69
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(69, s),Ö, o, m)

	)

345 
	#BOOST_PP_FOR_69_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(70, s), m, 
BOOST_PP_TUPLE_EAT_2
)(70, sËBOOST_PP_IF’(70, s), 
BOOST_PP_FOR_70
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(70, s),Ö, o, m)

	)

346 
	#BOOST_PP_FOR_70_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(71, s), m, 
BOOST_PP_TUPLE_EAT_2
)(71, sËBOOST_PP_IF’(71, s), 
BOOST_PP_FOR_71
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(71, s),Ö, o, m)

	)

347 
	#BOOST_PP_FOR_71_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(72, s), m, 
BOOST_PP_TUPLE_EAT_2
)(72, sËBOOST_PP_IF’(72, s), 
BOOST_PP_FOR_72
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(72, s),Ö, o, m)

	)

348 
	#BOOST_PP_FOR_72_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(73, s), m, 
BOOST_PP_TUPLE_EAT_2
)(73, sËBOOST_PP_IF’(73, s), 
BOOST_PP_FOR_73
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(73, s),Ö, o, m)

	)

349 
	#BOOST_PP_FOR_73_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(74, s), m, 
BOOST_PP_TUPLE_EAT_2
)(74, sËBOOST_PP_IF’(74, s), 
BOOST_PP_FOR_74
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(74, s),Ö, o, m)

	)

350 
	#BOOST_PP_FOR_74_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(75, s), m, 
BOOST_PP_TUPLE_EAT_2
)(75, sËBOOST_PP_IF’(75, s), 
BOOST_PP_FOR_75
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(75, s),Ö, o, m)

	)

351 
	#BOOST_PP_FOR_75_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(76, s), m, 
BOOST_PP_TUPLE_EAT_2
)(76, sËBOOST_PP_IF’(76, s), 
BOOST_PP_FOR_76
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(76, s),Ö, o, m)

	)

352 
	#BOOST_PP_FOR_76_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(77, s), m, 
BOOST_PP_TUPLE_EAT_2
)(77, sËBOOST_PP_IF’(77, s), 
BOOST_PP_FOR_77
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(77, s),Ö, o, m)

	)

353 
	#BOOST_PP_FOR_77_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(78, s), m, 
BOOST_PP_TUPLE_EAT_2
)(78, sËBOOST_PP_IF’(78, s), 
BOOST_PP_FOR_78
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(78, s),Ö, o, m)

	)

354 
	#BOOST_PP_FOR_78_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(79, s), m, 
BOOST_PP_TUPLE_EAT_2
)(79, sËBOOST_PP_IF’(79, s), 
BOOST_PP_FOR_79
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(79, s),Ö, o, m)

	)

355 
	#BOOST_PP_FOR_79_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(80, s), m, 
BOOST_PP_TUPLE_EAT_2
)(80, sËBOOST_PP_IF’(80, s), 
BOOST_PP_FOR_80
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(80, s),Ö, o, m)

	)

356 
	#BOOST_PP_FOR_80_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(81, s), m, 
BOOST_PP_TUPLE_EAT_2
)(81, sËBOOST_PP_IF’(81, s), 
BOOST_PP_FOR_81
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(81, s),Ö, o, m)

	)

357 
	#BOOST_PP_FOR_81_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(82, s), m, 
BOOST_PP_TUPLE_EAT_2
)(82, sËBOOST_PP_IF’(82, s), 
BOOST_PP_FOR_82
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(82, s),Ö, o, m)

	)

358 
	#BOOST_PP_FOR_82_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(83, s), m, 
BOOST_PP_TUPLE_EAT_2
)(83, sËBOOST_PP_IF’(83, s), 
BOOST_PP_FOR_83
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(83, s),Ö, o, m)

	)

359 
	#BOOST_PP_FOR_83_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(84, s), m, 
BOOST_PP_TUPLE_EAT_2
)(84, sËBOOST_PP_IF’(84, s), 
BOOST_PP_FOR_84
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(84, s),Ö, o, m)

	)

360 
	#BOOST_PP_FOR_84_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(85, s), m, 
BOOST_PP_TUPLE_EAT_2
)(85, sËBOOST_PP_IF’(85, s), 
BOOST_PP_FOR_85
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(85, s),Ö, o, m)

	)

361 
	#BOOST_PP_FOR_85_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(86, s), m, 
BOOST_PP_TUPLE_EAT_2
)(86, sËBOOST_PP_IF’(86, s), 
BOOST_PP_FOR_86
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(86, s),Ö, o, m)

	)

362 
	#BOOST_PP_FOR_86_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(87, s), m, 
BOOST_PP_TUPLE_EAT_2
)(87, sËBOOST_PP_IF’(87, s), 
BOOST_PP_FOR_87
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(87, s),Ö, o, m)

	)

363 
	#BOOST_PP_FOR_87_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(88, s), m, 
BOOST_PP_TUPLE_EAT_2
)(88, sËBOOST_PP_IF’(88, s), 
BOOST_PP_FOR_88
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(88, s),Ö, o, m)

	)

364 
	#BOOST_PP_FOR_88_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(89, s), m, 
BOOST_PP_TUPLE_EAT_2
)(89, sËBOOST_PP_IF’(89, s), 
BOOST_PP_FOR_89
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(89, s),Ö, o, m)

	)

365 
	#BOOST_PP_FOR_89_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(90, s), m, 
BOOST_PP_TUPLE_EAT_2
)(90, sËBOOST_PP_IF’(90, s), 
BOOST_PP_FOR_90
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(90, s),Ö, o, m)

	)

366 
	#BOOST_PP_FOR_90_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(91, s), m, 
BOOST_PP_TUPLE_EAT_2
)(91, sËBOOST_PP_IF’(91, s), 
BOOST_PP_FOR_91
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(91, s),Ö, o, m)

	)

367 
	#BOOST_PP_FOR_91_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(92, s), m, 
BOOST_PP_TUPLE_EAT_2
)(92, sËBOOST_PP_IF’(92, s), 
BOOST_PP_FOR_92
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(92, s),Ö, o, m)

	)

368 
	#BOOST_PP_FOR_92_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(93, s), m, 
BOOST_PP_TUPLE_EAT_2
)(93, sËBOOST_PP_IF’(93, s), 
BOOST_PP_FOR_93
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(93, s),Ö, o, m)

	)

369 
	#BOOST_PP_FOR_93_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(94, s), m, 
BOOST_PP_TUPLE_EAT_2
)(94, sËBOOST_PP_IF’(94, s), 
BOOST_PP_FOR_94
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(94, s),Ö, o, m)

	)

370 
	#BOOST_PP_FOR_94_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(95, s), m, 
BOOST_PP_TUPLE_EAT_2
)(95, sËBOOST_PP_IF’(95, s), 
BOOST_PP_FOR_95
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(95, s),Ö, o, m)

	)

371 
	#BOOST_PP_FOR_95_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(96, s), m, 
BOOST_PP_TUPLE_EAT_2
)(96, sËBOOST_PP_IF’(96, s), 
BOOST_PP_FOR_96
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(96, s),Ö, o, m)

	)

372 
	#BOOST_PP_FOR_96_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(97, s), m, 
BOOST_PP_TUPLE_EAT_2
)(97, sËBOOST_PP_IF’(97, s), 
BOOST_PP_FOR_97
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(97, s),Ö, o, m)

	)

373 
	#BOOST_PP_FOR_97_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(98, s), m, 
BOOST_PP_TUPLE_EAT_2
)(98, sËBOOST_PP_IF’(98, s), 
BOOST_PP_FOR_98
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(98, s),Ö, o, m)

	)

374 
	#BOOST_PP_FOR_98_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(99, s), m, 
BOOST_PP_TUPLE_EAT_2
)(99, sËBOOST_PP_IF’(99, s), 
BOOST_PP_FOR_99
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(99, s),Ö, o, m)

	)

375 
	#BOOST_PP_FOR_99_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(100, s), m, 
BOOST_PP_TUPLE_EAT_2
)(100, sËBOOST_PP_IF’(100, s), 
BOOST_PP_FOR_100
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(100, s),Ö, o, m)

	)

376 
	#BOOST_PP_FOR_100_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(101, s), m, 
BOOST_PP_TUPLE_EAT_2
)(101, sËBOOST_PP_IF’(101, s), 
BOOST_PP_FOR_101
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(101, s),Ö, o, m)

	)

377 
	#BOOST_PP_FOR_101_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(102, s), m, 
BOOST_PP_TUPLE_EAT_2
)(102, sËBOOST_PP_IF’(102, s), 
BOOST_PP_FOR_102
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(102, s),Ö, o, m)

	)

378 
	#BOOST_PP_FOR_102_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(103, s), m, 
BOOST_PP_TUPLE_EAT_2
)(103, sËBOOST_PP_IF’(103, s), 
BOOST_PP_FOR_103
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(103, s),Ö, o, m)

	)

379 
	#BOOST_PP_FOR_103_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(104, s), m, 
BOOST_PP_TUPLE_EAT_2
)(104, sËBOOST_PP_IF’(104, s), 
BOOST_PP_FOR_104
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(104, s),Ö, o, m)

	)

380 
	#BOOST_PP_FOR_104_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(105, s), m, 
BOOST_PP_TUPLE_EAT_2
)(105, sËBOOST_PP_IF’(105, s), 
BOOST_PP_FOR_105
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(105, s),Ö, o, m)

	)

381 
	#BOOST_PP_FOR_105_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(106, s), m, 
BOOST_PP_TUPLE_EAT_2
)(106, sËBOOST_PP_IF’(106, s), 
BOOST_PP_FOR_106
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(106, s),Ö, o, m)

	)

382 
	#BOOST_PP_FOR_106_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(107, s), m, 
BOOST_PP_TUPLE_EAT_2
)(107, sËBOOST_PP_IF’(107, s), 
BOOST_PP_FOR_107
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(107, s),Ö, o, m)

	)

383 
	#BOOST_PP_FOR_107_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(108, s), m, 
BOOST_PP_TUPLE_EAT_2
)(108, sËBOOST_PP_IF’(108, s), 
BOOST_PP_FOR_108
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(108, s),Ö, o, m)

	)

384 
	#BOOST_PP_FOR_108_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(109, s), m, 
BOOST_PP_TUPLE_EAT_2
)(109, sËBOOST_PP_IF’(109, s), 
BOOST_PP_FOR_109
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(109, s),Ö, o, m)

	)

385 
	#BOOST_PP_FOR_109_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(110, s), m, 
BOOST_PP_TUPLE_EAT_2
)(110, sËBOOST_PP_IF’(110, s), 
BOOST_PP_FOR_110
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(110, s),Ö, o, m)

	)

386 
	#BOOST_PP_FOR_110_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(111, s), m, 
BOOST_PP_TUPLE_EAT_2
)(111, sËBOOST_PP_IF’(111, s), 
BOOST_PP_FOR_111
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(111, s),Ö, o, m)

	)

387 
	#BOOST_PP_FOR_111_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(112, s), m, 
BOOST_PP_TUPLE_EAT_2
)(112, sËBOOST_PP_IF’(112, s), 
BOOST_PP_FOR_112
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(112, s),Ö, o, m)

	)

388 
	#BOOST_PP_FOR_112_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(113, s), m, 
BOOST_PP_TUPLE_EAT_2
)(113, sËBOOST_PP_IF’(113, s), 
BOOST_PP_FOR_113
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(113, s),Ö, o, m)

	)

389 
	#BOOST_PP_FOR_113_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(114, s), m, 
BOOST_PP_TUPLE_EAT_2
)(114, sËBOOST_PP_IF’(114, s), 
BOOST_PP_FOR_114
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(114, s),Ö, o, m)

	)

390 
	#BOOST_PP_FOR_114_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(115, s), m, 
BOOST_PP_TUPLE_EAT_2
)(115, sËBOOST_PP_IF’(115, s), 
BOOST_PP_FOR_115
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(115, s),Ö, o, m)

	)

391 
	#BOOST_PP_FOR_115_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(116, s), m, 
BOOST_PP_TUPLE_EAT_2
)(116, sËBOOST_PP_IF’(116, s), 
BOOST_PP_FOR_116
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(116, s),Ö, o, m)

	)

392 
	#BOOST_PP_FOR_116_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(117, s), m, 
BOOST_PP_TUPLE_EAT_2
)(117, sËBOOST_PP_IF’(117, s), 
BOOST_PP_FOR_117
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(117, s),Ö, o, m)

	)

393 
	#BOOST_PP_FOR_117_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(118, s), m, 
BOOST_PP_TUPLE_EAT_2
)(118, sËBOOST_PP_IF’(118, s), 
BOOST_PP_FOR_118
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(118, s),Ö, o, m)

	)

394 
	#BOOST_PP_FOR_118_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(119, s), m, 
BOOST_PP_TUPLE_EAT_2
)(119, sËBOOST_PP_IF’(119, s), 
BOOST_PP_FOR_119
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(119, s),Ö, o, m)

	)

395 
	#BOOST_PP_FOR_119_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(120, s), m, 
BOOST_PP_TUPLE_EAT_2
)(120, sËBOOST_PP_IF’(120, s), 
BOOST_PP_FOR_120
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(120, s),Ö, o, m)

	)

396 
	#BOOST_PP_FOR_120_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(121, s), m, 
BOOST_PP_TUPLE_EAT_2
)(121, sËBOOST_PP_IF’(121, s), 
BOOST_PP_FOR_121
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(121, s),Ö, o, m)

	)

397 
	#BOOST_PP_FOR_121_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(122, s), m, 
BOOST_PP_TUPLE_EAT_2
)(122, sËBOOST_PP_IF’(122, s), 
BOOST_PP_FOR_122
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(122, s),Ö, o, m)

	)

398 
	#BOOST_PP_FOR_122_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(123, s), m, 
BOOST_PP_TUPLE_EAT_2
)(123, sËBOOST_PP_IF’(123, s), 
BOOST_PP_FOR_123
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(123, s),Ö, o, m)

	)

399 
	#BOOST_PP_FOR_123_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(124, s), m, 
BOOST_PP_TUPLE_EAT_2
)(124, sËBOOST_PP_IF’(124, s), 
BOOST_PP_FOR_124
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(124, s),Ö, o, m)

	)

400 
	#BOOST_PP_FOR_124_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(125, s), m, 
BOOST_PP_TUPLE_EAT_2
)(125, sËBOOST_PP_IF’(125, s), 
BOOST_PP_FOR_125
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(125, s),Ö, o, m)

	)

401 
	#BOOST_PP_FOR_125_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(126, s), m, 
BOOST_PP_TUPLE_EAT_2
)(126, sËBOOST_PP_IF’(126, s), 
BOOST_PP_FOR_126
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(126, s),Ö, o, m)

	)

402 
	#BOOST_PP_FOR_126_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(127, s), m, 
BOOST_PP_TUPLE_EAT_2
)(127, sËBOOST_PP_IF’(127, s), 
BOOST_PP_FOR_127
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(127, s),Ö, o, m)

	)

403 
	#BOOST_PP_FOR_127_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(128, s), m, 
BOOST_PP_TUPLE_EAT_2
)(128, sËBOOST_PP_IF’(128, s), 
BOOST_PP_FOR_128
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(128, s),Ö, o, m)

	)

404 
	#BOOST_PP_FOR_128_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(129, s), m, 
BOOST_PP_TUPLE_EAT_2
)(129, sËBOOST_PP_IF’(129, s), 
BOOST_PP_FOR_129
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(129, s),Ö, o, m)

	)

405 
	#BOOST_PP_FOR_129_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(130, s), m, 
BOOST_PP_TUPLE_EAT_2
)(130, sËBOOST_PP_IF’(130, s), 
BOOST_PP_FOR_130
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(130, s),Ö, o, m)

	)

406 
	#BOOST_PP_FOR_130_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(131, s), m, 
BOOST_PP_TUPLE_EAT_2
)(131, sËBOOST_PP_IF’(131, s), 
BOOST_PP_FOR_131
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(131, s),Ö, o, m)

	)

407 
	#BOOST_PP_FOR_131_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(132, s), m, 
BOOST_PP_TUPLE_EAT_2
)(132, sËBOOST_PP_IF’(132, s), 
BOOST_PP_FOR_132
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(132, s),Ö, o, m)

	)

408 
	#BOOST_PP_FOR_132_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(133, s), m, 
BOOST_PP_TUPLE_EAT_2
)(133, sËBOOST_PP_IF’(133, s), 
BOOST_PP_FOR_133
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(133, s),Ö, o, m)

	)

409 
	#BOOST_PP_FOR_133_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(134, s), m, 
BOOST_PP_TUPLE_EAT_2
)(134, sËBOOST_PP_IF’(134, s), 
BOOST_PP_FOR_134
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(134, s),Ö, o, m)

	)

410 
	#BOOST_PP_FOR_134_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(135, s), m, 
BOOST_PP_TUPLE_EAT_2
)(135, sËBOOST_PP_IF’(135, s), 
BOOST_PP_FOR_135
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(135, s),Ö, o, m)

	)

411 
	#BOOST_PP_FOR_135_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(136, s), m, 
BOOST_PP_TUPLE_EAT_2
)(136, sËBOOST_PP_IF’(136, s), 
BOOST_PP_FOR_136
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(136, s),Ö, o, m)

	)

412 
	#BOOST_PP_FOR_136_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(137, s), m, 
BOOST_PP_TUPLE_EAT_2
)(137, sËBOOST_PP_IF’(137, s), 
BOOST_PP_FOR_137
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(137, s),Ö, o, m)

	)

413 
	#BOOST_PP_FOR_137_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(138, s), m, 
BOOST_PP_TUPLE_EAT_2
)(138, sËBOOST_PP_IF’(138, s), 
BOOST_PP_FOR_138
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(138, s),Ö, o, m)

	)

414 
	#BOOST_PP_FOR_138_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(139, s), m, 
BOOST_PP_TUPLE_EAT_2
)(139, sËBOOST_PP_IF’(139, s), 
BOOST_PP_FOR_139
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(139, s),Ö, o, m)

	)

415 
	#BOOST_PP_FOR_139_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(140, s), m, 
BOOST_PP_TUPLE_EAT_2
)(140, sËBOOST_PP_IF’(140, s), 
BOOST_PP_FOR_140
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(140, s),Ö, o, m)

	)

416 
	#BOOST_PP_FOR_140_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(141, s), m, 
BOOST_PP_TUPLE_EAT_2
)(141, sËBOOST_PP_IF’(141, s), 
BOOST_PP_FOR_141
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(141, s),Ö, o, m)

	)

417 
	#BOOST_PP_FOR_141_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(142, s), m, 
BOOST_PP_TUPLE_EAT_2
)(142, sËBOOST_PP_IF’(142, s), 
BOOST_PP_FOR_142
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(142, s),Ö, o, m)

	)

418 
	#BOOST_PP_FOR_142_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(143, s), m, 
BOOST_PP_TUPLE_EAT_2
)(143, sËBOOST_PP_IF’(143, s), 
BOOST_PP_FOR_143
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(143, s),Ö, o, m)

	)

419 
	#BOOST_PP_FOR_143_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(144, s), m, 
BOOST_PP_TUPLE_EAT_2
)(144, sËBOOST_PP_IF’(144, s), 
BOOST_PP_FOR_144
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(144, s),Ö, o, m)

	)

420 
	#BOOST_PP_FOR_144_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(145, s), m, 
BOOST_PP_TUPLE_EAT_2
)(145, sËBOOST_PP_IF’(145, s), 
BOOST_PP_FOR_145
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(145, s),Ö, o, m)

	)

421 
	#BOOST_PP_FOR_145_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(146, s), m, 
BOOST_PP_TUPLE_EAT_2
)(146, sËBOOST_PP_IF’(146, s), 
BOOST_PP_FOR_146
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(146, s),Ö, o, m)

	)

422 
	#BOOST_PP_FOR_146_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(147, s), m, 
BOOST_PP_TUPLE_EAT_2
)(147, sËBOOST_PP_IF’(147, s), 
BOOST_PP_FOR_147
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(147, s),Ö, o, m)

	)

423 
	#BOOST_PP_FOR_147_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(148, s), m, 
BOOST_PP_TUPLE_EAT_2
)(148, sËBOOST_PP_IF’(148, s), 
BOOST_PP_FOR_148
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(148, s),Ö, o, m)

	)

424 
	#BOOST_PP_FOR_148_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(149, s), m, 
BOOST_PP_TUPLE_EAT_2
)(149, sËBOOST_PP_IF’(149, s), 
BOOST_PP_FOR_149
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(149, s),Ö, o, m)

	)

425 
	#BOOST_PP_FOR_149_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(150, s), m, 
BOOST_PP_TUPLE_EAT_2
)(150, sËBOOST_PP_IF’(150, s), 
BOOST_PP_FOR_150
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(150, s),Ö, o, m)

	)

426 
	#BOOST_PP_FOR_150_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(151, s), m, 
BOOST_PP_TUPLE_EAT_2
)(151, sËBOOST_PP_IF’(151, s), 
BOOST_PP_FOR_151
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(151, s),Ö, o, m)

	)

427 
	#BOOST_PP_FOR_151_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(152, s), m, 
BOOST_PP_TUPLE_EAT_2
)(152, sËBOOST_PP_IF’(152, s), 
BOOST_PP_FOR_152
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(152, s),Ö, o, m)

	)

428 
	#BOOST_PP_FOR_152_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(153, s), m, 
BOOST_PP_TUPLE_EAT_2
)(153, sËBOOST_PP_IF’(153, s), 
BOOST_PP_FOR_153
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(153, s),Ö, o, m)

	)

429 
	#BOOST_PP_FOR_153_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(154, s), m, 
BOOST_PP_TUPLE_EAT_2
)(154, sËBOOST_PP_IF’(154, s), 
BOOST_PP_FOR_154
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(154, s),Ö, o, m)

	)

430 
	#BOOST_PP_FOR_154_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(155, s), m, 
BOOST_PP_TUPLE_EAT_2
)(155, sËBOOST_PP_IF’(155, s), 
BOOST_PP_FOR_155
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(155, s),Ö, o, m)

	)

431 
	#BOOST_PP_FOR_155_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(156, s), m, 
BOOST_PP_TUPLE_EAT_2
)(156, sËBOOST_PP_IF’(156, s), 
BOOST_PP_FOR_156
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(156, s),Ö, o, m)

	)

432 
	#BOOST_PP_FOR_156_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(157, s), m, 
BOOST_PP_TUPLE_EAT_2
)(157, sËBOOST_PP_IF’(157, s), 
BOOST_PP_FOR_157
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(157, s),Ö, o, m)

	)

433 
	#BOOST_PP_FOR_157_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(158, s), m, 
BOOST_PP_TUPLE_EAT_2
)(158, sËBOOST_PP_IF’(158, s), 
BOOST_PP_FOR_158
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(158, s),Ö, o, m)

	)

434 
	#BOOST_PP_FOR_158_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(159, s), m, 
BOOST_PP_TUPLE_EAT_2
)(159, sËBOOST_PP_IF’(159, s), 
BOOST_PP_FOR_159
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(159, s),Ö, o, m)

	)

435 
	#BOOST_PP_FOR_159_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(160, s), m, 
BOOST_PP_TUPLE_EAT_2
)(160, sËBOOST_PP_IF’(160, s), 
BOOST_PP_FOR_160
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(160, s),Ö, o, m)

	)

436 
	#BOOST_PP_FOR_160_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(161, s), m, 
BOOST_PP_TUPLE_EAT_2
)(161, sËBOOST_PP_IF’(161, s), 
BOOST_PP_FOR_161
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(161, s),Ö, o, m)

	)

437 
	#BOOST_PP_FOR_161_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(162, s), m, 
BOOST_PP_TUPLE_EAT_2
)(162, sËBOOST_PP_IF’(162, s), 
BOOST_PP_FOR_162
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(162, s),Ö, o, m)

	)

438 
	#BOOST_PP_FOR_162_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(163, s), m, 
BOOST_PP_TUPLE_EAT_2
)(163, sËBOOST_PP_IF’(163, s), 
BOOST_PP_FOR_163
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(163, s),Ö, o, m)

	)

439 
	#BOOST_PP_FOR_163_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(164, s), m, 
BOOST_PP_TUPLE_EAT_2
)(164, sËBOOST_PP_IF’(164, s), 
BOOST_PP_FOR_164
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(164, s),Ö, o, m)

	)

440 
	#BOOST_PP_FOR_164_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(165, s), m, 
BOOST_PP_TUPLE_EAT_2
)(165, sËBOOST_PP_IF’(165, s), 
BOOST_PP_FOR_165
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(165, s),Ö, o, m)

	)

441 
	#BOOST_PP_FOR_165_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(166, s), m, 
BOOST_PP_TUPLE_EAT_2
)(166, sËBOOST_PP_IF’(166, s), 
BOOST_PP_FOR_166
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(166, s),Ö, o, m)

	)

442 
	#BOOST_PP_FOR_166_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(167, s), m, 
BOOST_PP_TUPLE_EAT_2
)(167, sËBOOST_PP_IF’(167, s), 
BOOST_PP_FOR_167
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(167, s),Ö, o, m)

	)

443 
	#BOOST_PP_FOR_167_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(168, s), m, 
BOOST_PP_TUPLE_EAT_2
)(168, sËBOOST_PP_IF’(168, s), 
BOOST_PP_FOR_168
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(168, s),Ö, o, m)

	)

444 
	#BOOST_PP_FOR_168_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(169, s), m, 
BOOST_PP_TUPLE_EAT_2
)(169, sËBOOST_PP_IF’(169, s), 
BOOST_PP_FOR_169
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(169, s),Ö, o, m)

	)

445 
	#BOOST_PP_FOR_169_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(170, s), m, 
BOOST_PP_TUPLE_EAT_2
)(170, sËBOOST_PP_IF’(170, s), 
BOOST_PP_FOR_170
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(170, s),Ö, o, m)

	)

446 
	#BOOST_PP_FOR_170_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(171, s), m, 
BOOST_PP_TUPLE_EAT_2
)(171, sËBOOST_PP_IF’(171, s), 
BOOST_PP_FOR_171
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(171, s),Ö, o, m)

	)

447 
	#BOOST_PP_FOR_171_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(172, s), m, 
BOOST_PP_TUPLE_EAT_2
)(172, sËBOOST_PP_IF’(172, s), 
BOOST_PP_FOR_172
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(172, s),Ö, o, m)

	)

448 
	#BOOST_PP_FOR_172_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(173, s), m, 
BOOST_PP_TUPLE_EAT_2
)(173, sËBOOST_PP_IF’(173, s), 
BOOST_PP_FOR_173
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(173, s),Ö, o, m)

	)

449 
	#BOOST_PP_FOR_173_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(174, s), m, 
BOOST_PP_TUPLE_EAT_2
)(174, sËBOOST_PP_IF’(174, s), 
BOOST_PP_FOR_174
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(174, s),Ö, o, m)

	)

450 
	#BOOST_PP_FOR_174_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(175, s), m, 
BOOST_PP_TUPLE_EAT_2
)(175, sËBOOST_PP_IF’(175, s), 
BOOST_PP_FOR_175
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(175, s),Ö, o, m)

	)

451 
	#BOOST_PP_FOR_175_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(176, s), m, 
BOOST_PP_TUPLE_EAT_2
)(176, sËBOOST_PP_IF’(176, s), 
BOOST_PP_FOR_176
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(176, s),Ö, o, m)

	)

452 
	#BOOST_PP_FOR_176_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(177, s), m, 
BOOST_PP_TUPLE_EAT_2
)(177, sËBOOST_PP_IF’(177, s), 
BOOST_PP_FOR_177
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(177, s),Ö, o, m)

	)

453 
	#BOOST_PP_FOR_177_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(178, s), m, 
BOOST_PP_TUPLE_EAT_2
)(178, sËBOOST_PP_IF’(178, s), 
BOOST_PP_FOR_178
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(178, s),Ö, o, m)

	)

454 
	#BOOST_PP_FOR_178_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(179, s), m, 
BOOST_PP_TUPLE_EAT_2
)(179, sËBOOST_PP_IF’(179, s), 
BOOST_PP_FOR_179
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(179, s),Ö, o, m)

	)

455 
	#BOOST_PP_FOR_179_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(180, s), m, 
BOOST_PP_TUPLE_EAT_2
)(180, sËBOOST_PP_IF’(180, s), 
BOOST_PP_FOR_180
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(180, s),Ö, o, m)

	)

456 
	#BOOST_PP_FOR_180_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(181, s), m, 
BOOST_PP_TUPLE_EAT_2
)(181, sËBOOST_PP_IF’(181, s), 
BOOST_PP_FOR_181
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(181, s),Ö, o, m)

	)

457 
	#BOOST_PP_FOR_181_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(182, s), m, 
BOOST_PP_TUPLE_EAT_2
)(182, sËBOOST_PP_IF’(182, s), 
BOOST_PP_FOR_182
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(182, s),Ö, o, m)

	)

458 
	#BOOST_PP_FOR_182_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(183, s), m, 
BOOST_PP_TUPLE_EAT_2
)(183, sËBOOST_PP_IF’(183, s), 
BOOST_PP_FOR_183
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(183, s),Ö, o, m)

	)

459 
	#BOOST_PP_FOR_183_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(184, s), m, 
BOOST_PP_TUPLE_EAT_2
)(184, sËBOOST_PP_IF’(184, s), 
BOOST_PP_FOR_184
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(184, s),Ö, o, m)

	)

460 
	#BOOST_PP_FOR_184_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(185, s), m, 
BOOST_PP_TUPLE_EAT_2
)(185, sËBOOST_PP_IF’(185, s), 
BOOST_PP_FOR_185
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(185, s),Ö, o, m)

	)

461 
	#BOOST_PP_FOR_185_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(186, s), m, 
BOOST_PP_TUPLE_EAT_2
)(186, sËBOOST_PP_IF’(186, s), 
BOOST_PP_FOR_186
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(186, s),Ö, o, m)

	)

462 
	#BOOST_PP_FOR_186_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(187, s), m, 
BOOST_PP_TUPLE_EAT_2
)(187, sËBOOST_PP_IF’(187, s), 
BOOST_PP_FOR_187
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(187, s),Ö, o, m)

	)

463 
	#BOOST_PP_FOR_187_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(188, s), m, 
BOOST_PP_TUPLE_EAT_2
)(188, sËBOOST_PP_IF’(188, s), 
BOOST_PP_FOR_188
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(188, s),Ö, o, m)

	)

464 
	#BOOST_PP_FOR_188_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(189, s), m, 
BOOST_PP_TUPLE_EAT_2
)(189, sËBOOST_PP_IF’(189, s), 
BOOST_PP_FOR_189
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(189, s),Ö, o, m)

	)

465 
	#BOOST_PP_FOR_189_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(190, s), m, 
BOOST_PP_TUPLE_EAT_2
)(190, sËBOOST_PP_IF’(190, s), 
BOOST_PP_FOR_190
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(190, s),Ö, o, m)

	)

466 
	#BOOST_PP_FOR_190_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(191, s), m, 
BOOST_PP_TUPLE_EAT_2
)(191, sËBOOST_PP_IF’(191, s), 
BOOST_PP_FOR_191
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(191, s),Ö, o, m)

	)

467 
	#BOOST_PP_FOR_191_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(192, s), m, 
BOOST_PP_TUPLE_EAT_2
)(192, sËBOOST_PP_IF’(192, s), 
BOOST_PP_FOR_192
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(192, s),Ö, o, m)

	)

468 
	#BOOST_PP_FOR_192_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(193, s), m, 
BOOST_PP_TUPLE_EAT_2
)(193, sËBOOST_PP_IF’(193, s), 
BOOST_PP_FOR_193
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(193, s),Ö, o, m)

	)

469 
	#BOOST_PP_FOR_193_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(194, s), m, 
BOOST_PP_TUPLE_EAT_2
)(194, sËBOOST_PP_IF’(194, s), 
BOOST_PP_FOR_194
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(194, s),Ö, o, m)

	)

470 
	#BOOST_PP_FOR_194_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(195, s), m, 
BOOST_PP_TUPLE_EAT_2
)(195, sËBOOST_PP_IF’(195, s), 
BOOST_PP_FOR_195
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(195, s),Ö, o, m)

	)

471 
	#BOOST_PP_FOR_195_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(196, s), m, 
BOOST_PP_TUPLE_EAT_2
)(196, sËBOOST_PP_IF’(196, s), 
BOOST_PP_FOR_196
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(196, s),Ö, o, m)

	)

472 
	#BOOST_PP_FOR_196_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(197, s), m, 
BOOST_PP_TUPLE_EAT_2
)(197, sËBOOST_PP_IF’(197, s), 
BOOST_PP_FOR_197
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(197, s),Ö, o, m)

	)

473 
	#BOOST_PP_FOR_197_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(198, s), m, 
BOOST_PP_TUPLE_EAT_2
)(198, sËBOOST_PP_IF’(198, s), 
BOOST_PP_FOR_198
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(198, s),Ö, o, m)

	)

474 
	#BOOST_PP_FOR_198_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(199, s), m, 
BOOST_PP_TUPLE_EAT_2
)(199, sËBOOST_PP_IF’(199, s), 
BOOST_PP_FOR_199
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(199, s),Ö, o, m)

	)

475 
	#BOOST_PP_FOR_199_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(200, s), m, 
BOOST_PP_TUPLE_EAT_2
)(200, sËBOOST_PP_IF’(200, s), 
BOOST_PP_FOR_200
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(200, s),Ö, o, m)

	)

476 
	#BOOST_PP_FOR_200_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(201, s), m, 
BOOST_PP_TUPLE_EAT_2
)(201, sËBOOST_PP_IF’(201, s), 
BOOST_PP_FOR_201
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(201, s),Ö, o, m)

	)

477 
	#BOOST_PP_FOR_201_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(202, s), m, 
BOOST_PP_TUPLE_EAT_2
)(202, sËBOOST_PP_IF’(202, s), 
BOOST_PP_FOR_202
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(202, s),Ö, o, m)

	)

478 
	#BOOST_PP_FOR_202_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(203, s), m, 
BOOST_PP_TUPLE_EAT_2
)(203, sËBOOST_PP_IF’(203, s), 
BOOST_PP_FOR_203
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(203, s),Ö, o, m)

	)

479 
	#BOOST_PP_FOR_203_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(204, s), m, 
BOOST_PP_TUPLE_EAT_2
)(204, sËBOOST_PP_IF’(204, s), 
BOOST_PP_FOR_204
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(204, s),Ö, o, m)

	)

480 
	#BOOST_PP_FOR_204_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(205, s), m, 
BOOST_PP_TUPLE_EAT_2
)(205, sËBOOST_PP_IF’(205, s), 
BOOST_PP_FOR_205
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(205, s),Ö, o, m)

	)

481 
	#BOOST_PP_FOR_205_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(206, s), m, 
BOOST_PP_TUPLE_EAT_2
)(206, sËBOOST_PP_IF’(206, s), 
BOOST_PP_FOR_206
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(206, s),Ö, o, m)

	)

482 
	#BOOST_PP_FOR_206_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(207, s), m, 
BOOST_PP_TUPLE_EAT_2
)(207, sËBOOST_PP_IF’(207, s), 
BOOST_PP_FOR_207
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(207, s),Ö, o, m)

	)

483 
	#BOOST_PP_FOR_207_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(208, s), m, 
BOOST_PP_TUPLE_EAT_2
)(208, sËBOOST_PP_IF’(208, s), 
BOOST_PP_FOR_208
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(208, s),Ö, o, m)

	)

484 
	#BOOST_PP_FOR_208_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(209, s), m, 
BOOST_PP_TUPLE_EAT_2
)(209, sËBOOST_PP_IF’(209, s), 
BOOST_PP_FOR_209
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(209, s),Ö, o, m)

	)

485 
	#BOOST_PP_FOR_209_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(210, s), m, 
BOOST_PP_TUPLE_EAT_2
)(210, sËBOOST_PP_IF’(210, s), 
BOOST_PP_FOR_210
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(210, s),Ö, o, m)

	)

486 
	#BOOST_PP_FOR_210_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(211, s), m, 
BOOST_PP_TUPLE_EAT_2
)(211, sËBOOST_PP_IF’(211, s), 
BOOST_PP_FOR_211
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(211, s),Ö, o, m)

	)

487 
	#BOOST_PP_FOR_211_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(212, s), m, 
BOOST_PP_TUPLE_EAT_2
)(212, sËBOOST_PP_IF’(212, s), 
BOOST_PP_FOR_212
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(212, s),Ö, o, m)

	)

488 
	#BOOST_PP_FOR_212_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(213, s), m, 
BOOST_PP_TUPLE_EAT_2
)(213, sËBOOST_PP_IF’(213, s), 
BOOST_PP_FOR_213
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(213, s),Ö, o, m)

	)

489 
	#BOOST_PP_FOR_213_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(214, s), m, 
BOOST_PP_TUPLE_EAT_2
)(214, sËBOOST_PP_IF’(214, s), 
BOOST_PP_FOR_214
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(214, s),Ö, o, m)

	)

490 
	#BOOST_PP_FOR_214_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(215, s), m, 
BOOST_PP_TUPLE_EAT_2
)(215, sËBOOST_PP_IF’(215, s), 
BOOST_PP_FOR_215
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(215, s),Ö, o, m)

	)

491 
	#BOOST_PP_FOR_215_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(216, s), m, 
BOOST_PP_TUPLE_EAT_2
)(216, sËBOOST_PP_IF’(216, s), 
BOOST_PP_FOR_216
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(216, s),Ö, o, m)

	)

492 
	#BOOST_PP_FOR_216_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(217, s), m, 
BOOST_PP_TUPLE_EAT_2
)(217, sËBOOST_PP_IF’(217, s), 
BOOST_PP_FOR_217
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(217, s),Ö, o, m)

	)

493 
	#BOOST_PP_FOR_217_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(218, s), m, 
BOOST_PP_TUPLE_EAT_2
)(218, sËBOOST_PP_IF’(218, s), 
BOOST_PP_FOR_218
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(218, s),Ö, o, m)

	)

494 
	#BOOST_PP_FOR_218_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(219, s), m, 
BOOST_PP_TUPLE_EAT_2
)(219, sËBOOST_PP_IF’(219, s), 
BOOST_PP_FOR_219
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(219, s),Ö, o, m)

	)

495 
	#BOOST_PP_FOR_219_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(220, s), m, 
BOOST_PP_TUPLE_EAT_2
)(220, sËBOOST_PP_IF’(220, s), 
BOOST_PP_FOR_220
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(220, s),Ö, o, m)

	)

496 
	#BOOST_PP_FOR_220_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(221, s), m, 
BOOST_PP_TUPLE_EAT_2
)(221, sËBOOST_PP_IF’(221, s), 
BOOST_PP_FOR_221
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(221, s),Ö, o, m)

	)

497 
	#BOOST_PP_FOR_221_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(222, s), m, 
BOOST_PP_TUPLE_EAT_2
)(222, sËBOOST_PP_IF’(222, s), 
BOOST_PP_FOR_222
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(222, s),Ö, o, m)

	)

498 
	#BOOST_PP_FOR_222_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(223, s), m, 
BOOST_PP_TUPLE_EAT_2
)(223, sËBOOST_PP_IF’(223, s), 
BOOST_PP_FOR_223
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(223, s),Ö, o, m)

	)

499 
	#BOOST_PP_FOR_223_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(224, s), m, 
BOOST_PP_TUPLE_EAT_2
)(224, sËBOOST_PP_IF’(224, s), 
BOOST_PP_FOR_224
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(224, s),Ö, o, m)

	)

500 
	#BOOST_PP_FOR_224_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(225, s), m, 
BOOST_PP_TUPLE_EAT_2
)(225, sËBOOST_PP_IF’(225, s), 
BOOST_PP_FOR_225
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(225, s),Ö, o, m)

	)

501 
	#BOOST_PP_FOR_225_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(226, s), m, 
BOOST_PP_TUPLE_EAT_2
)(226, sËBOOST_PP_IF’(226, s), 
BOOST_PP_FOR_226
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(226, s),Ö, o, m)

	)

502 
	#BOOST_PP_FOR_226_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(227, s), m, 
BOOST_PP_TUPLE_EAT_2
)(227, sËBOOST_PP_IF’(227, s), 
BOOST_PP_FOR_227
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(227, s),Ö, o, m)

	)

503 
	#BOOST_PP_FOR_227_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(228, s), m, 
BOOST_PP_TUPLE_EAT_2
)(228, sËBOOST_PP_IF’(228, s), 
BOOST_PP_FOR_228
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(228, s),Ö, o, m)

	)

504 
	#BOOST_PP_FOR_228_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(229, s), m, 
BOOST_PP_TUPLE_EAT_2
)(229, sËBOOST_PP_IF’(229, s), 
BOOST_PP_FOR_229
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(229, s),Ö, o, m)

	)

505 
	#BOOST_PP_FOR_229_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(230, s), m, 
BOOST_PP_TUPLE_EAT_2
)(230, sËBOOST_PP_IF’(230, s), 
BOOST_PP_FOR_230
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(230, s),Ö, o, m)

	)

506 
	#BOOST_PP_FOR_230_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(231, s), m, 
BOOST_PP_TUPLE_EAT_2
)(231, sËBOOST_PP_IF’(231, s), 
BOOST_PP_FOR_231
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(231, s),Ö, o, m)

	)

507 
	#BOOST_PP_FOR_231_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(232, s), m, 
BOOST_PP_TUPLE_EAT_2
)(232, sËBOOST_PP_IF’(232, s), 
BOOST_PP_FOR_232
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(232, s),Ö, o, m)

	)

508 
	#BOOST_PP_FOR_232_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(233, s), m, 
BOOST_PP_TUPLE_EAT_2
)(233, sËBOOST_PP_IF’(233, s), 
BOOST_PP_FOR_233
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(233, s),Ö, o, m)

	)

509 
	#BOOST_PP_FOR_233_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(234, s), m, 
BOOST_PP_TUPLE_EAT_2
)(234, sËBOOST_PP_IF’(234, s), 
BOOST_PP_FOR_234
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(234, s),Ö, o, m)

	)

510 
	#BOOST_PP_FOR_234_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(235, s), m, 
BOOST_PP_TUPLE_EAT_2
)(235, sËBOOST_PP_IF’(235, s), 
BOOST_PP_FOR_235
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(235, s),Ö, o, m)

	)

511 
	#BOOST_PP_FOR_235_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(236, s), m, 
BOOST_PP_TUPLE_EAT_2
)(236, sËBOOST_PP_IF’(236, s), 
BOOST_PP_FOR_236
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(236, s),Ö, o, m)

	)

512 
	#BOOST_PP_FOR_236_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(237, s), m, 
BOOST_PP_TUPLE_EAT_2
)(237, sËBOOST_PP_IF’(237, s), 
BOOST_PP_FOR_237
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(237, s),Ö, o, m)

	)

513 
	#BOOST_PP_FOR_237_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(238, s), m, 
BOOST_PP_TUPLE_EAT_2
)(238, sËBOOST_PP_IF’(238, s), 
BOOST_PP_FOR_238
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(238, s),Ö, o, m)

	)

514 
	#BOOST_PP_FOR_238_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(239, s), m, 
BOOST_PP_TUPLE_EAT_2
)(239, sËBOOST_PP_IF’(239, s), 
BOOST_PP_FOR_239
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(239, s),Ö, o, m)

	)

515 
	#BOOST_PP_FOR_239_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(240, s), m, 
BOOST_PP_TUPLE_EAT_2
)(240, sËBOOST_PP_IF’(240, s), 
BOOST_PP_FOR_240
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(240, s),Ö, o, m)

	)

516 
	#BOOST_PP_FOR_240_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(241, s), m, 
BOOST_PP_TUPLE_EAT_2
)(241, sËBOOST_PP_IF’(241, s), 
BOOST_PP_FOR_241
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(241, s),Ö, o, m)

	)

517 
	#BOOST_PP_FOR_241_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(242, s), m, 
BOOST_PP_TUPLE_EAT_2
)(242, sËBOOST_PP_IF’(242, s), 
BOOST_PP_FOR_242
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(242, s),Ö, o, m)

	)

518 
	#BOOST_PP_FOR_242_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(243, s), m, 
BOOST_PP_TUPLE_EAT_2
)(243, sËBOOST_PP_IF’(243, s), 
BOOST_PP_FOR_243
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(243, s),Ö, o, m)

	)

519 
	#BOOST_PP_FOR_243_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(244, s), m, 
BOOST_PP_TUPLE_EAT_2
)(244, sËBOOST_PP_IF’(244, s), 
BOOST_PP_FOR_244
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(244, s),Ö, o, m)

	)

520 
	#BOOST_PP_FOR_244_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(245, s), m, 
BOOST_PP_TUPLE_EAT_2
)(245, sËBOOST_PP_IF’(245, s), 
BOOST_PP_FOR_245
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(245, s),Ö, o, m)

	)

521 
	#BOOST_PP_FOR_245_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(246, s), m, 
BOOST_PP_TUPLE_EAT_2
)(246, sËBOOST_PP_IF’(246, s), 
BOOST_PP_FOR_246
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(246, s),Ö, o, m)

	)

522 
	#BOOST_PP_FOR_246_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(247, s), m, 
BOOST_PP_TUPLE_EAT_2
)(247, sËBOOST_PP_IF’(247, s), 
BOOST_PP_FOR_247
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(247, s),Ö, o, m)

	)

523 
	#BOOST_PP_FOR_247_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(248, s), m, 
BOOST_PP_TUPLE_EAT_2
)(248, sËBOOST_PP_IF’(248, s), 
BOOST_PP_FOR_248
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(248, s),Ö, o, m)

	)

524 
	#BOOST_PP_FOR_248_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(249, s), m, 
BOOST_PP_TUPLE_EAT_2
)(249, sËBOOST_PP_IF’(249, s), 
BOOST_PP_FOR_249
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(249, s),Ö, o, m)

	)

525 
	#BOOST_PP_FOR_249_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(250, s), m, 
BOOST_PP_TUPLE_EAT_2
)(250, sËBOOST_PP_IF’(250, s), 
BOOST_PP_FOR_250
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(250, s),Ö, o, m)

	)

526 
	#BOOST_PP_FOR_250_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(251, s), m, 
BOOST_PP_TUPLE_EAT_2
)(251, sËBOOST_PP_IF’(251, s), 
BOOST_PP_FOR_251
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(251, s),Ö, o, m)

	)

527 
	#BOOST_PP_FOR_251_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(252, s), m, 
BOOST_PP_TUPLE_EAT_2
)(252, sËBOOST_PP_IF’(252, s), 
BOOST_PP_FOR_252
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(252, s),Ö, o, m)

	)

528 
	#BOOST_PP_FOR_252_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(253, s), m, 
BOOST_PP_TUPLE_EAT_2
)(253, sËBOOST_PP_IF’(253, s), 
BOOST_PP_FOR_253
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(253, s),Ö, o, m)

	)

529 
	#BOOST_PP_FOR_253_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(254, s), m, 
BOOST_PP_TUPLE_EAT_2
)(254, sËBOOST_PP_IF’(254, s), 
BOOST_PP_FOR_254
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(254, s),Ö, o, m)

	)

530 
	#BOOST_PP_FOR_254_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(255, s), m, 
BOOST_PP_TUPLE_EAT_2
)(255, sËBOOST_PP_IF’(255, s), 
BOOST_PP_FOR_255
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(255, s),Ö, o, m)

	)

531 
	#BOOST_PP_FOR_255_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(256, s), m, 
BOOST_PP_TUPLE_EAT_2
)(256, sËBOOST_PP_IF’(256, s), 
BOOST_PP_FOR_256
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(256, s),Ö, o, m)

	)

532 
	#BOOST_PP_FOR_256_I
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(257, s), m, 
BOOST_PP_TUPLE_EAT_2
)(257, sËBOOST_PP_IF’(257, s), 
BOOST_PP_FOR_257
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(257, s),Ö, o, m)

	)

	@/usr/include/boost/preprocessor/repetition/detail/for.hpp

1 #/* 
C›yright
 (
C
) 2001

2 #* 
Hou£m¨que
 
Oy


3 #* 
hâp
:

5 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


6 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


7 #* 
hâp
:

9 #
#/* 
Revi£d
 
by
 
Paul
 
Mís⁄ides
 (2002) */

11 #
#/* 
Sì
 
hâp
:

13 #
#i‚de‡
BOOST_PREPROCESSOR_REPETITION_DETAIL_FOR_HPP


15 
	#BOOST_PREPROCESSOR_REPETITION_DETAIL_FOR_HPP


	)

16 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄åﬁ/ex¥_iif.hµ
>

18 
	~<boo°/¥ïro˚ss‹/c⁄åﬁ/iif.hµ
>

19 
	~<boo°/¥ïro˚ss‹/logiˇl/boﬁ.hµ
>

20 
	~<boo°/¥ïro˚ss‹/tu∂e/ót.hµ
>

21 
#deföê
	#BOOST_PP_FOR_1
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_1_C
(
	`BOOST_PP_BOOL
(
	`p
(2, s)), s,Ö, o, m)

	)

23 
	#BOOST_PP_FOR_2
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_2_C
(
	`BOOST_PP_BOOL
(
	`p
(3, s)), s,Ö, o, m)

	)

24 
	#BOOST_PP_FOR_3
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_3_C
(
	`BOOST_PP_BOOL
(
	`p
(4, s)), s,Ö, o, m)

	)

25 
	#BOOST_PP_FOR_4
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_4_C
(
	`BOOST_PP_BOOL
(
	`p
(5, s)), s,Ö, o, m)

	)

26 
	#BOOST_PP_FOR_5
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_5_C
(
	`BOOST_PP_BOOL
(
	`p
(6, s)), s,Ö, o, m)

	)

27 
	#BOOST_PP_FOR_6
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_6_C
(
	`BOOST_PP_BOOL
(
	`p
(7, s)), s,Ö, o, m)

	)

28 
	#BOOST_PP_FOR_7
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_7_C
(
	`BOOST_PP_BOOL
(
	`p
(8, s)), s,Ö, o, m)

	)

29 
	#BOOST_PP_FOR_8
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_8_C
(
	`BOOST_PP_BOOL
(
	`p
(9, s)), s,Ö, o, m)

	)

30 
	#BOOST_PP_FOR_9
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_9_C
(
	`BOOST_PP_BOOL
(
	`p
(10, s)), s,Ö, o, m)

	)

31 
	#BOOST_PP_FOR_10
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_10_C
(
	`BOOST_PP_BOOL
(
	`p
(11, s)), s,Ö, o, m)

	)

32 
	#BOOST_PP_FOR_11
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_11_C
(
	`BOOST_PP_BOOL
(
	`p
(12, s)), s,Ö, o, m)

	)

33 
	#BOOST_PP_FOR_12
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_12_C
(
	`BOOST_PP_BOOL
(
	`p
(13, s)), s,Ö, o, m)

	)

34 
	#BOOST_PP_FOR_13
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_13_C
(
	`BOOST_PP_BOOL
(
	`p
(14, s)), s,Ö, o, m)

	)

35 
	#BOOST_PP_FOR_14
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_14_C
(
	`BOOST_PP_BOOL
(
	`p
(15, s)), s,Ö, o, m)

	)

36 
	#BOOST_PP_FOR_15
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_15_C
(
	`BOOST_PP_BOOL
(
	`p
(16, s)), s,Ö, o, m)

	)

37 
	#BOOST_PP_FOR_16
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_16_C
(
	`BOOST_PP_BOOL
(
	`p
(17, s)), s,Ö, o, m)

	)

38 
	#BOOST_PP_FOR_17
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_17_C
(
	`BOOST_PP_BOOL
(
	`p
(18, s)), s,Ö, o, m)

	)

39 
	#BOOST_PP_FOR_18
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_18_C
(
	`BOOST_PP_BOOL
(
	`p
(19, s)), s,Ö, o, m)

	)

40 
	#BOOST_PP_FOR_19
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_19_C
(
	`BOOST_PP_BOOL
(
	`p
(20, s)), s,Ö, o, m)

	)

41 
	#BOOST_PP_FOR_20
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_20_C
(
	`BOOST_PP_BOOL
(
	`p
(21, s)), s,Ö, o, m)

	)

42 
	#BOOST_PP_FOR_21
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_21_C
(
	`BOOST_PP_BOOL
(
	`p
(22, s)), s,Ö, o, m)

	)

43 
	#BOOST_PP_FOR_22
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_22_C
(
	`BOOST_PP_BOOL
(
	`p
(23, s)), s,Ö, o, m)

	)

44 
	#BOOST_PP_FOR_23
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_23_C
(
	`BOOST_PP_BOOL
(
	`p
(24, s)), s,Ö, o, m)

	)

45 
	#BOOST_PP_FOR_24
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_24_C
(
	`BOOST_PP_BOOL
(
	`p
(25, s)), s,Ö, o, m)

	)

46 
	#BOOST_PP_FOR_25
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_25_C
(
	`BOOST_PP_BOOL
(
	`p
(26, s)), s,Ö, o, m)

	)

47 
	#BOOST_PP_FOR_26
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_26_C
(
	`BOOST_PP_BOOL
(
	`p
(27, s)), s,Ö, o, m)

	)

48 
	#BOOST_PP_FOR_27
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_27_C
(
	`BOOST_PP_BOOL
(
	`p
(28, s)), s,Ö, o, m)

	)

49 
	#BOOST_PP_FOR_28
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_28_C
(
	`BOOST_PP_BOOL
(
	`p
(29, s)), s,Ö, o, m)

	)

50 
	#BOOST_PP_FOR_29
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_29_C
(
	`BOOST_PP_BOOL
(
	`p
(30, s)), s,Ö, o, m)

	)

51 
	#BOOST_PP_FOR_30
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_30_C
(
	`BOOST_PP_BOOL
(
	`p
(31, s)), s,Ö, o, m)

	)

52 
	#BOOST_PP_FOR_31
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_31_C
(
	`BOOST_PP_BOOL
(
	`p
(32, s)), s,Ö, o, m)

	)

53 
	#BOOST_PP_FOR_32
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_32_C
(
	`BOOST_PP_BOOL
(
	`p
(33, s)), s,Ö, o, m)

	)

54 
	#BOOST_PP_FOR_33
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_33_C
(
	`BOOST_PP_BOOL
(
	`p
(34, s)), s,Ö, o, m)

	)

55 
	#BOOST_PP_FOR_34
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_34_C
(
	`BOOST_PP_BOOL
(
	`p
(35, s)), s,Ö, o, m)

	)

56 
	#BOOST_PP_FOR_35
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_35_C
(
	`BOOST_PP_BOOL
(
	`p
(36, s)), s,Ö, o, m)

	)

57 
	#BOOST_PP_FOR_36
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_36_C
(
	`BOOST_PP_BOOL
(
	`p
(37, s)), s,Ö, o, m)

	)

58 
	#BOOST_PP_FOR_37
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_37_C
(
	`BOOST_PP_BOOL
(
	`p
(38, s)), s,Ö, o, m)

	)

59 
	#BOOST_PP_FOR_38
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_38_C
(
	`BOOST_PP_BOOL
(
	`p
(39, s)), s,Ö, o, m)

	)

60 
	#BOOST_PP_FOR_39
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_39_C
(
	`BOOST_PP_BOOL
(
	`p
(40, s)), s,Ö, o, m)

	)

61 
	#BOOST_PP_FOR_40
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_40_C
(
	`BOOST_PP_BOOL
(
	`p
(41, s)), s,Ö, o, m)

	)

62 
	#BOOST_PP_FOR_41
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_41_C
(
	`BOOST_PP_BOOL
(
	`p
(42, s)), s,Ö, o, m)

	)

63 
	#BOOST_PP_FOR_42
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_42_C
(
	`BOOST_PP_BOOL
(
	`p
(43, s)), s,Ö, o, m)

	)

64 
	#BOOST_PP_FOR_43
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_43_C
(
	`BOOST_PP_BOOL
(
	`p
(44, s)), s,Ö, o, m)

	)

65 
	#BOOST_PP_FOR_44
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_44_C
(
	`BOOST_PP_BOOL
(
	`p
(45, s)), s,Ö, o, m)

	)

66 
	#BOOST_PP_FOR_45
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_45_C
(
	`BOOST_PP_BOOL
(
	`p
(46, s)), s,Ö, o, m)

	)

67 
	#BOOST_PP_FOR_46
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_46_C
(
	`BOOST_PP_BOOL
(
	`p
(47, s)), s,Ö, o, m)

	)

68 
	#BOOST_PP_FOR_47
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_47_C
(
	`BOOST_PP_BOOL
(
	`p
(48, s)), s,Ö, o, m)

	)

69 
	#BOOST_PP_FOR_48
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_48_C
(
	`BOOST_PP_BOOL
(
	`p
(49, s)), s,Ö, o, m)

	)

70 
	#BOOST_PP_FOR_49
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_49_C
(
	`BOOST_PP_BOOL
(
	`p
(50, s)), s,Ö, o, m)

	)

71 
	#BOOST_PP_FOR_50
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_50_C
(
	`BOOST_PP_BOOL
(
	`p
(51, s)), s,Ö, o, m)

	)

72 
	#BOOST_PP_FOR_51
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_51_C
(
	`BOOST_PP_BOOL
(
	`p
(52, s)), s,Ö, o, m)

	)

73 
	#BOOST_PP_FOR_52
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_52_C
(
	`BOOST_PP_BOOL
(
	`p
(53, s)), s,Ö, o, m)

	)

74 
	#BOOST_PP_FOR_53
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_53_C
(
	`BOOST_PP_BOOL
(
	`p
(54, s)), s,Ö, o, m)

	)

75 
	#BOOST_PP_FOR_54
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_54_C
(
	`BOOST_PP_BOOL
(
	`p
(55, s)), s,Ö, o, m)

	)

76 
	#BOOST_PP_FOR_55
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_55_C
(
	`BOOST_PP_BOOL
(
	`p
(56, s)), s,Ö, o, m)

	)

77 
	#BOOST_PP_FOR_56
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_56_C
(
	`BOOST_PP_BOOL
(
	`p
(57, s)), s,Ö, o, m)

	)

78 
	#BOOST_PP_FOR_57
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_57_C
(
	`BOOST_PP_BOOL
(
	`p
(58, s)), s,Ö, o, m)

	)

79 
	#BOOST_PP_FOR_58
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_58_C
(
	`BOOST_PP_BOOL
(
	`p
(59, s)), s,Ö, o, m)

	)

80 
	#BOOST_PP_FOR_59
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_59_C
(
	`BOOST_PP_BOOL
(
	`p
(60, s)), s,Ö, o, m)

	)

81 
	#BOOST_PP_FOR_60
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_60_C
(
	`BOOST_PP_BOOL
(
	`p
(61, s)), s,Ö, o, m)

	)

82 
	#BOOST_PP_FOR_61
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_61_C
(
	`BOOST_PP_BOOL
(
	`p
(62, s)), s,Ö, o, m)

	)

83 
	#BOOST_PP_FOR_62
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_62_C
(
	`BOOST_PP_BOOL
(
	`p
(63, s)), s,Ö, o, m)

	)

84 
	#BOOST_PP_FOR_63
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_63_C
(
	`BOOST_PP_BOOL
(
	`p
(64, s)), s,Ö, o, m)

	)

85 
	#BOOST_PP_FOR_64
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_64_C
(
	`BOOST_PP_BOOL
(
	`p
(65, s)), s,Ö, o, m)

	)

86 
	#BOOST_PP_FOR_65
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_65_C
(
	`BOOST_PP_BOOL
(
	`p
(66, s)), s,Ö, o, m)

	)

87 
	#BOOST_PP_FOR_66
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_66_C
(
	`BOOST_PP_BOOL
(
	`p
(67, s)), s,Ö, o, m)

	)

88 
	#BOOST_PP_FOR_67
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_67_C
(
	`BOOST_PP_BOOL
(
	`p
(68, s)), s,Ö, o, m)

	)

89 
	#BOOST_PP_FOR_68
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_68_C
(
	`BOOST_PP_BOOL
(
	`p
(69, s)), s,Ö, o, m)

	)

90 
	#BOOST_PP_FOR_69
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_69_C
(
	`BOOST_PP_BOOL
(
	`p
(70, s)), s,Ö, o, m)

	)

91 
	#BOOST_PP_FOR_70
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_70_C
(
	`BOOST_PP_BOOL
(
	`p
(71, s)), s,Ö, o, m)

	)

92 
	#BOOST_PP_FOR_71
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_71_C
(
	`BOOST_PP_BOOL
(
	`p
(72, s)), s,Ö, o, m)

	)

93 
	#BOOST_PP_FOR_72
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_72_C
(
	`BOOST_PP_BOOL
(
	`p
(73, s)), s,Ö, o, m)

	)

94 
	#BOOST_PP_FOR_73
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_73_C
(
	`BOOST_PP_BOOL
(
	`p
(74, s)), s,Ö, o, m)

	)

95 
	#BOOST_PP_FOR_74
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_74_C
(
	`BOOST_PP_BOOL
(
	`p
(75, s)), s,Ö, o, m)

	)

96 
	#BOOST_PP_FOR_75
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_75_C
(
	`BOOST_PP_BOOL
(
	`p
(76, s)), s,Ö, o, m)

	)

97 
	#BOOST_PP_FOR_76
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_76_C
(
	`BOOST_PP_BOOL
(
	`p
(77, s)), s,Ö, o, m)

	)

98 
	#BOOST_PP_FOR_77
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_77_C
(
	`BOOST_PP_BOOL
(
	`p
(78, s)), s,Ö, o, m)

	)

99 
	#BOOST_PP_FOR_78
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_78_C
(
	`BOOST_PP_BOOL
(
	`p
(79, s)), s,Ö, o, m)

	)

100 
	#BOOST_PP_FOR_79
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_79_C
(
	`BOOST_PP_BOOL
(
	`p
(80, s)), s,Ö, o, m)

	)

101 
	#BOOST_PP_FOR_80
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_80_C
(
	`BOOST_PP_BOOL
(
	`p
(81, s)), s,Ö, o, m)

	)

102 
	#BOOST_PP_FOR_81
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_81_C
(
	`BOOST_PP_BOOL
(
	`p
(82, s)), s,Ö, o, m)

	)

103 
	#BOOST_PP_FOR_82
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_82_C
(
	`BOOST_PP_BOOL
(
	`p
(83, s)), s,Ö, o, m)

	)

104 
	#BOOST_PP_FOR_83
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_83_C
(
	`BOOST_PP_BOOL
(
	`p
(84, s)), s,Ö, o, m)

	)

105 
	#BOOST_PP_FOR_84
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_84_C
(
	`BOOST_PP_BOOL
(
	`p
(85, s)), s,Ö, o, m)

	)

106 
	#BOOST_PP_FOR_85
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_85_C
(
	`BOOST_PP_BOOL
(
	`p
(86, s)), s,Ö, o, m)

	)

107 
	#BOOST_PP_FOR_86
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_86_C
(
	`BOOST_PP_BOOL
(
	`p
(87, s)), s,Ö, o, m)

	)

108 
	#BOOST_PP_FOR_87
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_87_C
(
	`BOOST_PP_BOOL
(
	`p
(88, s)), s,Ö, o, m)

	)

109 
	#BOOST_PP_FOR_88
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_88_C
(
	`BOOST_PP_BOOL
(
	`p
(89, s)), s,Ö, o, m)

	)

110 
	#BOOST_PP_FOR_89
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_89_C
(
	`BOOST_PP_BOOL
(
	`p
(90, s)), s,Ö, o, m)

	)

111 
	#BOOST_PP_FOR_90
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_90_C
(
	`BOOST_PP_BOOL
(
	`p
(91, s)), s,Ö, o, m)

	)

112 
	#BOOST_PP_FOR_91
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_91_C
(
	`BOOST_PP_BOOL
(
	`p
(92, s)), s,Ö, o, m)

	)

113 
	#BOOST_PP_FOR_92
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_92_C
(
	`BOOST_PP_BOOL
(
	`p
(93, s)), s,Ö, o, m)

	)

114 
	#BOOST_PP_FOR_93
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_93_C
(
	`BOOST_PP_BOOL
(
	`p
(94, s)), s,Ö, o, m)

	)

115 
	#BOOST_PP_FOR_94
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_94_C
(
	`BOOST_PP_BOOL
(
	`p
(95, s)), s,Ö, o, m)

	)

116 
	#BOOST_PP_FOR_95
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_95_C
(
	`BOOST_PP_BOOL
(
	`p
(96, s)), s,Ö, o, m)

	)

117 
	#BOOST_PP_FOR_96
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_96_C
(
	`BOOST_PP_BOOL
(
	`p
(97, s)), s,Ö, o, m)

	)

118 
	#BOOST_PP_FOR_97
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_97_C
(
	`BOOST_PP_BOOL
(
	`p
(98, s)), s,Ö, o, m)

	)

119 
	#BOOST_PP_FOR_98
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_98_C
(
	`BOOST_PP_BOOL
(
	`p
(99, s)), s,Ö, o, m)

	)

120 
	#BOOST_PP_FOR_99
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_99_C
(
	`BOOST_PP_BOOL
(
	`p
(100, s)), s,Ö, o, m)

	)

121 
	#BOOST_PP_FOR_100
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_100_C
(
	`BOOST_PP_BOOL
(
	`p
(101, s)), s,Ö, o, m)

	)

122 
	#BOOST_PP_FOR_101
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_101_C
(
	`BOOST_PP_BOOL
(
	`p
(102, s)), s,Ö, o, m)

	)

123 
	#BOOST_PP_FOR_102
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_102_C
(
	`BOOST_PP_BOOL
(
	`p
(103, s)), s,Ö, o, m)

	)

124 
	#BOOST_PP_FOR_103
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_103_C
(
	`BOOST_PP_BOOL
(
	`p
(104, s)), s,Ö, o, m)

	)

125 
	#BOOST_PP_FOR_104
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_104_C
(
	`BOOST_PP_BOOL
(
	`p
(105, s)), s,Ö, o, m)

	)

126 
	#BOOST_PP_FOR_105
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_105_C
(
	`BOOST_PP_BOOL
(
	`p
(106, s)), s,Ö, o, m)

	)

127 
	#BOOST_PP_FOR_106
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_106_C
(
	`BOOST_PP_BOOL
(
	`p
(107, s)), s,Ö, o, m)

	)

128 
	#BOOST_PP_FOR_107
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_107_C
(
	`BOOST_PP_BOOL
(
	`p
(108, s)), s,Ö, o, m)

	)

129 
	#BOOST_PP_FOR_108
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_108_C
(
	`BOOST_PP_BOOL
(
	`p
(109, s)), s,Ö, o, m)

	)

130 
	#BOOST_PP_FOR_109
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_109_C
(
	`BOOST_PP_BOOL
(
	`p
(110, s)), s,Ö, o, m)

	)

131 
	#BOOST_PP_FOR_110
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_110_C
(
	`BOOST_PP_BOOL
(
	`p
(111, s)), s,Ö, o, m)

	)

132 
	#BOOST_PP_FOR_111
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_111_C
(
	`BOOST_PP_BOOL
(
	`p
(112, s)), s,Ö, o, m)

	)

133 
	#BOOST_PP_FOR_112
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_112_C
(
	`BOOST_PP_BOOL
(
	`p
(113, s)), s,Ö, o, m)

	)

134 
	#BOOST_PP_FOR_113
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_113_C
(
	`BOOST_PP_BOOL
(
	`p
(114, s)), s,Ö, o, m)

	)

135 
	#BOOST_PP_FOR_114
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_114_C
(
	`BOOST_PP_BOOL
(
	`p
(115, s)), s,Ö, o, m)

	)

136 
	#BOOST_PP_FOR_115
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_115_C
(
	`BOOST_PP_BOOL
(
	`p
(116, s)), s,Ö, o, m)

	)

137 
	#BOOST_PP_FOR_116
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_116_C
(
	`BOOST_PP_BOOL
(
	`p
(117, s)), s,Ö, o, m)

	)

138 
	#BOOST_PP_FOR_117
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_117_C
(
	`BOOST_PP_BOOL
(
	`p
(118, s)), s,Ö, o, m)

	)

139 
	#BOOST_PP_FOR_118
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_118_C
(
	`BOOST_PP_BOOL
(
	`p
(119, s)), s,Ö, o, m)

	)

140 
	#BOOST_PP_FOR_119
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_119_C
(
	`BOOST_PP_BOOL
(
	`p
(120, s)), s,Ö, o, m)

	)

141 
	#BOOST_PP_FOR_120
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_120_C
(
	`BOOST_PP_BOOL
(
	`p
(121, s)), s,Ö, o, m)

	)

142 
	#BOOST_PP_FOR_121
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_121_C
(
	`BOOST_PP_BOOL
(
	`p
(122, s)), s,Ö, o, m)

	)

143 
	#BOOST_PP_FOR_122
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_122_C
(
	`BOOST_PP_BOOL
(
	`p
(123, s)), s,Ö, o, m)

	)

144 
	#BOOST_PP_FOR_123
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_123_C
(
	`BOOST_PP_BOOL
(
	`p
(124, s)), s,Ö, o, m)

	)

145 
	#BOOST_PP_FOR_124
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_124_C
(
	`BOOST_PP_BOOL
(
	`p
(125, s)), s,Ö, o, m)

	)

146 
	#BOOST_PP_FOR_125
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_125_C
(
	`BOOST_PP_BOOL
(
	`p
(126, s)), s,Ö, o, m)

	)

147 
	#BOOST_PP_FOR_126
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_126_C
(
	`BOOST_PP_BOOL
(
	`p
(127, s)), s,Ö, o, m)

	)

148 
	#BOOST_PP_FOR_127
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_127_C
(
	`BOOST_PP_BOOL
(
	`p
(128, s)), s,Ö, o, m)

	)

149 
	#BOOST_PP_FOR_128
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_128_C
(
	`BOOST_PP_BOOL
(
	`p
(129, s)), s,Ö, o, m)

	)

150 
	#BOOST_PP_FOR_129
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_129_C
(
	`BOOST_PP_BOOL
(
	`p
(130, s)), s,Ö, o, m)

	)

151 
	#BOOST_PP_FOR_130
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_130_C
(
	`BOOST_PP_BOOL
(
	`p
(131, s)), s,Ö, o, m)

	)

152 
	#BOOST_PP_FOR_131
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_131_C
(
	`BOOST_PP_BOOL
(
	`p
(132, s)), s,Ö, o, m)

	)

153 
	#BOOST_PP_FOR_132
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_132_C
(
	`BOOST_PP_BOOL
(
	`p
(133, s)), s,Ö, o, m)

	)

154 
	#BOOST_PP_FOR_133
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_133_C
(
	`BOOST_PP_BOOL
(
	`p
(134, s)), s,Ö, o, m)

	)

155 
	#BOOST_PP_FOR_134
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_134_C
(
	`BOOST_PP_BOOL
(
	`p
(135, s)), s,Ö, o, m)

	)

156 
	#BOOST_PP_FOR_135
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_135_C
(
	`BOOST_PP_BOOL
(
	`p
(136, s)), s,Ö, o, m)

	)

157 
	#BOOST_PP_FOR_136
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_136_C
(
	`BOOST_PP_BOOL
(
	`p
(137, s)), s,Ö, o, m)

	)

158 
	#BOOST_PP_FOR_137
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_137_C
(
	`BOOST_PP_BOOL
(
	`p
(138, s)), s,Ö, o, m)

	)

159 
	#BOOST_PP_FOR_138
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_138_C
(
	`BOOST_PP_BOOL
(
	`p
(139, s)), s,Ö, o, m)

	)

160 
	#BOOST_PP_FOR_139
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_139_C
(
	`BOOST_PP_BOOL
(
	`p
(140, s)), s,Ö, o, m)

	)

161 
	#BOOST_PP_FOR_140
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_140_C
(
	`BOOST_PP_BOOL
(
	`p
(141, s)), s,Ö, o, m)

	)

162 
	#BOOST_PP_FOR_141
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_141_C
(
	`BOOST_PP_BOOL
(
	`p
(142, s)), s,Ö, o, m)

	)

163 
	#BOOST_PP_FOR_142
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_142_C
(
	`BOOST_PP_BOOL
(
	`p
(143, s)), s,Ö, o, m)

	)

164 
	#BOOST_PP_FOR_143
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_143_C
(
	`BOOST_PP_BOOL
(
	`p
(144, s)), s,Ö, o, m)

	)

165 
	#BOOST_PP_FOR_144
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_144_C
(
	`BOOST_PP_BOOL
(
	`p
(145, s)), s,Ö, o, m)

	)

166 
	#BOOST_PP_FOR_145
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_145_C
(
	`BOOST_PP_BOOL
(
	`p
(146, s)), s,Ö, o, m)

	)

167 
	#BOOST_PP_FOR_146
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_146_C
(
	`BOOST_PP_BOOL
(
	`p
(147, s)), s,Ö, o, m)

	)

168 
	#BOOST_PP_FOR_147
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_147_C
(
	`BOOST_PP_BOOL
(
	`p
(148, s)), s,Ö, o, m)

	)

169 
	#BOOST_PP_FOR_148
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_148_C
(
	`BOOST_PP_BOOL
(
	`p
(149, s)), s,Ö, o, m)

	)

170 
	#BOOST_PP_FOR_149
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_149_C
(
	`BOOST_PP_BOOL
(
	`p
(150, s)), s,Ö, o, m)

	)

171 
	#BOOST_PP_FOR_150
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_150_C
(
	`BOOST_PP_BOOL
(
	`p
(151, s)), s,Ö, o, m)

	)

172 
	#BOOST_PP_FOR_151
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_151_C
(
	`BOOST_PP_BOOL
(
	`p
(152, s)), s,Ö, o, m)

	)

173 
	#BOOST_PP_FOR_152
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_152_C
(
	`BOOST_PP_BOOL
(
	`p
(153, s)), s,Ö, o, m)

	)

174 
	#BOOST_PP_FOR_153
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_153_C
(
	`BOOST_PP_BOOL
(
	`p
(154, s)), s,Ö, o, m)

	)

175 
	#BOOST_PP_FOR_154
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_154_C
(
	`BOOST_PP_BOOL
(
	`p
(155, s)), s,Ö, o, m)

	)

176 
	#BOOST_PP_FOR_155
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_155_C
(
	`BOOST_PP_BOOL
(
	`p
(156, s)), s,Ö, o, m)

	)

177 
	#BOOST_PP_FOR_156
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_156_C
(
	`BOOST_PP_BOOL
(
	`p
(157, s)), s,Ö, o, m)

	)

178 
	#BOOST_PP_FOR_157
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_157_C
(
	`BOOST_PP_BOOL
(
	`p
(158, s)), s,Ö, o, m)

	)

179 
	#BOOST_PP_FOR_158
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_158_C
(
	`BOOST_PP_BOOL
(
	`p
(159, s)), s,Ö, o, m)

	)

180 
	#BOOST_PP_FOR_159
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_159_C
(
	`BOOST_PP_BOOL
(
	`p
(160, s)), s,Ö, o, m)

	)

181 
	#BOOST_PP_FOR_160
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_160_C
(
	`BOOST_PP_BOOL
(
	`p
(161, s)), s,Ö, o, m)

	)

182 
	#BOOST_PP_FOR_161
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_161_C
(
	`BOOST_PP_BOOL
(
	`p
(162, s)), s,Ö, o, m)

	)

183 
	#BOOST_PP_FOR_162
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_162_C
(
	`BOOST_PP_BOOL
(
	`p
(163, s)), s,Ö, o, m)

	)

184 
	#BOOST_PP_FOR_163
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_163_C
(
	`BOOST_PP_BOOL
(
	`p
(164, s)), s,Ö, o, m)

	)

185 
	#BOOST_PP_FOR_164
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_164_C
(
	`BOOST_PP_BOOL
(
	`p
(165, s)), s,Ö, o, m)

	)

186 
	#BOOST_PP_FOR_165
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_165_C
(
	`BOOST_PP_BOOL
(
	`p
(166, s)), s,Ö, o, m)

	)

187 
	#BOOST_PP_FOR_166
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_166_C
(
	`BOOST_PP_BOOL
(
	`p
(167, s)), s,Ö, o, m)

	)

188 
	#BOOST_PP_FOR_167
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_167_C
(
	`BOOST_PP_BOOL
(
	`p
(168, s)), s,Ö, o, m)

	)

189 
	#BOOST_PP_FOR_168
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_168_C
(
	`BOOST_PP_BOOL
(
	`p
(169, s)), s,Ö, o, m)

	)

190 
	#BOOST_PP_FOR_169
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_169_C
(
	`BOOST_PP_BOOL
(
	`p
(170, s)), s,Ö, o, m)

	)

191 
	#BOOST_PP_FOR_170
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_170_C
(
	`BOOST_PP_BOOL
(
	`p
(171, s)), s,Ö, o, m)

	)

192 
	#BOOST_PP_FOR_171
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_171_C
(
	`BOOST_PP_BOOL
(
	`p
(172, s)), s,Ö, o, m)

	)

193 
	#BOOST_PP_FOR_172
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_172_C
(
	`BOOST_PP_BOOL
(
	`p
(173, s)), s,Ö, o, m)

	)

194 
	#BOOST_PP_FOR_173
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_173_C
(
	`BOOST_PP_BOOL
(
	`p
(174, s)), s,Ö, o, m)

	)

195 
	#BOOST_PP_FOR_174
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_174_C
(
	`BOOST_PP_BOOL
(
	`p
(175, s)), s,Ö, o, m)

	)

196 
	#BOOST_PP_FOR_175
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_175_C
(
	`BOOST_PP_BOOL
(
	`p
(176, s)), s,Ö, o, m)

	)

197 
	#BOOST_PP_FOR_176
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_176_C
(
	`BOOST_PP_BOOL
(
	`p
(177, s)), s,Ö, o, m)

	)

198 
	#BOOST_PP_FOR_177
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_177_C
(
	`BOOST_PP_BOOL
(
	`p
(178, s)), s,Ö, o, m)

	)

199 
	#BOOST_PP_FOR_178
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_178_C
(
	`BOOST_PP_BOOL
(
	`p
(179, s)), s,Ö, o, m)

	)

200 
	#BOOST_PP_FOR_179
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_179_C
(
	`BOOST_PP_BOOL
(
	`p
(180, s)), s,Ö, o, m)

	)

201 
	#BOOST_PP_FOR_180
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_180_C
(
	`BOOST_PP_BOOL
(
	`p
(181, s)), s,Ö, o, m)

	)

202 
	#BOOST_PP_FOR_181
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_181_C
(
	`BOOST_PP_BOOL
(
	`p
(182, s)), s,Ö, o, m)

	)

203 
	#BOOST_PP_FOR_182
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_182_C
(
	`BOOST_PP_BOOL
(
	`p
(183, s)), s,Ö, o, m)

	)

204 
	#BOOST_PP_FOR_183
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_183_C
(
	`BOOST_PP_BOOL
(
	`p
(184, s)), s,Ö, o, m)

	)

205 
	#BOOST_PP_FOR_184
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_184_C
(
	`BOOST_PP_BOOL
(
	`p
(185, s)), s,Ö, o, m)

	)

206 
	#BOOST_PP_FOR_185
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_185_C
(
	`BOOST_PP_BOOL
(
	`p
(186, s)), s,Ö, o, m)

	)

207 
	#BOOST_PP_FOR_186
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_186_C
(
	`BOOST_PP_BOOL
(
	`p
(187, s)), s,Ö, o, m)

	)

208 
	#BOOST_PP_FOR_187
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_187_C
(
	`BOOST_PP_BOOL
(
	`p
(188, s)), s,Ö, o, m)

	)

209 
	#BOOST_PP_FOR_188
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_188_C
(
	`BOOST_PP_BOOL
(
	`p
(189, s)), s,Ö, o, m)

	)

210 
	#BOOST_PP_FOR_189
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_189_C
(
	`BOOST_PP_BOOL
(
	`p
(190, s)), s,Ö, o, m)

	)

211 
	#BOOST_PP_FOR_190
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_190_C
(
	`BOOST_PP_BOOL
(
	`p
(191, s)), s,Ö, o, m)

	)

212 
	#BOOST_PP_FOR_191
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_191_C
(
	`BOOST_PP_BOOL
(
	`p
(192, s)), s,Ö, o, m)

	)

213 
	#BOOST_PP_FOR_192
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_192_C
(
	`BOOST_PP_BOOL
(
	`p
(193, s)), s,Ö, o, m)

	)

214 
	#BOOST_PP_FOR_193
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_193_C
(
	`BOOST_PP_BOOL
(
	`p
(194, s)), s,Ö, o, m)

	)

215 
	#BOOST_PP_FOR_194
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_194_C
(
	`BOOST_PP_BOOL
(
	`p
(195, s)), s,Ö, o, m)

	)

216 
	#BOOST_PP_FOR_195
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_195_C
(
	`BOOST_PP_BOOL
(
	`p
(196, s)), s,Ö, o, m)

	)

217 
	#BOOST_PP_FOR_196
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_196_C
(
	`BOOST_PP_BOOL
(
	`p
(197, s)), s,Ö, o, m)

	)

218 
	#BOOST_PP_FOR_197
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_197_C
(
	`BOOST_PP_BOOL
(
	`p
(198, s)), s,Ö, o, m)

	)

219 
	#BOOST_PP_FOR_198
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_198_C
(
	`BOOST_PP_BOOL
(
	`p
(199, s)), s,Ö, o, m)

	)

220 
	#BOOST_PP_FOR_199
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_199_C
(
	`BOOST_PP_BOOL
(
	`p
(200, s)), s,Ö, o, m)

	)

221 
	#BOOST_PP_FOR_200
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_200_C
(
	`BOOST_PP_BOOL
(
	`p
(201, s)), s,Ö, o, m)

	)

222 
	#BOOST_PP_FOR_201
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_201_C
(
	`BOOST_PP_BOOL
(
	`p
(202, s)), s,Ö, o, m)

	)

223 
	#BOOST_PP_FOR_202
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_202_C
(
	`BOOST_PP_BOOL
(
	`p
(203, s)), s,Ö, o, m)

	)

224 
	#BOOST_PP_FOR_203
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_203_C
(
	`BOOST_PP_BOOL
(
	`p
(204, s)), s,Ö, o, m)

	)

225 
	#BOOST_PP_FOR_204
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_204_C
(
	`BOOST_PP_BOOL
(
	`p
(205, s)), s,Ö, o, m)

	)

226 
	#BOOST_PP_FOR_205
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_205_C
(
	`BOOST_PP_BOOL
(
	`p
(206, s)), s,Ö, o, m)

	)

227 
	#BOOST_PP_FOR_206
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_206_C
(
	`BOOST_PP_BOOL
(
	`p
(207, s)), s,Ö, o, m)

	)

228 
	#BOOST_PP_FOR_207
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_207_C
(
	`BOOST_PP_BOOL
(
	`p
(208, s)), s,Ö, o, m)

	)

229 
	#BOOST_PP_FOR_208
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_208_C
(
	`BOOST_PP_BOOL
(
	`p
(209, s)), s,Ö, o, m)

	)

230 
	#BOOST_PP_FOR_209
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_209_C
(
	`BOOST_PP_BOOL
(
	`p
(210, s)), s,Ö, o, m)

	)

231 
	#BOOST_PP_FOR_210
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_210_C
(
	`BOOST_PP_BOOL
(
	`p
(211, s)), s,Ö, o, m)

	)

232 
	#BOOST_PP_FOR_211
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_211_C
(
	`BOOST_PP_BOOL
(
	`p
(212, s)), s,Ö, o, m)

	)

233 
	#BOOST_PP_FOR_212
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_212_C
(
	`BOOST_PP_BOOL
(
	`p
(213, s)), s,Ö, o, m)

	)

234 
	#BOOST_PP_FOR_213
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_213_C
(
	`BOOST_PP_BOOL
(
	`p
(214, s)), s,Ö, o, m)

	)

235 
	#BOOST_PP_FOR_214
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_214_C
(
	`BOOST_PP_BOOL
(
	`p
(215, s)), s,Ö, o, m)

	)

236 
	#BOOST_PP_FOR_215
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_215_C
(
	`BOOST_PP_BOOL
(
	`p
(216, s)), s,Ö, o, m)

	)

237 
	#BOOST_PP_FOR_216
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_216_C
(
	`BOOST_PP_BOOL
(
	`p
(217, s)), s,Ö, o, m)

	)

238 
	#BOOST_PP_FOR_217
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_217_C
(
	`BOOST_PP_BOOL
(
	`p
(218, s)), s,Ö, o, m)

	)

239 
	#BOOST_PP_FOR_218
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_218_C
(
	`BOOST_PP_BOOL
(
	`p
(219, s)), s,Ö, o, m)

	)

240 
	#BOOST_PP_FOR_219
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_219_C
(
	`BOOST_PP_BOOL
(
	`p
(220, s)), s,Ö, o, m)

	)

241 
	#BOOST_PP_FOR_220
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_220_C
(
	`BOOST_PP_BOOL
(
	`p
(221, s)), s,Ö, o, m)

	)

242 
	#BOOST_PP_FOR_221
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_221_C
(
	`BOOST_PP_BOOL
(
	`p
(222, s)), s,Ö, o, m)

	)

243 
	#BOOST_PP_FOR_222
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_222_C
(
	`BOOST_PP_BOOL
(
	`p
(223, s)), s,Ö, o, m)

	)

244 
	#BOOST_PP_FOR_223
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_223_C
(
	`BOOST_PP_BOOL
(
	`p
(224, s)), s,Ö, o, m)

	)

245 
	#BOOST_PP_FOR_224
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_224_C
(
	`BOOST_PP_BOOL
(
	`p
(225, s)), s,Ö, o, m)

	)

246 
	#BOOST_PP_FOR_225
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_225_C
(
	`BOOST_PP_BOOL
(
	`p
(226, s)), s,Ö, o, m)

	)

247 
	#BOOST_PP_FOR_226
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_226_C
(
	`BOOST_PP_BOOL
(
	`p
(227, s)), s,Ö, o, m)

	)

248 
	#BOOST_PP_FOR_227
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_227_C
(
	`BOOST_PP_BOOL
(
	`p
(228, s)), s,Ö, o, m)

	)

249 
	#BOOST_PP_FOR_228
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_228_C
(
	`BOOST_PP_BOOL
(
	`p
(229, s)), s,Ö, o, m)

	)

250 
	#BOOST_PP_FOR_229
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_229_C
(
	`BOOST_PP_BOOL
(
	`p
(230, s)), s,Ö, o, m)

	)

251 
	#BOOST_PP_FOR_230
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_230_C
(
	`BOOST_PP_BOOL
(
	`p
(231, s)), s,Ö, o, m)

	)

252 
	#BOOST_PP_FOR_231
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_231_C
(
	`BOOST_PP_BOOL
(
	`p
(232, s)), s,Ö, o, m)

	)

253 
	#BOOST_PP_FOR_232
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_232_C
(
	`BOOST_PP_BOOL
(
	`p
(233, s)), s,Ö, o, m)

	)

254 
	#BOOST_PP_FOR_233
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_233_C
(
	`BOOST_PP_BOOL
(
	`p
(234, s)), s,Ö, o, m)

	)

255 
	#BOOST_PP_FOR_234
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_234_C
(
	`BOOST_PP_BOOL
(
	`p
(235, s)), s,Ö, o, m)

	)

256 
	#BOOST_PP_FOR_235
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_235_C
(
	`BOOST_PP_BOOL
(
	`p
(236, s)), s,Ö, o, m)

	)

257 
	#BOOST_PP_FOR_236
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_236_C
(
	`BOOST_PP_BOOL
(
	`p
(237, s)), s,Ö, o, m)

	)

258 
	#BOOST_PP_FOR_237
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_237_C
(
	`BOOST_PP_BOOL
(
	`p
(238, s)), s,Ö, o, m)

	)

259 
	#BOOST_PP_FOR_238
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_238_C
(
	`BOOST_PP_BOOL
(
	`p
(239, s)), s,Ö, o, m)

	)

260 
	#BOOST_PP_FOR_239
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_239_C
(
	`BOOST_PP_BOOL
(
	`p
(240, s)), s,Ö, o, m)

	)

261 
	#BOOST_PP_FOR_240
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_240_C
(
	`BOOST_PP_BOOL
(
	`p
(241, s)), s,Ö, o, m)

	)

262 
	#BOOST_PP_FOR_241
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_241_C
(
	`BOOST_PP_BOOL
(
	`p
(242, s)), s,Ö, o, m)

	)

263 
	#BOOST_PP_FOR_242
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_242_C
(
	`BOOST_PP_BOOL
(
	`p
(243, s)), s,Ö, o, m)

	)

264 
	#BOOST_PP_FOR_243
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_243_C
(
	`BOOST_PP_BOOL
(
	`p
(244, s)), s,Ö, o, m)

	)

265 
	#BOOST_PP_FOR_244
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_244_C
(
	`BOOST_PP_BOOL
(
	`p
(245, s)), s,Ö, o, m)

	)

266 
	#BOOST_PP_FOR_245
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_245_C
(
	`BOOST_PP_BOOL
(
	`p
(246, s)), s,Ö, o, m)

	)

267 
	#BOOST_PP_FOR_246
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_246_C
(
	`BOOST_PP_BOOL
(
	`p
(247, s)), s,Ö, o, m)

	)

268 
	#BOOST_PP_FOR_247
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_247_C
(
	`BOOST_PP_BOOL
(
	`p
(248, s)), s,Ö, o, m)

	)

269 
	#BOOST_PP_FOR_248
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_248_C
(
	`BOOST_PP_BOOL
(
	`p
(249, s)), s,Ö, o, m)

	)

270 
	#BOOST_PP_FOR_249
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_249_C
(
	`BOOST_PP_BOOL
(
	`p
(250, s)), s,Ö, o, m)

	)

271 
	#BOOST_PP_FOR_250
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_250_C
(
	`BOOST_PP_BOOL
(
	`p
(251, s)), s,Ö, o, m)

	)

272 
	#BOOST_PP_FOR_251
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_251_C
(
	`BOOST_PP_BOOL
(
	`p
(252, s)), s,Ö, o, m)

	)

273 
	#BOOST_PP_FOR_252
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_252_C
(
	`BOOST_PP_BOOL
(
	`p
(253, s)), s,Ö, o, m)

	)

274 
	#BOOST_PP_FOR_253
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_253_C
(
	`BOOST_PP_BOOL
(
	`p
(254, s)), s,Ö, o, m)

	)

275 
	#BOOST_PP_FOR_254
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_254_C
(
	`BOOST_PP_BOOL
(
	`p
(255, s)), s,Ö, o, m)

	)

276 
	#BOOST_PP_FOR_255
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_255_C
(
	`BOOST_PP_BOOL
(
	`p
(256, s)), s,Ö, o, m)

	)

277 
	#BOOST_PP_FOR_256
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_FOR_256_C
(
	`BOOST_PP_BOOL
(
	`p
(257, s)), s,Ö, o, m)

	)

278 
#deföê
	#BOOST_PP_FOR_1_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(2, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_2
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(2, s),Ö, o, m)

	)

280 
	#BOOST_PP_FOR_2_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(3, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_3
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(3, s),Ö, o, m)

	)

281 
	#BOOST_PP_FOR_3_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(4, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_4
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(4, s),Ö, o, m)

	)

282 
	#BOOST_PP_FOR_4_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(5, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_5
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(5, s),Ö, o, m)

	)

283 
	#BOOST_PP_FOR_5_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(6, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_6
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(6, s),Ö, o, m)

	)

284 
	#BOOST_PP_FOR_6_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(7, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_7
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(7, s),Ö, o, m)

	)

285 
	#BOOST_PP_FOR_7_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(8, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_8
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(8, s),Ö, o, m)

	)

286 
	#BOOST_PP_FOR_8_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(9, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_9
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(9, s),Ö, o, m)

	)

287 
	#BOOST_PP_FOR_9_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(10, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_10
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(10, s),Ö, o, m)

	)

288 
	#BOOST_PP_FOR_10_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(11, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_11
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(11, s),Ö, o, m)

	)

289 
	#BOOST_PP_FOR_11_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(12, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_12
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(12, s),Ö, o, m)

	)

290 
	#BOOST_PP_FOR_12_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(13, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_13
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(13, s),Ö, o, m)

	)

291 
	#BOOST_PP_FOR_13_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(14, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_14
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(14, s),Ö, o, m)

	)

292 
	#BOOST_PP_FOR_14_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(15, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_15
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(15, s),Ö, o, m)

	)

293 
	#BOOST_PP_FOR_15_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(16, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_16
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(16, s),Ö, o, m)

	)

294 
	#BOOST_PP_FOR_16_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(17, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_17
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(17, s),Ö, o, m)

	)

295 
	#BOOST_PP_FOR_17_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(18, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_18
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(18, s),Ö, o, m)

	)

296 
	#BOOST_PP_FOR_18_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(19, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_19
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(19, s),Ö, o, m)

	)

297 
	#BOOST_PP_FOR_19_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(20, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_20
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(20, s),Ö, o, m)

	)

298 
	#BOOST_PP_FOR_20_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(21, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_21
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(21, s),Ö, o, m)

	)

299 
	#BOOST_PP_FOR_21_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(22, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_22
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(22, s),Ö, o, m)

	)

300 
	#BOOST_PP_FOR_22_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(23, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_23
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(23, s),Ö, o, m)

	)

301 
	#BOOST_PP_FOR_23_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(24, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_24
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(24, s),Ö, o, m)

	)

302 
	#BOOST_PP_FOR_24_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(25, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_25
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(25, s),Ö, o, m)

	)

303 
	#BOOST_PP_FOR_25_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(26, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_26
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(26, s),Ö, o, m)

	)

304 
	#BOOST_PP_FOR_26_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(27, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_27
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(27, s),Ö, o, m)

	)

305 
	#BOOST_PP_FOR_27_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(28, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_28
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(28, s),Ö, o, m)

	)

306 
	#BOOST_PP_FOR_28_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(29, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_29
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(29, s),Ö, o, m)

	)

307 
	#BOOST_PP_FOR_29_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(30, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_30
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(30, s),Ö, o, m)

	)

308 
	#BOOST_PP_FOR_30_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(31, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_31
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(31, s),Ö, o, m)

	)

309 
	#BOOST_PP_FOR_31_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(32, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_32
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(32, s),Ö, o, m)

	)

310 
	#BOOST_PP_FOR_32_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(33, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_33
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(33, s),Ö, o, m)

	)

311 
	#BOOST_PP_FOR_33_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(34, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_34
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(34, s),Ö, o, m)

	)

312 
	#BOOST_PP_FOR_34_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(35, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_35
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(35, s),Ö, o, m)

	)

313 
	#BOOST_PP_FOR_35_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(36, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_36
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(36, s),Ö, o, m)

	)

314 
	#BOOST_PP_FOR_36_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(37, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_37
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(37, s),Ö, o, m)

	)

315 
	#BOOST_PP_FOR_37_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(38, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_38
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(38, s),Ö, o, m)

	)

316 
	#BOOST_PP_FOR_38_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(39, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_39
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(39, s),Ö, o, m)

	)

317 
	#BOOST_PP_FOR_39_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(40, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_40
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(40, s),Ö, o, m)

	)

318 
	#BOOST_PP_FOR_40_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(41, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_41
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(41, s),Ö, o, m)

	)

319 
	#BOOST_PP_FOR_41_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(42, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_42
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(42, s),Ö, o, m)

	)

320 
	#BOOST_PP_FOR_42_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(43, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_43
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(43, s),Ö, o, m)

	)

321 
	#BOOST_PP_FOR_43_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(44, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_44
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(44, s),Ö, o, m)

	)

322 
	#BOOST_PP_FOR_44_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(45, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_45
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(45, s),Ö, o, m)

	)

323 
	#BOOST_PP_FOR_45_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(46, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_46
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(46, s),Ö, o, m)

	)

324 
	#BOOST_PP_FOR_46_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(47, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_47
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(47, s),Ö, o, m)

	)

325 
	#BOOST_PP_FOR_47_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(48, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_48
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(48, s),Ö, o, m)

	)

326 
	#BOOST_PP_FOR_48_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(49, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_49
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(49, s),Ö, o, m)

	)

327 
	#BOOST_PP_FOR_49_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(50, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_50
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(50, s),Ö, o, m)

	)

328 
	#BOOST_PP_FOR_50_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(51, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_51
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(51, s),Ö, o, m)

	)

329 
	#BOOST_PP_FOR_51_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(52, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_52
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(52, s),Ö, o, m)

	)

330 
	#BOOST_PP_FOR_52_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(53, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_53
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(53, s),Ö, o, m)

	)

331 
	#BOOST_PP_FOR_53_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(54, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_54
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(54, s),Ö, o, m)

	)

332 
	#BOOST_PP_FOR_54_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(55, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_55
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(55, s),Ö, o, m)

	)

333 
	#BOOST_PP_FOR_55_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(56, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_56
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(56, s),Ö, o, m)

	)

334 
	#BOOST_PP_FOR_56_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(57, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_57
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(57, s),Ö, o, m)

	)

335 
	#BOOST_PP_FOR_57_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(58, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_58
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(58, s),Ö, o, m)

	)

336 
	#BOOST_PP_FOR_58_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(59, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_59
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(59, s),Ö, o, m)

	)

337 
	#BOOST_PP_FOR_59_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(60, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_60
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(60, s),Ö, o, m)

	)

338 
	#BOOST_PP_FOR_60_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(61, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_61
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(61, s),Ö, o, m)

	)

339 
	#BOOST_PP_FOR_61_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(62, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_62
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(62, s),Ö, o, m)

	)

340 
	#BOOST_PP_FOR_62_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(63, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_63
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(63, s),Ö, o, m)

	)

341 
	#BOOST_PP_FOR_63_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(64, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_64
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(64, s),Ö, o, m)

	)

342 
	#BOOST_PP_FOR_64_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(65, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_65
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(65, s),Ö, o, m)

	)

343 
	#BOOST_PP_FOR_65_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(66, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_66
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(66, s),Ö, o, m)

	)

344 
	#BOOST_PP_FOR_66_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(67, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_67
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(67, s),Ö, o, m)

	)

345 
	#BOOST_PP_FOR_67_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(68, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_68
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(68, s),Ö, o, m)

	)

346 
	#BOOST_PP_FOR_68_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(69, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_69
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(69, s),Ö, o, m)

	)

347 
	#BOOST_PP_FOR_69_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(70, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_70
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(70, s),Ö, o, m)

	)

348 
	#BOOST_PP_FOR_70_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(71, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_71
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(71, s),Ö, o, m)

	)

349 
	#BOOST_PP_FOR_71_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(72, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_72
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(72, s),Ö, o, m)

	)

350 
	#BOOST_PP_FOR_72_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(73, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_73
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(73, s),Ö, o, m)

	)

351 
	#BOOST_PP_FOR_73_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(74, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_74
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(74, s),Ö, o, m)

	)

352 
	#BOOST_PP_FOR_74_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(75, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_75
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(75, s),Ö, o, m)

	)

353 
	#BOOST_PP_FOR_75_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(76, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_76
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(76, s),Ö, o, m)

	)

354 
	#BOOST_PP_FOR_76_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(77, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_77
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(77, s),Ö, o, m)

	)

355 
	#BOOST_PP_FOR_77_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(78, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_78
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(78, s),Ö, o, m)

	)

356 
	#BOOST_PP_FOR_78_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(79, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_79
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(79, s),Ö, o, m)

	)

357 
	#BOOST_PP_FOR_79_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(80, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_80
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(80, s),Ö, o, m)

	)

358 
	#BOOST_PP_FOR_80_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(81, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_81
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(81, s),Ö, o, m)

	)

359 
	#BOOST_PP_FOR_81_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(82, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_82
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(82, s),Ö, o, m)

	)

360 
	#BOOST_PP_FOR_82_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(83, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_83
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(83, s),Ö, o, m)

	)

361 
	#BOOST_PP_FOR_83_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(84, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_84
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(84, s),Ö, o, m)

	)

362 
	#BOOST_PP_FOR_84_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(85, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_85
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(85, s),Ö, o, m)

	)

363 
	#BOOST_PP_FOR_85_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(86, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_86
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(86, s),Ö, o, m)

	)

364 
	#BOOST_PP_FOR_86_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(87, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_87
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(87, s),Ö, o, m)

	)

365 
	#BOOST_PP_FOR_87_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(88, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_88
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(88, s),Ö, o, m)

	)

366 
	#BOOST_PP_FOR_88_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(89, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_89
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(89, s),Ö, o, m)

	)

367 
	#BOOST_PP_FOR_89_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(90, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_90
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(90, s),Ö, o, m)

	)

368 
	#BOOST_PP_FOR_90_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(91, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_91
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(91, s),Ö, o, m)

	)

369 
	#BOOST_PP_FOR_91_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(92, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_92
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(92, s),Ö, o, m)

	)

370 
	#BOOST_PP_FOR_92_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(93, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_93
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(93, s),Ö, o, m)

	)

371 
	#BOOST_PP_FOR_93_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(94, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_94
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(94, s),Ö, o, m)

	)

372 
	#BOOST_PP_FOR_94_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(95, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_95
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(95, s),Ö, o, m)

	)

373 
	#BOOST_PP_FOR_95_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(96, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_96
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(96, s),Ö, o, m)

	)

374 
	#BOOST_PP_FOR_96_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(97, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_97
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(97, s),Ö, o, m)

	)

375 
	#BOOST_PP_FOR_97_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(98, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_98
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(98, s),Ö, o, m)

	)

376 
	#BOOST_PP_FOR_98_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(99, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_99
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(99, s),Ö, o, m)

	)

377 
	#BOOST_PP_FOR_99_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(100, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_100
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(100, s),Ö, o, m)

	)

378 
	#BOOST_PP_FOR_100_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(101, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_101
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(101, s),Ö, o, m)

	)

379 
	#BOOST_PP_FOR_101_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(102, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_102
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(102, s),Ö, o, m)

	)

380 
	#BOOST_PP_FOR_102_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(103, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_103
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(103, s),Ö, o, m)

	)

381 
	#BOOST_PP_FOR_103_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(104, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_104
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(104, s),Ö, o, m)

	)

382 
	#BOOST_PP_FOR_104_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(105, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_105
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(105, s),Ö, o, m)

	)

383 
	#BOOST_PP_FOR_105_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(106, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_106
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(106, s),Ö, o, m)

	)

384 
	#BOOST_PP_FOR_106_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(107, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_107
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(107, s),Ö, o, m)

	)

385 
	#BOOST_PP_FOR_107_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(108, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_108
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(108, s),Ö, o, m)

	)

386 
	#BOOST_PP_FOR_108_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(109, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_109
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(109, s),Ö, o, m)

	)

387 
	#BOOST_PP_FOR_109_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(110, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_110
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(110, s),Ö, o, m)

	)

388 
	#BOOST_PP_FOR_110_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(111, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_111
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(111, s),Ö, o, m)

	)

389 
	#BOOST_PP_FOR_111_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(112, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_112
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(112, s),Ö, o, m)

	)

390 
	#BOOST_PP_FOR_112_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(113, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_113
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(113, s),Ö, o, m)

	)

391 
	#BOOST_PP_FOR_113_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(114, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_114
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(114, s),Ö, o, m)

	)

392 
	#BOOST_PP_FOR_114_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(115, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_115
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(115, s),Ö, o, m)

	)

393 
	#BOOST_PP_FOR_115_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(116, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_116
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(116, s),Ö, o, m)

	)

394 
	#BOOST_PP_FOR_116_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(117, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_117
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(117, s),Ö, o, m)

	)

395 
	#BOOST_PP_FOR_117_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(118, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_118
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(118, s),Ö, o, m)

	)

396 
	#BOOST_PP_FOR_118_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(119, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_119
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(119, s),Ö, o, m)

	)

397 
	#BOOST_PP_FOR_119_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(120, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_120
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(120, s),Ö, o, m)

	)

398 
	#BOOST_PP_FOR_120_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(121, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_121
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(121, s),Ö, o, m)

	)

399 
	#BOOST_PP_FOR_121_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(122, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_122
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(122, s),Ö, o, m)

	)

400 
	#BOOST_PP_FOR_122_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(123, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_123
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(123, s),Ö, o, m)

	)

401 
	#BOOST_PP_FOR_123_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(124, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_124
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(124, s),Ö, o, m)

	)

402 
	#BOOST_PP_FOR_124_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(125, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_125
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(125, s),Ö, o, m)

	)

403 
	#BOOST_PP_FOR_125_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(126, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_126
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(126, s),Ö, o, m)

	)

404 
	#BOOST_PP_FOR_126_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(127, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_127
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(127, s),Ö, o, m)

	)

405 
	#BOOST_PP_FOR_127_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(128, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_128
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(128, s),Ö, o, m)

	)

406 
	#BOOST_PP_FOR_128_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(129, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_129
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(129, s),Ö, o, m)

	)

407 
	#BOOST_PP_FOR_129_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(130, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_130
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(130, s),Ö, o, m)

	)

408 
	#BOOST_PP_FOR_130_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(131, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_131
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(131, s),Ö, o, m)

	)

409 
	#BOOST_PP_FOR_131_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(132, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_132
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(132, s),Ö, o, m)

	)

410 
	#BOOST_PP_FOR_132_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(133, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_133
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(133, s),Ö, o, m)

	)

411 
	#BOOST_PP_FOR_133_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(134, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_134
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(134, s),Ö, o, m)

	)

412 
	#BOOST_PP_FOR_134_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(135, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_135
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(135, s),Ö, o, m)

	)

413 
	#BOOST_PP_FOR_135_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(136, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_136
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(136, s),Ö, o, m)

	)

414 
	#BOOST_PP_FOR_136_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(137, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_137
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(137, s),Ö, o, m)

	)

415 
	#BOOST_PP_FOR_137_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(138, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_138
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(138, s),Ö, o, m)

	)

416 
	#BOOST_PP_FOR_138_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(139, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_139
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(139, s),Ö, o, m)

	)

417 
	#BOOST_PP_FOR_139_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(140, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_140
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(140, s),Ö, o, m)

	)

418 
	#BOOST_PP_FOR_140_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(141, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_141
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(141, s),Ö, o, m)

	)

419 
	#BOOST_PP_FOR_141_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(142, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_142
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(142, s),Ö, o, m)

	)

420 
	#BOOST_PP_FOR_142_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(143, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_143
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(143, s),Ö, o, m)

	)

421 
	#BOOST_PP_FOR_143_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(144, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_144
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(144, s),Ö, o, m)

	)

422 
	#BOOST_PP_FOR_144_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(145, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_145
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(145, s),Ö, o, m)

	)

423 
	#BOOST_PP_FOR_145_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(146, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_146
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(146, s),Ö, o, m)

	)

424 
	#BOOST_PP_FOR_146_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(147, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_147
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(147, s),Ö, o, m)

	)

425 
	#BOOST_PP_FOR_147_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(148, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_148
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(148, s),Ö, o, m)

	)

426 
	#BOOST_PP_FOR_148_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(149, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_149
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(149, s),Ö, o, m)

	)

427 
	#BOOST_PP_FOR_149_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(150, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_150
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(150, s),Ö, o, m)

	)

428 
	#BOOST_PP_FOR_150_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(151, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_151
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(151, s),Ö, o, m)

	)

429 
	#BOOST_PP_FOR_151_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(152, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_152
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(152, s),Ö, o, m)

	)

430 
	#BOOST_PP_FOR_152_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(153, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_153
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(153, s),Ö, o, m)

	)

431 
	#BOOST_PP_FOR_153_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(154, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_154
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(154, s),Ö, o, m)

	)

432 
	#BOOST_PP_FOR_154_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(155, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_155
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(155, s),Ö, o, m)

	)

433 
	#BOOST_PP_FOR_155_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(156, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_156
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(156, s),Ö, o, m)

	)

434 
	#BOOST_PP_FOR_156_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(157, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_157
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(157, s),Ö, o, m)

	)

435 
	#BOOST_PP_FOR_157_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(158, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_158
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(158, s),Ö, o, m)

	)

436 
	#BOOST_PP_FOR_158_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(159, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_159
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(159, s),Ö, o, m)

	)

437 
	#BOOST_PP_FOR_159_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(160, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_160
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(160, s),Ö, o, m)

	)

438 
	#BOOST_PP_FOR_160_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(161, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_161
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(161, s),Ö, o, m)

	)

439 
	#BOOST_PP_FOR_161_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(162, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_162
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(162, s),Ö, o, m)

	)

440 
	#BOOST_PP_FOR_162_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(163, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_163
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(163, s),Ö, o, m)

	)

441 
	#BOOST_PP_FOR_163_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(164, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_164
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(164, s),Ö, o, m)

	)

442 
	#BOOST_PP_FOR_164_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(165, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_165
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(165, s),Ö, o, m)

	)

443 
	#BOOST_PP_FOR_165_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(166, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_166
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(166, s),Ö, o, m)

	)

444 
	#BOOST_PP_FOR_166_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(167, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_167
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(167, s),Ö, o, m)

	)

445 
	#BOOST_PP_FOR_167_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(168, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_168
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(168, s),Ö, o, m)

	)

446 
	#BOOST_PP_FOR_168_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(169, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_169
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(169, s),Ö, o, m)

	)

447 
	#BOOST_PP_FOR_169_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(170, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_170
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(170, s),Ö, o, m)

	)

448 
	#BOOST_PP_FOR_170_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(171, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_171
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(171, s),Ö, o, m)

	)

449 
	#BOOST_PP_FOR_171_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(172, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_172
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(172, s),Ö, o, m)

	)

450 
	#BOOST_PP_FOR_172_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(173, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_173
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(173, s),Ö, o, m)

	)

451 
	#BOOST_PP_FOR_173_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(174, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_174
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(174, s),Ö, o, m)

	)

452 
	#BOOST_PP_FOR_174_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(175, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_175
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(175, s),Ö, o, m)

	)

453 
	#BOOST_PP_FOR_175_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(176, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_176
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(176, s),Ö, o, m)

	)

454 
	#BOOST_PP_FOR_176_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(177, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_177
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(177, s),Ö, o, m)

	)

455 
	#BOOST_PP_FOR_177_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(178, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_178
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(178, s),Ö, o, m)

	)

456 
	#BOOST_PP_FOR_178_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(179, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_179
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(179, s),Ö, o, m)

	)

457 
	#BOOST_PP_FOR_179_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(180, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_180
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(180, s),Ö, o, m)

	)

458 
	#BOOST_PP_FOR_180_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(181, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_181
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(181, s),Ö, o, m)

	)

459 
	#BOOST_PP_FOR_181_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(182, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_182
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(182, s),Ö, o, m)

	)

460 
	#BOOST_PP_FOR_182_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(183, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_183
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(183, s),Ö, o, m)

	)

461 
	#BOOST_PP_FOR_183_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(184, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_184
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(184, s),Ö, o, m)

	)

462 
	#BOOST_PP_FOR_184_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(185, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_185
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(185, s),Ö, o, m)

	)

463 
	#BOOST_PP_FOR_185_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(186, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_186
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(186, s),Ö, o, m)

	)

464 
	#BOOST_PP_FOR_186_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(187, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_187
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(187, s),Ö, o, m)

	)

465 
	#BOOST_PP_FOR_187_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(188, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_188
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(188, s),Ö, o, m)

	)

466 
	#BOOST_PP_FOR_188_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(189, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_189
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(189, s),Ö, o, m)

	)

467 
	#BOOST_PP_FOR_189_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(190, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_190
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(190, s),Ö, o, m)

	)

468 
	#BOOST_PP_FOR_190_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(191, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_191
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(191, s),Ö, o, m)

	)

469 
	#BOOST_PP_FOR_191_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(192, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_192
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(192, s),Ö, o, m)

	)

470 
	#BOOST_PP_FOR_192_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(193, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_193
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(193, s),Ö, o, m)

	)

471 
	#BOOST_PP_FOR_193_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(194, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_194
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(194, s),Ö, o, m)

	)

472 
	#BOOST_PP_FOR_194_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(195, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_195
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(195, s),Ö, o, m)

	)

473 
	#BOOST_PP_FOR_195_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(196, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_196
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(196, s),Ö, o, m)

	)

474 
	#BOOST_PP_FOR_196_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(197, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_197
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(197, s),Ö, o, m)

	)

475 
	#BOOST_PP_FOR_197_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(198, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_198
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(198, s),Ö, o, m)

	)

476 
	#BOOST_PP_FOR_198_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(199, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_199
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(199, s),Ö, o, m)

	)

477 
	#BOOST_PP_FOR_199_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(200, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_200
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(200, s),Ö, o, m)

	)

478 
	#BOOST_PP_FOR_200_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(201, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_201
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(201, s),Ö, o, m)

	)

479 
	#BOOST_PP_FOR_201_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(202, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_202
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(202, s),Ö, o, m)

	)

480 
	#BOOST_PP_FOR_202_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(203, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_203
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(203, s),Ö, o, m)

	)

481 
	#BOOST_PP_FOR_203_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(204, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_204
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(204, s),Ö, o, m)

	)

482 
	#BOOST_PP_FOR_204_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(205, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_205
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(205, s),Ö, o, m)

	)

483 
	#BOOST_PP_FOR_205_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(206, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_206
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(206, s),Ö, o, m)

	)

484 
	#BOOST_PP_FOR_206_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(207, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_207
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(207, s),Ö, o, m)

	)

485 
	#BOOST_PP_FOR_207_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(208, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_208
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(208, s),Ö, o, m)

	)

486 
	#BOOST_PP_FOR_208_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(209, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_209
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(209, s),Ö, o, m)

	)

487 
	#BOOST_PP_FOR_209_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(210, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_210
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(210, s),Ö, o, m)

	)

488 
	#BOOST_PP_FOR_210_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(211, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_211
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(211, s),Ö, o, m)

	)

489 
	#BOOST_PP_FOR_211_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(212, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_212
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(212, s),Ö, o, m)

	)

490 
	#BOOST_PP_FOR_212_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(213, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_213
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(213, s),Ö, o, m)

	)

491 
	#BOOST_PP_FOR_213_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(214, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_214
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(214, s),Ö, o, m)

	)

492 
	#BOOST_PP_FOR_214_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(215, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_215
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(215, s),Ö, o, m)

	)

493 
	#BOOST_PP_FOR_215_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(216, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_216
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(216, s),Ö, o, m)

	)

494 
	#BOOST_PP_FOR_216_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(217, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_217
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(217, s),Ö, o, m)

	)

495 
	#BOOST_PP_FOR_217_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(218, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_218
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(218, s),Ö, o, m)

	)

496 
	#BOOST_PP_FOR_218_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(219, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_219
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(219, s),Ö, o, m)

	)

497 
	#BOOST_PP_FOR_219_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(220, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_220
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(220, s),Ö, o, m)

	)

498 
	#BOOST_PP_FOR_220_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(221, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_221
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(221, s),Ö, o, m)

	)

499 
	#BOOST_PP_FOR_221_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(222, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_222
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(222, s),Ö, o, m)

	)

500 
	#BOOST_PP_FOR_222_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(223, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_223
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(223, s),Ö, o, m)

	)

501 
	#BOOST_PP_FOR_223_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(224, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_224
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(224, s),Ö, o, m)

	)

502 
	#BOOST_PP_FOR_224_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(225, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_225
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(225, s),Ö, o, m)

	)

503 
	#BOOST_PP_FOR_225_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(226, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_226
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(226, s),Ö, o, m)

	)

504 
	#BOOST_PP_FOR_226_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(227, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_227
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(227, s),Ö, o, m)

	)

505 
	#BOOST_PP_FOR_227_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(228, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_228
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(228, s),Ö, o, m)

	)

506 
	#BOOST_PP_FOR_228_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(229, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_229
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(229, s),Ö, o, m)

	)

507 
	#BOOST_PP_FOR_229_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(230, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_230
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(230, s),Ö, o, m)

	)

508 
	#BOOST_PP_FOR_230_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(231, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_231
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(231, s),Ö, o, m)

	)

509 
	#BOOST_PP_FOR_231_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(232, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_232
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(232, s),Ö, o, m)

	)

510 
	#BOOST_PP_FOR_232_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(233, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_233
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(233, s),Ö, o, m)

	)

511 
	#BOOST_PP_FOR_233_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(234, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_234
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(234, s),Ö, o, m)

	)

512 
	#BOOST_PP_FOR_234_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(235, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_235
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(235, s),Ö, o, m)

	)

513 
	#BOOST_PP_FOR_235_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(236, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_236
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(236, s),Ö, o, m)

	)

514 
	#BOOST_PP_FOR_236_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(237, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_237
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(237, s),Ö, o, m)

	)

515 
	#BOOST_PP_FOR_237_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(238, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_238
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(238, s),Ö, o, m)

	)

516 
	#BOOST_PP_FOR_238_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(239, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_239
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(239, s),Ö, o, m)

	)

517 
	#BOOST_PP_FOR_239_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(240, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_240
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(240, s),Ö, o, m)

	)

518 
	#BOOST_PP_FOR_240_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(241, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_241
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(241, s),Ö, o, m)

	)

519 
	#BOOST_PP_FOR_241_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(242, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_242
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(242, s),Ö, o, m)

	)

520 
	#BOOST_PP_FOR_242_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(243, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_243
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(243, s),Ö, o, m)

	)

521 
	#BOOST_PP_FOR_243_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(244, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_244
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(244, s),Ö, o, m)

	)

522 
	#BOOST_PP_FOR_244_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(245, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_245
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(245, s),Ö, o, m)

	)

523 
	#BOOST_PP_FOR_245_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(246, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_246
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(246, s),Ö, o, m)

	)

524 
	#BOOST_PP_FOR_246_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(247, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_247
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(247, s),Ö, o, m)

	)

525 
	#BOOST_PP_FOR_247_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(248, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_248
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(248, s),Ö, o, m)

	)

526 
	#BOOST_PP_FOR_248_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(249, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_249
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(249, s),Ö, o, m)

	)

527 
	#BOOST_PP_FOR_249_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(250, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_250
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(250, s),Ö, o, m)

	)

528 
	#BOOST_PP_FOR_250_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(251, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_251
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(251, s),Ö, o, m)

	)

529 
	#BOOST_PP_FOR_251_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(252, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_252
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(252, s),Ö, o, m)

	)

530 
	#BOOST_PP_FOR_252_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(253, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_253
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(253, s),Ö, o, m)

	)

531 
	#BOOST_PP_FOR_253_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(254, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_254
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(254, s),Ö, o, m)

	)

532 
	#BOOST_PP_FOR_254_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(255, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_255
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(255, s),Ö, o, m)

	)

533 
	#BOOST_PP_FOR_255_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(256, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_256
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(256, s),Ö, o, m)

	)

534 
	#BOOST_PP_FOR_256_C
(
c
, 
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IIF
(c, m, 
BOOST_PP_TUPLE_EAT_2
)(257, sËBOOST_PP_IIF(c, 
BOOST_PP_FOR_257
, 
BOOST_PP_TUPLE_EAT_4
)(
	`BOOST_PP_EXPR_IIF
(c, o)(257, s),Ö, o, m)

	)

	@/usr/include/boost/preprocessor/repetition/detail/msvc/for.hpp

1 #/* 
C›yright
 (
C
) 2001

2 #* 
Hou£m¨que
 
Oy


3 #* 
hâp
:

5 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


6 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


7 #* 
hâp
:

9 #
#/* 
Revi£d
 
by
 
Paul
 
Mís⁄ides
 (2002) */

11 #
#/* 
Sì
 
hâp
:

13 #
#i‚de‡
BOOST_PREPROCESSOR_REPETITION_DETAIL_MSVC_FOR_HPP


15 
	#BOOST_PREPROCESSOR_REPETITION_DETAIL_MSVC_FOR_HPP


	)

16 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄åﬁ/if.hµ
>

18 
	~<boo°/¥ïro˚ss‹/tu∂e/ót.hµ
>

19 
#deföê
	#BOOST_PP_FOR_1
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(2, s), m, 
BOOST_PP_TUPLE_EAT_2
)(2, sËBOOST_PP_IF’(2, s), 
BOOST_PP_FOR_2
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(2, s),Ö, o, m)

	)

21 
	#BOOST_PP_FOR_2
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(3, s), m, 
BOOST_PP_TUPLE_EAT_2
)(3, sËBOOST_PP_IF’(3, s), 
BOOST_PP_FOR_3
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(3, s),Ö, o, m)

	)

22 
	#BOOST_PP_FOR_3
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(4, s), m, 
BOOST_PP_TUPLE_EAT_2
)(4, sËBOOST_PP_IF’(4, s), 
BOOST_PP_FOR_4
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(4, s),Ö, o, m)

	)

23 
	#BOOST_PP_FOR_4
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(5, s), m, 
BOOST_PP_TUPLE_EAT_2
)(5, sËBOOST_PP_IF’(5, s), 
BOOST_PP_FOR_5
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(5, s),Ö, o, m)

	)

24 
	#BOOST_PP_FOR_5
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(6, s), m, 
BOOST_PP_TUPLE_EAT_2
)(6, sËBOOST_PP_IF’(6, s), 
BOOST_PP_FOR_6
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(6, s),Ö, o, m)

	)

25 
	#BOOST_PP_FOR_6
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(7, s), m, 
BOOST_PP_TUPLE_EAT_2
)(7, sËBOOST_PP_IF’(7, s), 
BOOST_PP_FOR_7
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(7, s),Ö, o, m)

	)

26 
	#BOOST_PP_FOR_7
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(8, s), m, 
BOOST_PP_TUPLE_EAT_2
)(8, sËBOOST_PP_IF’(8, s), 
BOOST_PP_FOR_8
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(8, s),Ö, o, m)

	)

27 
	#BOOST_PP_FOR_8
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(9, s), m, 
BOOST_PP_TUPLE_EAT_2
)(9, sËBOOST_PP_IF’(9, s), 
BOOST_PP_FOR_9
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(9, s),Ö, o, m)

	)

28 
	#BOOST_PP_FOR_9
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(10, s), m, 
BOOST_PP_TUPLE_EAT_2
)(10, sËBOOST_PP_IF’(10, s), 
BOOST_PP_FOR_10
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(10, s),Ö, o, m)

	)

29 
	#BOOST_PP_FOR_10
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(11, s), m, 
BOOST_PP_TUPLE_EAT_2
)(11, sËBOOST_PP_IF’(11, s), 
BOOST_PP_FOR_11
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(11, s),Ö, o, m)

	)

30 
	#BOOST_PP_FOR_11
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(12, s), m, 
BOOST_PP_TUPLE_EAT_2
)(12, sËBOOST_PP_IF’(12, s), 
BOOST_PP_FOR_12
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(12, s),Ö, o, m)

	)

31 
	#BOOST_PP_FOR_12
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(13, s), m, 
BOOST_PP_TUPLE_EAT_2
)(13, sËBOOST_PP_IF’(13, s), 
BOOST_PP_FOR_13
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(13, s),Ö, o, m)

	)

32 
	#BOOST_PP_FOR_13
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(14, s), m, 
BOOST_PP_TUPLE_EAT_2
)(14, sËBOOST_PP_IF’(14, s), 
BOOST_PP_FOR_14
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(14, s),Ö, o, m)

	)

33 
	#BOOST_PP_FOR_14
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(15, s), m, 
BOOST_PP_TUPLE_EAT_2
)(15, sËBOOST_PP_IF’(15, s), 
BOOST_PP_FOR_15
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(15, s),Ö, o, m)

	)

34 
	#BOOST_PP_FOR_15
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(16, s), m, 
BOOST_PP_TUPLE_EAT_2
)(16, sËBOOST_PP_IF’(16, s), 
BOOST_PP_FOR_16
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(16, s),Ö, o, m)

	)

35 
	#BOOST_PP_FOR_16
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(17, s), m, 
BOOST_PP_TUPLE_EAT_2
)(17, sËBOOST_PP_IF’(17, s), 
BOOST_PP_FOR_17
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(17, s),Ö, o, m)

	)

36 
	#BOOST_PP_FOR_17
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(18, s), m, 
BOOST_PP_TUPLE_EAT_2
)(18, sËBOOST_PP_IF’(18, s), 
BOOST_PP_FOR_18
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(18, s),Ö, o, m)

	)

37 
	#BOOST_PP_FOR_18
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(19, s), m, 
BOOST_PP_TUPLE_EAT_2
)(19, sËBOOST_PP_IF’(19, s), 
BOOST_PP_FOR_19
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(19, s),Ö, o, m)

	)

38 
	#BOOST_PP_FOR_19
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(20, s), m, 
BOOST_PP_TUPLE_EAT_2
)(20, sËBOOST_PP_IF’(20, s), 
BOOST_PP_FOR_20
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(20, s),Ö, o, m)

	)

39 
	#BOOST_PP_FOR_20
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(21, s), m, 
BOOST_PP_TUPLE_EAT_2
)(21, sËBOOST_PP_IF’(21, s), 
BOOST_PP_FOR_21
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(21, s),Ö, o, m)

	)

40 
	#BOOST_PP_FOR_21
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(22, s), m, 
BOOST_PP_TUPLE_EAT_2
)(22, sËBOOST_PP_IF’(22, s), 
BOOST_PP_FOR_22
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(22, s),Ö, o, m)

	)

41 
	#BOOST_PP_FOR_22
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(23, s), m, 
BOOST_PP_TUPLE_EAT_2
)(23, sËBOOST_PP_IF’(23, s), 
BOOST_PP_FOR_23
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(23, s),Ö, o, m)

	)

42 
	#BOOST_PP_FOR_23
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(24, s), m, 
BOOST_PP_TUPLE_EAT_2
)(24, sËBOOST_PP_IF’(24, s), 
BOOST_PP_FOR_24
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(24, s),Ö, o, m)

	)

43 
	#BOOST_PP_FOR_24
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(25, s), m, 
BOOST_PP_TUPLE_EAT_2
)(25, sËBOOST_PP_IF’(25, s), 
BOOST_PP_FOR_25
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(25, s),Ö, o, m)

	)

44 
	#BOOST_PP_FOR_25
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(26, s), m, 
BOOST_PP_TUPLE_EAT_2
)(26, sËBOOST_PP_IF’(26, s), 
BOOST_PP_FOR_26
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(26, s),Ö, o, m)

	)

45 
	#BOOST_PP_FOR_26
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(27, s), m, 
BOOST_PP_TUPLE_EAT_2
)(27, sËBOOST_PP_IF’(27, s), 
BOOST_PP_FOR_27
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(27, s),Ö, o, m)

	)

46 
	#BOOST_PP_FOR_27
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(28, s), m, 
BOOST_PP_TUPLE_EAT_2
)(28, sËBOOST_PP_IF’(28, s), 
BOOST_PP_FOR_28
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(28, s),Ö, o, m)

	)

47 
	#BOOST_PP_FOR_28
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(29, s), m, 
BOOST_PP_TUPLE_EAT_2
)(29, sËBOOST_PP_IF’(29, s), 
BOOST_PP_FOR_29
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(29, s),Ö, o, m)

	)

48 
	#BOOST_PP_FOR_29
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(30, s), m, 
BOOST_PP_TUPLE_EAT_2
)(30, sËBOOST_PP_IF’(30, s), 
BOOST_PP_FOR_30
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(30, s),Ö, o, m)

	)

49 
	#BOOST_PP_FOR_30
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(31, s), m, 
BOOST_PP_TUPLE_EAT_2
)(31, sËBOOST_PP_IF’(31, s), 
BOOST_PP_FOR_31
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(31, s),Ö, o, m)

	)

50 
	#BOOST_PP_FOR_31
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(32, s), m, 
BOOST_PP_TUPLE_EAT_2
)(32, sËBOOST_PP_IF’(32, s), 
BOOST_PP_FOR_32
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(32, s),Ö, o, m)

	)

51 
	#BOOST_PP_FOR_32
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(33, s), m, 
BOOST_PP_TUPLE_EAT_2
)(33, sËBOOST_PP_IF’(33, s), 
BOOST_PP_FOR_33
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(33, s),Ö, o, m)

	)

52 
	#BOOST_PP_FOR_33
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(34, s), m, 
BOOST_PP_TUPLE_EAT_2
)(34, sËBOOST_PP_IF’(34, s), 
BOOST_PP_FOR_34
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(34, s),Ö, o, m)

	)

53 
	#BOOST_PP_FOR_34
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(35, s), m, 
BOOST_PP_TUPLE_EAT_2
)(35, sËBOOST_PP_IF’(35, s), 
BOOST_PP_FOR_35
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(35, s),Ö, o, m)

	)

54 
	#BOOST_PP_FOR_35
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(36, s), m, 
BOOST_PP_TUPLE_EAT_2
)(36, sËBOOST_PP_IF’(36, s), 
BOOST_PP_FOR_36
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(36, s),Ö, o, m)

	)

55 
	#BOOST_PP_FOR_36
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(37, s), m, 
BOOST_PP_TUPLE_EAT_2
)(37, sËBOOST_PP_IF’(37, s), 
BOOST_PP_FOR_37
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(37, s),Ö, o, m)

	)

56 
	#BOOST_PP_FOR_37
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(38, s), m, 
BOOST_PP_TUPLE_EAT_2
)(38, sËBOOST_PP_IF’(38, s), 
BOOST_PP_FOR_38
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(38, s),Ö, o, m)

	)

57 
	#BOOST_PP_FOR_38
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(39, s), m, 
BOOST_PP_TUPLE_EAT_2
)(39, sËBOOST_PP_IF’(39, s), 
BOOST_PP_FOR_39
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(39, s),Ö, o, m)

	)

58 
	#BOOST_PP_FOR_39
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(40, s), m, 
BOOST_PP_TUPLE_EAT_2
)(40, sËBOOST_PP_IF’(40, s), 
BOOST_PP_FOR_40
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(40, s),Ö, o, m)

	)

59 
	#BOOST_PP_FOR_40
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(41, s), m, 
BOOST_PP_TUPLE_EAT_2
)(41, sËBOOST_PP_IF’(41, s), 
BOOST_PP_FOR_41
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(41, s),Ö, o, m)

	)

60 
	#BOOST_PP_FOR_41
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(42, s), m, 
BOOST_PP_TUPLE_EAT_2
)(42, sËBOOST_PP_IF’(42, s), 
BOOST_PP_FOR_42
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(42, s),Ö, o, m)

	)

61 
	#BOOST_PP_FOR_42
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(43, s), m, 
BOOST_PP_TUPLE_EAT_2
)(43, sËBOOST_PP_IF’(43, s), 
BOOST_PP_FOR_43
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(43, s),Ö, o, m)

	)

62 
	#BOOST_PP_FOR_43
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(44, s), m, 
BOOST_PP_TUPLE_EAT_2
)(44, sËBOOST_PP_IF’(44, s), 
BOOST_PP_FOR_44
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(44, s),Ö, o, m)

	)

63 
	#BOOST_PP_FOR_44
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(45, s), m, 
BOOST_PP_TUPLE_EAT_2
)(45, sËBOOST_PP_IF’(45, s), 
BOOST_PP_FOR_45
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(45, s),Ö, o, m)

	)

64 
	#BOOST_PP_FOR_45
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(46, s), m, 
BOOST_PP_TUPLE_EAT_2
)(46, sËBOOST_PP_IF’(46, s), 
BOOST_PP_FOR_46
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(46, s),Ö, o, m)

	)

65 
	#BOOST_PP_FOR_46
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(47, s), m, 
BOOST_PP_TUPLE_EAT_2
)(47, sËBOOST_PP_IF’(47, s), 
BOOST_PP_FOR_47
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(47, s),Ö, o, m)

	)

66 
	#BOOST_PP_FOR_47
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(48, s), m, 
BOOST_PP_TUPLE_EAT_2
)(48, sËBOOST_PP_IF’(48, s), 
BOOST_PP_FOR_48
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(48, s),Ö, o, m)

	)

67 
	#BOOST_PP_FOR_48
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(49, s), m, 
BOOST_PP_TUPLE_EAT_2
)(49, sËBOOST_PP_IF’(49, s), 
BOOST_PP_FOR_49
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(49, s),Ö, o, m)

	)

68 
	#BOOST_PP_FOR_49
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(50, s), m, 
BOOST_PP_TUPLE_EAT_2
)(50, sËBOOST_PP_IF’(50, s), 
BOOST_PP_FOR_50
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(50, s),Ö, o, m)

	)

69 
	#BOOST_PP_FOR_50
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(51, s), m, 
BOOST_PP_TUPLE_EAT_2
)(51, sËBOOST_PP_IF’(51, s), 
BOOST_PP_FOR_51
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(51, s),Ö, o, m)

	)

70 
	#BOOST_PP_FOR_51
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(52, s), m, 
BOOST_PP_TUPLE_EAT_2
)(52, sËBOOST_PP_IF’(52, s), 
BOOST_PP_FOR_52
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(52, s),Ö, o, m)

	)

71 
	#BOOST_PP_FOR_52
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(53, s), m, 
BOOST_PP_TUPLE_EAT_2
)(53, sËBOOST_PP_IF’(53, s), 
BOOST_PP_FOR_53
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(53, s),Ö, o, m)

	)

72 
	#BOOST_PP_FOR_53
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(54, s), m, 
BOOST_PP_TUPLE_EAT_2
)(54, sËBOOST_PP_IF’(54, s), 
BOOST_PP_FOR_54
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(54, s),Ö, o, m)

	)

73 
	#BOOST_PP_FOR_54
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(55, s), m, 
BOOST_PP_TUPLE_EAT_2
)(55, sËBOOST_PP_IF’(55, s), 
BOOST_PP_FOR_55
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(55, s),Ö, o, m)

	)

74 
	#BOOST_PP_FOR_55
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(56, s), m, 
BOOST_PP_TUPLE_EAT_2
)(56, sËBOOST_PP_IF’(56, s), 
BOOST_PP_FOR_56
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(56, s),Ö, o, m)

	)

75 
	#BOOST_PP_FOR_56
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(57, s), m, 
BOOST_PP_TUPLE_EAT_2
)(57, sËBOOST_PP_IF’(57, s), 
BOOST_PP_FOR_57
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(57, s),Ö, o, m)

	)

76 
	#BOOST_PP_FOR_57
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(58, s), m, 
BOOST_PP_TUPLE_EAT_2
)(58, sËBOOST_PP_IF’(58, s), 
BOOST_PP_FOR_58
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(58, s),Ö, o, m)

	)

77 
	#BOOST_PP_FOR_58
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(59, s), m, 
BOOST_PP_TUPLE_EAT_2
)(59, sËBOOST_PP_IF’(59, s), 
BOOST_PP_FOR_59
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(59, s),Ö, o, m)

	)

78 
	#BOOST_PP_FOR_59
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(60, s), m, 
BOOST_PP_TUPLE_EAT_2
)(60, sËBOOST_PP_IF’(60, s), 
BOOST_PP_FOR_60
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(60, s),Ö, o, m)

	)

79 
	#BOOST_PP_FOR_60
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(61, s), m, 
BOOST_PP_TUPLE_EAT_2
)(61, sËBOOST_PP_IF’(61, s), 
BOOST_PP_FOR_61
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(61, s),Ö, o, m)

	)

80 
	#BOOST_PP_FOR_61
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(62, s), m, 
BOOST_PP_TUPLE_EAT_2
)(62, sËBOOST_PP_IF’(62, s), 
BOOST_PP_FOR_62
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(62, s),Ö, o, m)

	)

81 
	#BOOST_PP_FOR_62
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(63, s), m, 
BOOST_PP_TUPLE_EAT_2
)(63, sËBOOST_PP_IF’(63, s), 
BOOST_PP_FOR_63
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(63, s),Ö, o, m)

	)

82 
	#BOOST_PP_FOR_63
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(64, s), m, 
BOOST_PP_TUPLE_EAT_2
)(64, sËBOOST_PP_IF’(64, s), 
BOOST_PP_FOR_64
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(64, s),Ö, o, m)

	)

83 
	#BOOST_PP_FOR_64
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(65, s), m, 
BOOST_PP_TUPLE_EAT_2
)(65, sËBOOST_PP_IF’(65, s), 
BOOST_PP_FOR_65
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(65, s),Ö, o, m)

	)

84 
	#BOOST_PP_FOR_65
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(66, s), m, 
BOOST_PP_TUPLE_EAT_2
)(66, sËBOOST_PP_IF’(66, s), 
BOOST_PP_FOR_66
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(66, s),Ö, o, m)

	)

85 
	#BOOST_PP_FOR_66
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(67, s), m, 
BOOST_PP_TUPLE_EAT_2
)(67, sËBOOST_PP_IF’(67, s), 
BOOST_PP_FOR_67
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(67, s),Ö, o, m)

	)

86 
	#BOOST_PP_FOR_67
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(68, s), m, 
BOOST_PP_TUPLE_EAT_2
)(68, sËBOOST_PP_IF’(68, s), 
BOOST_PP_FOR_68
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(68, s),Ö, o, m)

	)

87 
	#BOOST_PP_FOR_68
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(69, s), m, 
BOOST_PP_TUPLE_EAT_2
)(69, sËBOOST_PP_IF’(69, s), 
BOOST_PP_FOR_69
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(69, s),Ö, o, m)

	)

88 
	#BOOST_PP_FOR_69
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(70, s), m, 
BOOST_PP_TUPLE_EAT_2
)(70, sËBOOST_PP_IF’(70, s), 
BOOST_PP_FOR_70
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(70, s),Ö, o, m)

	)

89 
	#BOOST_PP_FOR_70
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(71, s), m, 
BOOST_PP_TUPLE_EAT_2
)(71, sËBOOST_PP_IF’(71, s), 
BOOST_PP_FOR_71
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(71, s),Ö, o, m)

	)

90 
	#BOOST_PP_FOR_71
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(72, s), m, 
BOOST_PP_TUPLE_EAT_2
)(72, sËBOOST_PP_IF’(72, s), 
BOOST_PP_FOR_72
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(72, s),Ö, o, m)

	)

91 
	#BOOST_PP_FOR_72
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(73, s), m, 
BOOST_PP_TUPLE_EAT_2
)(73, sËBOOST_PP_IF’(73, s), 
BOOST_PP_FOR_73
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(73, s),Ö, o, m)

	)

92 
	#BOOST_PP_FOR_73
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(74, s), m, 
BOOST_PP_TUPLE_EAT_2
)(74, sËBOOST_PP_IF’(74, s), 
BOOST_PP_FOR_74
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(74, s),Ö, o, m)

	)

93 
	#BOOST_PP_FOR_74
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(75, s), m, 
BOOST_PP_TUPLE_EAT_2
)(75, sËBOOST_PP_IF’(75, s), 
BOOST_PP_FOR_75
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(75, s),Ö, o, m)

	)

94 
	#BOOST_PP_FOR_75
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(76, s), m, 
BOOST_PP_TUPLE_EAT_2
)(76, sËBOOST_PP_IF’(76, s), 
BOOST_PP_FOR_76
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(76, s),Ö, o, m)

	)

95 
	#BOOST_PP_FOR_76
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(77, s), m, 
BOOST_PP_TUPLE_EAT_2
)(77, sËBOOST_PP_IF’(77, s), 
BOOST_PP_FOR_77
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(77, s),Ö, o, m)

	)

96 
	#BOOST_PP_FOR_77
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(78, s), m, 
BOOST_PP_TUPLE_EAT_2
)(78, sËBOOST_PP_IF’(78, s), 
BOOST_PP_FOR_78
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(78, s),Ö, o, m)

	)

97 
	#BOOST_PP_FOR_78
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(79, s), m, 
BOOST_PP_TUPLE_EAT_2
)(79, sËBOOST_PP_IF’(79, s), 
BOOST_PP_FOR_79
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(79, s),Ö, o, m)

	)

98 
	#BOOST_PP_FOR_79
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(80, s), m, 
BOOST_PP_TUPLE_EAT_2
)(80, sËBOOST_PP_IF’(80, s), 
BOOST_PP_FOR_80
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(80, s),Ö, o, m)

	)

99 
	#BOOST_PP_FOR_80
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(81, s), m, 
BOOST_PP_TUPLE_EAT_2
)(81, sËBOOST_PP_IF’(81, s), 
BOOST_PP_FOR_81
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(81, s),Ö, o, m)

	)

100 
	#BOOST_PP_FOR_81
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(82, s), m, 
BOOST_PP_TUPLE_EAT_2
)(82, sËBOOST_PP_IF’(82, s), 
BOOST_PP_FOR_82
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(82, s),Ö, o, m)

	)

101 
	#BOOST_PP_FOR_82
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(83, s), m, 
BOOST_PP_TUPLE_EAT_2
)(83, sËBOOST_PP_IF’(83, s), 
BOOST_PP_FOR_83
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(83, s),Ö, o, m)

	)

102 
	#BOOST_PP_FOR_83
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(84, s), m, 
BOOST_PP_TUPLE_EAT_2
)(84, sËBOOST_PP_IF’(84, s), 
BOOST_PP_FOR_84
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(84, s),Ö, o, m)

	)

103 
	#BOOST_PP_FOR_84
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(85, s), m, 
BOOST_PP_TUPLE_EAT_2
)(85, sËBOOST_PP_IF’(85, s), 
BOOST_PP_FOR_85
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(85, s),Ö, o, m)

	)

104 
	#BOOST_PP_FOR_85
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(86, s), m, 
BOOST_PP_TUPLE_EAT_2
)(86, sËBOOST_PP_IF’(86, s), 
BOOST_PP_FOR_86
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(86, s),Ö, o, m)

	)

105 
	#BOOST_PP_FOR_86
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(87, s), m, 
BOOST_PP_TUPLE_EAT_2
)(87, sËBOOST_PP_IF’(87, s), 
BOOST_PP_FOR_87
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(87, s),Ö, o, m)

	)

106 
	#BOOST_PP_FOR_87
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(88, s), m, 
BOOST_PP_TUPLE_EAT_2
)(88, sËBOOST_PP_IF’(88, s), 
BOOST_PP_FOR_88
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(88, s),Ö, o, m)

	)

107 
	#BOOST_PP_FOR_88
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(89, s), m, 
BOOST_PP_TUPLE_EAT_2
)(89, sËBOOST_PP_IF’(89, s), 
BOOST_PP_FOR_89
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(89, s),Ö, o, m)

	)

108 
	#BOOST_PP_FOR_89
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(90, s), m, 
BOOST_PP_TUPLE_EAT_2
)(90, sËBOOST_PP_IF’(90, s), 
BOOST_PP_FOR_90
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(90, s),Ö, o, m)

	)

109 
	#BOOST_PP_FOR_90
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(91, s), m, 
BOOST_PP_TUPLE_EAT_2
)(91, sËBOOST_PP_IF’(91, s), 
BOOST_PP_FOR_91
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(91, s),Ö, o, m)

	)

110 
	#BOOST_PP_FOR_91
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(92, s), m, 
BOOST_PP_TUPLE_EAT_2
)(92, sËBOOST_PP_IF’(92, s), 
BOOST_PP_FOR_92
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(92, s),Ö, o, m)

	)

111 
	#BOOST_PP_FOR_92
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(93, s), m, 
BOOST_PP_TUPLE_EAT_2
)(93, sËBOOST_PP_IF’(93, s), 
BOOST_PP_FOR_93
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(93, s),Ö, o, m)

	)

112 
	#BOOST_PP_FOR_93
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(94, s), m, 
BOOST_PP_TUPLE_EAT_2
)(94, sËBOOST_PP_IF’(94, s), 
BOOST_PP_FOR_94
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(94, s),Ö, o, m)

	)

113 
	#BOOST_PP_FOR_94
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(95, s), m, 
BOOST_PP_TUPLE_EAT_2
)(95, sËBOOST_PP_IF’(95, s), 
BOOST_PP_FOR_95
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(95, s),Ö, o, m)

	)

114 
	#BOOST_PP_FOR_95
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(96, s), m, 
BOOST_PP_TUPLE_EAT_2
)(96, sËBOOST_PP_IF’(96, s), 
BOOST_PP_FOR_96
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(96, s),Ö, o, m)

	)

115 
	#BOOST_PP_FOR_96
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(97, s), m, 
BOOST_PP_TUPLE_EAT_2
)(97, sËBOOST_PP_IF’(97, s), 
BOOST_PP_FOR_97
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(97, s),Ö, o, m)

	)

116 
	#BOOST_PP_FOR_97
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(98, s), m, 
BOOST_PP_TUPLE_EAT_2
)(98, sËBOOST_PP_IF’(98, s), 
BOOST_PP_FOR_98
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(98, s),Ö, o, m)

	)

117 
	#BOOST_PP_FOR_98
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(99, s), m, 
BOOST_PP_TUPLE_EAT_2
)(99, sËBOOST_PP_IF’(99, s), 
BOOST_PP_FOR_99
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(99, s),Ö, o, m)

	)

118 
	#BOOST_PP_FOR_99
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(100, s), m, 
BOOST_PP_TUPLE_EAT_2
)(100, sËBOOST_PP_IF’(100, s), 
BOOST_PP_FOR_100
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(100, s),Ö, o, m)

	)

119 
	#BOOST_PP_FOR_100
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(101, s), m, 
BOOST_PP_TUPLE_EAT_2
)(101, sËBOOST_PP_IF’(101, s), 
BOOST_PP_FOR_101
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(101, s),Ö, o, m)

	)

120 
	#BOOST_PP_FOR_101
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(102, s), m, 
BOOST_PP_TUPLE_EAT_2
)(102, sËBOOST_PP_IF’(102, s), 
BOOST_PP_FOR_102
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(102, s),Ö, o, m)

	)

121 
	#BOOST_PP_FOR_102
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(103, s), m, 
BOOST_PP_TUPLE_EAT_2
)(103, sËBOOST_PP_IF’(103, s), 
BOOST_PP_FOR_103
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(103, s),Ö, o, m)

	)

122 
	#BOOST_PP_FOR_103
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(104, s), m, 
BOOST_PP_TUPLE_EAT_2
)(104, sËBOOST_PP_IF’(104, s), 
BOOST_PP_FOR_104
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(104, s),Ö, o, m)

	)

123 
	#BOOST_PP_FOR_104
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(105, s), m, 
BOOST_PP_TUPLE_EAT_2
)(105, sËBOOST_PP_IF’(105, s), 
BOOST_PP_FOR_105
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(105, s),Ö, o, m)

	)

124 
	#BOOST_PP_FOR_105
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(106, s), m, 
BOOST_PP_TUPLE_EAT_2
)(106, sËBOOST_PP_IF’(106, s), 
BOOST_PP_FOR_106
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(106, s),Ö, o, m)

	)

125 
	#BOOST_PP_FOR_106
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(107, s), m, 
BOOST_PP_TUPLE_EAT_2
)(107, sËBOOST_PP_IF’(107, s), 
BOOST_PP_FOR_107
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(107, s),Ö, o, m)

	)

126 
	#BOOST_PP_FOR_107
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(108, s), m, 
BOOST_PP_TUPLE_EAT_2
)(108, sËBOOST_PP_IF’(108, s), 
BOOST_PP_FOR_108
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(108, s),Ö, o, m)

	)

127 
	#BOOST_PP_FOR_108
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(109, s), m, 
BOOST_PP_TUPLE_EAT_2
)(109, sËBOOST_PP_IF’(109, s), 
BOOST_PP_FOR_109
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(109, s),Ö, o, m)

	)

128 
	#BOOST_PP_FOR_109
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(110, s), m, 
BOOST_PP_TUPLE_EAT_2
)(110, sËBOOST_PP_IF’(110, s), 
BOOST_PP_FOR_110
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(110, s),Ö, o, m)

	)

129 
	#BOOST_PP_FOR_110
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(111, s), m, 
BOOST_PP_TUPLE_EAT_2
)(111, sËBOOST_PP_IF’(111, s), 
BOOST_PP_FOR_111
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(111, s),Ö, o, m)

	)

130 
	#BOOST_PP_FOR_111
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(112, s), m, 
BOOST_PP_TUPLE_EAT_2
)(112, sËBOOST_PP_IF’(112, s), 
BOOST_PP_FOR_112
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(112, s),Ö, o, m)

	)

131 
	#BOOST_PP_FOR_112
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(113, s), m, 
BOOST_PP_TUPLE_EAT_2
)(113, sËBOOST_PP_IF’(113, s), 
BOOST_PP_FOR_113
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(113, s),Ö, o, m)

	)

132 
	#BOOST_PP_FOR_113
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(114, s), m, 
BOOST_PP_TUPLE_EAT_2
)(114, sËBOOST_PP_IF’(114, s), 
BOOST_PP_FOR_114
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(114, s),Ö, o, m)

	)

133 
	#BOOST_PP_FOR_114
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(115, s), m, 
BOOST_PP_TUPLE_EAT_2
)(115, sËBOOST_PP_IF’(115, s), 
BOOST_PP_FOR_115
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(115, s),Ö, o, m)

	)

134 
	#BOOST_PP_FOR_115
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(116, s), m, 
BOOST_PP_TUPLE_EAT_2
)(116, sËBOOST_PP_IF’(116, s), 
BOOST_PP_FOR_116
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(116, s),Ö, o, m)

	)

135 
	#BOOST_PP_FOR_116
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(117, s), m, 
BOOST_PP_TUPLE_EAT_2
)(117, sËBOOST_PP_IF’(117, s), 
BOOST_PP_FOR_117
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(117, s),Ö, o, m)

	)

136 
	#BOOST_PP_FOR_117
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(118, s), m, 
BOOST_PP_TUPLE_EAT_2
)(118, sËBOOST_PP_IF’(118, s), 
BOOST_PP_FOR_118
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(118, s),Ö, o, m)

	)

137 
	#BOOST_PP_FOR_118
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(119, s), m, 
BOOST_PP_TUPLE_EAT_2
)(119, sËBOOST_PP_IF’(119, s), 
BOOST_PP_FOR_119
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(119, s),Ö, o, m)

	)

138 
	#BOOST_PP_FOR_119
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(120, s), m, 
BOOST_PP_TUPLE_EAT_2
)(120, sËBOOST_PP_IF’(120, s), 
BOOST_PP_FOR_120
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(120, s),Ö, o, m)

	)

139 
	#BOOST_PP_FOR_120
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(121, s), m, 
BOOST_PP_TUPLE_EAT_2
)(121, sËBOOST_PP_IF’(121, s), 
BOOST_PP_FOR_121
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(121, s),Ö, o, m)

	)

140 
	#BOOST_PP_FOR_121
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(122, s), m, 
BOOST_PP_TUPLE_EAT_2
)(122, sËBOOST_PP_IF’(122, s), 
BOOST_PP_FOR_122
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(122, s),Ö, o, m)

	)

141 
	#BOOST_PP_FOR_122
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(123, s), m, 
BOOST_PP_TUPLE_EAT_2
)(123, sËBOOST_PP_IF’(123, s), 
BOOST_PP_FOR_123
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(123, s),Ö, o, m)

	)

142 
	#BOOST_PP_FOR_123
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(124, s), m, 
BOOST_PP_TUPLE_EAT_2
)(124, sËBOOST_PP_IF’(124, s), 
BOOST_PP_FOR_124
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(124, s),Ö, o, m)

	)

143 
	#BOOST_PP_FOR_124
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(125, s), m, 
BOOST_PP_TUPLE_EAT_2
)(125, sËBOOST_PP_IF’(125, s), 
BOOST_PP_FOR_125
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(125, s),Ö, o, m)

	)

144 
	#BOOST_PP_FOR_125
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(126, s), m, 
BOOST_PP_TUPLE_EAT_2
)(126, sËBOOST_PP_IF’(126, s), 
BOOST_PP_FOR_126
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(126, s),Ö, o, m)

	)

145 
	#BOOST_PP_FOR_126
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(127, s), m, 
BOOST_PP_TUPLE_EAT_2
)(127, sËBOOST_PP_IF’(127, s), 
BOOST_PP_FOR_127
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(127, s),Ö, o, m)

	)

146 
	#BOOST_PP_FOR_127
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(128, s), m, 
BOOST_PP_TUPLE_EAT_2
)(128, sËBOOST_PP_IF’(128, s), 
BOOST_PP_FOR_128
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(128, s),Ö, o, m)

	)

147 
	#BOOST_PP_FOR_128
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(129, s), m, 
BOOST_PP_TUPLE_EAT_2
)(129, sËBOOST_PP_IF’(129, s), 
BOOST_PP_FOR_129
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(129, s),Ö, o, m)

	)

148 
	#BOOST_PP_FOR_129
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(130, s), m, 
BOOST_PP_TUPLE_EAT_2
)(130, sËBOOST_PP_IF’(130, s), 
BOOST_PP_FOR_130
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(130, s),Ö, o, m)

	)

149 
	#BOOST_PP_FOR_130
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(131, s), m, 
BOOST_PP_TUPLE_EAT_2
)(131, sËBOOST_PP_IF’(131, s), 
BOOST_PP_FOR_131
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(131, s),Ö, o, m)

	)

150 
	#BOOST_PP_FOR_131
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(132, s), m, 
BOOST_PP_TUPLE_EAT_2
)(132, sËBOOST_PP_IF’(132, s), 
BOOST_PP_FOR_132
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(132, s),Ö, o, m)

	)

151 
	#BOOST_PP_FOR_132
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(133, s), m, 
BOOST_PP_TUPLE_EAT_2
)(133, sËBOOST_PP_IF’(133, s), 
BOOST_PP_FOR_133
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(133, s),Ö, o, m)

	)

152 
	#BOOST_PP_FOR_133
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(134, s), m, 
BOOST_PP_TUPLE_EAT_2
)(134, sËBOOST_PP_IF’(134, s), 
BOOST_PP_FOR_134
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(134, s),Ö, o, m)

	)

153 
	#BOOST_PP_FOR_134
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(135, s), m, 
BOOST_PP_TUPLE_EAT_2
)(135, sËBOOST_PP_IF’(135, s), 
BOOST_PP_FOR_135
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(135, s),Ö, o, m)

	)

154 
	#BOOST_PP_FOR_135
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(136, s), m, 
BOOST_PP_TUPLE_EAT_2
)(136, sËBOOST_PP_IF’(136, s), 
BOOST_PP_FOR_136
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(136, s),Ö, o, m)

	)

155 
	#BOOST_PP_FOR_136
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(137, s), m, 
BOOST_PP_TUPLE_EAT_2
)(137, sËBOOST_PP_IF’(137, s), 
BOOST_PP_FOR_137
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(137, s),Ö, o, m)

	)

156 
	#BOOST_PP_FOR_137
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(138, s), m, 
BOOST_PP_TUPLE_EAT_2
)(138, sËBOOST_PP_IF’(138, s), 
BOOST_PP_FOR_138
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(138, s),Ö, o, m)

	)

157 
	#BOOST_PP_FOR_138
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(139, s), m, 
BOOST_PP_TUPLE_EAT_2
)(139, sËBOOST_PP_IF’(139, s), 
BOOST_PP_FOR_139
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(139, s),Ö, o, m)

	)

158 
	#BOOST_PP_FOR_139
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(140, s), m, 
BOOST_PP_TUPLE_EAT_2
)(140, sËBOOST_PP_IF’(140, s), 
BOOST_PP_FOR_140
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(140, s),Ö, o, m)

	)

159 
	#BOOST_PP_FOR_140
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(141, s), m, 
BOOST_PP_TUPLE_EAT_2
)(141, sËBOOST_PP_IF’(141, s), 
BOOST_PP_FOR_141
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(141, s),Ö, o, m)

	)

160 
	#BOOST_PP_FOR_141
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(142, s), m, 
BOOST_PP_TUPLE_EAT_2
)(142, sËBOOST_PP_IF’(142, s), 
BOOST_PP_FOR_142
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(142, s),Ö, o, m)

	)

161 
	#BOOST_PP_FOR_142
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(143, s), m, 
BOOST_PP_TUPLE_EAT_2
)(143, sËBOOST_PP_IF’(143, s), 
BOOST_PP_FOR_143
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(143, s),Ö, o, m)

	)

162 
	#BOOST_PP_FOR_143
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(144, s), m, 
BOOST_PP_TUPLE_EAT_2
)(144, sËBOOST_PP_IF’(144, s), 
BOOST_PP_FOR_144
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(144, s),Ö, o, m)

	)

163 
	#BOOST_PP_FOR_144
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(145, s), m, 
BOOST_PP_TUPLE_EAT_2
)(145, sËBOOST_PP_IF’(145, s), 
BOOST_PP_FOR_145
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(145, s),Ö, o, m)

	)

164 
	#BOOST_PP_FOR_145
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(146, s), m, 
BOOST_PP_TUPLE_EAT_2
)(146, sËBOOST_PP_IF’(146, s), 
BOOST_PP_FOR_146
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(146, s),Ö, o, m)

	)

165 
	#BOOST_PP_FOR_146
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(147, s), m, 
BOOST_PP_TUPLE_EAT_2
)(147, sËBOOST_PP_IF’(147, s), 
BOOST_PP_FOR_147
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(147, s),Ö, o, m)

	)

166 
	#BOOST_PP_FOR_147
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(148, s), m, 
BOOST_PP_TUPLE_EAT_2
)(148, sËBOOST_PP_IF’(148, s), 
BOOST_PP_FOR_148
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(148, s),Ö, o, m)

	)

167 
	#BOOST_PP_FOR_148
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(149, s), m, 
BOOST_PP_TUPLE_EAT_2
)(149, sËBOOST_PP_IF’(149, s), 
BOOST_PP_FOR_149
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(149, s),Ö, o, m)

	)

168 
	#BOOST_PP_FOR_149
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(150, s), m, 
BOOST_PP_TUPLE_EAT_2
)(150, sËBOOST_PP_IF’(150, s), 
BOOST_PP_FOR_150
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(150, s),Ö, o, m)

	)

169 
	#BOOST_PP_FOR_150
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(151, s), m, 
BOOST_PP_TUPLE_EAT_2
)(151, sËBOOST_PP_IF’(151, s), 
BOOST_PP_FOR_151
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(151, s),Ö, o, m)

	)

170 
	#BOOST_PP_FOR_151
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(152, s), m, 
BOOST_PP_TUPLE_EAT_2
)(152, sËBOOST_PP_IF’(152, s), 
BOOST_PP_FOR_152
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(152, s),Ö, o, m)

	)

171 
	#BOOST_PP_FOR_152
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(153, s), m, 
BOOST_PP_TUPLE_EAT_2
)(153, sËBOOST_PP_IF’(153, s), 
BOOST_PP_FOR_153
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(153, s),Ö, o, m)

	)

172 
	#BOOST_PP_FOR_153
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(154, s), m, 
BOOST_PP_TUPLE_EAT_2
)(154, sËBOOST_PP_IF’(154, s), 
BOOST_PP_FOR_154
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(154, s),Ö, o, m)

	)

173 
	#BOOST_PP_FOR_154
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(155, s), m, 
BOOST_PP_TUPLE_EAT_2
)(155, sËBOOST_PP_IF’(155, s), 
BOOST_PP_FOR_155
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(155, s),Ö, o, m)

	)

174 
	#BOOST_PP_FOR_155
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(156, s), m, 
BOOST_PP_TUPLE_EAT_2
)(156, sËBOOST_PP_IF’(156, s), 
BOOST_PP_FOR_156
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(156, s),Ö, o, m)

	)

175 
	#BOOST_PP_FOR_156
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(157, s), m, 
BOOST_PP_TUPLE_EAT_2
)(157, sËBOOST_PP_IF’(157, s), 
BOOST_PP_FOR_157
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(157, s),Ö, o, m)

	)

176 
	#BOOST_PP_FOR_157
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(158, s), m, 
BOOST_PP_TUPLE_EAT_2
)(158, sËBOOST_PP_IF’(158, s), 
BOOST_PP_FOR_158
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(158, s),Ö, o, m)

	)

177 
	#BOOST_PP_FOR_158
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(159, s), m, 
BOOST_PP_TUPLE_EAT_2
)(159, sËBOOST_PP_IF’(159, s), 
BOOST_PP_FOR_159
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(159, s),Ö, o, m)

	)

178 
	#BOOST_PP_FOR_159
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(160, s), m, 
BOOST_PP_TUPLE_EAT_2
)(160, sËBOOST_PP_IF’(160, s), 
BOOST_PP_FOR_160
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(160, s),Ö, o, m)

	)

179 
	#BOOST_PP_FOR_160
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(161, s), m, 
BOOST_PP_TUPLE_EAT_2
)(161, sËBOOST_PP_IF’(161, s), 
BOOST_PP_FOR_161
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(161, s),Ö, o, m)

	)

180 
	#BOOST_PP_FOR_161
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(162, s), m, 
BOOST_PP_TUPLE_EAT_2
)(162, sËBOOST_PP_IF’(162, s), 
BOOST_PP_FOR_162
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(162, s),Ö, o, m)

	)

181 
	#BOOST_PP_FOR_162
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(163, s), m, 
BOOST_PP_TUPLE_EAT_2
)(163, sËBOOST_PP_IF’(163, s), 
BOOST_PP_FOR_163
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(163, s),Ö, o, m)

	)

182 
	#BOOST_PP_FOR_163
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(164, s), m, 
BOOST_PP_TUPLE_EAT_2
)(164, sËBOOST_PP_IF’(164, s), 
BOOST_PP_FOR_164
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(164, s),Ö, o, m)

	)

183 
	#BOOST_PP_FOR_164
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(165, s), m, 
BOOST_PP_TUPLE_EAT_2
)(165, sËBOOST_PP_IF’(165, s), 
BOOST_PP_FOR_165
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(165, s),Ö, o, m)

	)

184 
	#BOOST_PP_FOR_165
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(166, s), m, 
BOOST_PP_TUPLE_EAT_2
)(166, sËBOOST_PP_IF’(166, s), 
BOOST_PP_FOR_166
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(166, s),Ö, o, m)

	)

185 
	#BOOST_PP_FOR_166
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(167, s), m, 
BOOST_PP_TUPLE_EAT_2
)(167, sËBOOST_PP_IF’(167, s), 
BOOST_PP_FOR_167
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(167, s),Ö, o, m)

	)

186 
	#BOOST_PP_FOR_167
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(168, s), m, 
BOOST_PP_TUPLE_EAT_2
)(168, sËBOOST_PP_IF’(168, s), 
BOOST_PP_FOR_168
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(168, s),Ö, o, m)

	)

187 
	#BOOST_PP_FOR_168
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(169, s), m, 
BOOST_PP_TUPLE_EAT_2
)(169, sËBOOST_PP_IF’(169, s), 
BOOST_PP_FOR_169
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(169, s),Ö, o, m)

	)

188 
	#BOOST_PP_FOR_169
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(170, s), m, 
BOOST_PP_TUPLE_EAT_2
)(170, sËBOOST_PP_IF’(170, s), 
BOOST_PP_FOR_170
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(170, s),Ö, o, m)

	)

189 
	#BOOST_PP_FOR_170
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(171, s), m, 
BOOST_PP_TUPLE_EAT_2
)(171, sËBOOST_PP_IF’(171, s), 
BOOST_PP_FOR_171
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(171, s),Ö, o, m)

	)

190 
	#BOOST_PP_FOR_171
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(172, s), m, 
BOOST_PP_TUPLE_EAT_2
)(172, sËBOOST_PP_IF’(172, s), 
BOOST_PP_FOR_172
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(172, s),Ö, o, m)

	)

191 
	#BOOST_PP_FOR_172
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(173, s), m, 
BOOST_PP_TUPLE_EAT_2
)(173, sËBOOST_PP_IF’(173, s), 
BOOST_PP_FOR_173
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(173, s),Ö, o, m)

	)

192 
	#BOOST_PP_FOR_173
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(174, s), m, 
BOOST_PP_TUPLE_EAT_2
)(174, sËBOOST_PP_IF’(174, s), 
BOOST_PP_FOR_174
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(174, s),Ö, o, m)

	)

193 
	#BOOST_PP_FOR_174
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(175, s), m, 
BOOST_PP_TUPLE_EAT_2
)(175, sËBOOST_PP_IF’(175, s), 
BOOST_PP_FOR_175
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(175, s),Ö, o, m)

	)

194 
	#BOOST_PP_FOR_175
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(176, s), m, 
BOOST_PP_TUPLE_EAT_2
)(176, sËBOOST_PP_IF’(176, s), 
BOOST_PP_FOR_176
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(176, s),Ö, o, m)

	)

195 
	#BOOST_PP_FOR_176
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(177, s), m, 
BOOST_PP_TUPLE_EAT_2
)(177, sËBOOST_PP_IF’(177, s), 
BOOST_PP_FOR_177
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(177, s),Ö, o, m)

	)

196 
	#BOOST_PP_FOR_177
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(178, s), m, 
BOOST_PP_TUPLE_EAT_2
)(178, sËBOOST_PP_IF’(178, s), 
BOOST_PP_FOR_178
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(178, s),Ö, o, m)

	)

197 
	#BOOST_PP_FOR_178
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(179, s), m, 
BOOST_PP_TUPLE_EAT_2
)(179, sËBOOST_PP_IF’(179, s), 
BOOST_PP_FOR_179
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(179, s),Ö, o, m)

	)

198 
	#BOOST_PP_FOR_179
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(180, s), m, 
BOOST_PP_TUPLE_EAT_2
)(180, sËBOOST_PP_IF’(180, s), 
BOOST_PP_FOR_180
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(180, s),Ö, o, m)

	)

199 
	#BOOST_PP_FOR_180
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(181, s), m, 
BOOST_PP_TUPLE_EAT_2
)(181, sËBOOST_PP_IF’(181, s), 
BOOST_PP_FOR_181
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(181, s),Ö, o, m)

	)

200 
	#BOOST_PP_FOR_181
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(182, s), m, 
BOOST_PP_TUPLE_EAT_2
)(182, sËBOOST_PP_IF’(182, s), 
BOOST_PP_FOR_182
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(182, s),Ö, o, m)

	)

201 
	#BOOST_PP_FOR_182
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(183, s), m, 
BOOST_PP_TUPLE_EAT_2
)(183, sËBOOST_PP_IF’(183, s), 
BOOST_PP_FOR_183
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(183, s),Ö, o, m)

	)

202 
	#BOOST_PP_FOR_183
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(184, s), m, 
BOOST_PP_TUPLE_EAT_2
)(184, sËBOOST_PP_IF’(184, s), 
BOOST_PP_FOR_184
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(184, s),Ö, o, m)

	)

203 
	#BOOST_PP_FOR_184
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(185, s), m, 
BOOST_PP_TUPLE_EAT_2
)(185, sËBOOST_PP_IF’(185, s), 
BOOST_PP_FOR_185
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(185, s),Ö, o, m)

	)

204 
	#BOOST_PP_FOR_185
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(186, s), m, 
BOOST_PP_TUPLE_EAT_2
)(186, sËBOOST_PP_IF’(186, s), 
BOOST_PP_FOR_186
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(186, s),Ö, o, m)

	)

205 
	#BOOST_PP_FOR_186
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(187, s), m, 
BOOST_PP_TUPLE_EAT_2
)(187, sËBOOST_PP_IF’(187, s), 
BOOST_PP_FOR_187
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(187, s),Ö, o, m)

	)

206 
	#BOOST_PP_FOR_187
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(188, s), m, 
BOOST_PP_TUPLE_EAT_2
)(188, sËBOOST_PP_IF’(188, s), 
BOOST_PP_FOR_188
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(188, s),Ö, o, m)

	)

207 
	#BOOST_PP_FOR_188
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(189, s), m, 
BOOST_PP_TUPLE_EAT_2
)(189, sËBOOST_PP_IF’(189, s), 
BOOST_PP_FOR_189
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(189, s),Ö, o, m)

	)

208 
	#BOOST_PP_FOR_189
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(190, s), m, 
BOOST_PP_TUPLE_EAT_2
)(190, sËBOOST_PP_IF’(190, s), 
BOOST_PP_FOR_190
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(190, s),Ö, o, m)

	)

209 
	#BOOST_PP_FOR_190
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(191, s), m, 
BOOST_PP_TUPLE_EAT_2
)(191, sËBOOST_PP_IF’(191, s), 
BOOST_PP_FOR_191
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(191, s),Ö, o, m)

	)

210 
	#BOOST_PP_FOR_191
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(192, s), m, 
BOOST_PP_TUPLE_EAT_2
)(192, sËBOOST_PP_IF’(192, s), 
BOOST_PP_FOR_192
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(192, s),Ö, o, m)

	)

211 
	#BOOST_PP_FOR_192
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(193, s), m, 
BOOST_PP_TUPLE_EAT_2
)(193, sËBOOST_PP_IF’(193, s), 
BOOST_PP_FOR_193
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(193, s),Ö, o, m)

	)

212 
	#BOOST_PP_FOR_193
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(194, s), m, 
BOOST_PP_TUPLE_EAT_2
)(194, sËBOOST_PP_IF’(194, s), 
BOOST_PP_FOR_194
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(194, s),Ö, o, m)

	)

213 
	#BOOST_PP_FOR_194
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(195, s), m, 
BOOST_PP_TUPLE_EAT_2
)(195, sËBOOST_PP_IF’(195, s), 
BOOST_PP_FOR_195
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(195, s),Ö, o, m)

	)

214 
	#BOOST_PP_FOR_195
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(196, s), m, 
BOOST_PP_TUPLE_EAT_2
)(196, sËBOOST_PP_IF’(196, s), 
BOOST_PP_FOR_196
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(196, s),Ö, o, m)

	)

215 
	#BOOST_PP_FOR_196
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(197, s), m, 
BOOST_PP_TUPLE_EAT_2
)(197, sËBOOST_PP_IF’(197, s), 
BOOST_PP_FOR_197
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(197, s),Ö, o, m)

	)

216 
	#BOOST_PP_FOR_197
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(198, s), m, 
BOOST_PP_TUPLE_EAT_2
)(198, sËBOOST_PP_IF’(198, s), 
BOOST_PP_FOR_198
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(198, s),Ö, o, m)

	)

217 
	#BOOST_PP_FOR_198
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(199, s), m, 
BOOST_PP_TUPLE_EAT_2
)(199, sËBOOST_PP_IF’(199, s), 
BOOST_PP_FOR_199
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(199, s),Ö, o, m)

	)

218 
	#BOOST_PP_FOR_199
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(200, s), m, 
BOOST_PP_TUPLE_EAT_2
)(200, sËBOOST_PP_IF’(200, s), 
BOOST_PP_FOR_200
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(200, s),Ö, o, m)

	)

219 
	#BOOST_PP_FOR_200
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(201, s), m, 
BOOST_PP_TUPLE_EAT_2
)(201, sËBOOST_PP_IF’(201, s), 
BOOST_PP_FOR_201
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(201, s),Ö, o, m)

	)

220 
	#BOOST_PP_FOR_201
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(202, s), m, 
BOOST_PP_TUPLE_EAT_2
)(202, sËBOOST_PP_IF’(202, s), 
BOOST_PP_FOR_202
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(202, s),Ö, o, m)

	)

221 
	#BOOST_PP_FOR_202
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(203, s), m, 
BOOST_PP_TUPLE_EAT_2
)(203, sËBOOST_PP_IF’(203, s), 
BOOST_PP_FOR_203
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(203, s),Ö, o, m)

	)

222 
	#BOOST_PP_FOR_203
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(204, s), m, 
BOOST_PP_TUPLE_EAT_2
)(204, sËBOOST_PP_IF’(204, s), 
BOOST_PP_FOR_204
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(204, s),Ö, o, m)

	)

223 
	#BOOST_PP_FOR_204
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(205, s), m, 
BOOST_PP_TUPLE_EAT_2
)(205, sËBOOST_PP_IF’(205, s), 
BOOST_PP_FOR_205
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(205, s),Ö, o, m)

	)

224 
	#BOOST_PP_FOR_205
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(206, s), m, 
BOOST_PP_TUPLE_EAT_2
)(206, sËBOOST_PP_IF’(206, s), 
BOOST_PP_FOR_206
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(206, s),Ö, o, m)

	)

225 
	#BOOST_PP_FOR_206
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(207, s), m, 
BOOST_PP_TUPLE_EAT_2
)(207, sËBOOST_PP_IF’(207, s), 
BOOST_PP_FOR_207
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(207, s),Ö, o, m)

	)

226 
	#BOOST_PP_FOR_207
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(208, s), m, 
BOOST_PP_TUPLE_EAT_2
)(208, sËBOOST_PP_IF’(208, s), 
BOOST_PP_FOR_208
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(208, s),Ö, o, m)

	)

227 
	#BOOST_PP_FOR_208
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(209, s), m, 
BOOST_PP_TUPLE_EAT_2
)(209, sËBOOST_PP_IF’(209, s), 
BOOST_PP_FOR_209
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(209, s),Ö, o, m)

	)

228 
	#BOOST_PP_FOR_209
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(210, s), m, 
BOOST_PP_TUPLE_EAT_2
)(210, sËBOOST_PP_IF’(210, s), 
BOOST_PP_FOR_210
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(210, s),Ö, o, m)

	)

229 
	#BOOST_PP_FOR_210
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(211, s), m, 
BOOST_PP_TUPLE_EAT_2
)(211, sËBOOST_PP_IF’(211, s), 
BOOST_PP_FOR_211
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(211, s),Ö, o, m)

	)

230 
	#BOOST_PP_FOR_211
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(212, s), m, 
BOOST_PP_TUPLE_EAT_2
)(212, sËBOOST_PP_IF’(212, s), 
BOOST_PP_FOR_212
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(212, s),Ö, o, m)

	)

231 
	#BOOST_PP_FOR_212
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(213, s), m, 
BOOST_PP_TUPLE_EAT_2
)(213, sËBOOST_PP_IF’(213, s), 
BOOST_PP_FOR_213
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(213, s),Ö, o, m)

	)

232 
	#BOOST_PP_FOR_213
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(214, s), m, 
BOOST_PP_TUPLE_EAT_2
)(214, sËBOOST_PP_IF’(214, s), 
BOOST_PP_FOR_214
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(214, s),Ö, o, m)

	)

233 
	#BOOST_PP_FOR_214
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(215, s), m, 
BOOST_PP_TUPLE_EAT_2
)(215, sËBOOST_PP_IF’(215, s), 
BOOST_PP_FOR_215
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(215, s),Ö, o, m)

	)

234 
	#BOOST_PP_FOR_215
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(216, s), m, 
BOOST_PP_TUPLE_EAT_2
)(216, sËBOOST_PP_IF’(216, s), 
BOOST_PP_FOR_216
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(216, s),Ö, o, m)

	)

235 
	#BOOST_PP_FOR_216
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(217, s), m, 
BOOST_PP_TUPLE_EAT_2
)(217, sËBOOST_PP_IF’(217, s), 
BOOST_PP_FOR_217
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(217, s),Ö, o, m)

	)

236 
	#BOOST_PP_FOR_217
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(218, s), m, 
BOOST_PP_TUPLE_EAT_2
)(218, sËBOOST_PP_IF’(218, s), 
BOOST_PP_FOR_218
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(218, s),Ö, o, m)

	)

237 
	#BOOST_PP_FOR_218
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(219, s), m, 
BOOST_PP_TUPLE_EAT_2
)(219, sËBOOST_PP_IF’(219, s), 
BOOST_PP_FOR_219
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(219, s),Ö, o, m)

	)

238 
	#BOOST_PP_FOR_219
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(220, s), m, 
BOOST_PP_TUPLE_EAT_2
)(220, sËBOOST_PP_IF’(220, s), 
BOOST_PP_FOR_220
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(220, s),Ö, o, m)

	)

239 
	#BOOST_PP_FOR_220
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(221, s), m, 
BOOST_PP_TUPLE_EAT_2
)(221, sËBOOST_PP_IF’(221, s), 
BOOST_PP_FOR_221
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(221, s),Ö, o, m)

	)

240 
	#BOOST_PP_FOR_221
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(222, s), m, 
BOOST_PP_TUPLE_EAT_2
)(222, sËBOOST_PP_IF’(222, s), 
BOOST_PP_FOR_222
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(222, s),Ö, o, m)

	)

241 
	#BOOST_PP_FOR_222
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(223, s), m, 
BOOST_PP_TUPLE_EAT_2
)(223, sËBOOST_PP_IF’(223, s), 
BOOST_PP_FOR_223
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(223, s),Ö, o, m)

	)

242 
	#BOOST_PP_FOR_223
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(224, s), m, 
BOOST_PP_TUPLE_EAT_2
)(224, sËBOOST_PP_IF’(224, s), 
BOOST_PP_FOR_224
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(224, s),Ö, o, m)

	)

243 
	#BOOST_PP_FOR_224
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(225, s), m, 
BOOST_PP_TUPLE_EAT_2
)(225, sËBOOST_PP_IF’(225, s), 
BOOST_PP_FOR_225
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(225, s),Ö, o, m)

	)

244 
	#BOOST_PP_FOR_225
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(226, s), m, 
BOOST_PP_TUPLE_EAT_2
)(226, sËBOOST_PP_IF’(226, s), 
BOOST_PP_FOR_226
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(226, s),Ö, o, m)

	)

245 
	#BOOST_PP_FOR_226
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(227, s), m, 
BOOST_PP_TUPLE_EAT_2
)(227, sËBOOST_PP_IF’(227, s), 
BOOST_PP_FOR_227
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(227, s),Ö, o, m)

	)

246 
	#BOOST_PP_FOR_227
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(228, s), m, 
BOOST_PP_TUPLE_EAT_2
)(228, sËBOOST_PP_IF’(228, s), 
BOOST_PP_FOR_228
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(228, s),Ö, o, m)

	)

247 
	#BOOST_PP_FOR_228
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(229, s), m, 
BOOST_PP_TUPLE_EAT_2
)(229, sËBOOST_PP_IF’(229, s), 
BOOST_PP_FOR_229
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(229, s),Ö, o, m)

	)

248 
	#BOOST_PP_FOR_229
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(230, s), m, 
BOOST_PP_TUPLE_EAT_2
)(230, sËBOOST_PP_IF’(230, s), 
BOOST_PP_FOR_230
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(230, s),Ö, o, m)

	)

249 
	#BOOST_PP_FOR_230
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(231, s), m, 
BOOST_PP_TUPLE_EAT_2
)(231, sËBOOST_PP_IF’(231, s), 
BOOST_PP_FOR_231
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(231, s),Ö, o, m)

	)

250 
	#BOOST_PP_FOR_231
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(232, s), m, 
BOOST_PP_TUPLE_EAT_2
)(232, sËBOOST_PP_IF’(232, s), 
BOOST_PP_FOR_232
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(232, s),Ö, o, m)

	)

251 
	#BOOST_PP_FOR_232
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(233, s), m, 
BOOST_PP_TUPLE_EAT_2
)(233, sËBOOST_PP_IF’(233, s), 
BOOST_PP_FOR_233
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(233, s),Ö, o, m)

	)

252 
	#BOOST_PP_FOR_233
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(234, s), m, 
BOOST_PP_TUPLE_EAT_2
)(234, sËBOOST_PP_IF’(234, s), 
BOOST_PP_FOR_234
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(234, s),Ö, o, m)

	)

253 
	#BOOST_PP_FOR_234
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(235, s), m, 
BOOST_PP_TUPLE_EAT_2
)(235, sËBOOST_PP_IF’(235, s), 
BOOST_PP_FOR_235
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(235, s),Ö, o, m)

	)

254 
	#BOOST_PP_FOR_235
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(236, s), m, 
BOOST_PP_TUPLE_EAT_2
)(236, sËBOOST_PP_IF’(236, s), 
BOOST_PP_FOR_236
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(236, s),Ö, o, m)

	)

255 
	#BOOST_PP_FOR_236
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(237, s), m, 
BOOST_PP_TUPLE_EAT_2
)(237, sËBOOST_PP_IF’(237, s), 
BOOST_PP_FOR_237
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(237, s),Ö, o, m)

	)

256 
	#BOOST_PP_FOR_237
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(238, s), m, 
BOOST_PP_TUPLE_EAT_2
)(238, sËBOOST_PP_IF’(238, s), 
BOOST_PP_FOR_238
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(238, s),Ö, o, m)

	)

257 
	#BOOST_PP_FOR_238
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(239, s), m, 
BOOST_PP_TUPLE_EAT_2
)(239, sËBOOST_PP_IF’(239, s), 
BOOST_PP_FOR_239
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(239, s),Ö, o, m)

	)

258 
	#BOOST_PP_FOR_239
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(240, s), m, 
BOOST_PP_TUPLE_EAT_2
)(240, sËBOOST_PP_IF’(240, s), 
BOOST_PP_FOR_240
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(240, s),Ö, o, m)

	)

259 
	#BOOST_PP_FOR_240
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(241, s), m, 
BOOST_PP_TUPLE_EAT_2
)(241, sËBOOST_PP_IF’(241, s), 
BOOST_PP_FOR_241
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(241, s),Ö, o, m)

	)

260 
	#BOOST_PP_FOR_241
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(242, s), m, 
BOOST_PP_TUPLE_EAT_2
)(242, sËBOOST_PP_IF’(242, s), 
BOOST_PP_FOR_242
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(242, s),Ö, o, m)

	)

261 
	#BOOST_PP_FOR_242
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(243, s), m, 
BOOST_PP_TUPLE_EAT_2
)(243, sËBOOST_PP_IF’(243, s), 
BOOST_PP_FOR_243
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(243, s),Ö, o, m)

	)

262 
	#BOOST_PP_FOR_243
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(244, s), m, 
BOOST_PP_TUPLE_EAT_2
)(244, sËBOOST_PP_IF’(244, s), 
BOOST_PP_FOR_244
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(244, s),Ö, o, m)

	)

263 
	#BOOST_PP_FOR_244
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(245, s), m, 
BOOST_PP_TUPLE_EAT_2
)(245, sËBOOST_PP_IF’(245, s), 
BOOST_PP_FOR_245
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(245, s),Ö, o, m)

	)

264 
	#BOOST_PP_FOR_245
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(246, s), m, 
BOOST_PP_TUPLE_EAT_2
)(246, sËBOOST_PP_IF’(246, s), 
BOOST_PP_FOR_246
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(246, s),Ö, o, m)

	)

265 
	#BOOST_PP_FOR_246
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(247, s), m, 
BOOST_PP_TUPLE_EAT_2
)(247, sËBOOST_PP_IF’(247, s), 
BOOST_PP_FOR_247
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(247, s),Ö, o, m)

	)

266 
	#BOOST_PP_FOR_247
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(248, s), m, 
BOOST_PP_TUPLE_EAT_2
)(248, sËBOOST_PP_IF’(248, s), 
BOOST_PP_FOR_248
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(248, s),Ö, o, m)

	)

267 
	#BOOST_PP_FOR_248
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(249, s), m, 
BOOST_PP_TUPLE_EAT_2
)(249, sËBOOST_PP_IF’(249, s), 
BOOST_PP_FOR_249
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(249, s),Ö, o, m)

	)

268 
	#BOOST_PP_FOR_249
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(250, s), m, 
BOOST_PP_TUPLE_EAT_2
)(250, sËBOOST_PP_IF’(250, s), 
BOOST_PP_FOR_250
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(250, s),Ö, o, m)

	)

269 
	#BOOST_PP_FOR_250
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(251, s), m, 
BOOST_PP_TUPLE_EAT_2
)(251, sËBOOST_PP_IF’(251, s), 
BOOST_PP_FOR_251
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(251, s),Ö, o, m)

	)

270 
	#BOOST_PP_FOR_251
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(252, s), m, 
BOOST_PP_TUPLE_EAT_2
)(252, sËBOOST_PP_IF’(252, s), 
BOOST_PP_FOR_252
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(252, s),Ö, o, m)

	)

271 
	#BOOST_PP_FOR_252
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(253, s), m, 
BOOST_PP_TUPLE_EAT_2
)(253, sËBOOST_PP_IF’(253, s), 
BOOST_PP_FOR_253
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(253, s),Ö, o, m)

	)

272 
	#BOOST_PP_FOR_253
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(254, s), m, 
BOOST_PP_TUPLE_EAT_2
)(254, sËBOOST_PP_IF’(254, s), 
BOOST_PP_FOR_254
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(254, s),Ö, o, m)

	)

273 
	#BOOST_PP_FOR_254
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(255, s), m, 
BOOST_PP_TUPLE_EAT_2
)(255, sËBOOST_PP_IF’(255, s), 
BOOST_PP_FOR_255
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(255, s),Ö, o, m)

	)

274 
	#BOOST_PP_FOR_255
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(256, s), m, 
BOOST_PP_TUPLE_EAT_2
)(256, sËBOOST_PP_IF’(256, s), 
BOOST_PP_FOR_256
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(256, s),Ö, o, m)

	)

275 
	#BOOST_PP_FOR_256
(
s
, 
p
, 
o
, 
m
Ë
	`BOOST_PP_IF
(
	`p
(257, s), m, 
BOOST_PP_TUPLE_EAT_2
)(257, sËBOOST_PP_IF’(257, s), 
BOOST_PP_FOR_257
, 
BOOST_PP_TUPLE_EAT_4
)(
	`o
(257, s),Ö, o, m)

	)

	@/usr/include/boost/preprocessor/seq/elem.hpp

3 #* (
C
Ë
C›yright
 
Paul
 
Mís⁄ides
 2002.

4 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


5 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


6 #* 
hâp
:

9 #
#/* 
Sì
 
hâp
:

11 #
#i‚de‡
BOOST_PREPROCESSOR_SEQ_ELEM_HPP


13 
	#BOOST_PREPROCESSOR_SEQ_ELEM_HPP


	)

14 
#ö˛udê
	~<boo°/¥ïro˚ss‹/ˇt.hµ
>

16 
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

17 
	~<boo°/¥ïro˚ss‹/Ácûôõs/em±y.hµ
>

18 #
#/* 
BOOST_PP_SEQ_ELEM
 */

20 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MWCC
()

22 
	#BOOST_PP_SEQ_ELEM
(
i
, 
£q
Ë
	`BOOST_PP_SEQ_ELEM_I
(i, seq)

	)

24 
	#BOOST_PP_SEQ_ELEM
(
i
, 
£q
Ë
	`BOOST_PP_SEQ_ELEM_I
((i, seq))

	)

26 #
#i‡
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MSVC
()

28 
	#BOOST_PP_SEQ_ELEM_I
(
i
, 
£q
Ë
	`BOOST_PP_SEQ_ELEM_II
((
BOOST_PP_SEQ_ELEM_
 ## i seq))

	)

29 
	#BOOST_PP_SEQ_ELEM_II
(
ªs
Ë
	`BOOST_PP_SEQ_ELEM_IV
(
BOOST_PP_SEQ_ELEM_III
Ñes)

	)

30 
	#BOOST_PP_SEQ_ELEM_III
(
x
, 
_
Ëx 
	`BOOST_PP_EMPTY
()

	)

31 
	#BOOST_PP_SEQ_ELEM_IV
(
x
Ë
	)
x

32 #ñi‡
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MWCC
()

33 
	#BOOST_PP_SEQ_ELEM_I
(
∑r
Ë
BOOST_PP_SEQ_ELEM_II
 ## 
	)
par

34 
	#BOOST_PP_SEQ_ELEM_II
(
i
, 
£q
Ë
	`BOOST_PP_SEQ_ELEM_III
(
BOOST_PP_SEQ_ELEM_
 ## i ## seq)

	)

35 
	#BOOST_PP_SEQ_ELEM_III
(
im
Ë
	`BOOST_PP_SEQ_ELEM_IV
(im)

	)

36 
	#BOOST_PP_SEQ_ELEM_IV
(
x
, 
_
Ë
	)
x

38 #i‡
deföed
(
__IBMC__
Ë|| deföed(
__IBMCPP__
)

39 
	#BOOST_PP_SEQ_ELEM_I
(
i
, 
£q
Ë
	`BOOST_PP_SEQ_ELEM_II
(
	`BOOST_PP_CAT
(
BOOST_PP_SEQ_ELEM_
 ## i, seq))

	)

41 
	#BOOST_PP_SEQ_ELEM_I
(
i
, 
£q
Ë
	`BOOST_PP_SEQ_ELEM_II
(
BOOST_PP_SEQ_ELEM_
 ## i seq)

	)

43 
	#BOOST_PP_SEQ_ELEM_II
(
im
Ë
	`BOOST_PP_SEQ_ELEM_III
(im)

	)

44 
	#BOOST_PP_SEQ_ELEM_III
(
x
, 
_
Ë
	)
x

46 
#deföê
	#BOOST_PP_SEQ_ELEM_0
(
x
Ëx, 
BOOST_PP_NIL


	)

48 
	#BOOST_PP_SEQ_ELEM_1
(
_
Ë
BOOST_PP_SEQ_ELEM_0


	)

49 
	#BOOST_PP_SEQ_ELEM_2
(
_
Ë
BOOST_PP_SEQ_ELEM_1


	)

50 
	#BOOST_PP_SEQ_ELEM_3
(
_
Ë
BOOST_PP_SEQ_ELEM_2


	)

51 
	#BOOST_PP_SEQ_ELEM_4
(
_
Ë
BOOST_PP_SEQ_ELEM_3


	)

52 
	#BOOST_PP_SEQ_ELEM_5
(
_
Ë
BOOST_PP_SEQ_ELEM_4


	)

53 
	#BOOST_PP_SEQ_ELEM_6
(
_
Ë
BOOST_PP_SEQ_ELEM_5


	)

54 
	#BOOST_PP_SEQ_ELEM_7
(
_
Ë
BOOST_PP_SEQ_ELEM_6


	)

55 
	#BOOST_PP_SEQ_ELEM_8
(
_
Ë
BOOST_PP_SEQ_ELEM_7


	)

56 
	#BOOST_PP_SEQ_ELEM_9
(
_
Ë
BOOST_PP_SEQ_ELEM_8


	)

57 
	#BOOST_PP_SEQ_ELEM_10
(
_
Ë
BOOST_PP_SEQ_ELEM_9


	)

58 
	#BOOST_PP_SEQ_ELEM_11
(
_
Ë
BOOST_PP_SEQ_ELEM_10


	)

59 
	#BOOST_PP_SEQ_ELEM_12
(
_
Ë
BOOST_PP_SEQ_ELEM_11


	)

60 
	#BOOST_PP_SEQ_ELEM_13
(
_
Ë
BOOST_PP_SEQ_ELEM_12


	)

61 
	#BOOST_PP_SEQ_ELEM_14
(
_
Ë
BOOST_PP_SEQ_ELEM_13


	)

62 
	#BOOST_PP_SEQ_ELEM_15
(
_
Ë
BOOST_PP_SEQ_ELEM_14


	)

63 
	#BOOST_PP_SEQ_ELEM_16
(
_
Ë
BOOST_PP_SEQ_ELEM_15


	)

64 
	#BOOST_PP_SEQ_ELEM_17
(
_
Ë
BOOST_PP_SEQ_ELEM_16


	)

65 
	#BOOST_PP_SEQ_ELEM_18
(
_
Ë
BOOST_PP_SEQ_ELEM_17


	)

66 
	#BOOST_PP_SEQ_ELEM_19
(
_
Ë
BOOST_PP_SEQ_ELEM_18


	)

67 
	#BOOST_PP_SEQ_ELEM_20
(
_
Ë
BOOST_PP_SEQ_ELEM_19


	)

68 
	#BOOST_PP_SEQ_ELEM_21
(
_
Ë
BOOST_PP_SEQ_ELEM_20


	)

69 
	#BOOST_PP_SEQ_ELEM_22
(
_
Ë
BOOST_PP_SEQ_ELEM_21


	)

70 
	#BOOST_PP_SEQ_ELEM_23
(
_
Ë
BOOST_PP_SEQ_ELEM_22


	)

71 
	#BOOST_PP_SEQ_ELEM_24
(
_
Ë
BOOST_PP_SEQ_ELEM_23


	)

72 
	#BOOST_PP_SEQ_ELEM_25
(
_
Ë
BOOST_PP_SEQ_ELEM_24


	)

73 
	#BOOST_PP_SEQ_ELEM_26
(
_
Ë
BOOST_PP_SEQ_ELEM_25


	)

74 
	#BOOST_PP_SEQ_ELEM_27
(
_
Ë
BOOST_PP_SEQ_ELEM_26


	)

75 
	#BOOST_PP_SEQ_ELEM_28
(
_
Ë
BOOST_PP_SEQ_ELEM_27


	)

76 
	#BOOST_PP_SEQ_ELEM_29
(
_
Ë
BOOST_PP_SEQ_ELEM_28


	)

77 
	#BOOST_PP_SEQ_ELEM_30
(
_
Ë
BOOST_PP_SEQ_ELEM_29


	)

78 
	#BOOST_PP_SEQ_ELEM_31
(
_
Ë
BOOST_PP_SEQ_ELEM_30


	)

79 
	#BOOST_PP_SEQ_ELEM_32
(
_
Ë
BOOST_PP_SEQ_ELEM_31


	)

80 
	#BOOST_PP_SEQ_ELEM_33
(
_
Ë
BOOST_PP_SEQ_ELEM_32


	)

81 
	#BOOST_PP_SEQ_ELEM_34
(
_
Ë
BOOST_PP_SEQ_ELEM_33


	)

82 
	#BOOST_PP_SEQ_ELEM_35
(
_
Ë
BOOST_PP_SEQ_ELEM_34


	)

83 
	#BOOST_PP_SEQ_ELEM_36
(
_
Ë
BOOST_PP_SEQ_ELEM_35


	)

84 
	#BOOST_PP_SEQ_ELEM_37
(
_
Ë
BOOST_PP_SEQ_ELEM_36


	)

85 
	#BOOST_PP_SEQ_ELEM_38
(
_
Ë
BOOST_PP_SEQ_ELEM_37


	)

86 
	#BOOST_PP_SEQ_ELEM_39
(
_
Ë
BOOST_PP_SEQ_ELEM_38


	)

87 
	#BOOST_PP_SEQ_ELEM_40
(
_
Ë
BOOST_PP_SEQ_ELEM_39


	)

88 
	#BOOST_PP_SEQ_ELEM_41
(
_
Ë
BOOST_PP_SEQ_ELEM_40


	)

89 
	#BOOST_PP_SEQ_ELEM_42
(
_
Ë
BOOST_PP_SEQ_ELEM_41


	)

90 
	#BOOST_PP_SEQ_ELEM_43
(
_
Ë
BOOST_PP_SEQ_ELEM_42


	)

91 
	#BOOST_PP_SEQ_ELEM_44
(
_
Ë
BOOST_PP_SEQ_ELEM_43


	)

92 
	#BOOST_PP_SEQ_ELEM_45
(
_
Ë
BOOST_PP_SEQ_ELEM_44


	)

93 
	#BOOST_PP_SEQ_ELEM_46
(
_
Ë
BOOST_PP_SEQ_ELEM_45


	)

94 
	#BOOST_PP_SEQ_ELEM_47
(
_
Ë
BOOST_PP_SEQ_ELEM_46


	)

95 
	#BOOST_PP_SEQ_ELEM_48
(
_
Ë
BOOST_PP_SEQ_ELEM_47


	)

96 
	#BOOST_PP_SEQ_ELEM_49
(
_
Ë
BOOST_PP_SEQ_ELEM_48


	)

97 
	#BOOST_PP_SEQ_ELEM_50
(
_
Ë
BOOST_PP_SEQ_ELEM_49


	)

98 
	#BOOST_PP_SEQ_ELEM_51
(
_
Ë
BOOST_PP_SEQ_ELEM_50


	)

99 
	#BOOST_PP_SEQ_ELEM_52
(
_
Ë
BOOST_PP_SEQ_ELEM_51


	)

100 
	#BOOST_PP_SEQ_ELEM_53
(
_
Ë
BOOST_PP_SEQ_ELEM_52


	)

101 
	#BOOST_PP_SEQ_ELEM_54
(
_
Ë
BOOST_PP_SEQ_ELEM_53


	)

102 
	#BOOST_PP_SEQ_ELEM_55
(
_
Ë
BOOST_PP_SEQ_ELEM_54


	)

103 
	#BOOST_PP_SEQ_ELEM_56
(
_
Ë
BOOST_PP_SEQ_ELEM_55


	)

104 
	#BOOST_PP_SEQ_ELEM_57
(
_
Ë
BOOST_PP_SEQ_ELEM_56


	)

105 
	#BOOST_PP_SEQ_ELEM_58
(
_
Ë
BOOST_PP_SEQ_ELEM_57


	)

106 
	#BOOST_PP_SEQ_ELEM_59
(
_
Ë
BOOST_PP_SEQ_ELEM_58


	)

107 
	#BOOST_PP_SEQ_ELEM_60
(
_
Ë
BOOST_PP_SEQ_ELEM_59


	)

108 
	#BOOST_PP_SEQ_ELEM_61
(
_
Ë
BOOST_PP_SEQ_ELEM_60


	)

109 
	#BOOST_PP_SEQ_ELEM_62
(
_
Ë
BOOST_PP_SEQ_ELEM_61


	)

110 
	#BOOST_PP_SEQ_ELEM_63
(
_
Ë
BOOST_PP_SEQ_ELEM_62


	)

111 
	#BOOST_PP_SEQ_ELEM_64
(
_
Ë
BOOST_PP_SEQ_ELEM_63


	)

112 
	#BOOST_PP_SEQ_ELEM_65
(
_
Ë
BOOST_PP_SEQ_ELEM_64


	)

113 
	#BOOST_PP_SEQ_ELEM_66
(
_
Ë
BOOST_PP_SEQ_ELEM_65


	)

114 
	#BOOST_PP_SEQ_ELEM_67
(
_
Ë
BOOST_PP_SEQ_ELEM_66


	)

115 
	#BOOST_PP_SEQ_ELEM_68
(
_
Ë
BOOST_PP_SEQ_ELEM_67


	)

116 
	#BOOST_PP_SEQ_ELEM_69
(
_
Ë
BOOST_PP_SEQ_ELEM_68


	)

117 
	#BOOST_PP_SEQ_ELEM_70
(
_
Ë
BOOST_PP_SEQ_ELEM_69


	)

118 
	#BOOST_PP_SEQ_ELEM_71
(
_
Ë
BOOST_PP_SEQ_ELEM_70


	)

119 
	#BOOST_PP_SEQ_ELEM_72
(
_
Ë
BOOST_PP_SEQ_ELEM_71


	)

120 
	#BOOST_PP_SEQ_ELEM_73
(
_
Ë
BOOST_PP_SEQ_ELEM_72


	)

121 
	#BOOST_PP_SEQ_ELEM_74
(
_
Ë
BOOST_PP_SEQ_ELEM_73


	)

122 
	#BOOST_PP_SEQ_ELEM_75
(
_
Ë
BOOST_PP_SEQ_ELEM_74


	)

123 
	#BOOST_PP_SEQ_ELEM_76
(
_
Ë
BOOST_PP_SEQ_ELEM_75


	)

124 
	#BOOST_PP_SEQ_ELEM_77
(
_
Ë
BOOST_PP_SEQ_ELEM_76


	)

125 
	#BOOST_PP_SEQ_ELEM_78
(
_
Ë
BOOST_PP_SEQ_ELEM_77


	)

126 
	#BOOST_PP_SEQ_ELEM_79
(
_
Ë
BOOST_PP_SEQ_ELEM_78


	)

127 
	#BOOST_PP_SEQ_ELEM_80
(
_
Ë
BOOST_PP_SEQ_ELEM_79


	)

128 
	#BOOST_PP_SEQ_ELEM_81
(
_
Ë
BOOST_PP_SEQ_ELEM_80


	)

129 
	#BOOST_PP_SEQ_ELEM_82
(
_
Ë
BOOST_PP_SEQ_ELEM_81


	)

130 
	#BOOST_PP_SEQ_ELEM_83
(
_
Ë
BOOST_PP_SEQ_ELEM_82


	)

131 
	#BOOST_PP_SEQ_ELEM_84
(
_
Ë
BOOST_PP_SEQ_ELEM_83


	)

132 
	#BOOST_PP_SEQ_ELEM_85
(
_
Ë
BOOST_PP_SEQ_ELEM_84


	)

133 
	#BOOST_PP_SEQ_ELEM_86
(
_
Ë
BOOST_PP_SEQ_ELEM_85


	)

134 
	#BOOST_PP_SEQ_ELEM_87
(
_
Ë
BOOST_PP_SEQ_ELEM_86


	)

135 
	#BOOST_PP_SEQ_ELEM_88
(
_
Ë
BOOST_PP_SEQ_ELEM_87


	)

136 
	#BOOST_PP_SEQ_ELEM_89
(
_
Ë
BOOST_PP_SEQ_ELEM_88


	)

137 
	#BOOST_PP_SEQ_ELEM_90
(
_
Ë
BOOST_PP_SEQ_ELEM_89


	)

138 
	#BOOST_PP_SEQ_ELEM_91
(
_
Ë
BOOST_PP_SEQ_ELEM_90


	)

139 
	#BOOST_PP_SEQ_ELEM_92
(
_
Ë
BOOST_PP_SEQ_ELEM_91


	)

140 
	#BOOST_PP_SEQ_ELEM_93
(
_
Ë
BOOST_PP_SEQ_ELEM_92


	)

141 
	#BOOST_PP_SEQ_ELEM_94
(
_
Ë
BOOST_PP_SEQ_ELEM_93


	)

142 
	#BOOST_PP_SEQ_ELEM_95
(
_
Ë
BOOST_PP_SEQ_ELEM_94


	)

143 
	#BOOST_PP_SEQ_ELEM_96
(
_
Ë
BOOST_PP_SEQ_ELEM_95


	)

144 
	#BOOST_PP_SEQ_ELEM_97
(
_
Ë
BOOST_PP_SEQ_ELEM_96


	)

145 
	#BOOST_PP_SEQ_ELEM_98
(
_
Ë
BOOST_PP_SEQ_ELEM_97


	)

146 
	#BOOST_PP_SEQ_ELEM_99
(
_
Ë
BOOST_PP_SEQ_ELEM_98


	)

147 
	#BOOST_PP_SEQ_ELEM_100
(
_
Ë
BOOST_PP_SEQ_ELEM_99


	)

148 
	#BOOST_PP_SEQ_ELEM_101
(
_
Ë
BOOST_PP_SEQ_ELEM_100


	)

149 
	#BOOST_PP_SEQ_ELEM_102
(
_
Ë
BOOST_PP_SEQ_ELEM_101


	)

150 
	#BOOST_PP_SEQ_ELEM_103
(
_
Ë
BOOST_PP_SEQ_ELEM_102


	)

151 
	#BOOST_PP_SEQ_ELEM_104
(
_
Ë
BOOST_PP_SEQ_ELEM_103


	)

152 
	#BOOST_PP_SEQ_ELEM_105
(
_
Ë
BOOST_PP_SEQ_ELEM_104


	)

153 
	#BOOST_PP_SEQ_ELEM_106
(
_
Ë
BOOST_PP_SEQ_ELEM_105


	)

154 
	#BOOST_PP_SEQ_ELEM_107
(
_
Ë
BOOST_PP_SEQ_ELEM_106


	)

155 
	#BOOST_PP_SEQ_ELEM_108
(
_
Ë
BOOST_PP_SEQ_ELEM_107


	)

156 
	#BOOST_PP_SEQ_ELEM_109
(
_
Ë
BOOST_PP_SEQ_ELEM_108


	)

157 
	#BOOST_PP_SEQ_ELEM_110
(
_
Ë
BOOST_PP_SEQ_ELEM_109


	)

158 
	#BOOST_PP_SEQ_ELEM_111
(
_
Ë
BOOST_PP_SEQ_ELEM_110


	)

159 
	#BOOST_PP_SEQ_ELEM_112
(
_
Ë
BOOST_PP_SEQ_ELEM_111


	)

160 
	#BOOST_PP_SEQ_ELEM_113
(
_
Ë
BOOST_PP_SEQ_ELEM_112


	)

161 
	#BOOST_PP_SEQ_ELEM_114
(
_
Ë
BOOST_PP_SEQ_ELEM_113


	)

162 
	#BOOST_PP_SEQ_ELEM_115
(
_
Ë
BOOST_PP_SEQ_ELEM_114


	)

163 
	#BOOST_PP_SEQ_ELEM_116
(
_
Ë
BOOST_PP_SEQ_ELEM_115


	)

164 
	#BOOST_PP_SEQ_ELEM_117
(
_
Ë
BOOST_PP_SEQ_ELEM_116


	)

165 
	#BOOST_PP_SEQ_ELEM_118
(
_
Ë
BOOST_PP_SEQ_ELEM_117


	)

166 
	#BOOST_PP_SEQ_ELEM_119
(
_
Ë
BOOST_PP_SEQ_ELEM_118


	)

167 
	#BOOST_PP_SEQ_ELEM_120
(
_
Ë
BOOST_PP_SEQ_ELEM_119


	)

168 
	#BOOST_PP_SEQ_ELEM_121
(
_
Ë
BOOST_PP_SEQ_ELEM_120


	)

169 
	#BOOST_PP_SEQ_ELEM_122
(
_
Ë
BOOST_PP_SEQ_ELEM_121


	)

170 
	#BOOST_PP_SEQ_ELEM_123
(
_
Ë
BOOST_PP_SEQ_ELEM_122


	)

171 
	#BOOST_PP_SEQ_ELEM_124
(
_
Ë
BOOST_PP_SEQ_ELEM_123


	)

172 
	#BOOST_PP_SEQ_ELEM_125
(
_
Ë
BOOST_PP_SEQ_ELEM_124


	)

173 
	#BOOST_PP_SEQ_ELEM_126
(
_
Ë
BOOST_PP_SEQ_ELEM_125


	)

174 
	#BOOST_PP_SEQ_ELEM_127
(
_
Ë
BOOST_PP_SEQ_ELEM_126


	)

175 
	#BOOST_PP_SEQ_ELEM_128
(
_
Ë
BOOST_PP_SEQ_ELEM_127


	)

176 
	#BOOST_PP_SEQ_ELEM_129
(
_
Ë
BOOST_PP_SEQ_ELEM_128


	)

177 
	#BOOST_PP_SEQ_ELEM_130
(
_
Ë
BOOST_PP_SEQ_ELEM_129


	)

178 
	#BOOST_PP_SEQ_ELEM_131
(
_
Ë
BOOST_PP_SEQ_ELEM_130


	)

179 
	#BOOST_PP_SEQ_ELEM_132
(
_
Ë
BOOST_PP_SEQ_ELEM_131


	)

180 
	#BOOST_PP_SEQ_ELEM_133
(
_
Ë
BOOST_PP_SEQ_ELEM_132


	)

181 
	#BOOST_PP_SEQ_ELEM_134
(
_
Ë
BOOST_PP_SEQ_ELEM_133


	)

182 
	#BOOST_PP_SEQ_ELEM_135
(
_
Ë
BOOST_PP_SEQ_ELEM_134


	)

183 
	#BOOST_PP_SEQ_ELEM_136
(
_
Ë
BOOST_PP_SEQ_ELEM_135


	)

184 
	#BOOST_PP_SEQ_ELEM_137
(
_
Ë
BOOST_PP_SEQ_ELEM_136


	)

185 
	#BOOST_PP_SEQ_ELEM_138
(
_
Ë
BOOST_PP_SEQ_ELEM_137


	)

186 
	#BOOST_PP_SEQ_ELEM_139
(
_
Ë
BOOST_PP_SEQ_ELEM_138


	)

187 
	#BOOST_PP_SEQ_ELEM_140
(
_
Ë
BOOST_PP_SEQ_ELEM_139


	)

188 
	#BOOST_PP_SEQ_ELEM_141
(
_
Ë
BOOST_PP_SEQ_ELEM_140


	)

189 
	#BOOST_PP_SEQ_ELEM_142
(
_
Ë
BOOST_PP_SEQ_ELEM_141


	)

190 
	#BOOST_PP_SEQ_ELEM_143
(
_
Ë
BOOST_PP_SEQ_ELEM_142


	)

191 
	#BOOST_PP_SEQ_ELEM_144
(
_
Ë
BOOST_PP_SEQ_ELEM_143


	)

192 
	#BOOST_PP_SEQ_ELEM_145
(
_
Ë
BOOST_PP_SEQ_ELEM_144


	)

193 
	#BOOST_PP_SEQ_ELEM_146
(
_
Ë
BOOST_PP_SEQ_ELEM_145


	)

194 
	#BOOST_PP_SEQ_ELEM_147
(
_
Ë
BOOST_PP_SEQ_ELEM_146


	)

195 
	#BOOST_PP_SEQ_ELEM_148
(
_
Ë
BOOST_PP_SEQ_ELEM_147


	)

196 
	#BOOST_PP_SEQ_ELEM_149
(
_
Ë
BOOST_PP_SEQ_ELEM_148


	)

197 
	#BOOST_PP_SEQ_ELEM_150
(
_
Ë
BOOST_PP_SEQ_ELEM_149


	)

198 
	#BOOST_PP_SEQ_ELEM_151
(
_
Ë
BOOST_PP_SEQ_ELEM_150


	)

199 
	#BOOST_PP_SEQ_ELEM_152
(
_
Ë
BOOST_PP_SEQ_ELEM_151


	)

200 
	#BOOST_PP_SEQ_ELEM_153
(
_
Ë
BOOST_PP_SEQ_ELEM_152


	)

201 
	#BOOST_PP_SEQ_ELEM_154
(
_
Ë
BOOST_PP_SEQ_ELEM_153


	)

202 
	#BOOST_PP_SEQ_ELEM_155
(
_
Ë
BOOST_PP_SEQ_ELEM_154


	)

203 
	#BOOST_PP_SEQ_ELEM_156
(
_
Ë
BOOST_PP_SEQ_ELEM_155


	)

204 
	#BOOST_PP_SEQ_ELEM_157
(
_
Ë
BOOST_PP_SEQ_ELEM_156


	)

205 
	#BOOST_PP_SEQ_ELEM_158
(
_
Ë
BOOST_PP_SEQ_ELEM_157


	)

206 
	#BOOST_PP_SEQ_ELEM_159
(
_
Ë
BOOST_PP_SEQ_ELEM_158


	)

207 
	#BOOST_PP_SEQ_ELEM_160
(
_
Ë
BOOST_PP_SEQ_ELEM_159


	)

208 
	#BOOST_PP_SEQ_ELEM_161
(
_
Ë
BOOST_PP_SEQ_ELEM_160


	)

209 
	#BOOST_PP_SEQ_ELEM_162
(
_
Ë
BOOST_PP_SEQ_ELEM_161


	)

210 
	#BOOST_PP_SEQ_ELEM_163
(
_
Ë
BOOST_PP_SEQ_ELEM_162


	)

211 
	#BOOST_PP_SEQ_ELEM_164
(
_
Ë
BOOST_PP_SEQ_ELEM_163


	)

212 
	#BOOST_PP_SEQ_ELEM_165
(
_
Ë
BOOST_PP_SEQ_ELEM_164


	)

213 
	#BOOST_PP_SEQ_ELEM_166
(
_
Ë
BOOST_PP_SEQ_ELEM_165


	)

214 
	#BOOST_PP_SEQ_ELEM_167
(
_
Ë
BOOST_PP_SEQ_ELEM_166


	)

215 
	#BOOST_PP_SEQ_ELEM_168
(
_
Ë
BOOST_PP_SEQ_ELEM_167


	)

216 
	#BOOST_PP_SEQ_ELEM_169
(
_
Ë
BOOST_PP_SEQ_ELEM_168


	)

217 
	#BOOST_PP_SEQ_ELEM_170
(
_
Ë
BOOST_PP_SEQ_ELEM_169


	)

218 
	#BOOST_PP_SEQ_ELEM_171
(
_
Ë
BOOST_PP_SEQ_ELEM_170


	)

219 
	#BOOST_PP_SEQ_ELEM_172
(
_
Ë
BOOST_PP_SEQ_ELEM_171


	)

220 
	#BOOST_PP_SEQ_ELEM_173
(
_
Ë
BOOST_PP_SEQ_ELEM_172


	)

221 
	#BOOST_PP_SEQ_ELEM_174
(
_
Ë
BOOST_PP_SEQ_ELEM_173


	)

222 
	#BOOST_PP_SEQ_ELEM_175
(
_
Ë
BOOST_PP_SEQ_ELEM_174


	)

223 
	#BOOST_PP_SEQ_ELEM_176
(
_
Ë
BOOST_PP_SEQ_ELEM_175


	)

224 
	#BOOST_PP_SEQ_ELEM_177
(
_
Ë
BOOST_PP_SEQ_ELEM_176


	)

225 
	#BOOST_PP_SEQ_ELEM_178
(
_
Ë
BOOST_PP_SEQ_ELEM_177


	)

226 
	#BOOST_PP_SEQ_ELEM_179
(
_
Ë
BOOST_PP_SEQ_ELEM_178


	)

227 
	#BOOST_PP_SEQ_ELEM_180
(
_
Ë
BOOST_PP_SEQ_ELEM_179


	)

228 
	#BOOST_PP_SEQ_ELEM_181
(
_
Ë
BOOST_PP_SEQ_ELEM_180


	)

229 
	#BOOST_PP_SEQ_ELEM_182
(
_
Ë
BOOST_PP_SEQ_ELEM_181


	)

230 
	#BOOST_PP_SEQ_ELEM_183
(
_
Ë
BOOST_PP_SEQ_ELEM_182


	)

231 
	#BOOST_PP_SEQ_ELEM_184
(
_
Ë
BOOST_PP_SEQ_ELEM_183


	)

232 
	#BOOST_PP_SEQ_ELEM_185
(
_
Ë
BOOST_PP_SEQ_ELEM_184


	)

233 
	#BOOST_PP_SEQ_ELEM_186
(
_
Ë
BOOST_PP_SEQ_ELEM_185


	)

234 
	#BOOST_PP_SEQ_ELEM_187
(
_
Ë
BOOST_PP_SEQ_ELEM_186


	)

235 
	#BOOST_PP_SEQ_ELEM_188
(
_
Ë
BOOST_PP_SEQ_ELEM_187


	)

236 
	#BOOST_PP_SEQ_ELEM_189
(
_
Ë
BOOST_PP_SEQ_ELEM_188


	)

237 
	#BOOST_PP_SEQ_ELEM_190
(
_
Ë
BOOST_PP_SEQ_ELEM_189


	)

238 
	#BOOST_PP_SEQ_ELEM_191
(
_
Ë
BOOST_PP_SEQ_ELEM_190


	)

239 
	#BOOST_PP_SEQ_ELEM_192
(
_
Ë
BOOST_PP_SEQ_ELEM_191


	)

240 
	#BOOST_PP_SEQ_ELEM_193
(
_
Ë
BOOST_PP_SEQ_ELEM_192


	)

241 
	#BOOST_PP_SEQ_ELEM_194
(
_
Ë
BOOST_PP_SEQ_ELEM_193


	)

242 
	#BOOST_PP_SEQ_ELEM_195
(
_
Ë
BOOST_PP_SEQ_ELEM_194


	)

243 
	#BOOST_PP_SEQ_ELEM_196
(
_
Ë
BOOST_PP_SEQ_ELEM_195


	)

244 
	#BOOST_PP_SEQ_ELEM_197
(
_
Ë
BOOST_PP_SEQ_ELEM_196


	)

245 
	#BOOST_PP_SEQ_ELEM_198
(
_
Ë
BOOST_PP_SEQ_ELEM_197


	)

246 
	#BOOST_PP_SEQ_ELEM_199
(
_
Ë
BOOST_PP_SEQ_ELEM_198


	)

247 
	#BOOST_PP_SEQ_ELEM_200
(
_
Ë
BOOST_PP_SEQ_ELEM_199


	)

248 
	#BOOST_PP_SEQ_ELEM_201
(
_
Ë
BOOST_PP_SEQ_ELEM_200


	)

249 
	#BOOST_PP_SEQ_ELEM_202
(
_
Ë
BOOST_PP_SEQ_ELEM_201


	)

250 
	#BOOST_PP_SEQ_ELEM_203
(
_
Ë
BOOST_PP_SEQ_ELEM_202


	)

251 
	#BOOST_PP_SEQ_ELEM_204
(
_
Ë
BOOST_PP_SEQ_ELEM_203


	)

252 
	#BOOST_PP_SEQ_ELEM_205
(
_
Ë
BOOST_PP_SEQ_ELEM_204


	)

253 
	#BOOST_PP_SEQ_ELEM_206
(
_
Ë
BOOST_PP_SEQ_ELEM_205


	)

254 
	#BOOST_PP_SEQ_ELEM_207
(
_
Ë
BOOST_PP_SEQ_ELEM_206


	)

255 
	#BOOST_PP_SEQ_ELEM_208
(
_
Ë
BOOST_PP_SEQ_ELEM_207


	)

256 
	#BOOST_PP_SEQ_ELEM_209
(
_
Ë
BOOST_PP_SEQ_ELEM_208


	)

257 
	#BOOST_PP_SEQ_ELEM_210
(
_
Ë
BOOST_PP_SEQ_ELEM_209


	)

258 
	#BOOST_PP_SEQ_ELEM_211
(
_
Ë
BOOST_PP_SEQ_ELEM_210


	)

259 
	#BOOST_PP_SEQ_ELEM_212
(
_
Ë
BOOST_PP_SEQ_ELEM_211


	)

260 
	#BOOST_PP_SEQ_ELEM_213
(
_
Ë
BOOST_PP_SEQ_ELEM_212


	)

261 
	#BOOST_PP_SEQ_ELEM_214
(
_
Ë
BOOST_PP_SEQ_ELEM_213


	)

262 
	#BOOST_PP_SEQ_ELEM_215
(
_
Ë
BOOST_PP_SEQ_ELEM_214


	)

263 
	#BOOST_PP_SEQ_ELEM_216
(
_
Ë
BOOST_PP_SEQ_ELEM_215


	)

264 
	#BOOST_PP_SEQ_ELEM_217
(
_
Ë
BOOST_PP_SEQ_ELEM_216


	)

265 
	#BOOST_PP_SEQ_ELEM_218
(
_
Ë
BOOST_PP_SEQ_ELEM_217


	)

266 
	#BOOST_PP_SEQ_ELEM_219
(
_
Ë
BOOST_PP_SEQ_ELEM_218


	)

267 
	#BOOST_PP_SEQ_ELEM_220
(
_
Ë
BOOST_PP_SEQ_ELEM_219


	)

268 
	#BOOST_PP_SEQ_ELEM_221
(
_
Ë
BOOST_PP_SEQ_ELEM_220


	)

269 
	#BOOST_PP_SEQ_ELEM_222
(
_
Ë
BOOST_PP_SEQ_ELEM_221


	)

270 
	#BOOST_PP_SEQ_ELEM_223
(
_
Ë
BOOST_PP_SEQ_ELEM_222


	)

271 
	#BOOST_PP_SEQ_ELEM_224
(
_
Ë
BOOST_PP_SEQ_ELEM_223


	)

272 
	#BOOST_PP_SEQ_ELEM_225
(
_
Ë
BOOST_PP_SEQ_ELEM_224


	)

273 
	#BOOST_PP_SEQ_ELEM_226
(
_
Ë
BOOST_PP_SEQ_ELEM_225


	)

274 
	#BOOST_PP_SEQ_ELEM_227
(
_
Ë
BOOST_PP_SEQ_ELEM_226


	)

275 
	#BOOST_PP_SEQ_ELEM_228
(
_
Ë
BOOST_PP_SEQ_ELEM_227


	)

276 
	#BOOST_PP_SEQ_ELEM_229
(
_
Ë
BOOST_PP_SEQ_ELEM_228


	)

277 
	#BOOST_PP_SEQ_ELEM_230
(
_
Ë
BOOST_PP_SEQ_ELEM_229


	)

278 
	#BOOST_PP_SEQ_ELEM_231
(
_
Ë
BOOST_PP_SEQ_ELEM_230


	)

279 
	#BOOST_PP_SEQ_ELEM_232
(
_
Ë
BOOST_PP_SEQ_ELEM_231


	)

280 
	#BOOST_PP_SEQ_ELEM_233
(
_
Ë
BOOST_PP_SEQ_ELEM_232


	)

281 
	#BOOST_PP_SEQ_ELEM_234
(
_
Ë
BOOST_PP_SEQ_ELEM_233


	)

282 
	#BOOST_PP_SEQ_ELEM_235
(
_
Ë
BOOST_PP_SEQ_ELEM_234


	)

283 
	#BOOST_PP_SEQ_ELEM_236
(
_
Ë
BOOST_PP_SEQ_ELEM_235


	)

284 
	#BOOST_PP_SEQ_ELEM_237
(
_
Ë
BOOST_PP_SEQ_ELEM_236


	)

285 
	#BOOST_PP_SEQ_ELEM_238
(
_
Ë
BOOST_PP_SEQ_ELEM_237


	)

286 
	#BOOST_PP_SEQ_ELEM_239
(
_
Ë
BOOST_PP_SEQ_ELEM_238


	)

287 
	#BOOST_PP_SEQ_ELEM_240
(
_
Ë
BOOST_PP_SEQ_ELEM_239


	)

288 
	#BOOST_PP_SEQ_ELEM_241
(
_
Ë
BOOST_PP_SEQ_ELEM_240


	)

289 
	#BOOST_PP_SEQ_ELEM_242
(
_
Ë
BOOST_PP_SEQ_ELEM_241


	)

290 
	#BOOST_PP_SEQ_ELEM_243
(
_
Ë
BOOST_PP_SEQ_ELEM_242


	)

291 
	#BOOST_PP_SEQ_ELEM_244
(
_
Ë
BOOST_PP_SEQ_ELEM_243


	)

292 
	#BOOST_PP_SEQ_ELEM_245
(
_
Ë
BOOST_PP_SEQ_ELEM_244


	)

293 
	#BOOST_PP_SEQ_ELEM_246
(
_
Ë
BOOST_PP_SEQ_ELEM_245


	)

294 
	#BOOST_PP_SEQ_ELEM_247
(
_
Ë
BOOST_PP_SEQ_ELEM_246


	)

295 
	#BOOST_PP_SEQ_ELEM_248
(
_
Ë
BOOST_PP_SEQ_ELEM_247


	)

296 
	#BOOST_PP_SEQ_ELEM_249
(
_
Ë
BOOST_PP_SEQ_ELEM_248


	)

297 
	#BOOST_PP_SEQ_ELEM_250
(
_
Ë
BOOST_PP_SEQ_ELEM_249


	)

298 
	#BOOST_PP_SEQ_ELEM_251
(
_
Ë
BOOST_PP_SEQ_ELEM_250


	)

299 
	#BOOST_PP_SEQ_ELEM_252
(
_
Ë
BOOST_PP_SEQ_ELEM_251


	)

300 
	#BOOST_PP_SEQ_ELEM_253
(
_
Ë
BOOST_PP_SEQ_ELEM_252


	)

301 
	#BOOST_PP_SEQ_ELEM_254
(
_
Ë
BOOST_PP_SEQ_ELEM_253


	)

302 
	#BOOST_PP_SEQ_ELEM_255
(
_
Ë
BOOST_PP_SEQ_ELEM_254


	)

	@/usr/include/boost/preprocessor/tuple/detail/is_single_return.hpp

3 #* (
C
Ë
C›yright
 
Edw¨d
 
Dõ√r
 2014. *

4 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì
 *

5 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©
 *

6 #* 
hâp
:

9 #
#/* 
Sì
 
hâp
:

11 #
#i‚de‡
BOOST_PREPROCESSOR_TUPLE_DETAIL_IS_SINGLE_RETURN_HPP


13 
	#BOOST_PREPROCESSOR_TUPLE_DETAIL_IS_SINGLE_RETURN_HPP


	)

14 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

16 #
#/* 
BOOST_PP_TUPLE_IS_SINGLE_RETURN
 */

18 #
#i‡
BOOST_PP_VARIADICS
 && 
BOOST_PP_VARIADICS_MSVC


20 
	~<boo°/¥ïro˚ss‹/c⁄åﬁ/iif.hµ
>

21 
	~<boo°/¥ïro˚ss‹/Ácûôõs/is_1.hµ
>

22 
	~<boo°/¥ïro˚ss‹/tu∂e/size.hµ
>

23 
	#BOOST_PP_TUPLE_IS_SINGLE_RETURN
(
§
,
n§
,
tu∂e
) \

24 
	`BOOST_PP_IIF
(
	`BOOST_PP_IS_1
(
	`BOOST_PP_TUPLE_SIZE
(
tu∂e
)),
§
,
n§
) \

25 

	)

	@/usr/include/boost/preprocessor/variadic/elem.hpp

3 #* (
C
Ë
C›yright
 
Edw¨d
 
Dõ√r
 2011. *

4 #* (
C
Ë
C›yright
 
Paul
 
Mís⁄ides
 2011. *

5 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì
 *

6 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©
 *

7 #* 
hâp
:

10 #
#/* 
Sì
 
hâp
:

12 #
#i‚de‡
BOOST_PREPROCESSOR_VARIADIC_ELEM_HPP


14 
	#BOOST_PREPROCESSOR_VARIADIC_ELEM_HPP


	)

15 
#ö˛udê
	~<boo°/¥ïro˚ss‹/ˇt.hµ
>

17 
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

18 #
#/* 
BOOST_PP_VARIADIC_ELEM
 */

20 #
#i‡
BOOST_PP_VARIADICS


22 #i‡
BOOST_PP_VARIADICS_MSVC


23 
	#BOOST_PP_VARIADIC_ELEM
(
n
, ...Ë
	`BOOST_PP_VARIADIC_ELEM_I
“,
__VA_ARGS__
)

	)

24 
	#BOOST_PP_VARIADIC_ELEM_I
(
n
, ...Ë
	`BOOST_PP_CAT
(BOOST_PP_CAT(
BOOST_PP_VARIADIC_ELEM_
,Ç)(
__VA_ARGS__
,),)

	)

26 
	#BOOST_PP_VARIADIC_ELEM
(
n
, ...Ë
	`BOOST_PP_CAT
(
BOOST_PP_VARIADIC_ELEM_
,Ç)(
__VA_ARGS__
,)

	)

28 
	#BOOST_PP_VARIADIC_ELEM_0
(
e0
, ...Ë
	)
e0

29 
	#BOOST_PP_VARIADIC_ELEM_1
(
e0
, 
e1
, ...Ë
	)
e1

30 
	#BOOST_PP_VARIADIC_ELEM_2
(
e0
, 
e1
, 
e2
, ...Ë
	)
e2

31 
	#BOOST_PP_VARIADIC_ELEM_3
(
e0
, 
e1
, 
e2
, 
e3
, ...Ë
	)
e3

32 
	#BOOST_PP_VARIADIC_ELEM_4
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, ...Ë
	)
e4

33 
	#BOOST_PP_VARIADIC_ELEM_5
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, ...Ë
	)
e5

34 
	#BOOST_PP_VARIADIC_ELEM_6
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, ...Ë
	)
e6

35 
	#BOOST_PP_VARIADIC_ELEM_7
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, ...Ë
	)
e7

36 
	#BOOST_PP_VARIADIC_ELEM_8
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, ...Ë
	)
e8

37 
	#BOOST_PP_VARIADIC_ELEM_9
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, ...Ë
	)
e9

38 
	#BOOST_PP_VARIADIC_ELEM_10
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, ...Ë
	)
e10

39 
	#BOOST_PP_VARIADIC_ELEM_11
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, ...Ë
	)
e11

40 
	#BOOST_PP_VARIADIC_ELEM_12
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, ...Ë
	)
e12

41 
	#BOOST_PP_VARIADIC_ELEM_13
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, ...Ë
	)
e13

42 
	#BOOST_PP_VARIADIC_ELEM_14
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, ...Ë
	)
e14

43 
	#BOOST_PP_VARIADIC_ELEM_15
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, ...Ë
	)
e15

44 
	#BOOST_PP_VARIADIC_ELEM_16
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, ...Ë
	)
e16

45 
	#BOOST_PP_VARIADIC_ELEM_17
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, ...Ë
	)
e17

46 
	#BOOST_PP_VARIADIC_ELEM_18
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, ...Ë
	)
e18

47 
	#BOOST_PP_VARIADIC_ELEM_19
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, ...Ë
	)
e19

48 
	#BOOST_PP_VARIADIC_ELEM_20
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, ...Ë
	)
e20

49 
	#BOOST_PP_VARIADIC_ELEM_21
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, ...Ë
	)
e21

50 
	#BOOST_PP_VARIADIC_ELEM_22
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, ...Ë
	)
e22

51 
	#BOOST_PP_VARIADIC_ELEM_23
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, ...Ë
	)
e23

52 
	#BOOST_PP_VARIADIC_ELEM_24
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, ...Ë
	)
e24

53 
	#BOOST_PP_VARIADIC_ELEM_25
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, ...Ë
	)
e25

54 
	#BOOST_PP_VARIADIC_ELEM_26
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, ...Ë
	)
e26

55 
	#BOOST_PP_VARIADIC_ELEM_27
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, ...Ë
	)
e27

56 
	#BOOST_PP_VARIADIC_ELEM_28
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, ...Ë
	)
e28

57 
	#BOOST_PP_VARIADIC_ELEM_29
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, ...Ë
	)
e29

58 
	#BOOST_PP_VARIADIC_ELEM_30
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, ...Ë
	)
e30

59 
	#BOOST_PP_VARIADIC_ELEM_31
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, ...Ë
	)
e31

60 
	#BOOST_PP_VARIADIC_ELEM_32
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, ...Ë
	)
e32

61 
	#BOOST_PP_VARIADIC_ELEM_33
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, ...Ë
	)
e33

62 
	#BOOST_PP_VARIADIC_ELEM_34
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, ...Ë
	)
e34

63 
	#BOOST_PP_VARIADIC_ELEM_35
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, ...Ë
	)
e35

64 
	#BOOST_PP_VARIADIC_ELEM_36
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, ...Ë
	)
e36

65 
	#BOOST_PP_VARIADIC_ELEM_37
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, ...Ë
	)
e37

66 
	#BOOST_PP_VARIADIC_ELEM_38
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, ...Ë
	)
e38

67 
	#BOOST_PP_VARIADIC_ELEM_39
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, ...Ë
	)
e39

68 
	#BOOST_PP_VARIADIC_ELEM_40
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, ...Ë
	)
e40

69 
	#BOOST_PP_VARIADIC_ELEM_41
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, ...Ë
	)
e41

70 
	#BOOST_PP_VARIADIC_ELEM_42
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, ...Ë
	)
e42

71 
	#BOOST_PP_VARIADIC_ELEM_43
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, ...Ë
	)
e43

72 
	#BOOST_PP_VARIADIC_ELEM_44
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, ...Ë
	)
e44

73 
	#BOOST_PP_VARIADIC_ELEM_45
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, ...Ë
	)
e45

74 
	#BOOST_PP_VARIADIC_ELEM_46
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, ...Ë
	)
e46

75 
	#BOOST_PP_VARIADIC_ELEM_47
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, ...Ë
	)
e47

76 
	#BOOST_PP_VARIADIC_ELEM_48
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, ...Ë
	)
e48

77 
	#BOOST_PP_VARIADIC_ELEM_49
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, ...Ë
	)
e49

78 
	#BOOST_PP_VARIADIC_ELEM_50
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, ...Ë
	)
e50

79 
	#BOOST_PP_VARIADIC_ELEM_51
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, ...Ë
	)
e51

80 
	#BOOST_PP_VARIADIC_ELEM_52
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, ...Ë
	)
e52

81 
	#BOOST_PP_VARIADIC_ELEM_53
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, ...Ë
	)
e53

82 
	#BOOST_PP_VARIADIC_ELEM_54
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, ...Ë
	)
e54

83 
	#BOOST_PP_VARIADIC_ELEM_55
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, ...Ë
	)
e55

84 
	#BOOST_PP_VARIADIC_ELEM_56
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, ...Ë
	)
e56

85 
	#BOOST_PP_VARIADIC_ELEM_57
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, ...Ë
	)
e57

86 
	#BOOST_PP_VARIADIC_ELEM_58
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, ...Ë
	)
e58

87 
	#BOOST_PP_VARIADIC_ELEM_59
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, ...Ë
	)
e59

88 
	#BOOST_PP_VARIADIC_ELEM_60
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, ...Ë
	)
e60

89 
	#BOOST_PP_VARIADIC_ELEM_61
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, ...Ë
	)
e61

90 
	#BOOST_PP_VARIADIC_ELEM_62
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, ...Ë
	)
e62

91 
	#BOOST_PP_VARIADIC_ELEM_63
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
, ...Ë
	)
e63

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/prctl.h

1 #i‚de‡
_LINUX_PRCTL_H


2 
	#_LINUX_PRCTL_H


	)

4 
	~<löux/ty≥s.h
>

8 
	#PR_SET_PDEATHSIG
 1

	)

9 
	#PR_GET_PDEATHSIG
 2

	)

12 
	#PR_GET_DUMPABLE
 3

	)

13 
	#PR_SET_DUMPABLE
 4

	)

16 
	#PR_GET_UNALIGN
 5

	)

17 
	#PR_SET_UNALIGN
 6

	)

18 
	#PR_UNALIGN_NOPRINT
 1

	)

19 
	#PR_UNALIGN_SIGBUS
 2

	)

23 
	#PR_GET_KEEPCAPS
 7

	)

24 
	#PR_SET_KEEPCAPS
 8

	)

27 
	#PR_GET_FPEMU
 9

	)

28 
	#PR_SET_FPEMU
 10

	)

29 
	#PR_FPEMU_NOPRINT
 1

	)

30 
	#PR_FPEMU_SIGFPE
 2

	)

33 
	#PR_GET_FPEXC
 11

	)

34 
	#PR_SET_FPEXC
 12

	)

35 
	#PR_FP_EXC_SW_ENABLE
 0x80

	)

36 
	#PR_FP_EXC_DIV
 0x010000

	)

37 
	#PR_FP_EXC_OVF
 0x020000

	)

38 
	#PR_FP_EXC_UND
 0x040000

	)

39 
	#PR_FP_EXC_RES
 0x080000

	)

40 
	#PR_FP_EXC_INV
 0x100000

	)

41 
	#PR_FP_EXC_DISABLED
 0

	)

42 
	#PR_FP_EXC_NONRECOV
 1

	)

43 
	#PR_FP_EXC_ASYNC
 2

	)

44 
	#PR_FP_EXC_PRECISE
 3

	)

48 
	#PR_GET_TIMING
 13

	)

49 
	#PR_SET_TIMING
 14

	)

50 
	#PR_TIMING_STATISTICAL
 0

	)

52 
	#PR_TIMING_TIMESTAMP
 1

	)

55 
	#PR_SET_NAME
 15

	)

56 
	#PR_GET_NAME
 16

	)

59 
	#PR_GET_ENDIAN
 19

	)

60 
	#PR_SET_ENDIAN
 20

	)

61 
	#PR_ENDIAN_BIG
 0

	)

62 
	#PR_ENDIAN_LITTLE
 1

	)

63 
	#PR_ENDIAN_PPC_LITTLE
 2

	)

66 
	#PR_GET_SECCOMP
 21

	)

67 
	#PR_SET_SECCOMP
 22

	)

70 
	#PR_CAPBSET_READ
 23

	)

71 
	#PR_CAPBSET_DROP
 24

	)

74 
	#PR_GET_TSC
 25

	)

75 
	#PR_SET_TSC
 26

	)

76 
	#PR_TSC_ENABLE
 1

	)

77 
	#PR_TSC_SIGSEGV
 2

	)

80 
	#PR_GET_SECUREBITS
 27

	)

81 
	#PR_SET_SECUREBITS
 28

	)

87 
	#PR_SET_TIMERSLACK
 29

	)

88 
	#PR_GET_TIMERSLACK
 30

	)

90 
	#PR_TASK_PERF_EVENTS_DISABLE
 31

	)

91 
	#PR_TASK_PERF_EVENTS_ENABLE
 32

	)

97 
	#PR_MCE_KILL
 33

	)

98 
	#PR_MCE_KILL_CLEAR
 0

	)

99 
	#PR_MCE_KILL_SET
 1

	)

101 
	#PR_MCE_KILL_LATE
 0

	)

102 
	#PR_MCE_KILL_EARLY
 1

	)

103 
	#PR_MCE_KILL_DEFAULT
 2

	)

105 
	#PR_MCE_KILL_GET
 34

	)

110 
	#PR_SET_MM
 35

	)

111 
	#PR_SET_MM_START_CODE
 1

	)

112 
	#PR_SET_MM_END_CODE
 2

	)

113 
	#PR_SET_MM_START_DATA
 3

	)

114 
	#PR_SET_MM_END_DATA
 4

	)

115 
	#PR_SET_MM_START_STACK
 5

	)

116 
	#PR_SET_MM_START_BRK
 6

	)

117 
	#PR_SET_MM_BRK
 7

	)

118 
	#PR_SET_MM_ARG_START
 8

	)

119 
	#PR_SET_MM_ARG_END
 9

	)

120 
	#PR_SET_MM_ENV_START
 10

	)

121 
	#PR_SET_MM_ENV_END
 11

	)

122 
	#PR_SET_MM_AUXV
 12

	)

123 
	#PR_SET_MM_EXE_FILE
 13

	)

124 
	#PR_SET_MM_MAP
 14

	)

125 
	#PR_SET_MM_MAP_SIZE
 15

	)

133 
	s¥˘l_mm_m≠
 {

134 
__u64
 
	m°¨t_code
;

135 
__u64
 
	míd_code
;

136 
__u64
 
	m°¨t_d©a
;

137 
__u64
 
	míd_d©a
;

138 
__u64
 
	m°¨t_brk
;

139 
__u64
 
	mbrk
;

140 
__u64
 
	m°¨t_°ack
;

141 
__u64
 
	m¨g_°¨t
;

142 
__u64
 
	m¨g_íd
;

143 
__u64
 
	mív_°¨t
;

144 
__u64
 
	mív_íd
;

145 
__u64
 *
	mauxv
;

146 
__u32
 
	mauxv_size
;

147 
__u32
 
	mexe_fd
;

154 
	#PR_SET_PTRACER
 0x59616d61

	)

155 
	#PR_SET_PTRACER_ANY
 (()-1)

	)

157 
	#PR_SET_CHILD_SUBREAPER
 36

	)

158 
	#PR_GET_CHILD_SUBREAPER
 37

	)

174 
	#PR_SET_NO_NEW_PRIVS
 38

	)

175 
	#PR_GET_NO_NEW_PRIVS
 39

	)

177 
	#PR_GET_TID_ADDRESS
 40

	)

179 
	#PR_SET_THP_DISABLE
 41

	)

180 
	#PR_GET_THP_DISABLE
 42

	)

185 
	#PR_MPX_ENABLE_MANAGEMENT
 43

	)

186 
	#PR_MPX_DISABLE_MANAGEMENT
 44

	)

188 
	#PR_SET_FP_MODE
 45

	)

189 
	#PR_GET_FP_MODE
 46

	)

190 
	#PR_FP_MODE_FR
 (1 << 0Ë

	)

191 
	#PR_FP_MODE_FRE
 (1 << 1Ë

	)

194 
	#PR_CAP_AMBIENT
 47

	)

195 
	#PR_CAP_AMBIENT_IS_SET
 1

	)

196 
	#PR_CAP_AMBIENT_RAISE
 2

	)

197 
	#PR_CAP_AMBIENT_LOWER
 3

	)

198 
	#PR_CAP_AMBIENT_CLEAR_ALL
 4

	)

201 
	#PR_GET_SPECULATION_CTRL
 52

	)

202 
	#PR_SET_SPECULATION_CTRL
 53

	)

204 
	#PR_SPEC_STORE_BYPASS
 0

	)

206 
	#PR_SPEC_NOT_AFFECTED
 0

	)

207 
	#PR_SPEC_PRCTL
 (1UL << 0)

	)

208 
	#PR_SPEC_ENABLE
 (1UL << 1)

	)

209 
	#PR_SPEC_DISABLE
 (1UL << 2)

	)

210 
	#PR_SPEC_FORCE_DISABLE
 (1UL << 3)

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

182 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

184 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

185 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

186 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

187 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

189 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

190 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

203 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

204 
	#__©åibuã__
(
xyz
Ë

	)

210 #i‡
__GNUC_PREREQ
 (2,96)

211 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

213 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (4, 3)

219 
	#__©åibuã_Æloc_size__
(
∑øms
) \

220 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

222 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

228 #i‡
__GNUC_PREREQ
 (2,96)

229 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

231 
	#__©åibuã_puª__


	)

235 #i‡
__GNUC_PREREQ
 (2,5)

236 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

238 
	#__©åibuã_c⁄°__


	)

244 #i‡
__GNUC_PREREQ
 (3,1)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

246 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

248 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

249 
	#__©åibuã_noölöe__


	)

253 #i‡
__GNUC_PREREQ
 (3,2)

254 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

256 
	#__©åibuã_dïªˇãd__


	)

265 #i‡
__GNUC_PREREQ
 (2,8)

266 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

268 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

275 #i‡
__GNUC_PREREQ
 (2,97)

276 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

277 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

279 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

284 #i‡
__GNUC_PREREQ
 (3,3)

285 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

287 
	#__n⁄nuŒ
(
∑øms
)

	)

292 #i‡
__GNUC_PREREQ
 (3,4)

293 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

294 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

295 #i‡
__USE_FORTIFY_LEVEL
 > 0

296 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

299 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

301 #i‚de‡
__wur


302 
	#__wur


	)

306 #i‡
__GNUC_PREREQ
 (3,2)

307 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

309 
	#__Æways_ölöe
 
__ölöe


	)

314 #i‡
__GNUC_PREREQ
 (4,3)

315 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

317 
	#__©åibuã_¨tificül__


	)

329 #i‡(!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

330 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

331 || 
deföed
 
__GNUC_GNU_INLINE__
)))

332 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


333 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

334 
	#__exã∫_Æways_ölöe
 \

335 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

337 
	#__exã∫_ölöe
 
__ölöe


	)

338 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #ifde‡
__exã∫_Æways_ölöe


343 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

348 #i‡
__GNUC_PREREQ
 (4,3)

349 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

350 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

357 #i‡!
__GNUC_PREREQ
 (2,8)

358 
	#__exãnsi⁄__


	)

362 #i‡!
__GNUC_PREREQ
 (2,92)

363 
	#__ª°ri˘


	)

369 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


370 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

372 #ifde‡
__GNUC__


373 
	#__ª°ri˘_¨r


	)

375 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

376 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

379 
	#__ª°ri˘_¨r


	)

384 #i‡
__GNUC__
 >= 3

385 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

386 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

388 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

389 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

392 #i‡(!
deföed
 
_N‹ëu∫
 \

393 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

394 && !
	$__GNUC_PREREQ
 (4,7))

395 #i‡
	`__GNUC_PREREQ
 (2,8)

396 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

398 
	#_N‹ëu∫


	)

402 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

403 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

404 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

405 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

406 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

407 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

410 
	~<bôs/w‹dsize.h
>

412 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


413 
	#__LDBL_COMPAT
 1

	)

414 #ifde‡
__REDIRECT


415 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

416 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

417 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

418 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

419 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

420 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

421 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

422 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

423 
	#__LDBL_REDIR_DECL
(
«me
) \

424 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

425 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

426 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

427 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

428 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

431 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


432 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

433 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

434 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

435 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

436 
	#__LDBL_REDIR_DECL
(
«me
)

	)

437 #ifde‡
__REDIRECT


438 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

439 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

440 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

25 
	#SO_REUSEPORT
 15

	)

26 #i‚de‡
SO_PASSCRED


27 
	#SO_PASSCRED
 16

	)

28 
	#SO_PEERCRED
 17

	)

29 
	#SO_RCVLOWAT
 18

	)

30 
	#SO_SNDLOWAT
 19

	)

31 
	#SO_RCVTIMEO
 20

	)

32 
	#SO_SNDTIMEO
 21

	)

36 
	#SO_SECURITY_AUTHENTICATION
 22

	)

37 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

38 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

40 
	#SO_BINDTODEVICE
 25

	)

43 
	#SO_ATTACH_FILTER
 26

	)

44 
	#SO_DETACH_FILTER
 27

	)

45 
	#SO_GET_FILTER
 
SO_ATTACH_FILTER


	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

68 
	#SO_WIFI_STATUS
 41

	)

69 
	#SCM_WIFI_STATUS
 
SO_WIFI_STATUS


	)

70 
	#SO_PEEK_OFF
 42

	)

73 
	#SO_NOFCS
 43

	)

75 
	#SO_LOCK_FILTER
 44

	)

77 
	#SO_SELECT_ERR_QUEUE
 45

	)

79 
	#SO_BUSY_POLL
 46

	)

81 
	#SO_MAX_PACING_RATE
 47

	)

83 
	#SO_BPF_EXTENSIONS
 48

	)

85 
	#SO_INCOMING_CPU
 49

	)

87 
	#SO_ATTACH_BPF
 50

	)

88 
	#SO_DETACH_BPF
 
SO_DETACH_FILTER


	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/boost/preprocessor/control/expr_iif.hpp

3 #* (
C
Ë
C›yright
 
Paul
 
Mís⁄ides
 2002.

4 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


5 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


6 #* 
hâp
:

9 #
#/* 
Sì
 
hâp
:

11 #
#i‚de‡
BOOST_PREPROCESSOR_CONTROL_EXPR_IIF_HPP


13 
	#BOOST_PREPROCESSOR_CONTROL_EXPR_IIF_HPP


	)

14 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

16 #
#/* 
BOOST_PP_EXPR_IIF
 */

18 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MWCC
()

20 
	#BOOST_PP_EXPR_IIF
(
bô
, 
ex¥
Ë
	`BOOST_PP_EXPR_IIF_I
(bô,Éx¥)

	)

22 
	#BOOST_PP_EXPR_IIF
(
bô
, 
ex¥
Ë
	`BOOST_PP_EXPR_IIF_OO
((bô,Éx¥))

	)

23 
	#BOOST_PP_EXPR_IIF_OO
(
∑r
Ë
BOOST_PP_EXPR_IIF_I
 ## 
	)
par

25 
#deföê
	#BOOST_PP_EXPR_IIF_I
(
bô
, 
ex¥
Ë
BOOST_PP_EXPR_IIF_
 ## 
	`bô
”x¥)

	)

27 
#deföê
	#BOOST_PP_EXPR_IIF_0
(
ex¥
)

	)

29 
	#BOOST_PP_EXPR_IIF_1
(
ex¥
Ë
	)
expr

	@/usr/include/boost/preprocessor/control/if.hpp

1 #/* 
C›yright
 (
C
) 2001

2 #* 
Hou£m¨que
 
Oy


3 #* 
hâp
:

5 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


6 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


7 #* 
hâp
:

9 #
#/* 
Revi£d
 
by
 
Paul
 
Mís⁄ides
 (2002) */

11 #
#/* 
Sì
 
hâp
:

13 #
#i‚de‡
BOOST_PREPROCESSOR_CONTROL_IF_HPP


15 
	#BOOST_PREPROCESSOR_CONTROL_IF_HPP


	)

16 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

18 
	~<boo°/¥ïro˚ss‹/c⁄åﬁ/iif.hµ
>

19 
	~<boo°/¥ïro˚ss‹/logiˇl/boﬁ.hµ
>

20 #
#/* 
BOOST_PP_IF
 */

22 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_EDG
()

24 
	#BOOST_PP_IF
(
c⁄d
, 
t
, 
f
Ë
	`BOOST_PP_IIF
(
	`BOOST_PP_BOOL
(c⁄d),Å, f)

	)

26 
	#BOOST_PP_IF
(
c⁄d
, 
t
, 
f
Ë
	`BOOST_PP_IF_I
(c⁄d,Å, f)

	)

27 
	#BOOST_PP_IF_I
(
c⁄d
, 
t
, 
f
Ë
	`BOOST_PP_IIF
(
	`BOOST_PP_BOOL
(c⁄d),Å, f)

	)

	@/usr/include/boost/preprocessor/control/iif.hpp

3 #* (
C
Ë
C›yright
 
Paul
 
Mís⁄ides
 2002.

4 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


5 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


6 #* 
hâp
:

9 #
#/* 
Sì
 
hâp
:

11 #
#i‚de‡
BOOST_PREPROCESSOR_CONTROL_IIF_HPP


13 
	#BOOST_PREPROCESSOR_CONTROL_IIF_HPP


	)

14 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

16 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MWCC
()

18 
	#BOOST_PP_IIF
(
bô
, 
t
, 
f
Ë
	`BOOST_PP_IIF_I
(bô,Å, f)

	)

20 
	#BOOST_PP_IIF
(
bô
, 
t
, 
f
Ë
	`BOOST_PP_IIF_OO
((bô,Å, f))

	)

21 
	#BOOST_PP_IIF_OO
(
∑r
Ë
BOOST_PP_IIF_I
 ## 
	)
par

23 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MSVC
()

25 
	#BOOST_PP_IIF_I
(
bô
, 
t
, 
f
Ë
BOOST_PP_IIF_
 ## 
	`bô
—, f)

	)

27 
	#BOOST_PP_IIF_I
(
bô
, 
t
, 
f
Ë
	`BOOST_PP_IIF_II
(
BOOST_PP_IIF_
 ## 
	`bô
—, f))

	)

28 
	#BOOST_PP_IIF_II
(
id
Ë
	)
id

30 
#deföê
	#BOOST_PP_IIF_0
(
t
, 
f
Ë
	)
f

32 
	#BOOST_PP_IIF_1
(
t
, 
f
Ë
	)
t

	@/usr/include/boost/preprocessor/detail/dmc/auto_rec.hpp

3 #* (
C
Ë
C›yright
 
Paul
 
Mís⁄ides
 2002.

4 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


5 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


6 #* 
hâp
:

9 #
#/* 
Sì
 
hâp
:

11 #
#i‚de‡
BOOST_PREPROCESSOR_DETAIL_AUTO_REC_HPP


13 
	#BOOST_PREPROCESSOR_DETAIL_AUTO_REC_HPP


	)

14 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄åﬁ/iif.hµ
>

16 #
#/* 
BOOST_PP_AUTO_REC
 */

18 
#deföê
	#BOOST_PP_AUTO_REC
(
¥ed
, 
n
Ë
BOOST_PP_NODE_ENTRY_
 ## 
	`n
’ªd)

	)

20 
#deföê
	#BOOST_PP_NODE_ENTRY_256
(
p
Ë
	`BOOST_PP_NODE_128
’)’)’)’)’)’)’)’)

	)

22 
	#BOOST_PP_NODE_ENTRY_128
(
p
Ë
	`BOOST_PP_NODE_64
’)’)’)’)’)’)’)

	)

23 
	#BOOST_PP_NODE_ENTRY_64
(
p
Ë
	`BOOST_PP_NODE_32
’)’)’)’)’)’)

	)

24 
	#BOOST_PP_NODE_ENTRY_32
(
p
Ë
	`BOOST_PP_NODE_16
’)’)’)’)’)

	)

25 
	#BOOST_PP_NODE_ENTRY_16
(
p
Ë
	`BOOST_PP_NODE_8
’)’)’)’)

	)

26 
	#BOOST_PP_NODE_ENTRY_8
(
p
Ë
	`BOOST_PP_NODE_4
’)’)’)

	)

27 
	#BOOST_PP_NODE_ENTRY_4
(
p
Ë
	`BOOST_PP_NODE_2
’)’)

	)

28 
	#BOOST_PP_NODE_ENTRY_2
(
p
Ë
	`BOOST_PP_NODE_1
’)

	)

29 
#deföê
	#BOOST_PP_NODE_128
(
p
Ë
	`BOOST_PP_IIF
’##(128), 
BOOST_PP_NODE_64
, 
BOOST_PP_NODE_192
)

	)

31 
	#BOOST_PP_NODE_64
(
p
Ë
	`BOOST_PP_IIF
’##(64), 
BOOST_PP_NODE_32
, 
BOOST_PP_NODE_96
)

	)

32 
	#BOOST_PP_NODE_32
(
p
Ë
	`BOOST_PP_IIF
’##(32), 
BOOST_PP_NODE_16
, 
BOOST_PP_NODE_48
)

	)

33 
	#BOOST_PP_NODE_16
(
p
Ë
	`BOOST_PP_IIF
’##(16), 
BOOST_PP_NODE_8
, 
BOOST_PP_NODE_24
)

	)

34 
	#BOOST_PP_NODE_8
(
p
Ë
	`BOOST_PP_IIF
’##(8), 
BOOST_PP_NODE_4
, 
BOOST_PP_NODE_12
)

	)

35 
	#BOOST_PP_NODE_4
(
p
Ë
	`BOOST_PP_IIF
’##(4), 
BOOST_PP_NODE_2
, 
BOOST_PP_NODE_6
)

	)

36 
	#BOOST_PP_NODE_2
(
p
Ë
	`BOOST_PP_IIF
’##(2), 
BOOST_PP_NODE_1
, 
BOOST_PP_NODE_3
)

	)

37 
	#BOOST_PP_NODE_1
(
p
Ë
	`BOOST_PP_IIF
’##(1), 1, 2)

	)

38 
	#BOOST_PP_NODE_3
(
p
Ë
	`BOOST_PP_IIF
’##(3), 3, 4)

	)

39 
	#BOOST_PP_NODE_6
(
p
Ë
	`BOOST_PP_IIF
’##(6), 
BOOST_PP_NODE_5
, 
BOOST_PP_NODE_7
)

	)

40 
	#BOOST_PP_NODE_5
(
p
Ë
	`BOOST_PP_IIF
’##(5), 5, 6)

	)

41 
	#BOOST_PP_NODE_7
(
p
Ë
	`BOOST_PP_IIF
’##(7), 7, 8)

	)

42 
	#BOOST_PP_NODE_12
(
p
Ë
	`BOOST_PP_IIF
’##(12), 
BOOST_PP_NODE_10
, 
BOOST_PP_NODE_14
)

	)

43 
	#BOOST_PP_NODE_10
(
p
Ë
	`BOOST_PP_IIF
’##(10), 
BOOST_PP_NODE_9
, 
BOOST_PP_NODE_11
)

	)

44 
	#BOOST_PP_NODE_9
(
p
Ë
	`BOOST_PP_IIF
’##(9), 9, 10)

	)

45 
	#BOOST_PP_NODE_11
(
p
Ë
	`BOOST_PP_IIF
’##(11), 11, 12)

	)

46 
	#BOOST_PP_NODE_14
(
p
Ë
	`BOOST_PP_IIF
’##(14), 
BOOST_PP_NODE_13
, 
BOOST_PP_NODE_15
)

	)

47 
	#BOOST_PP_NODE_13
(
p
Ë
	`BOOST_PP_IIF
’##(13), 13, 14)

	)

48 
	#BOOST_PP_NODE_15
(
p
Ë
	`BOOST_PP_IIF
’##(15), 15, 16)

	)

49 
	#BOOST_PP_NODE_24
(
p
Ë
	`BOOST_PP_IIF
’##(24), 
BOOST_PP_NODE_20
, 
BOOST_PP_NODE_28
)

	)

50 
	#BOOST_PP_NODE_20
(
p
Ë
	`BOOST_PP_IIF
’##(20), 
BOOST_PP_NODE_18
, 
BOOST_PP_NODE_22
)

	)

51 
	#BOOST_PP_NODE_18
(
p
Ë
	`BOOST_PP_IIF
’##(18), 
BOOST_PP_NODE_17
, 
BOOST_PP_NODE_19
)

	)

52 
	#BOOST_PP_NODE_17
(
p
Ë
	`BOOST_PP_IIF
’##(17), 17, 18)

	)

53 
	#BOOST_PP_NODE_19
(
p
Ë
	`BOOST_PP_IIF
’##(19), 19, 20)

	)

54 
	#BOOST_PP_NODE_22
(
p
Ë
	`BOOST_PP_IIF
’##(22), 
BOOST_PP_NODE_21
, 
BOOST_PP_NODE_23
)

	)

55 
	#BOOST_PP_NODE_21
(
p
Ë
	`BOOST_PP_IIF
’##(21), 21, 22)

	)

56 
	#BOOST_PP_NODE_23
(
p
Ë
	`BOOST_PP_IIF
’##(23), 23, 24)

	)

57 
	#BOOST_PP_NODE_28
(
p
Ë
	`BOOST_PP_IIF
’##(28), 
BOOST_PP_NODE_26
, 
BOOST_PP_NODE_30
)

	)

58 
	#BOOST_PP_NODE_26
(
p
Ë
	`BOOST_PP_IIF
’##(26), 
BOOST_PP_NODE_25
, 
BOOST_PP_NODE_27
)

	)

59 
	#BOOST_PP_NODE_25
(
p
Ë
	`BOOST_PP_IIF
’##(25), 25, 26)

	)

60 
	#BOOST_PP_NODE_27
(
p
Ë
	`BOOST_PP_IIF
’##(27), 27, 28)

	)

61 
	#BOOST_PP_NODE_30
(
p
Ë
	`BOOST_PP_IIF
’##(30), 
BOOST_PP_NODE_29
, 
BOOST_PP_NODE_31
)

	)

62 
	#BOOST_PP_NODE_29
(
p
Ë
	`BOOST_PP_IIF
’##(29), 29, 30)

	)

63 
	#BOOST_PP_NODE_31
(
p
Ë
	`BOOST_PP_IIF
’##(31), 31, 32)

	)

64 
	#BOOST_PP_NODE_48
(
p
Ë
	`BOOST_PP_IIF
’##(48), 
BOOST_PP_NODE_40
, 
BOOST_PP_NODE_56
)

	)

65 
	#BOOST_PP_NODE_40
(
p
Ë
	`BOOST_PP_IIF
’##(40), 
BOOST_PP_NODE_36
, 
BOOST_PP_NODE_44
)

	)

66 
	#BOOST_PP_NODE_36
(
p
Ë
	`BOOST_PP_IIF
’##(36), 
BOOST_PP_NODE_34
, 
BOOST_PP_NODE_38
)

	)

67 
	#BOOST_PP_NODE_34
(
p
Ë
	`BOOST_PP_IIF
’##(34), 
BOOST_PP_NODE_33
, 
BOOST_PP_NODE_35
)

	)

68 
	#BOOST_PP_NODE_33
(
p
Ë
	`BOOST_PP_IIF
’##(33), 33, 34)

	)

69 
	#BOOST_PP_NODE_35
(
p
Ë
	`BOOST_PP_IIF
’##(35), 35, 36)

	)

70 
	#BOOST_PP_NODE_38
(
p
Ë
	`BOOST_PP_IIF
’##(38), 
BOOST_PP_NODE_37
, 
BOOST_PP_NODE_39
)

	)

71 
	#BOOST_PP_NODE_37
(
p
Ë
	`BOOST_PP_IIF
’##(37), 37, 38)

	)

72 
	#BOOST_PP_NODE_39
(
p
Ë
	`BOOST_PP_IIF
’##(39), 39, 40)

	)

73 
	#BOOST_PP_NODE_44
(
p
Ë
	`BOOST_PP_IIF
’##(44), 
BOOST_PP_NODE_42
, 
BOOST_PP_NODE_46
)

	)

74 
	#BOOST_PP_NODE_42
(
p
Ë
	`BOOST_PP_IIF
’##(42), 
BOOST_PP_NODE_41
, 
BOOST_PP_NODE_43
)

	)

75 
	#BOOST_PP_NODE_41
(
p
Ë
	`BOOST_PP_IIF
’##(41), 41, 42)

	)

76 
	#BOOST_PP_NODE_43
(
p
Ë
	`BOOST_PP_IIF
’##(43), 43, 44)

	)

77 
	#BOOST_PP_NODE_46
(
p
Ë
	`BOOST_PP_IIF
’##(46), 
BOOST_PP_NODE_45
, 
BOOST_PP_NODE_47
)

	)

78 
	#BOOST_PP_NODE_45
(
p
Ë
	`BOOST_PP_IIF
’##(45), 45, 46)

	)

79 
	#BOOST_PP_NODE_47
(
p
Ë
	`BOOST_PP_IIF
’##(47), 47, 48)

	)

80 
	#BOOST_PP_NODE_56
(
p
Ë
	`BOOST_PP_IIF
’##(56), 
BOOST_PP_NODE_52
, 
BOOST_PP_NODE_60
)

	)

81 
	#BOOST_PP_NODE_52
(
p
Ë
	`BOOST_PP_IIF
’##(52), 
BOOST_PP_NODE_50
, 
BOOST_PP_NODE_54
)

	)

82 
	#BOOST_PP_NODE_50
(
p
Ë
	`BOOST_PP_IIF
’##(50), 
BOOST_PP_NODE_49
, 
BOOST_PP_NODE_51
)

	)

83 
	#BOOST_PP_NODE_49
(
p
Ë
	`BOOST_PP_IIF
’##(49), 49, 50)

	)

84 
	#BOOST_PP_NODE_51
(
p
Ë
	`BOOST_PP_IIF
’##(51), 51, 52)

	)

85 
	#BOOST_PP_NODE_54
(
p
Ë
	`BOOST_PP_IIF
’##(54), 
BOOST_PP_NODE_53
, 
BOOST_PP_NODE_55
)

	)

86 
	#BOOST_PP_NODE_53
(
p
Ë
	`BOOST_PP_IIF
’##(53), 53, 54)

	)

87 
	#BOOST_PP_NODE_55
(
p
Ë
	`BOOST_PP_IIF
’##(55), 55, 56)

	)

88 
	#BOOST_PP_NODE_60
(
p
Ë
	`BOOST_PP_IIF
’##(60), 
BOOST_PP_NODE_58
, 
BOOST_PP_NODE_62
)

	)

89 
	#BOOST_PP_NODE_58
(
p
Ë
	`BOOST_PP_IIF
’##(58), 
BOOST_PP_NODE_57
, 
BOOST_PP_NODE_59
)

	)

90 
	#BOOST_PP_NODE_57
(
p
Ë
	`BOOST_PP_IIF
’##(57), 57, 58)

	)

91 
	#BOOST_PP_NODE_59
(
p
Ë
	`BOOST_PP_IIF
’##(59), 59, 60)

	)

92 
	#BOOST_PP_NODE_62
(
p
Ë
	`BOOST_PP_IIF
’##(62), 
BOOST_PP_NODE_61
, 
BOOST_PP_NODE_63
)

	)

93 
	#BOOST_PP_NODE_61
(
p
Ë
	`BOOST_PP_IIF
’##(61), 61, 62)

	)

94 
	#BOOST_PP_NODE_63
(
p
Ë
	`BOOST_PP_IIF
’##(63), 63, 64)

	)

95 
	#BOOST_PP_NODE_96
(
p
Ë
	`BOOST_PP_IIF
’##(96), 
BOOST_PP_NODE_80
, 
BOOST_PP_NODE_112
)

	)

96 
	#BOOST_PP_NODE_80
(
p
Ë
	`BOOST_PP_IIF
’##(80), 
BOOST_PP_NODE_72
, 
BOOST_PP_NODE_88
)

	)

97 
	#BOOST_PP_NODE_72
(
p
Ë
	`BOOST_PP_IIF
’##(72), 
BOOST_PP_NODE_68
, 
BOOST_PP_NODE_76
)

	)

98 
	#BOOST_PP_NODE_68
(
p
Ë
	`BOOST_PP_IIF
’##(68), 
BOOST_PP_NODE_66
, 
BOOST_PP_NODE_70
)

	)

99 
	#BOOST_PP_NODE_66
(
p
Ë
	`BOOST_PP_IIF
’##(66), 
BOOST_PP_NODE_65
, 
BOOST_PP_NODE_67
)

	)

100 
	#BOOST_PP_NODE_65
(
p
Ë
	`BOOST_PP_IIF
’##(65), 65, 66)

	)

101 
	#BOOST_PP_NODE_67
(
p
Ë
	`BOOST_PP_IIF
’##(67), 67, 68)

	)

102 
	#BOOST_PP_NODE_70
(
p
Ë
	`BOOST_PP_IIF
’##(70), 
BOOST_PP_NODE_69
, 
BOOST_PP_NODE_71
)

	)

103 
	#BOOST_PP_NODE_69
(
p
Ë
	`BOOST_PP_IIF
’##(69), 69, 70)

	)

104 
	#BOOST_PP_NODE_71
(
p
Ë
	`BOOST_PP_IIF
’##(71), 71, 72)

	)

105 
	#BOOST_PP_NODE_76
(
p
Ë
	`BOOST_PP_IIF
’##(76), 
BOOST_PP_NODE_74
, 
BOOST_PP_NODE_78
)

	)

106 
	#BOOST_PP_NODE_74
(
p
Ë
	`BOOST_PP_IIF
’##(74), 
BOOST_PP_NODE_73
, 
BOOST_PP_NODE_75
)

	)

107 
	#BOOST_PP_NODE_73
(
p
Ë
	`BOOST_PP_IIF
’##(73), 73, 74)

	)

108 
	#BOOST_PP_NODE_75
(
p
Ë
	`BOOST_PP_IIF
’##(75), 75, 76)

	)

109 
	#BOOST_PP_NODE_78
(
p
Ë
	`BOOST_PP_IIF
’##(78), 
BOOST_PP_NODE_77
, 
BOOST_PP_NODE_79
)

	)

110 
	#BOOST_PP_NODE_77
(
p
Ë
	`BOOST_PP_IIF
’##(77), 77, 78)

	)

111 
	#BOOST_PP_NODE_79
(
p
Ë
	`BOOST_PP_IIF
’##(79), 79, 80)

	)

112 
	#BOOST_PP_NODE_88
(
p
Ë
	`BOOST_PP_IIF
’##(88), 
BOOST_PP_NODE_84
, 
BOOST_PP_NODE_92
)

	)

113 
	#BOOST_PP_NODE_84
(
p
Ë
	`BOOST_PP_IIF
’##(84), 
BOOST_PP_NODE_82
, 
BOOST_PP_NODE_86
)

	)

114 
	#BOOST_PP_NODE_82
(
p
Ë
	`BOOST_PP_IIF
’##(82), 
BOOST_PP_NODE_81
, 
BOOST_PP_NODE_83
)

	)

115 
	#BOOST_PP_NODE_81
(
p
Ë
	`BOOST_PP_IIF
’##(81), 81, 82)

	)

116 
	#BOOST_PP_NODE_83
(
p
Ë
	`BOOST_PP_IIF
’##(83), 83, 84)

	)

117 
	#BOOST_PP_NODE_86
(
p
Ë
	`BOOST_PP_IIF
’##(86), 
BOOST_PP_NODE_85
, 
BOOST_PP_NODE_87
)

	)

118 
	#BOOST_PP_NODE_85
(
p
Ë
	`BOOST_PP_IIF
’##(85), 85, 86)

	)

119 
	#BOOST_PP_NODE_87
(
p
Ë
	`BOOST_PP_IIF
’##(87), 87, 88)

	)

120 
	#BOOST_PP_NODE_92
(
p
Ë
	`BOOST_PP_IIF
’##(92), 
BOOST_PP_NODE_90
, 
BOOST_PP_NODE_94
)

	)

121 
	#BOOST_PP_NODE_90
(
p
Ë
	`BOOST_PP_IIF
’##(90), 
BOOST_PP_NODE_89
, 
BOOST_PP_NODE_91
)

	)

122 
	#BOOST_PP_NODE_89
(
p
Ë
	`BOOST_PP_IIF
’##(89), 89, 90)

	)

123 
	#BOOST_PP_NODE_91
(
p
Ë
	`BOOST_PP_IIF
’##(91), 91, 92)

	)

124 
	#BOOST_PP_NODE_94
(
p
Ë
	`BOOST_PP_IIF
’##(94), 
BOOST_PP_NODE_93
, 
BOOST_PP_NODE_95
)

	)

125 
	#BOOST_PP_NODE_93
(
p
Ë
	`BOOST_PP_IIF
’##(93), 93, 94)

	)

126 
	#BOOST_PP_NODE_95
(
p
Ë
	`BOOST_PP_IIF
’##(95), 95, 96)

	)

127 
	#BOOST_PP_NODE_112
(
p
Ë
	`BOOST_PP_IIF
’##(112), 
BOOST_PP_NODE_104
, 
BOOST_PP_NODE_120
)

	)

128 
	#BOOST_PP_NODE_104
(
p
Ë
	`BOOST_PP_IIF
’##(104), 
BOOST_PP_NODE_100
, 
BOOST_PP_NODE_108
)

	)

129 
	#BOOST_PP_NODE_100
(
p
Ë
	`BOOST_PP_IIF
’##(100), 
BOOST_PP_NODE_98
, 
BOOST_PP_NODE_102
)

	)

130 
	#BOOST_PP_NODE_98
(
p
Ë
	`BOOST_PP_IIF
’##(98), 
BOOST_PP_NODE_97
, 
BOOST_PP_NODE_99
)

	)

131 
	#BOOST_PP_NODE_97
(
p
Ë
	`BOOST_PP_IIF
’##(97), 97, 98)

	)

132 
	#BOOST_PP_NODE_99
(
p
Ë
	`BOOST_PP_IIF
’##(99), 99, 100)

	)

133 
	#BOOST_PP_NODE_102
(
p
Ë
	`BOOST_PP_IIF
’##(102), 
BOOST_PP_NODE_101
, 
BOOST_PP_NODE_103
)

	)

134 
	#BOOST_PP_NODE_101
(
p
Ë
	`BOOST_PP_IIF
’##(101), 101, 102)

	)

135 
	#BOOST_PP_NODE_103
(
p
Ë
	`BOOST_PP_IIF
’##(103), 103, 104)

	)

136 
	#BOOST_PP_NODE_108
(
p
Ë
	`BOOST_PP_IIF
’##(108), 
BOOST_PP_NODE_106
, 
BOOST_PP_NODE_110
)

	)

137 
	#BOOST_PP_NODE_106
(
p
Ë
	`BOOST_PP_IIF
’##(106), 
BOOST_PP_NODE_105
, 
BOOST_PP_NODE_107
)

	)

138 
	#BOOST_PP_NODE_105
(
p
Ë
	`BOOST_PP_IIF
’##(105), 105, 106)

	)

139 
	#BOOST_PP_NODE_107
(
p
Ë
	`BOOST_PP_IIF
’##(107), 107, 108)

	)

140 
	#BOOST_PP_NODE_110
(
p
Ë
	`BOOST_PP_IIF
’##(110), 
BOOST_PP_NODE_109
, 
BOOST_PP_NODE_111
)

	)

141 
	#BOOST_PP_NODE_109
(
p
Ë
	`BOOST_PP_IIF
’##(109), 109, 110)

	)

142 
	#BOOST_PP_NODE_111
(
p
Ë
	`BOOST_PP_IIF
’##(111), 111, 112)

	)

143 
	#BOOST_PP_NODE_120
(
p
Ë
	`BOOST_PP_IIF
’##(120), 
BOOST_PP_NODE_116
, 
BOOST_PP_NODE_124
)

	)

144 
	#BOOST_PP_NODE_116
(
p
Ë
	`BOOST_PP_IIF
’##(116), 
BOOST_PP_NODE_114
, 
BOOST_PP_NODE_118
)

	)

145 
	#BOOST_PP_NODE_114
(
p
Ë
	`BOOST_PP_IIF
’##(114), 
BOOST_PP_NODE_113
, 
BOOST_PP_NODE_115
)

	)

146 
	#BOOST_PP_NODE_113
(
p
Ë
	`BOOST_PP_IIF
’##(113), 113, 114)

	)

147 
	#BOOST_PP_NODE_115
(
p
Ë
	`BOOST_PP_IIF
’##(115), 115, 116)

	)

148 
	#BOOST_PP_NODE_118
(
p
Ë
	`BOOST_PP_IIF
’##(118), 
BOOST_PP_NODE_117
, 
BOOST_PP_NODE_119
)

	)

149 
	#BOOST_PP_NODE_117
(
p
Ë
	`BOOST_PP_IIF
’##(117), 117, 118)

	)

150 
	#BOOST_PP_NODE_119
(
p
Ë
	`BOOST_PP_IIF
’##(119), 119, 120)

	)

151 
	#BOOST_PP_NODE_124
(
p
Ë
	`BOOST_PP_IIF
’##(124), 
BOOST_PP_NODE_122
, 
BOOST_PP_NODE_126
)

	)

152 
	#BOOST_PP_NODE_122
(
p
Ë
	`BOOST_PP_IIF
’##(122), 
BOOST_PP_NODE_121
, 
BOOST_PP_NODE_123
)

	)

153 
	#BOOST_PP_NODE_121
(
p
Ë
	`BOOST_PP_IIF
’##(121), 121, 122)

	)

154 
	#BOOST_PP_NODE_123
(
p
Ë
	`BOOST_PP_IIF
’##(123), 123, 124)

	)

155 
	#BOOST_PP_NODE_126
(
p
Ë
	`BOOST_PP_IIF
’##(126), 
BOOST_PP_NODE_125
, 
BOOST_PP_NODE_127
)

	)

156 
	#BOOST_PP_NODE_125
(
p
Ë
	`BOOST_PP_IIF
’##(125), 125, 126)

	)

157 
	#BOOST_PP_NODE_127
(
p
Ë
	`BOOST_PP_IIF
’##(127), 127, 128)

	)

158 
	#BOOST_PP_NODE_192
(
p
Ë
	`BOOST_PP_IIF
’##(192), 
BOOST_PP_NODE_160
, 
BOOST_PP_NODE_224
)

	)

159 
	#BOOST_PP_NODE_160
(
p
Ë
	`BOOST_PP_IIF
’##(160), 
BOOST_PP_NODE_144
, 
BOOST_PP_NODE_176
)

	)

160 
	#BOOST_PP_NODE_144
(
p
Ë
	`BOOST_PP_IIF
’##(144), 
BOOST_PP_NODE_136
, 
BOOST_PP_NODE_152
)

	)

161 
	#BOOST_PP_NODE_136
(
p
Ë
	`BOOST_PP_IIF
’##(136), 
BOOST_PP_NODE_132
, 
BOOST_PP_NODE_140
)

	)

162 
	#BOOST_PP_NODE_132
(
p
Ë
	`BOOST_PP_IIF
’##(132), 
BOOST_PP_NODE_130
, 
BOOST_PP_NODE_134
)

	)

163 
	#BOOST_PP_NODE_130
(
p
Ë
	`BOOST_PP_IIF
’##(130), 
BOOST_PP_NODE_129
, 
BOOST_PP_NODE_131
)

	)

164 
	#BOOST_PP_NODE_129
(
p
Ë
	`BOOST_PP_IIF
’##(129), 129, 130)

	)

165 
	#BOOST_PP_NODE_131
(
p
Ë
	`BOOST_PP_IIF
’##(131), 131, 132)

	)

166 
	#BOOST_PP_NODE_134
(
p
Ë
	`BOOST_PP_IIF
’##(134), 
BOOST_PP_NODE_133
, 
BOOST_PP_NODE_135
)

	)

167 
	#BOOST_PP_NODE_133
(
p
Ë
	`BOOST_PP_IIF
’##(133), 133, 134)

	)

168 
	#BOOST_PP_NODE_135
(
p
Ë
	`BOOST_PP_IIF
’##(135), 135, 136)

	)

169 
	#BOOST_PP_NODE_140
(
p
Ë
	`BOOST_PP_IIF
’##(140), 
BOOST_PP_NODE_138
, 
BOOST_PP_NODE_142
)

	)

170 
	#BOOST_PP_NODE_138
(
p
Ë
	`BOOST_PP_IIF
’##(138), 
BOOST_PP_NODE_137
, 
BOOST_PP_NODE_139
)

	)

171 
	#BOOST_PP_NODE_137
(
p
Ë
	`BOOST_PP_IIF
’##(137), 137, 138)

	)

172 
	#BOOST_PP_NODE_139
(
p
Ë
	`BOOST_PP_IIF
’##(139), 139, 140)

	)

173 
	#BOOST_PP_NODE_142
(
p
Ë
	`BOOST_PP_IIF
’##(142), 
BOOST_PP_NODE_141
, 
BOOST_PP_NODE_143
)

	)

174 
	#BOOST_PP_NODE_141
(
p
Ë
	`BOOST_PP_IIF
’##(141), 141, 142)

	)

175 
	#BOOST_PP_NODE_143
(
p
Ë
	`BOOST_PP_IIF
’##(143), 143, 144)

	)

176 
	#BOOST_PP_NODE_152
(
p
Ë
	`BOOST_PP_IIF
’##(152), 
BOOST_PP_NODE_148
, 
BOOST_PP_NODE_156
)

	)

177 
	#BOOST_PP_NODE_148
(
p
Ë
	`BOOST_PP_IIF
’##(148), 
BOOST_PP_NODE_146
, 
BOOST_PP_NODE_150
)

	)

178 
	#BOOST_PP_NODE_146
(
p
Ë
	`BOOST_PP_IIF
’##(146), 
BOOST_PP_NODE_145
, 
BOOST_PP_NODE_147
)

	)

179 
	#BOOST_PP_NODE_145
(
p
Ë
	`BOOST_PP_IIF
’##(145), 145, 146)

	)

180 
	#BOOST_PP_NODE_147
(
p
Ë
	`BOOST_PP_IIF
’##(147), 147, 148)

	)

181 
	#BOOST_PP_NODE_150
(
p
Ë
	`BOOST_PP_IIF
’##(150), 
BOOST_PP_NODE_149
, 
BOOST_PP_NODE_151
)

	)

182 
	#BOOST_PP_NODE_149
(
p
Ë
	`BOOST_PP_IIF
’##(149), 149, 150)

	)

183 
	#BOOST_PP_NODE_151
(
p
Ë
	`BOOST_PP_IIF
’##(151), 151, 152)

	)

184 
	#BOOST_PP_NODE_156
(
p
Ë
	`BOOST_PP_IIF
’##(156), 
BOOST_PP_NODE_154
, 
BOOST_PP_NODE_158
)

	)

185 
	#BOOST_PP_NODE_154
(
p
Ë
	`BOOST_PP_IIF
’##(154), 
BOOST_PP_NODE_153
, 
BOOST_PP_NODE_155
)

	)

186 
	#BOOST_PP_NODE_153
(
p
Ë
	`BOOST_PP_IIF
’##(153), 153, 154)

	)

187 
	#BOOST_PP_NODE_155
(
p
Ë
	`BOOST_PP_IIF
’##(155), 155, 156)

	)

188 
	#BOOST_PP_NODE_158
(
p
Ë
	`BOOST_PP_IIF
’##(158), 
BOOST_PP_NODE_157
, 
BOOST_PP_NODE_159
)

	)

189 
	#BOOST_PP_NODE_157
(
p
Ë
	`BOOST_PP_IIF
’##(157), 157, 158)

	)

190 
	#BOOST_PP_NODE_159
(
p
Ë
	`BOOST_PP_IIF
’##(159), 159, 160)

	)

191 
	#BOOST_PP_NODE_176
(
p
Ë
	`BOOST_PP_IIF
’##(176), 
BOOST_PP_NODE_168
, 
BOOST_PP_NODE_184
)

	)

192 
	#BOOST_PP_NODE_168
(
p
Ë
	`BOOST_PP_IIF
’##(168), 
BOOST_PP_NODE_164
, 
BOOST_PP_NODE_172
)

	)

193 
	#BOOST_PP_NODE_164
(
p
Ë
	`BOOST_PP_IIF
’##(164), 
BOOST_PP_NODE_162
, 
BOOST_PP_NODE_166
)

	)

194 
	#BOOST_PP_NODE_162
(
p
Ë
	`BOOST_PP_IIF
’##(162), 
BOOST_PP_NODE_161
, 
BOOST_PP_NODE_163
)

	)

195 
	#BOOST_PP_NODE_161
(
p
Ë
	`BOOST_PP_IIF
’##(161), 161, 162)

	)

196 
	#BOOST_PP_NODE_163
(
p
Ë
	`BOOST_PP_IIF
’##(163), 163, 164)

	)

197 
	#BOOST_PP_NODE_166
(
p
Ë
	`BOOST_PP_IIF
’##(166), 
BOOST_PP_NODE_165
, 
BOOST_PP_NODE_167
)

	)

198 
	#BOOST_PP_NODE_165
(
p
Ë
	`BOOST_PP_IIF
’##(165), 165, 166)

	)

199 
	#BOOST_PP_NODE_167
(
p
Ë
	`BOOST_PP_IIF
’##(167), 167, 168)

	)

200 
	#BOOST_PP_NODE_172
(
p
Ë
	`BOOST_PP_IIF
’##(172), 
BOOST_PP_NODE_170
, 
BOOST_PP_NODE_174
)

	)

201 
	#BOOST_PP_NODE_170
(
p
Ë
	`BOOST_PP_IIF
’##(170), 
BOOST_PP_NODE_169
, 
BOOST_PP_NODE_171
)

	)

202 
	#BOOST_PP_NODE_169
(
p
Ë
	`BOOST_PP_IIF
’##(169), 169, 170)

	)

203 
	#BOOST_PP_NODE_171
(
p
Ë
	`BOOST_PP_IIF
’##(171), 171, 172)

	)

204 
	#BOOST_PP_NODE_174
(
p
Ë
	`BOOST_PP_IIF
’##(174), 
BOOST_PP_NODE_173
, 
BOOST_PP_NODE_175
)

	)

205 
	#BOOST_PP_NODE_173
(
p
Ë
	`BOOST_PP_IIF
’##(173), 173, 174)

	)

206 
	#BOOST_PP_NODE_175
(
p
Ë
	`BOOST_PP_IIF
’##(175), 175, 176)

	)

207 
	#BOOST_PP_NODE_184
(
p
Ë
	`BOOST_PP_IIF
’##(184), 
BOOST_PP_NODE_180
, 
BOOST_PP_NODE_188
)

	)

208 
	#BOOST_PP_NODE_180
(
p
Ë
	`BOOST_PP_IIF
’##(180), 
BOOST_PP_NODE_178
, 
BOOST_PP_NODE_182
)

	)

209 
	#BOOST_PP_NODE_178
(
p
Ë
	`BOOST_PP_IIF
’##(178), 
BOOST_PP_NODE_177
, 
BOOST_PP_NODE_179
)

	)

210 
	#BOOST_PP_NODE_177
(
p
Ë
	`BOOST_PP_IIF
’##(177), 177, 178)

	)

211 
	#BOOST_PP_NODE_179
(
p
Ë
	`BOOST_PP_IIF
’##(179), 179, 180)

	)

212 
	#BOOST_PP_NODE_182
(
p
Ë
	`BOOST_PP_IIF
’##(182), 
BOOST_PP_NODE_181
, 
BOOST_PP_NODE_183
)

	)

213 
	#BOOST_PP_NODE_181
(
p
Ë
	`BOOST_PP_IIF
’##(181), 181, 182)

	)

214 
	#BOOST_PP_NODE_183
(
p
Ë
	`BOOST_PP_IIF
’##(183), 183, 184)

	)

215 
	#BOOST_PP_NODE_188
(
p
Ë
	`BOOST_PP_IIF
’##(188), 
BOOST_PP_NODE_186
, 
BOOST_PP_NODE_190
)

	)

216 
	#BOOST_PP_NODE_186
(
p
Ë
	`BOOST_PP_IIF
’##(186), 
BOOST_PP_NODE_185
, 
BOOST_PP_NODE_187
)

	)

217 
	#BOOST_PP_NODE_185
(
p
Ë
	`BOOST_PP_IIF
’##(185), 185, 186)

	)

218 
	#BOOST_PP_NODE_187
(
p
Ë
	`BOOST_PP_IIF
’##(187), 187, 188)

	)

219 
	#BOOST_PP_NODE_190
(
p
Ë
	`BOOST_PP_IIF
’##(190), 
BOOST_PP_NODE_189
, 
BOOST_PP_NODE_191
)

	)

220 
	#BOOST_PP_NODE_189
(
p
Ë
	`BOOST_PP_IIF
’##(189), 189, 190)

	)

221 
	#BOOST_PP_NODE_191
(
p
Ë
	`BOOST_PP_IIF
’##(191), 191, 192)

	)

222 
	#BOOST_PP_NODE_224
(
p
Ë
	`BOOST_PP_IIF
’##(224), 
BOOST_PP_NODE_208
, 
BOOST_PP_NODE_240
)

	)

223 
	#BOOST_PP_NODE_208
(
p
Ë
	`BOOST_PP_IIF
’##(208), 
BOOST_PP_NODE_200
, 
BOOST_PP_NODE_216
)

	)

224 
	#BOOST_PP_NODE_200
(
p
Ë
	`BOOST_PP_IIF
’##(200), 
BOOST_PP_NODE_196
, 
BOOST_PP_NODE_204
)

	)

225 
	#BOOST_PP_NODE_196
(
p
Ë
	`BOOST_PP_IIF
’##(196), 
BOOST_PP_NODE_194
, 
BOOST_PP_NODE_198
)

	)

226 
	#BOOST_PP_NODE_194
(
p
Ë
	`BOOST_PP_IIF
’##(194), 
BOOST_PP_NODE_193
, 
BOOST_PP_NODE_195
)

	)

227 
	#BOOST_PP_NODE_193
(
p
Ë
	`BOOST_PP_IIF
’##(193), 193, 194)

	)

228 
	#BOOST_PP_NODE_195
(
p
Ë
	`BOOST_PP_IIF
’##(195), 195, 196)

	)

229 
	#BOOST_PP_NODE_198
(
p
Ë
	`BOOST_PP_IIF
’##(198), 
BOOST_PP_NODE_197
, 
BOOST_PP_NODE_199
)

	)

230 
	#BOOST_PP_NODE_197
(
p
Ë
	`BOOST_PP_IIF
’##(197), 197, 198)

	)

231 
	#BOOST_PP_NODE_199
(
p
Ë
	`BOOST_PP_IIF
’##(199), 199, 200)

	)

232 
	#BOOST_PP_NODE_204
(
p
Ë
	`BOOST_PP_IIF
’##(204), 
BOOST_PP_NODE_202
, 
BOOST_PP_NODE_206
)

	)

233 
	#BOOST_PP_NODE_202
(
p
Ë
	`BOOST_PP_IIF
’##(202), 
BOOST_PP_NODE_201
, 
BOOST_PP_NODE_203
)

	)

234 
	#BOOST_PP_NODE_201
(
p
Ë
	`BOOST_PP_IIF
’##(201), 201, 202)

	)

235 
	#BOOST_PP_NODE_203
(
p
Ë
	`BOOST_PP_IIF
’##(203), 203, 204)

	)

236 
	#BOOST_PP_NODE_206
(
p
Ë
	`BOOST_PP_IIF
’##(206), 
BOOST_PP_NODE_205
, 
BOOST_PP_NODE_207
)

	)

237 
	#BOOST_PP_NODE_205
(
p
Ë
	`BOOST_PP_IIF
’##(205), 205, 206)

	)

238 
	#BOOST_PP_NODE_207
(
p
Ë
	`BOOST_PP_IIF
’##(207), 207, 208)

	)

239 
	#BOOST_PP_NODE_216
(
p
Ë
	`BOOST_PP_IIF
’##(216), 
BOOST_PP_NODE_212
, 
BOOST_PP_NODE_220
)

	)

240 
	#BOOST_PP_NODE_212
(
p
Ë
	`BOOST_PP_IIF
’##(212), 
BOOST_PP_NODE_210
, 
BOOST_PP_NODE_214
)

	)

241 
	#BOOST_PP_NODE_210
(
p
Ë
	`BOOST_PP_IIF
’##(210), 
BOOST_PP_NODE_209
, 
BOOST_PP_NODE_211
)

	)

242 
	#BOOST_PP_NODE_209
(
p
Ë
	`BOOST_PP_IIF
’##(209), 209, 210)

	)

243 
	#BOOST_PP_NODE_211
(
p
Ë
	`BOOST_PP_IIF
’##(211), 211, 212)

	)

244 
	#BOOST_PP_NODE_214
(
p
Ë
	`BOOST_PP_IIF
’##(214), 
BOOST_PP_NODE_213
, 
BOOST_PP_NODE_215
)

	)

245 
	#BOOST_PP_NODE_213
(
p
Ë
	`BOOST_PP_IIF
’##(213), 213, 214)

	)

246 
	#BOOST_PP_NODE_215
(
p
Ë
	`BOOST_PP_IIF
’##(215), 215, 216)

	)

247 
	#BOOST_PP_NODE_220
(
p
Ë
	`BOOST_PP_IIF
’##(220), 
BOOST_PP_NODE_218
, 
BOOST_PP_NODE_222
)

	)

248 
	#BOOST_PP_NODE_218
(
p
Ë
	`BOOST_PP_IIF
’##(218), 
BOOST_PP_NODE_217
, 
BOOST_PP_NODE_219
)

	)

249 
	#BOOST_PP_NODE_217
(
p
Ë
	`BOOST_PP_IIF
’##(217), 217, 218)

	)

250 
	#BOOST_PP_NODE_219
(
p
Ë
	`BOOST_PP_IIF
’##(219), 219, 220)

	)

251 
	#BOOST_PP_NODE_222
(
p
Ë
	`BOOST_PP_IIF
’##(222), 
BOOST_PP_NODE_221
, 
BOOST_PP_NODE_223
)

	)

252 
	#BOOST_PP_NODE_221
(
p
Ë
	`BOOST_PP_IIF
’##(221), 221, 222)

	)

253 
	#BOOST_PP_NODE_223
(
p
Ë
	`BOOST_PP_IIF
’##(223), 223, 224)

	)

254 
	#BOOST_PP_NODE_240
(
p
Ë
	`BOOST_PP_IIF
’##(240), 
BOOST_PP_NODE_232
, 
BOOST_PP_NODE_248
)

	)

255 
	#BOOST_PP_NODE_232
(
p
Ë
	`BOOST_PP_IIF
’##(232), 
BOOST_PP_NODE_228
, 
BOOST_PP_NODE_236
)

	)

256 
	#BOOST_PP_NODE_228
(
p
Ë
	`BOOST_PP_IIF
’##(228), 
BOOST_PP_NODE_226
, 
BOOST_PP_NODE_230
)

	)

257 
	#BOOST_PP_NODE_226
(
p
Ë
	`BOOST_PP_IIF
’##(226), 
BOOST_PP_NODE_225
, 
BOOST_PP_NODE_227
)

	)

258 
	#BOOST_PP_NODE_225
(
p
Ë
	`BOOST_PP_IIF
’##(225), 225, 226)

	)

259 
	#BOOST_PP_NODE_227
(
p
Ë
	`BOOST_PP_IIF
’##(227), 227, 228)

	)

260 
	#BOOST_PP_NODE_230
(
p
Ë
	`BOOST_PP_IIF
’##(230), 
BOOST_PP_NODE_229
, 
BOOST_PP_NODE_231
)

	)

261 
	#BOOST_PP_NODE_229
(
p
Ë
	`BOOST_PP_IIF
’##(229), 229, 230)

	)

262 
	#BOOST_PP_NODE_231
(
p
Ë
	`BOOST_PP_IIF
’##(231), 231, 232)

	)

263 
	#BOOST_PP_NODE_236
(
p
Ë
	`BOOST_PP_IIF
’##(236), 
BOOST_PP_NODE_234
, 
BOOST_PP_NODE_238
)

	)

264 
	#BOOST_PP_NODE_234
(
p
Ë
	`BOOST_PP_IIF
’##(234), 
BOOST_PP_NODE_233
, 
BOOST_PP_NODE_235
)

	)

265 
	#BOOST_PP_NODE_233
(
p
Ë
	`BOOST_PP_IIF
’##(233), 233, 234)

	)

266 
	#BOOST_PP_NODE_235
(
p
Ë
	`BOOST_PP_IIF
’##(235), 235, 236)

	)

267 
	#BOOST_PP_NODE_238
(
p
Ë
	`BOOST_PP_IIF
’##(238), 
BOOST_PP_NODE_237
, 
BOOST_PP_NODE_239
)

	)

268 
	#BOOST_PP_NODE_237
(
p
Ë
	`BOOST_PP_IIF
’##(237), 237, 238)

	)

269 
	#BOOST_PP_NODE_239
(
p
Ë
	`BOOST_PP_IIF
’##(239), 239, 240)

	)

270 
	#BOOST_PP_NODE_248
(
p
Ë
	`BOOST_PP_IIF
’##(248), 
BOOST_PP_NODE_244
, 
BOOST_PP_NODE_252
)

	)

271 
	#BOOST_PP_NODE_244
(
p
Ë
	`BOOST_PP_IIF
’##(244), 
BOOST_PP_NODE_242
, 
BOOST_PP_NODE_246
)

	)

272 
	#BOOST_PP_NODE_242
(
p
Ë
	`BOOST_PP_IIF
’##(242), 
BOOST_PP_NODE_241
, 
BOOST_PP_NODE_243
)

	)

273 
	#BOOST_PP_NODE_241
(
p
Ë
	`BOOST_PP_IIF
’##(241), 241, 242)

	)

274 
	#BOOST_PP_NODE_243
(
p
Ë
	`BOOST_PP_IIF
’##(243), 243, 244)

	)

275 
	#BOOST_PP_NODE_246
(
p
Ë
	`BOOST_PP_IIF
’##(246), 
BOOST_PP_NODE_245
, 
BOOST_PP_NODE_247
)

	)

276 
	#BOOST_PP_NODE_245
(
p
Ë
	`BOOST_PP_IIF
’##(245), 245, 246)

	)

277 
	#BOOST_PP_NODE_247
(
p
Ë
	`BOOST_PP_IIF
’##(247), 247, 248)

	)

278 
	#BOOST_PP_NODE_252
(
p
Ë
	`BOOST_PP_IIF
’##(252), 
BOOST_PP_NODE_250
, 
BOOST_PP_NODE_254
)

	)

279 
	#BOOST_PP_NODE_250
(
p
Ë
	`BOOST_PP_IIF
’##(250), 
BOOST_PP_NODE_249
, 
BOOST_PP_NODE_251
)

	)

280 
	#BOOST_PP_NODE_249
(
p
Ë
	`BOOST_PP_IIF
’##(249), 249, 250)

	)

281 
	#BOOST_PP_NODE_251
(
p
Ë
	`BOOST_PP_IIF
’##(251), 251, 252)

	)

282 
	#BOOST_PP_NODE_254
(
p
Ë
	`BOOST_PP_IIF
’##(254), 
BOOST_PP_NODE_253
, 
BOOST_PP_NODE_255
)

	)

283 
	#BOOST_PP_NODE_253
(
p
Ë
	`BOOST_PP_IIF
’##(253), 253, 254)

	)

284 
	#BOOST_PP_NODE_255
(
p
Ë
	`BOOST_PP_IIF
’##(255), 255, 256)

	)

	@/usr/include/boost/preprocessor/detail/is_binary.hpp

3 #* (
C
Ë
C›yright
 
Paul
 
Mís⁄ides
 2002.

4 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


5 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


6 #* 
hâp
:

9 #
#/* 
Sì
 
hâp
:

11 #
#i‚de‡
BOOST_PREPROCESSOR_DETAIL_IS_BINARY_HPP


13 
	#BOOST_PREPROCESSOR_DETAIL_IS_BINARY_HPP


	)

14 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

16 
	~<boo°/¥ïro˚ss‹/dëaû/check.hµ
>

17 #
#/* 
BOOST_PP_IS_BINARY
 */

19 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_EDG
()

21 
	#BOOST_PP_IS_BINARY
(
x
Ë
	`BOOST_PP_CHECK
(x, 
BOOST_PP_IS_BINARY_CHECK
)

	)

23 
	#BOOST_PP_IS_BINARY
(
x
Ë
	`BOOST_PP_IS_BINARY_I
(x)

	)

24 
	#BOOST_PP_IS_BINARY_I
(
x
Ë
	`BOOST_PP_CHECK
(x, 
BOOST_PP_IS_BINARY_CHECK
)

	)

26 
#deföê
	#BOOST_PP_IS_BINARY_CHECK
(
a
, 
b
Ë1

	)

28 
	#BOOST_PP_CHECK_RESULT_BOOST_PP_IS_BINARY_CHECK
 0, 
BOOST_PP_NIL


	)

	@/usr/include/boost/preprocessor/facilities/empty.hpp

1 #/* 
C›yright
 (
C
) 2001

2 #* 
Hou£m¨que
 
Oy


3 #* 
hâp
:

5 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


6 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


7 #* 
hâp
:

9 #
#/* 
Revi£d
 
by
 
Paul
 
Mís⁄ides
 (2002) */

11 #
#/* 
Sì
 
hâp
:

13 #
#i‚de‡
BOOST_PREPROCESSOR_FACILITIES_EMPTY_HPP


15 
	#BOOST_PREPROCESSOR_FACILITIES_EMPTY_HPP


	)

16 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

18 #
#/* 
BOOST_PP_EMPTY
 */

20 
#deföê
	#BOOST_PP_EMPTY
()

	)

	@/usr/include/boost/preprocessor/facilities/is_1.hpp

3 #* (
C
Ë
C›yright
 
Paul
 
Mís⁄ides
 2003.

4 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


5 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


6 #* 
hâp
:

9 #
#/* 
Sì
 
hâp
:

11 #
#i‚de‡
BOOST_PREPROCESSOR_FACILITIES_IS_1_HPP


13 
	#BOOST_PREPROCESSOR_FACILITIES_IS_1_HPP


	)

14 
#ö˛udê
	~<boo°/¥ïro˚ss‹/ˇt.hµ
>

16 
	~<boo°/¥ïro˚ss‹/Ácûôõs/is_em±y.hµ
>

17 #
#/* 
BOOST_PP_IS_1
 */

19 
#deföê
	#BOOST_PP_IS_1
(
x
Ë
	`BOOST_PP_IS_EMPTY
(
	`BOOST_PP_CAT
(
BOOST_PP_IS_1_HELPER_
, x))

	)

21 
	#BOOST_PP_IS_1_HELPER_1


	)

	@/usr/include/boost/preprocessor/logical/bool.hpp

1 #/* 
C›yright
 (
C
) 2001

2 #* 
Hou£m¨que
 
Oy


3 #* 
hâp
:

5 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


6 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


7 #* 
hâp
:

9 #
#/* 
Revi£d
 
by
 
Paul
 
Mís⁄ides
 (2002) */

11 #
#/* 
Sì
 
hâp
:

13 #
#i‚de‡
BOOST_PREPROCESSOR_LOGICAL_BOOL_HPP


15 
	#BOOST_PREPROCESSOR_LOGICAL_BOOL_HPP


	)

16 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

18 #
#/* 
BOOST_PP_BOOL
 */

20 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MWCC
()

22 
	#BOOST_PP_BOOL
(
x
Ë
	`BOOST_PP_BOOL_I
(x)

	)

24 
	#BOOST_PP_BOOL
(
x
Ë
	`BOOST_PP_BOOL_OO
((x))

	)

25 
	#BOOST_PP_BOOL_OO
(
∑r
Ë
BOOST_PP_BOOL_I
 ## 
	)
par

27 
#deföê
	#BOOST_PP_BOOL_I
(
x
Ë
BOOST_PP_BOOL_
 ## 
	)
x

29 
#deföê
	#BOOST_PP_BOOL_0
 0

	)

31 
	#BOOST_PP_BOOL_1
 1

	)

32 
	#BOOST_PP_BOOL_2
 1

	)

33 
	#BOOST_PP_BOOL_3
 1

	)

34 
	#BOOST_PP_BOOL_4
 1

	)

35 
	#BOOST_PP_BOOL_5
 1

	)

36 
	#BOOST_PP_BOOL_6
 1

	)

37 
	#BOOST_PP_BOOL_7
 1

	)

38 
	#BOOST_PP_BOOL_8
 1

	)

39 
	#BOOST_PP_BOOL_9
 1

	)

40 
	#BOOST_PP_BOOL_10
 1

	)

41 
	#BOOST_PP_BOOL_11
 1

	)

42 
	#BOOST_PP_BOOL_12
 1

	)

43 
	#BOOST_PP_BOOL_13
 1

	)

44 
	#BOOST_PP_BOOL_14
 1

	)

45 
	#BOOST_PP_BOOL_15
 1

	)

46 
	#BOOST_PP_BOOL_16
 1

	)

47 
	#BOOST_PP_BOOL_17
 1

	)

48 
	#BOOST_PP_BOOL_18
 1

	)

49 
	#BOOST_PP_BOOL_19
 1

	)

50 
	#BOOST_PP_BOOL_20
 1

	)

51 
	#BOOST_PP_BOOL_21
 1

	)

52 
	#BOOST_PP_BOOL_22
 1

	)

53 
	#BOOST_PP_BOOL_23
 1

	)

54 
	#BOOST_PP_BOOL_24
 1

	)

55 
	#BOOST_PP_BOOL_25
 1

	)

56 
	#BOOST_PP_BOOL_26
 1

	)

57 
	#BOOST_PP_BOOL_27
 1

	)

58 
	#BOOST_PP_BOOL_28
 1

	)

59 
	#BOOST_PP_BOOL_29
 1

	)

60 
	#BOOST_PP_BOOL_30
 1

	)

61 
	#BOOST_PP_BOOL_31
 1

	)

62 
	#BOOST_PP_BOOL_32
 1

	)

63 
	#BOOST_PP_BOOL_33
 1

	)

64 
	#BOOST_PP_BOOL_34
 1

	)

65 
	#BOOST_PP_BOOL_35
 1

	)

66 
	#BOOST_PP_BOOL_36
 1

	)

67 
	#BOOST_PP_BOOL_37
 1

	)

68 
	#BOOST_PP_BOOL_38
 1

	)

69 
	#BOOST_PP_BOOL_39
 1

	)

70 
	#BOOST_PP_BOOL_40
 1

	)

71 
	#BOOST_PP_BOOL_41
 1

	)

72 
	#BOOST_PP_BOOL_42
 1

	)

73 
	#BOOST_PP_BOOL_43
 1

	)

74 
	#BOOST_PP_BOOL_44
 1

	)

75 
	#BOOST_PP_BOOL_45
 1

	)

76 
	#BOOST_PP_BOOL_46
 1

	)

77 
	#BOOST_PP_BOOL_47
 1

	)

78 
	#BOOST_PP_BOOL_48
 1

	)

79 
	#BOOST_PP_BOOL_49
 1

	)

80 
	#BOOST_PP_BOOL_50
 1

	)

81 
	#BOOST_PP_BOOL_51
 1

	)

82 
	#BOOST_PP_BOOL_52
 1

	)

83 
	#BOOST_PP_BOOL_53
 1

	)

84 
	#BOOST_PP_BOOL_54
 1

	)

85 
	#BOOST_PP_BOOL_55
 1

	)

86 
	#BOOST_PP_BOOL_56
 1

	)

87 
	#BOOST_PP_BOOL_57
 1

	)

88 
	#BOOST_PP_BOOL_58
 1

	)

89 
	#BOOST_PP_BOOL_59
 1

	)

90 
	#BOOST_PP_BOOL_60
 1

	)

91 
	#BOOST_PP_BOOL_61
 1

	)

92 
	#BOOST_PP_BOOL_62
 1

	)

93 
	#BOOST_PP_BOOL_63
 1

	)

94 
	#BOOST_PP_BOOL_64
 1

	)

95 
	#BOOST_PP_BOOL_65
 1

	)

96 
	#BOOST_PP_BOOL_66
 1

	)

97 
	#BOOST_PP_BOOL_67
 1

	)

98 
	#BOOST_PP_BOOL_68
 1

	)

99 
	#BOOST_PP_BOOL_69
 1

	)

100 
	#BOOST_PP_BOOL_70
 1

	)

101 
	#BOOST_PP_BOOL_71
 1

	)

102 
	#BOOST_PP_BOOL_72
 1

	)

103 
	#BOOST_PP_BOOL_73
 1

	)

104 
	#BOOST_PP_BOOL_74
 1

	)

105 
	#BOOST_PP_BOOL_75
 1

	)

106 
	#BOOST_PP_BOOL_76
 1

	)

107 
	#BOOST_PP_BOOL_77
 1

	)

108 
	#BOOST_PP_BOOL_78
 1

	)

109 
	#BOOST_PP_BOOL_79
 1

	)

110 
	#BOOST_PP_BOOL_80
 1

	)

111 
	#BOOST_PP_BOOL_81
 1

	)

112 
	#BOOST_PP_BOOL_82
 1

	)

113 
	#BOOST_PP_BOOL_83
 1

	)

114 
	#BOOST_PP_BOOL_84
 1

	)

115 
	#BOOST_PP_BOOL_85
 1

	)

116 
	#BOOST_PP_BOOL_86
 1

	)

117 
	#BOOST_PP_BOOL_87
 1

	)

118 
	#BOOST_PP_BOOL_88
 1

	)

119 
	#BOOST_PP_BOOL_89
 1

	)

120 
	#BOOST_PP_BOOL_90
 1

	)

121 
	#BOOST_PP_BOOL_91
 1

	)

122 
	#BOOST_PP_BOOL_92
 1

	)

123 
	#BOOST_PP_BOOL_93
 1

	)

124 
	#BOOST_PP_BOOL_94
 1

	)

125 
	#BOOST_PP_BOOL_95
 1

	)

126 
	#BOOST_PP_BOOL_96
 1

	)

127 
	#BOOST_PP_BOOL_97
 1

	)

128 
	#BOOST_PP_BOOL_98
 1

	)

129 
	#BOOST_PP_BOOL_99
 1

	)

130 
	#BOOST_PP_BOOL_100
 1

	)

131 
	#BOOST_PP_BOOL_101
 1

	)

132 
	#BOOST_PP_BOOL_102
 1

	)

133 
	#BOOST_PP_BOOL_103
 1

	)

134 
	#BOOST_PP_BOOL_104
 1

	)

135 
	#BOOST_PP_BOOL_105
 1

	)

136 
	#BOOST_PP_BOOL_106
 1

	)

137 
	#BOOST_PP_BOOL_107
 1

	)

138 
	#BOOST_PP_BOOL_108
 1

	)

139 
	#BOOST_PP_BOOL_109
 1

	)

140 
	#BOOST_PP_BOOL_110
 1

	)

141 
	#BOOST_PP_BOOL_111
 1

	)

142 
	#BOOST_PP_BOOL_112
 1

	)

143 
	#BOOST_PP_BOOL_113
 1

	)

144 
	#BOOST_PP_BOOL_114
 1

	)

145 
	#BOOST_PP_BOOL_115
 1

	)

146 
	#BOOST_PP_BOOL_116
 1

	)

147 
	#BOOST_PP_BOOL_117
 1

	)

148 
	#BOOST_PP_BOOL_118
 1

	)

149 
	#BOOST_PP_BOOL_119
 1

	)

150 
	#BOOST_PP_BOOL_120
 1

	)

151 
	#BOOST_PP_BOOL_121
 1

	)

152 
	#BOOST_PP_BOOL_122
 1

	)

153 
	#BOOST_PP_BOOL_123
 1

	)

154 
	#BOOST_PP_BOOL_124
 1

	)

155 
	#BOOST_PP_BOOL_125
 1

	)

156 
	#BOOST_PP_BOOL_126
 1

	)

157 
	#BOOST_PP_BOOL_127
 1

	)

158 
	#BOOST_PP_BOOL_128
 1

	)

159 
	#BOOST_PP_BOOL_129
 1

	)

160 
	#BOOST_PP_BOOL_130
 1

	)

161 
	#BOOST_PP_BOOL_131
 1

	)

162 
	#BOOST_PP_BOOL_132
 1

	)

163 
	#BOOST_PP_BOOL_133
 1

	)

164 
	#BOOST_PP_BOOL_134
 1

	)

165 
	#BOOST_PP_BOOL_135
 1

	)

166 
	#BOOST_PP_BOOL_136
 1

	)

167 
	#BOOST_PP_BOOL_137
 1

	)

168 
	#BOOST_PP_BOOL_138
 1

	)

169 
	#BOOST_PP_BOOL_139
 1

	)

170 
	#BOOST_PP_BOOL_140
 1

	)

171 
	#BOOST_PP_BOOL_141
 1

	)

172 
	#BOOST_PP_BOOL_142
 1

	)

173 
	#BOOST_PP_BOOL_143
 1

	)

174 
	#BOOST_PP_BOOL_144
 1

	)

175 
	#BOOST_PP_BOOL_145
 1

	)

176 
	#BOOST_PP_BOOL_146
 1

	)

177 
	#BOOST_PP_BOOL_147
 1

	)

178 
	#BOOST_PP_BOOL_148
 1

	)

179 
	#BOOST_PP_BOOL_149
 1

	)

180 
	#BOOST_PP_BOOL_150
 1

	)

181 
	#BOOST_PP_BOOL_151
 1

	)

182 
	#BOOST_PP_BOOL_152
 1

	)

183 
	#BOOST_PP_BOOL_153
 1

	)

184 
	#BOOST_PP_BOOL_154
 1

	)

185 
	#BOOST_PP_BOOL_155
 1

	)

186 
	#BOOST_PP_BOOL_156
 1

	)

187 
	#BOOST_PP_BOOL_157
 1

	)

188 
	#BOOST_PP_BOOL_158
 1

	)

189 
	#BOOST_PP_BOOL_159
 1

	)

190 
	#BOOST_PP_BOOL_160
 1

	)

191 
	#BOOST_PP_BOOL_161
 1

	)

192 
	#BOOST_PP_BOOL_162
 1

	)

193 
	#BOOST_PP_BOOL_163
 1

	)

194 
	#BOOST_PP_BOOL_164
 1

	)

195 
	#BOOST_PP_BOOL_165
 1

	)

196 
	#BOOST_PP_BOOL_166
 1

	)

197 
	#BOOST_PP_BOOL_167
 1

	)

198 
	#BOOST_PP_BOOL_168
 1

	)

199 
	#BOOST_PP_BOOL_169
 1

	)

200 
	#BOOST_PP_BOOL_170
 1

	)

201 
	#BOOST_PP_BOOL_171
 1

	)

202 
	#BOOST_PP_BOOL_172
 1

	)

203 
	#BOOST_PP_BOOL_173
 1

	)

204 
	#BOOST_PP_BOOL_174
 1

	)

205 
	#BOOST_PP_BOOL_175
 1

	)

206 
	#BOOST_PP_BOOL_176
 1

	)

207 
	#BOOST_PP_BOOL_177
 1

	)

208 
	#BOOST_PP_BOOL_178
 1

	)

209 
	#BOOST_PP_BOOL_179
 1

	)

210 
	#BOOST_PP_BOOL_180
 1

	)

211 
	#BOOST_PP_BOOL_181
 1

	)

212 
	#BOOST_PP_BOOL_182
 1

	)

213 
	#BOOST_PP_BOOL_183
 1

	)

214 
	#BOOST_PP_BOOL_184
 1

	)

215 
	#BOOST_PP_BOOL_185
 1

	)

216 
	#BOOST_PP_BOOL_186
 1

	)

217 
	#BOOST_PP_BOOL_187
 1

	)

218 
	#BOOST_PP_BOOL_188
 1

	)

219 
	#BOOST_PP_BOOL_189
 1

	)

220 
	#BOOST_PP_BOOL_190
 1

	)

221 
	#BOOST_PP_BOOL_191
 1

	)

222 
	#BOOST_PP_BOOL_192
 1

	)

223 
	#BOOST_PP_BOOL_193
 1

	)

224 
	#BOOST_PP_BOOL_194
 1

	)

225 
	#BOOST_PP_BOOL_195
 1

	)

226 
	#BOOST_PP_BOOL_196
 1

	)

227 
	#BOOST_PP_BOOL_197
 1

	)

228 
	#BOOST_PP_BOOL_198
 1

	)

229 
	#BOOST_PP_BOOL_199
 1

	)

230 
	#BOOST_PP_BOOL_200
 1

	)

231 
	#BOOST_PP_BOOL_201
 1

	)

232 
	#BOOST_PP_BOOL_202
 1

	)

233 
	#BOOST_PP_BOOL_203
 1

	)

234 
	#BOOST_PP_BOOL_204
 1

	)

235 
	#BOOST_PP_BOOL_205
 1

	)

236 
	#BOOST_PP_BOOL_206
 1

	)

237 
	#BOOST_PP_BOOL_207
 1

	)

238 
	#BOOST_PP_BOOL_208
 1

	)

239 
	#BOOST_PP_BOOL_209
 1

	)

240 
	#BOOST_PP_BOOL_210
 1

	)

241 
	#BOOST_PP_BOOL_211
 1

	)

242 
	#BOOST_PP_BOOL_212
 1

	)

243 
	#BOOST_PP_BOOL_213
 1

	)

244 
	#BOOST_PP_BOOL_214
 1

	)

245 
	#BOOST_PP_BOOL_215
 1

	)

246 
	#BOOST_PP_BOOL_216
 1

	)

247 
	#BOOST_PP_BOOL_217
 1

	)

248 
	#BOOST_PP_BOOL_218
 1

	)

249 
	#BOOST_PP_BOOL_219
 1

	)

250 
	#BOOST_PP_BOOL_220
 1

	)

251 
	#BOOST_PP_BOOL_221
 1

	)

252 
	#BOOST_PP_BOOL_222
 1

	)

253 
	#BOOST_PP_BOOL_223
 1

	)

254 
	#BOOST_PP_BOOL_224
 1

	)

255 
	#BOOST_PP_BOOL_225
 1

	)

256 
	#BOOST_PP_BOOL_226
 1

	)

257 
	#BOOST_PP_BOOL_227
 1

	)

258 
	#BOOST_PP_BOOL_228
 1

	)

259 
	#BOOST_PP_BOOL_229
 1

	)

260 
	#BOOST_PP_BOOL_230
 1

	)

261 
	#BOOST_PP_BOOL_231
 1

	)

262 
	#BOOST_PP_BOOL_232
 1

	)

263 
	#BOOST_PP_BOOL_233
 1

	)

264 
	#BOOST_PP_BOOL_234
 1

	)

265 
	#BOOST_PP_BOOL_235
 1

	)

266 
	#BOOST_PP_BOOL_236
 1

	)

267 
	#BOOST_PP_BOOL_237
 1

	)

268 
	#BOOST_PP_BOOL_238
 1

	)

269 
	#BOOST_PP_BOOL_239
 1

	)

270 
	#BOOST_PP_BOOL_240
 1

	)

271 
	#BOOST_PP_BOOL_241
 1

	)

272 
	#BOOST_PP_BOOL_242
 1

	)

273 
	#BOOST_PP_BOOL_243
 1

	)

274 
	#BOOST_PP_BOOL_244
 1

	)

275 
	#BOOST_PP_BOOL_245
 1

	)

276 
	#BOOST_PP_BOOL_246
 1

	)

277 
	#BOOST_PP_BOOL_247
 1

	)

278 
	#BOOST_PP_BOOL_248
 1

	)

279 
	#BOOST_PP_BOOL_249
 1

	)

280 
	#BOOST_PP_BOOL_250
 1

	)

281 
	#BOOST_PP_BOOL_251
 1

	)

282 
	#BOOST_PP_BOOL_252
 1

	)

283 
	#BOOST_PP_BOOL_253
 1

	)

284 
	#BOOST_PP_BOOL_254
 1

	)

285 
	#BOOST_PP_BOOL_255
 1

	)

286 
	#BOOST_PP_BOOL_256
 1

	)

	@/usr/include/boost/preprocessor/logical/compl.hpp

3 #* (
C
Ë
C›yright
 
Paul
 
Mís⁄ides
 2002.

4 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


5 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


6 #* 
hâp
:

9 #
#/* 
Sì
 
hâp
:

11 #
#i‚de‡
BOOST_PREPROCESSOR_LOGICAL_COMPL_HPP


13 
	#BOOST_PREPROCESSOR_LOGICAL_COMPL_HPP


	)

14 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

16 #
#/* 
BOOST_PP_COMPL
 */

18 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MWCC
()

20 
	#BOOST_PP_COMPL
(
x
Ë
	`BOOST_PP_COMPL_I
(x)

	)

22 
	#BOOST_PP_COMPL
(
x
Ë
	`BOOST_PP_COMPL_OO
((x))

	)

23 
	#BOOST_PP_COMPL_OO
(
∑r
Ë
BOOST_PP_COMPL_I
 ## 
	)
par

25 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MSVC
()

27 
	#BOOST_PP_COMPL_I
(
x
Ë
BOOST_PP_COMPL_
 ## 
	)
x

29 
	#BOOST_PP_COMPL_I
(
x
Ë
	`BOOST_PP_COMPL_ID
(
BOOST_PP_COMPL_
 ## x)

	)

30 
	#BOOST_PP_COMPL_ID
(
id
Ë
	)
id

32 
#deföê
	#BOOST_PP_COMPL_0
 1

	)

34 
	#BOOST_PP_COMPL_1
 0

	)

	@/usr/include/boost/preprocessor/tuple/eat.hpp

1 #/* 
C›yright
 (
C
) 2001

2 #* 
Hou£m¨que
 
Oy


3 #* 
hâp
:

5 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


6 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


7 #* 
hâp
:

9 #
#/* 
Revi£d
 
by
 
Paul
 
Mís⁄ides
 (2002-2011) */

11 #/* 
Revi£d
 
by
 
Edw¨d
 
Dõ√r
 (2011) */

12 #
#/* 
Sì
 
hâp
:

14 #
#i‚de‡
BOOST_PREPROCESSOR_TUPLE_EAT_HPP


16 
	#BOOST_PREPROCESSOR_TUPLE_EAT_HPP


	)

17 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

19 #
#/* 
BOOST_PP_EAT
 */

21 #
#i‡
BOOST_PP_VARIADICS


23 
	#BOOST_PP_EAT
(...)

	)

25 
	#BOOST_PP_EAT
(
x
)

	)

27 #
#/* 
BOOST_PP_TUPLE_EAT
 */

29 #
#i‡
BOOST_PP_VARIADICS


31 
	#BOOST_PP_TUPLE_EAT
(
size
Ë
BOOST_PP_EAT


	)

33 #i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MWCC
()

34 
	#BOOST_PP_TUPLE_EAT
(
size
Ë
	`BOOST_PP_TUPLE_EAT_I
(size)

	)

36 
	#BOOST_PP_TUPLE_EAT
(
size
Ë
	`BOOST_PP_TUPLE_EAT_OO
((size))

	)

37 
	#BOOST_PP_TUPLE_EAT_OO
(
∑r
Ë
BOOST_PP_TUPLE_EAT_I
 ## 
	)
par

39 
	#BOOST_PP_TUPLE_EAT_I
(
size
Ë
BOOST_PP_TUPLE_EAT_
 ## 
	)
size

41 
	#BOOST_PP_TUPLE_EAT_1
(
e0
)

	)

42 
	#BOOST_PP_TUPLE_EAT_2
(
e0
, 
e1
)

	)

43 
	#BOOST_PP_TUPLE_EAT_3
(
e0
, 
e1
, 
e2
)

	)

44 
	#BOOST_PP_TUPLE_EAT_4
(
e0
, 
e1
, 
e2
, 
e3
)

	)

45 
	#BOOST_PP_TUPLE_EAT_5
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
)

	)

46 
	#BOOST_PP_TUPLE_EAT_6
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
)

	)

47 
	#BOOST_PP_TUPLE_EAT_7
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
)

	)

48 
	#BOOST_PP_TUPLE_EAT_8
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
)

	)

49 
	#BOOST_PP_TUPLE_EAT_9
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
)

	)

50 
	#BOOST_PP_TUPLE_EAT_10
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
)

	)

51 
	#BOOST_PP_TUPLE_EAT_11
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
)

	)

52 
	#BOOST_PP_TUPLE_EAT_12
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
)

	)

53 
	#BOOST_PP_TUPLE_EAT_13
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
)

	)

54 
	#BOOST_PP_TUPLE_EAT_14
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
)

	)

55 
	#BOOST_PP_TUPLE_EAT_15
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
)

	)

56 
	#BOOST_PP_TUPLE_EAT_16
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
)

	)

57 
	#BOOST_PP_TUPLE_EAT_17
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
)

	)

58 
	#BOOST_PP_TUPLE_EAT_18
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
)

	)

59 
	#BOOST_PP_TUPLE_EAT_19
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
)

	)

60 
	#BOOST_PP_TUPLE_EAT_20
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
)

	)

61 
	#BOOST_PP_TUPLE_EAT_21
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
)

	)

62 
	#BOOST_PP_TUPLE_EAT_22
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
)

	)

63 
	#BOOST_PP_TUPLE_EAT_23
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
)

	)

64 
	#BOOST_PP_TUPLE_EAT_24
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
)

	)

65 
	#BOOST_PP_TUPLE_EAT_25
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
)

	)

66 
	#BOOST_PP_TUPLE_EAT_26
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
)

	)

67 
	#BOOST_PP_TUPLE_EAT_27
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
)

	)

68 
	#BOOST_PP_TUPLE_EAT_28
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
)

	)

69 
	#BOOST_PP_TUPLE_EAT_29
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
)

	)

70 
	#BOOST_PP_TUPLE_EAT_30
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
)

	)

71 
	#BOOST_PP_TUPLE_EAT_31
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
)

	)

72 
	#BOOST_PP_TUPLE_EAT_32
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
)

	)

73 
	#BOOST_PP_TUPLE_EAT_33
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
)

	)

74 
	#BOOST_PP_TUPLE_EAT_34
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
)

	)

75 
	#BOOST_PP_TUPLE_EAT_35
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
)

	)

76 
	#BOOST_PP_TUPLE_EAT_36
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
)

	)

77 
	#BOOST_PP_TUPLE_EAT_37
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
)

	)

78 
	#BOOST_PP_TUPLE_EAT_38
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
)

	)

79 
	#BOOST_PP_TUPLE_EAT_39
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
)

	)

80 
	#BOOST_PP_TUPLE_EAT_40
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
)

	)

81 
	#BOOST_PP_TUPLE_EAT_41
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
)

	)

82 
	#BOOST_PP_TUPLE_EAT_42
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
)

	)

83 
	#BOOST_PP_TUPLE_EAT_43
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
)

	)

84 
	#BOOST_PP_TUPLE_EAT_44
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
)

	)

85 
	#BOOST_PP_TUPLE_EAT_45
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
)

	)

86 
	#BOOST_PP_TUPLE_EAT_46
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
)

	)

87 
	#BOOST_PP_TUPLE_EAT_47
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
)

	)

88 
	#BOOST_PP_TUPLE_EAT_48
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
)

	)

89 
	#BOOST_PP_TUPLE_EAT_49
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
)

	)

90 
	#BOOST_PP_TUPLE_EAT_50
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
)

	)

91 
	#BOOST_PP_TUPLE_EAT_51
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
)

	)

92 
	#BOOST_PP_TUPLE_EAT_52
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
)

	)

93 
	#BOOST_PP_TUPLE_EAT_53
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
)

	)

94 
	#BOOST_PP_TUPLE_EAT_54
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
)

	)

95 
	#BOOST_PP_TUPLE_EAT_55
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
)

	)

96 
	#BOOST_PP_TUPLE_EAT_56
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
)

	)

97 
	#BOOST_PP_TUPLE_EAT_57
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
)

	)

98 
	#BOOST_PP_TUPLE_EAT_58
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
)

	)

99 
	#BOOST_PP_TUPLE_EAT_59
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
)

	)

100 
	#BOOST_PP_TUPLE_EAT_60
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
)

	)

101 
	#BOOST_PP_TUPLE_EAT_61
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
)

	)

102 
	#BOOST_PP_TUPLE_EAT_62
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
)

	)

103 
	#BOOST_PP_TUPLE_EAT_63
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
)

	)

104 
	#BOOST_PP_TUPLE_EAT_64
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
)

	)

	@/usr/include/boost/preprocessor/tuple/size.hpp

3 #* (
C
Ë
C›yright
 
Edw¨d
 
Dõ√r
 2011. *

4 #* (
C
Ë
C›yright
 
Paul
 
Mís⁄ides
 2011. *

5 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì
 *

6 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©
 *

7 #* 
hâp
:

10 #
#/* 
Sì
 
hâp
:

12 #
#i‚de‡
BOOST_PREPROCESSOR_TUPLE_SIZE_HPP


14 
	#BOOST_PREPROCESSOR_TUPLE_SIZE_HPP


	)

15 
#ö˛udê
	~<boo°/¥ïro˚ss‹/ˇt.hµ
>

17 
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

18 
	~<boo°/¥ïro˚ss‹/v¨üdic/size.hµ
>

19 #
#i‡
BOOST_PP_VARIADICS


21 #i‡
BOOST_PP_VARIADICS_MSVC


22 
	#BOOST_PP_TUPLE_SIZE
(
tu∂e
Ë
	`BOOST_PP_CAT
(
BOOST_PP_VARIADIC_SIZE
Åu∂e,)

	)

24 
	#BOOST_PP_TUPLE_SIZE
(
tu∂e
Ë
BOOST_PP_VARIADIC_SIZE
 
	)
tuple

	@/usr/include/boost/preprocessor/variadic/size.hpp

3 #* (
C
Ë
C›yright
 
Edw¨d
 
Dõ√r
 2011. *

4 #* (
C
Ë
C›yright
 
Paul
 
Mís⁄ides
 2011. *

5 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì
 *

6 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©
 *

7 #* 
hâp
:

10 #
#/* 
Sì
 
hâp
:

12 #
#i‚de‡
BOOST_PREPROCESSOR_VARIADIC_SIZE_HPP


14 
	#BOOST_PREPROCESSOR_VARIADIC_SIZE_HPP


	)

15 
#ö˛udê
	~<boo°/¥ïro˚ss‹/ˇt.hµ
>

17 
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

18 #
#/* 
BOOST_PP_VARIADIC_SIZE
 */

20 #
#i‡
BOOST_PP_VARIADICS


22 #i‡
BOOST_PP_VARIADICS_MSVC


23 
	#BOOST_PP_VARIADIC_SIZE
(...Ë
	`BOOST_PP_CAT
(
	`BOOST_PP_VARIADIC_SIZE_I
(
__VA_ARGS__
, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1,),)

	)

25 
	#BOOST_PP_VARIADIC_SIZE
(...Ë
	`BOOST_PP_VARIADIC_SIZE_I
(
__VA_ARGS__
, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1,)

	)

27 
	#BOOST_PP_VARIADIC_SIZE_I
(
e0
, 
e1
, 
e2
, 
e3
, 
e4
, 
e5
, 
e6
, 
e7
, 
e8
, 
e9
, 
e10
, 
e11
, 
e12
, 
e13
, 
e14
, 
e15
, 
e16
, 
e17
, 
e18
, 
e19
, 
e20
, 
e21
, 
e22
, 
e23
, 
e24
, 
e25
, 
e26
, 
e27
, 
e28
, 
e29
, 
e30
, 
e31
, 
e32
, 
e33
, 
e34
, 
e35
, 
e36
, 
e37
, 
e38
, 
e39
, 
e40
, 
e41
, 
e42
, 
e43
, 
e44
, 
e45
, 
e46
, 
e47
, 
e48
, 
e49
, 
e50
, 
e51
, 
e52
, 
e53
, 
e54
, 
e55
, 
e56
, 
e57
, 
e58
, 
e59
, 
e60
, 
e61
, 
e62
, 
e63
, 
size
, ...Ë
	)
size

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub___com∑t_¸óã_moduÀ


	)

12 
	#__°ub___com∑t_gë_kî√l_syms


	)

13 
	#__°ub___com∑t_quîy_moduÀ


	)

14 
	#__°ub___com∑t_u£lib


	)

15 
	#__°ub_chÊags


	)

16 
	#__°ub_Áâach


	)

17 
	#__°ub_fchÊags


	)

18 
	#__°ub_fdëach


	)

19 
	#__°ub_gëmsg


	)

20 
	#__°ub_gây


	)

21 
	#__°ub_lchmod


	)

22 
	#__°ub_nfs£rv˘l


	)

23 
	#__°ub_putmsg


	)

24 
	#__°ub_ªvoke


	)

25 
	#__°ub_£éogö


	)

26 
	#__°ub_sigªtu∫


	)

27 
	#__°ub_s°k


	)

28 
	#__°ub_°ty


	)

	@/usr/include/linux/byteorder/little_endian.h

1 #i‚de‡
_LINUX_BYTEORDER_LITTLE_ENDIAN_H


2 
	#_LINUX_BYTEORDER_LITTLE_ENDIAN_H


	)

4 #i‚de‡
__LITTLE_ENDIAN


5 
	#__LITTLE_ENDIAN
 1234

	)

7 #i‚de‡
__LITTLE_ENDIAN_BITFIELD


8 
	#__LITTLE_ENDIAN_BITFIELD


	)

11 
	~<löux/ty≥s.h
>

12 
	~<löux/swab.h
>

14 
	#__c⁄°™t_ht⁄l
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

15 
	#__c⁄°™t_¡ohl
(
x
Ë
	`___c⁄°™t_swab32
((
__be32
)(x))

	)

16 
	#__c⁄°™t_ht⁄s
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

17 
	#__c⁄°™t_¡ohs
(
x
Ë
	`___c⁄°™t_swab16
((
__be16
)(x))

	)

18 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

19 
	#__c⁄°™t_À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

20 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

21 
	#__c⁄°™t_À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

22 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

23 
	#__c⁄°™t_À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

24 
	#__c⁄°™t_˝u_to_be64
(
x
Ë((
__be64
)
	`___c⁄°™t_swab64
((x)))

	)

25 
	#__c⁄°™t_be64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
((
__u64
)(
__be64
)(x))

	)

26 
	#__c⁄°™t_˝u_to_be32
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

27 
	#__c⁄°™t_be32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
((
__u32
)(
__be32
)(x))

	)

28 
	#__c⁄°™t_˝u_to_be16
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

29 
	#__c⁄°™t_be16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
((
__u16
)(
__be16
)(x))

	)

30 
	#__˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

31 
	#__À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

32 
	#__˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

33 
	#__À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

34 
	#__˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

35 
	#__À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

36 
	#__˝u_to_be64
(
x
Ë((
__be64
)
	`__swab64
((x)))

	)

37 
	#__be64_to_˝u
(
x
Ë
	`__swab64
((
__u64
)(
__be64
)(x))

	)

38 
	#__˝u_to_be32
(
x
Ë((
__be32
)
	`__swab32
((x)))

	)

39 
	#__be32_to_˝u
(
x
Ë
	`__swab32
((
__u32
)(
__be32
)(x))

	)

40 
	#__˝u_to_be16
(
x
Ë((
__be16
)
	`__swab16
((x)))

	)

41 
	#__be16_to_˝u
(
x
Ë
	`__swab16
((
__u16
)(
__be16
)(x))

	)

43 
__ölöe__
 
__À64
 
	$__˝u_to_À64p
(c⁄° 
__u64
 *
p
)

45  (
__À64
)*
p
;

46 
	}
}

47 
__ölöe__
 
__u64
 
	$__À64_to_˝up
(c⁄° 
__À64
 *
p
)

49  (
__u64
)*
p
;

50 
	}
}

51 
__ölöe__
 
__À32
 
	$__˝u_to_À32p
(c⁄° 
__u32
 *
p
)

53  (
__À32
)*
p
;

54 
	}
}

55 
__ölöe__
 
__u32
 
	$__À32_to_˝up
(c⁄° 
__À32
 *
p
)

57  (
__u32
)*
p
;

58 
	}
}

59 
__ölöe__
 
__À16
 
	$__˝u_to_À16p
(c⁄° 
__u16
 *
p
)

61  (
__À16
)*
p
;

62 
	}
}

63 
__ölöe__
 
__u16
 
	$__À16_to_˝up
(c⁄° 
__À16
 *
p
)

65  (
__u16
)*
p
;

66 
	}
}

67 
__ölöe__
 
__be64
 
	$__˝u_to_be64p
(c⁄° 
__u64
 *
p
)

69  (
__be64
)
	`__swab64p
(
p
);

70 
	}
}

71 
__ölöe__
 
__u64
 
	$__be64_to_˝up
(c⁄° 
__be64
 *
p
)

73  
	`__swab64p
((
__u64
 *)
p
);

74 
	}
}

75 
__ölöe__
 
__be32
 
	$__˝u_to_be32p
(c⁄° 
__u32
 *
p
)

77  (
__be32
)
	`__swab32p
(
p
);

78 
	}
}

79 
__ölöe__
 
__u32
 
	$__be32_to_˝up
(c⁄° 
__be32
 *
p
)

81  
	`__swab32p
((
__u32
 *)
p
);

82 
	}
}

83 
__ölöe__
 
__be16
 
	$__˝u_to_be16p
(c⁄° 
__u16
 *
p
)

85  (
__be16
)
	`__swab16p
(
p
);

86 
	}
}

87 
__ölöe__
 
__u16
 
	$__be16_to_˝up
(c⁄° 
__be16
 *
p
)

89  
	`__swab16p
((
__u16
 *)
p
);

90 
	}
}

91 
	#__˝u_to_À64s
(
x
Ëdÿ{ ()(x); } 0)

	)

92 
	#__À64_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

93 
	#__˝u_to_À32s
(
x
Ëdÿ{ ()(x); } 0)

	)

94 
	#__À32_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

95 
	#__˝u_to_À16s
(
x
Ëdÿ{ ()(x); } 0)

	)

96 
	#__À16_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

97 
	#__˝u_to_be64s
(
x
Ë
	`__swab64s
((x))

	)

98 
	#__be64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

99 
	#__˝u_to_be32s
(
x
Ë
	`__swab32s
((x))

	)

100 
	#__be32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

101 
	#__˝u_to_be16s
(
x
Ë
	`__swab16s
((x))

	)

102 
	#__be16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

17 
	#ENOSYS
 38

	)

19 
	#ENOTEMPTY
 39

	)

20 
	#ELOOP
 40

	)

21 
	#EWOULDBLOCK
 
EAGAIN


	)

22 
	#ENOMSG
 42

	)

23 
	#EIDRM
 43

	)

24 
	#ECHRNG
 44

	)

25 
	#EL2NSYNC
 45

	)

26 
	#EL3HLT
 46

	)

27 
	#EL3RST
 47

	)

28 
	#ELNRNG
 48

	)

29 
	#EUNATCH
 49

	)

30 
	#ENOCSI
 50

	)

31 
	#EL2HLT
 51

	)

32 
	#EBADE
 52

	)

33 
	#EBADR
 53

	)

34 
	#EXFULL
 54

	)

35 
	#ENOANO
 55

	)

36 
	#EBADRQC
 56

	)

37 
	#EBADSLT
 57

	)

39 
	#EDEADLOCK
 
EDEADLK


	)

41 
	#EBFONT
 59

	)

42 
	#ENOSTR
 60

	)

43 
	#ENODATA
 61

	)

44 
	#ETIME
 62

	)

45 
	#ENOSR
 63

	)

46 
	#ENONET
 64

	)

47 
	#ENOPKG
 65

	)

48 
	#EREMOTE
 66

	)

49 
	#ENOLINK
 67

	)

50 
	#EADV
 68

	)

51 
	#ESRMNT
 69

	)

52 
	#ECOMM
 70

	)

53 
	#EPROTO
 71

	)

54 
	#EMULTIHOP
 72

	)

55 
	#EDOTDOT
 73

	)

56 
	#EBADMSG
 74

	)

57 
	#EOVERFLOW
 75

	)

58 
	#ENOTUNIQ
 76

	)

59 
	#EBADFD
 77

	)

60 
	#EREMCHG
 78

	)

61 
	#ELIBACC
 79

	)

62 
	#ELIBBAD
 80

	)

63 
	#ELIBSCN
 81

	)

64 
	#ELIBMAX
 82

	)

65 
	#ELIBEXEC
 83

	)

66 
	#EILSEQ
 84

	)

67 
	#ERESTART
 85

	)

68 
	#ESTRPIPE
 86

	)

69 
	#EUSERS
 87

	)

70 
	#ENOTSOCK
 88

	)

71 
	#EDESTADDRREQ
 89

	)

72 
	#EMSGSIZE
 90

	)

73 
	#EPROTOTYPE
 91

	)

74 
	#ENOPROTOOPT
 92

	)

75 
	#EPROTONOSUPPORT
 93

	)

76 
	#ESOCKTNOSUPPORT
 94

	)

77 
	#EOPNOTSUPP
 95

	)

78 
	#EPFNOSUPPORT
 96

	)

79 
	#EAFNOSUPPORT
 97

	)

80 
	#EADDRINUSE
 98

	)

81 
	#EADDRNOTAVAIL
 99

	)

82 
	#ENETDOWN
 100

	)

83 
	#ENETUNREACH
 101

	)

84 
	#ENETRESET
 102

	)

85 
	#ECONNABORTED
 103

	)

86 
	#ECONNRESET
 104

	)

87 
	#ENOBUFS
 105

	)

88 
	#EISCONN
 106

	)

89 
	#ENOTCONN
 107

	)

90 
	#ESHUTDOWN
 108

	)

91 
	#ETOOMANYREFS
 109

	)

92 
	#ETIMEDOUT
 110

	)

93 
	#ECONNREFUSED
 111

	)

94 
	#EHOSTDOWN
 112

	)

95 
	#EHOSTUNREACH
 113

	)

96 
	#EALREADY
 114

	)

97 
	#EINPROGRESS
 115

	)

98 
	#ESTALE
 116

	)

99 
	#EUCLEAN
 117

	)

100 
	#ENOTNAM
 118

	)

101 
	#ENAVAIL
 119

	)

102 
	#EISNAM
 120

	)

103 
	#EREMOTEIO
 121

	)

104 
	#EDQUOT
 122

	)

106 
	#ENOMEDIUM
 123

	)

107 
	#EMEDIUMTYPE
 124

	)

108 
	#ECANCELED
 125

	)

109 
	#ENOKEY
 126

	)

110 
	#EKEYEXPIRED
 127

	)

111 
	#EKEYREVOKED
 128

	)

112 
	#EKEYREJECTED
 129

	)

115 
	#EOWNERDEAD
 130

	)

116 
	#ENOTRECOVERABLE
 131

	)

118 
	#ERFKILL
 132

	)

120 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 #i‚de‡
TIOCSRS485


66 
	#TIOCSRS485
 0x542F

	)

68 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

69 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

70 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

71 
	#TCGETX
 0x5432

	)

72 
	#TCSETX
 0x5433

	)

73 
	#TCSETXF
 0x5434

	)

74 
	#TCSETXW
 0x5435

	)

75 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

76 
	#TIOCVHANGUP
 0x5437

	)

77 
	#TIOCGPKT
 
	`_IOR
('T', 0x38, Ë

	)

78 
	#TIOCGPTLCK
 
	`_IOR
('T', 0x39, Ë

	)

79 
	#TIOCGEXCL
 
	`_IOR
('T', 0x40, Ë

	)

81 
	#FIONCLEX
 0x5450

	)

82 
	#FIOCLEX
 0x5451

	)

83 
	#FIOASYNC
 0x5452

	)

84 
	#TIOCSERCONFIG
 0x5453

	)

85 
	#TIOCSERGWILD
 0x5454

	)

86 
	#TIOCSERSWILD
 0x5455

	)

87 
	#TIOCGLCKTRMIOS
 0x5456

	)

88 
	#TIOCSLCKTRMIOS
 0x5457

	)

89 
	#TIOCSERGSTRUCT
 0x5458

	)

90 
	#TIOCSERGETLSR
 0x5459

	)

91 
	#TIOCSERGETMULTI
 0x545A

	)

92 
	#TIOCSERSETMULTI
 0x545B

	)

94 
	#TIOCMIWAIT
 0x545C

	)

95 
	#TIOCGICOUNT
 0x545D

	)

101 #i‚de‡
FIOQSIZE


102 
	#FIOQSIZE
 0x5460

	)

106 
	#TIOCPKT_DATA
 0

	)

107 
	#TIOCPKT_FLUSHREAD
 1

	)

108 
	#TIOCPKT_FLUSHWRITE
 2

	)

109 
	#TIOCPKT_STOP
 4

	)

110 
	#TIOCPKT_START
 8

	)

111 
	#TIOCPKT_NOSTOP
 16

	)

112 
	#TIOCPKT_DOSTOP
 32

	)

113 
	#TIOCPKT_IOCTL
 64

	)

115 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

6 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~<asm/posix_ty≥s_32.h
>

3 #ñi‡
deföed
(
__ILP32__
)

4 
	~<asm/posix_ty≥s_x32.h
>

6 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/boost/preprocessor/detail/check.hpp

3 #* (
C
Ë
C›yright
 
Paul
 
Mís⁄ides
 2002.

4 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


5 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


6 #* 
hâp
:

9 #
#/* 
Sì
 
hâp
:

11 #
#i‚de‡
BOOST_PREPROCESSOR_DETAIL_CHECK_HPP


13 
	#BOOST_PREPROCESSOR_DETAIL_CHECK_HPP


	)

14 
#ö˛udê
	~<boo°/¥ïro˚ss‹/ˇt.hµ
>

16 
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

17 #
#/* 
BOOST_PP_CHECK
 */

19 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MWCC
()

21 
	#BOOST_PP_CHECK
(
x
, 
ty≥
Ë
	`BOOST_PP_CHECK_D
(x,Åy≥)

	)

23 
	#BOOST_PP_CHECK
(
x
, 
ty≥
Ë
	`BOOST_PP_CHECK_OO
((x,Åy≥))

	)

24 
	#BOOST_PP_CHECK_OO
(
∑r
Ë
BOOST_PP_CHECK_D
 ## 
	)
par

26 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MSVC
(Ë&& ~BOOST_PP_CONFIG_FLAGS(Ë& 
BOOST_PP_CONFIG_DMC
()

28 
	#BOOST_PP_CHECK_D
(
x
, 
ty≥
Ë
	`BOOST_PP_CHECK_1
(
	`BOOST_PP_CAT
(
BOOST_PP_CHECK_RESULT_
,Åy≥ x))

	)

29 
	#BOOST_PP_CHECK_1
(
chk
Ë
	`BOOST_PP_CHECK_2
(chk)

	)

30 
	#BOOST_PP_CHECK_2
(
ªs
, 
_
Ë
	)
res

31 #ñi‡
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MSVC
()

32 
	#BOOST_PP_CHECK_D
(
x
, 
ty≥
Ë
	`BOOST_PP_CHECK_1
—y≥ x)

	)

33 
	#BOOST_PP_CHECK_1
(
chk
Ë
	`BOOST_PP_CHECK_2
(chk)

	)

34 
	#BOOST_PP_CHECK_2
(
chk
Ë
	`BOOST_PP_CHECK_3
((
BOOST_PP_CHECK_RESULT_
 ## chk))

	)

35 
	#BOOST_PP_CHECK_3
(
im
Ë
	`BOOST_PP_CHECK_5
(
BOOST_PP_CHECK_4
 im)

	)

36 
	#BOOST_PP_CHECK_4
(
ªs
, 
_
Ë
	)
res

37 
	#BOOST_PP_CHECK_5
(
ªs
Ë
	)
res

39 
	#BOOST_PP_CHECK_D
(
x
, 
ty≥
Ë
	`BOOST_PP_CHECK_OO
(—y≥ x))

	)

40 
	#BOOST_PP_CHECK_OO
(
∑r
Ë
BOOST_PP_CHECK_0
 ## 
	)
par

41 
	#BOOST_PP_CHECK_0
(
chk
Ë
	`BOOST_PP_CHECK_1
(
	`BOOST_PP_CAT
(
BOOST_PP_CHECK_RESULT_
, chk))

	)

42 
	#BOOST_PP_CHECK_1
(
chk
Ë
	`BOOST_PP_CHECK_2
(chk)

	)

43 
	#BOOST_PP_CHECK_2
(
ªs
, 
_
Ë
	)
res

45 
#deföê
	#BOOST_PP_CHECK_RESULT_1
 1, 
BOOST_PP_NIL


	)

	@/usr/include/boost/preprocessor/facilities/is_empty.hpp

3 #* (
C
Ë
C›yright
 
Paul
 
Mís⁄ides
 2003.

4 #* (
C
Ë
C›yright
 
Edw¨d
 
Dõ√r
 2014.

5 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


6 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


7 #* 
hâp
:

10 #
#/* 
Sì
 
hâp
:

12 #
#i‚de‡
BOOST_PREPROCESSOR_FACILITIES_IS_EMPTY_HPP


14 
	#BOOST_PREPROCESSOR_FACILITIES_IS_EMPTY_HPP


	)

15 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

17 #
#i‡
BOOST_PP_VARIADICS


19 
#ö˛udê
	~<boo°/¥ïro˚ss‹/Ácûôõs/is_em±y_v¨üdic.hµ
>

23 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MSVC
(Ë&& ~BOOST_PP_CONFIG_FLAGS(Ë& 
BOOST_PP_CONFIG_MWCC
()

25 
	~<boo°/¥ïro˚ss‹/tu∂e/ñem.hµ
>

26 
	~<boo°/¥ïro˚ss‹/Ácûôõs/idítôy.hµ
>

28 
	~<boo°/¥ïro˚ss‹/ˇt.hµ
>

29 
	~<boo°/¥ïro˚ss‹/dëaû/•lô.hµ
>

31 #
#/* 
BOOST_PP_IS_EMPTY
 */

33 #
#i‡~
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MSVC
(Ë&& ~BOOST_PP_CONFIG_FLAGS(Ë& 
BOOST_PP_CONFIG_MWCC
()

35 
	#BOOST_PP_IS_EMPTY
(
x
Ë
	`BOOST_PP_IS_EMPTY_I
(x 
BOOST_PP_IS_EMPTY_HELPER
)

	)

36 
	#BOOST_PP_IS_EMPTY_I
(
c⁄ã¡s
Ë
	`BOOST_PP_TUPLE_ELEM
(2, 1, (
BOOST_PP_IS_EMPTY_DEF_
 ## 
	`c⁄ã¡s
()))

	)

37 
	#BOOST_PP_IS_EMPTY_DEF_BOOST_PP_IS_EMPTY_HELPER
 1, 
	`BOOST_PP_IDENTITY
(1)

	)

38 
	#BOOST_PP_IS_EMPTY_HELPER
(Ë, 0

	)

40 #i‡
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MSVC
()

41 
	#BOOST_PP_IS_EMPTY
(
x
Ë
	`BOOST_PP_IS_EMPTY_I
(
BOOST_PP_IS_EMPTY_HELPER
 
	`x
 ())

	)

42 
	#BOOST_PP_IS_EMPTY_I
(
ã°
Ë
	`BOOST_PP_IS_EMPTY_II
(
	`BOOST_PP_SPLIT
(0, 
	`BOOST_PP_CAT
(
BOOST_PP_IS_EMPTY_DEF_
,Åe°)))

	)

43 
	#BOOST_PP_IS_EMPTY_II
(
id
Ë
	)
id

45 
	#BOOST_PP_IS_EMPTY
(
x
Ë
	`BOOST_PP_IS_EMPTY_I
((
BOOST_PP_IS_EMPTY_HELPER
 
	`x
 ()))

	)

46 
	#BOOST_PP_IS_EMPTY_I
(
∑r
Ë
BOOST_PP_IS_EMPTY_II
 ## 
	)
par

47 
	#BOOST_PP_IS_EMPTY_II
(
ã°
Ë
	`BOOST_PP_SPLIT
(0, 
	`BOOST_PP_CAT
(
BOOST_PP_IS_EMPTY_DEF_
,Åe°))

	)

49 
	#BOOST_PP_IS_EMPTY_HELPER
(Ë1

	)

50 
	#BOOST_PP_IS_EMPTY_DEF_1
 1, 
BOOST_PP_NIL


	)

51 
	#BOOST_PP_IS_EMPTY_DEF_BOOST_PP_IS_EMPTY_HELPER
 0, 
BOOST_PP_NIL


	)

	@/usr/include/linux/stddef.h

	@/usr/include/linux/swab.h

1 #i‚de‡
_LINUX_SWAB_H


2 
	#_LINUX_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

6 
	~<asm/swab.h
>

12 
	#___c⁄°™t_swab16
(
x
Ë((
__u16
)( \

13 (((
__u16
)(
x
) & (__u16)0x00ffU) << 8) | \

14 (((
__u16
)(
x
Ë& (__u16)0xff00UË>> 8)))

	)

16 
	#___c⁄°™t_swab32
(
x
Ë((
__u32
)( \

17 (((
__u32
)(
x
) & (__u32)0x000000ffUL) << 24) | \

18 (((
__u32
)(
x
) & (__u32)0x0000ff00UL) << 8) | \

19 (((
__u32
)(
x
) & (__u32)0x00ff0000UL) >> 8) | \

20 (((
__u32
)(
x
Ë& (__u32)0xff000000ULË>> 24)))

	)

22 
	#___c⁄°™t_swab64
(
x
Ë((
__u64
)( \

23 (((
__u64
)(
x
) & (__u64)0x00000000000000ffULL) << 56) | \

24 (((
__u64
)(
x
) & (__u64)0x000000000000ff00ULL) << 40) | \

25 (((
__u64
)(
x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

26 (((
__u64
)(
x
) & (__u64)0x00000000ff000000ULL) << 8) | \

27 (((
__u64
)(
x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

28 (((
__u64
)(
x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

29 (((
__u64
)(
x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

30 (((
__u64
)(
x
Ë& (__u64)0xff00000000000000ULLË>> 56)))

	)

32 
	#___c⁄°™t_swahw32
(
x
Ë((
__u32
)( \

33 (((
__u32
)(
x
) & (__u32)0x0000ffffUL) << 16) | \

34 (((
__u32
)(
x
Ë& (__u32)0xffff0000ULË>> 16)))

	)

36 
	#___c⁄°™t_swahb32
(
x
Ë((
__u32
)( \

37 (((
__u32
)(
x
) & (__u32)0x00ff00ffUL) << 8) | \

38 (((
__u32
)(
x
Ë& (__u32)0xff00ff00ULË>> 8)))

	)

46 
__ölöe__
 
__u16
 
	$__fswab16
(
__u16
 
vÆ
)

48 #ifde‡
__HAVE_BUILTIN_BSWAP16__


49  
	`__buûtö_bsw≠16
(
vÆ
);

50 #ñi‡
	`deföed
 (
__¨ch_swab16
)

51  
	`__¨ch_swab16
(
vÆ
);

53  
	`___c⁄°™t_swab16
(
vÆ
);

55 
	}
}

57 
__ölöe__
 
__u32
 
	$__fswab32
(
__u32
 
vÆ
)

59 #ifde‡
__HAVE_BUILTIN_BSWAP32__


60  
	`__buûtö_bsw≠32
(
vÆ
);

61 #ñi‡
	`deföed
(
__¨ch_swab32
)

62  
	`__¨ch_swab32
(
vÆ
);

64  
	`___c⁄°™t_swab32
(
vÆ
);

66 
	}
}

68 
__ölöe__
 
__u64
 
	$__fswab64
(
__u64
 
vÆ
)

70 #ifde‡
__HAVE_BUILTIN_BSWAP64__


71  
	`__buûtö_bsw≠64
(
vÆ
);

72 #ñi‡
	`deföed
 (
__¨ch_swab64
)

73  
	`__¨ch_swab64
(
vÆ
);

74 #ñi‡
	`deföed
(
__SWAB_64_THRU_32__
)

75 
__u32
 
h
 = 
vÆ
 >> 32;

76 
__u32
 
l
 = 
vÆ
 & ((1ULL << 32) - 1);

77  (((
__u64
)
	`__fswab32
(
l
)Ë<< 32Ë| ((__u64)(__fswab32(
h
)));

79  
	`___c⁄°™t_swab64
(
vÆ
);

81 
	}
}

83 
__ölöe__
 
__u32
 
	$__fswahw32
(
__u32
 
vÆ
)

85 #ifde‡
__¨ch_swahw32


86  
	`__¨ch_swahw32
(
vÆ
);

88  
	`___c⁄°™t_swahw32
(
vÆ
);

90 
	}
}

92 
__ölöe__
 
__u32
 
	$__fswahb32
(
__u32
 
vÆ
)

94 #ifde‡
__¨ch_swahb32


95  
	`__¨ch_swahb32
(
vÆ
);

97  
	`___c⁄°™t_swahb32
(
vÆ
);

99 
	}
}

105 
	#__swab16
(
x
) \

106 (
	`__buûtö_c⁄°™t_p
((
__u16
)(
x
)) ? \

107 
	`___c⁄°™t_swab16
(
x
) : \

108 
	`__fswab16
(
x
))

	)

114 
	#__swab32
(
x
) \

115 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

116 
	`___c⁄°™t_swab32
(
x
) : \

117 
	`__fswab32
(
x
))

	)

123 
	#__swab64
(
x
) \

124 (
	`__buûtö_c⁄°™t_p
((
__u64
)(
x
)) ? \

125 
	`___c⁄°™t_swab64
(
x
) : \

126 
	`__fswab64
(
x
))

	)

134 
	#__swahw32
(
x
) \

135 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

136 
	`___c⁄°™t_swahw32
(
x
) : \

137 
	`__fswahw32
(
x
))

	)

145 
	#__swahb32
(
x
) \

146 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

147 
	`___c⁄°™t_swahb32
(
x
) : \

148 
	`__fswahb32
(
x
))

	)

154 
__ölöe__
 
__u16
 
	$__swab16p
(c⁄° 
__u16
 *
p
)

156 #ifde‡
__¨ch_swab16p


157  
	`__¨ch_swab16p
(
p
);

159  
	`__swab16
(*
p
);

161 
	}
}

167 
__ölöe__
 
__u32
 
	$__swab32p
(c⁄° 
__u32
 *
p
)

169 #ifde‡
__¨ch_swab32p


170  
	`__¨ch_swab32p
(
p
);

172  
	`__swab32
(*
p
);

174 
	}
}

180 
__ölöe__
 
__u64
 
	$__swab64p
(c⁄° 
__u64
 *
p
)

182 #ifde‡
__¨ch_swab64p


183  
	`__¨ch_swab64p
(
p
);

185  
	`__swab64
(*
p
);

187 
	}
}

195 
__ölöe__
 
__u32
 
	$__swahw32p
(c⁄° 
__u32
 *
p
)

197 #ifde‡
__¨ch_swahw32p


198  
	`__¨ch_swahw32p
(
p
);

200  
	`__swahw32
(*
p
);

202 
	}
}

210 
__ölöe__
 
__u32
 
	$__swahb32p
(c⁄° 
__u32
 *
p
)

212 #ifde‡
__¨ch_swahb32p


213  
	`__¨ch_swahb32p
(
p
);

215  
	`__swahb32
(*
p
);

217 
	}
}

223 
__ölöe__
 
	$__swab16s
(
__u16
 *
p
)

225 #ifde‡
__¨ch_swab16s


226 
	`__¨ch_swab16s
(
p
);

228 *
p
 = 
	`__swab16p
(p);

230 
	}
}

235 
__ölöe__
 
	$__swab32s
(
__u32
 *
p
)

237 #ifde‡
__¨ch_swab32s


238 
	`__¨ch_swab32s
(
p
);

240 *
p
 = 
	`__swab32p
(p);

242 
	}
}

248 
__ölöe__
 
	$__swab64s
(
__u64
 *
p
)

250 #ifde‡
__¨ch_swab64s


251 
	`__¨ch_swab64s
(
p
);

253 *
p
 = 
	`__swab64p
(p);

255 
	}
}

263 
__ölöe__
 
	$__swahw32s
(
__u32
 *
p
)

265 #ifde‡
__¨ch_swahw32s


266 
	`__¨ch_swahw32s
(
p
);

268 *
p
 = 
	`__swahw32p
(p);

270 
	}
}

278 
__ölöe__
 
	$__swahb32s
(
__u32
 *
p
)

280 #ifde‡
__¨ch_swahb32s


281 
	`__¨ch_swahb32s
(
p
);

283 *
p
 = 
	`__swahb32p
(p);

285 
	}
}

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@/usr/include/asm/posix_types_32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


2 
	#_ASM_X86_POSIX_TYPES_32_H


	)

10 
	t__kî√l_mode_t
;

11 
	#__kî√l_mode_t
 
__kî√l_mode_t


	)

13 
	t__kî√l_ùc_pid_t
;

14 
	#__kî√l_ùc_pid_t
 
__kî√l_ùc_pid_t


	)

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	#__kî√l_uid_t
 
__kî√l_uid_t


	)

20 
	t__kî√l_ﬁd_dev_t
;

21 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

23 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_64.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


2 
	#_ASM_X86_POSIX_TYPES_64_H


	)

10 
	t__kî√l_ﬁd_uid_t
;

11 
	t__kî√l_ﬁd_gid_t
;

12 
	#__kî√l_ﬁd_uid_t
 
__kî√l_ﬁd_uid_t


	)

14 
	t__kî√l_ﬁd_dev_t
;

15 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

17 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_x32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_X32_H


2 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

13 
	t__kî√l_l⁄g_t
;

14 
	t__kî√l_ul⁄g_t
;

15 
	#__kî√l_l⁄g_t
 
__kî√l_l⁄g_t


	)

17 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm/swab.h

1 #i‚de‡
_ASM_X86_SWAB_H


2 
	#_ASM_X86_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

7 
__ölöe__
 
__u32
 
	$__¨ch_swab32
(
__u32
 
vÆ
)

9 
	`__asm__
("bsw≠»%0" : "Ù" (
vÆ
) : "0" (val));

10  
vÆ
;

11 
	}
}

12 
	#__¨ch_swab32
 
__¨ch_swab32


	)

14 
__ölöe__
 
__u64
 
	$__¨ch_swab64
(
__u64
 
vÆ
)

16 #ifde‡
__i386__


19 
__u32
 
a
;

20 
__u32
 
b
;

21 } 
s
;

22 
__u64
 
u
;

23 } 
v
;

24 
v
.
u
 = 
vÆ
;

25 
	`__asm__
("bswapl %0 ; bswapl %1 ; xchgl %0,%1"

26 : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
)

27 : "0" (
v
.
s
.
a
), "1" (v.s.
b
));

28  
v
.
u
;

30 
	`__asm__
("bsw≠q %0" : "Ù" (
vÆ
) : "0" (val));

31  
vÆ
;

33 
	}
}

34 
	#__¨ch_swab64
 
__¨ch_swab64


	)

	@/usr/include/boost/preprocessor/detail/split.hpp

3 #* (
C
Ë
C›yright
 
Paul
 
Mís⁄ides
 2002.

4 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


5 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


6 #* 
hâp
:

9 #
#i‚de‡
BOOST_PREPROCESSOR_DETAIL_SPLIT_HPP


11 
	#BOOST_PREPROCESSOR_DETAIL_SPLIT_HPP


	)

12 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

14 #
#/* 
BOOST_PP_SPLIT
 */

16 #
#i‡
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MWCC
()

18 
	#BOOST_PP_SPLIT
(
n
, 
im
Ë
	`BOOST_PP_SPLIT_I
(“, im))

	)

19 
	#BOOST_PP_SPLIT_I
(
∑r
Ë
BOOST_PP_SPLIT_II
 ## 
	)
par

20 
	#BOOST_PP_SPLIT_II
(
n
, 
a
, 
b
Ë
BOOST_PP_SPLIT_
 ## 
	`n
◊, b)

	)

21 #ñi‡
BOOST_PP_CONFIG_FLAGS
(Ë& 
BOOST_PP_CONFIG_MSVC
()

22 
	#BOOST_PP_SPLIT
(
n
, 
im
Ë
	`BOOST_PP_SPLIT_I
(
	`n
((im)))

	)

23 
	#BOOST_PP_SPLIT_I
(
n
Ë
	`BOOST_PP_SPLIT_ID
(
BOOST_PP_SPLIT_II_
 ##Ç)

	)

24 
	#BOOST_PP_SPLIT_II_0
(
s
Ë
	`BOOST_PP_SPLIT_ID
(
BOOST_PP_SPLIT_0
 s)

	)

25 
	#BOOST_PP_SPLIT_II_1
(
s
Ë
	`BOOST_PP_SPLIT_ID
(
BOOST_PP_SPLIT_1
 s)

	)

26 
	#BOOST_PP_SPLIT_ID
(
id
Ë
	)
id

28 
	#BOOST_PP_SPLIT
(
n
, 
im
Ë
	`BOOST_PP_SPLIT_I
“)(im)

	)

29 
	#BOOST_PP_SPLIT_I
(
n
Ë
BOOST_PP_SPLIT_
 ## 
	)
n

31 
#deföê
	#BOOST_PP_SPLIT_0
(
a
, 
b
Ë
	)
a

33 
	#BOOST_PP_SPLIT_1
(
a
, 
b
Ë
	)
b

	@/usr/include/boost/preprocessor/facilities/identity.hpp

1 #/* 
C›yright
 (
C
) 2001

2 #* 
Hou£m¨que
 
Oy


3 #* 
hâp
:

5 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


6 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


7 #* 
hâp
:

9 #
#/* 
Revi£d
 
by
 
Paul
 
Mís⁄ides
 (2002) */

11 #
#/* 
Sì
 
hâp
:

13 #
#i‚de‡
BOOST_PREPROCESSOR_FACILITIES_IDENTITY_HPP


15 
	#BOOST_PREPROCESSOR_FACILITIES_IDENTITY_HPP


	)

16 
#ö˛udê
	~<boo°/¥ïro˚ss‹/Ácûôõs/em±y.hµ
>

18 #
#/* 
BOOST_PP_IDENTITY
 */

20 
#deföê
	#BOOST_PP_IDENTITY
(
ôem
Ëôem 
BOOST_PP_EMPTY


	)

	@/usr/include/boost/preprocessor/facilities/is_empty_variadic.hpp

3 #* (
C
Ë
C›yright
 
Edw¨d
 
Dõ√r
 2014.

4 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


5 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


6 #* 
hâp
:

9 #
#/* 
Sì
 
hâp
:

11 #
#i‚de‡
BOOST_PREPROCESSOR_FACILITIES_IS_EMPTY_VARIADIC_HPP


13 
	#BOOST_PREPROCESSOR_FACILITIES_IS_EMPTY_VARIADIC_HPP


	)

14 
#ö˛udê
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

16 #
#i‡
BOOST_PP_VARIADICS


18 
#ö˛udê
	~<boo°/¥ïro˚ss‹/pun˘u©i⁄/is_begö_∑ªns.hµ
>

20 
	~<boo°/¥ïro˚ss‹/Ácûôõs/dëaû/is_em±y.hµ
>

21 #
#i‡
BOOST_PP_VARIADICS_MSVC
 && 
_MSC_VER
 <= 1400

23 
#deföê
	#BOOST_PP_IS_EMPTY
(
∑øm
) \

25 
BOOST_PP_DETAIL_IS_EMPTY_IIF
 \

27 
BOOST_PP_IS_BEGIN_PARENS
 \

29 
∑øm
 \

33 
BOOST_PP_IS_EMPTY_ZERO
, \

34 
BOOST_PP_DETAIL_IS_EMPTY_PROCESS
 \

36 (
∑øm
) \

37 

	)

38 
	#BOOST_PP_IS_EMPTY_ZERO
(
∑øm
Ë0

	)

40 
	#BOOST_PP_IS_EMPTY
(...) \

41 
BOOST_PP_DETAIL_IS_EMPTY_IIF
 \

43 
BOOST_PP_IS_BEGIN_PARENS
 \

45 
__VA_ARGS__
 \

49 
BOOST_PP_IS_EMPTY_ZERO
, \

50 
BOOST_PP_DETAIL_IS_EMPTY_PROCESS
 \

52 (
__VA_ARGS__
) \

53 

	)

54 
	#BOOST_PP_IS_EMPTY_ZERO
(...Ë0

	)

	@/usr/include/asm-generic/posix_types.h

1 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


2 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

4 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__kî√l_l⁄g_t


14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

18 #i‚de‡
__kî√l_öo_t


19 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

22 #i‚de‡
__kî√l_mode_t


23 
	t__kî√l_mode_t
;

26 #i‚de‡
__kî√l_pid_t


27 
	t__kî√l_pid_t
;

30 #i‚de‡
__kî√l_ùc_pid_t


31 
	t__kî√l_ùc_pid_t
;

34 #i‚de‡
__kî√l_uid_t


35 
	t__kî√l_uid_t
;

36 
	t__kî√l_gid_t
;

39 #i‚de‡
__kî√l_su£c⁄ds_t


40 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

43 #i‚de‡
__kî√l_daddr_t


44 
	t__kî√l_daddr_t
;

47 #i‚de‡
__kî√l_uid32_t


48 
	t__kî√l_uid32_t
;

49 
	t__kî√l_gid32_t
;

52 #i‚de‡
__kî√l_ﬁd_uid_t


53 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

54 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

57 #i‚de‡
__kî√l_ﬁd_dev_t


58 
	t__kî√l_ﬁd_dev_t
;

65 #i‚de‡
__kî√l_size_t


66 #i‡
__BITS_PER_LONG
 != 64

67 
	t__kî√l_size_t
;

68 
	t__kî√l_ssize_t
;

69 
	t__kî√l_±rdiff_t
;

71 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

72 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

77 #i‚de‡
__kî√l_fsid_t


79 
	mvÆ
[2];

80 } 
	t__kî√l_fsid_t
;

86 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

87 
	t__kî√l_loff_t
;

88 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

90 
	t__kî√l_timî_t
;

91 
	t__kî√l_˛ockid_t
;

92 * 
	t__kî√l_ˇddr_t
;

93 
	t__kî√l_uid16_t
;

94 
	t__kî√l_gid16_t
;

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #i‡
deföed
(
__x86_64__
Ë&& !deföed(
__ILP32__
)

5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/boost/preprocessor/facilities/detail/is_empty.hpp

3 #* (
C
Ë
C›yright
 
Edw¨d
 
Dõ√r
 2014.

4 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


5 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


6 #* 
hâp
:

9 #
#/* 
Sì
 
hâp
:

11 #
#i‚de‡
BOOST_PREPROCESSOR_DETAIL_IS_EMPTY_HPP


13 
	#BOOST_PREPROCESSOR_DETAIL_IS_EMPTY_HPP


	)

15 
	~<boo°/¥ïro˚ss‹/pun˘u©i⁄/is_begö_∑ªns.hµ
>

17 #i‡
BOOST_PP_VARIADICS_MSVC


19 #¥agm®
w¨nög
(
⁄˚
:4002)

21 
	#BOOST_PP_DETAIL_IS_EMPTY_IIF_0
(
t
, 
b
Ë
	)
b

22 
	#BOOST_PP_DETAIL_IS_EMPTY_IIF_1
(
t
, 
b
Ë
	)
t

26 
	#BOOST_PP_DETAIL_IS_EMPTY_IIF_0
(
t
, ...Ë
__VA_ARGS__


	)

27 
	#BOOST_PP_DETAIL_IS_EMPTY_IIF_1
(
t
, ...Ë
	)
t

31 #i‡
BOOST_PP_VARIADICS_MSVC
 && 
_MSC_VER
 <= 1400

33 
	#BOOST_PP_DETAIL_IS_EMPTY_PROCESS
(
∑øm
) \

34 
BOOST_PP_IS_BEGIN_PARENS
 \

36 
BOOST_PP_DETAIL_IS_EMPTY_NON_FUNCTION_C
 
	`∑øm
 () \

38 

	)

42 
	#BOOST_PP_DETAIL_IS_EMPTY_PROCESS
(...) \

43 
BOOST_PP_IS_BEGIN_PARENS
 \

45 
BOOST_PP_DETAIL_IS_EMPTY_NON_FUNCTION_C
 
	`__VA_ARGS__
 () \

47 

	)

51 
	#BOOST_PP_DETAIL_IS_EMPTY_PRIMITIVE_CAT
(
a
, 
b
Ë®## 
	)
b

52 
	#BOOST_PP_DETAIL_IS_EMPTY_IIF
(
bô
Ë
	`BOOST_PP_DETAIL_IS_EMPTY_PRIMITIVE_CAT
(
BOOST_PP_DETAIL_IS_EMPTY_IIF_
,bô)

	)

53 
	#BOOST_PP_DETAIL_IS_EMPTY_NON_FUNCTION_C
(...Ë()

	)

	@/usr/include/boost/preprocessor/punctuation/is_begin_parens.hpp

3 #* (
C
Ë
C›yright
 
Edw¨d
 
Dõ√r
 2014.

4 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


5 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


6 #* 
hâp
:

9 #
#/* 
Sì
 
hâp
:

11 #
#i‚de‡
BOOST_PREPROCESSOR_IS_BEGIN_PARENS_HPP


13 
	#BOOST_PREPROCESSOR_IS_BEGIN_PARENS_HPP


	)

15 
	~<boo°/¥ïro˚ss‹/c⁄fig/c⁄fig.hµ
>

17 #i‡
BOOST_PP_VARIADICS


19 
	~<boo°/¥ïro˚ss‹/pun˘u©i⁄/dëaû/is_begö_∑ªns.hµ
>

21 #i‡
BOOST_PP_VARIADICS_MSVC
 && 
_MSC_VER
 <= 1400

23 
	#BOOST_PP_IS_BEGIN_PARENS
(
∑øm
) \

24 
BOOST_PP_DETAIL_IBP_SPLIT
 \

27 
BOOST_PP_DETAIL_IBP_CAT
 \

29 
BOOST_PP_DETAIL_IBP_IS_VARIADIC_R_
, \

30 
BOOST_PP_DETAIL_IBP_IS_VARIADIC_C
 
∑øm
 \

33 

	)

37 
	#BOOST_PP_IS_BEGIN_PARENS
(...) \

38 
BOOST_PP_DETAIL_IBP_SPLIT
 \

41 
BOOST_PP_DETAIL_IBP_CAT
 \

43 
BOOST_PP_DETAIL_IBP_IS_VARIADIC_R_
, \

44 
BOOST_PP_DETAIL_IBP_IS_VARIADIC_C
 
__VA_ARGS__
 \

47 

	)

	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/boost/preprocessor/punctuation/detail/is_begin_parens.hpp

3 #* (
C
Ë
C›yright
 
Edw¨d
 
Dõ√r
 2014.

4 #* 
Di°ribuãd
 
undî
 
the
 
Boo°
 
So·w¨e
 
Li˚n£
, 
Vîsi⁄
 1.0. (
Sì


5 #* 
accom∑nyög
 
fûe
 
LICENSE_1_0
.
txt
 
‹
 
c›y
 
©


6 #* 
hâp
:

9 #
#/* 
Sì
 
hâp
:

11 #
#i‚de‡
BOOST_PREPROCESSOR_DETAIL_IS_BEGIN_PARENS_HPP


13 
	#BOOST_PREPROCESSOR_DETAIL_IS_BEGIN_PARENS_HPP


	)

15 #i‡
BOOST_PP_VARIADICS_MSVC


17 
	~<boo°/¥ïro˚ss‹/Ácûôõs/em±y.hµ
>

19 
	#BOOST_PP_DETAIL_VD_IBP_CAT
(
a
, 
b
Ë
	`BOOST_PP_DETAIL_VD_IBP_CAT_I
◊, b)

	)

20 
	#BOOST_PP_DETAIL_VD_IBP_CAT_I
(
a
, 
b
Ë
	`BOOST_PP_DETAIL_VD_IBP_CAT_II
◊ ## b)

	)

21 
	#BOOST_PP_DETAIL_VD_IBP_CAT_II
(
ªs
Ë
	)
res

23 
	#BOOST_PP_DETAIL_IBP_SPLIT
(
i
, ...) \

24 
	`BOOST_PP_DETAIL_VD_IBP_CAT
(
	`BOOST_PP_DETAIL_IBP_PRIMITIVE_CAT
(
BOOST_PP_DETAIL_IBP_SPLIT_
,
i
)(
__VA_ARGS__
),
	`BOOST_PP_EMPTY
()) \

25 

	)

27 
	#BOOST_PP_DETAIL_IBP_IS_VARIADIC_C
(...Ë1 1

	)

31 
	#BOOST_PP_DETAIL_IBP_SPLIT
(
i
, ...) \

32 
	`BOOST_PP_DETAIL_IBP_PRIMITIVE_CAT
(
BOOST_PP_DETAIL_IBP_SPLIT_
,
i
)(
__VA_ARGS__
) \

33 

	)

35 
	#BOOST_PP_DETAIL_IBP_IS_VARIADIC_C
(...Ë1

	)

39 
	#BOOST_PP_DETAIL_IBP_SPLIT_0
(
a
, ...Ë
	)
a

40 
	#BOOST_PP_DETAIL_IBP_SPLIT_1
(
a
, ...Ë
__VA_ARGS__


	)

42 
	#BOOST_PP_DETAIL_IBP_CAT
(
a
, ...Ë
	`BOOST_PP_DETAIL_IBP_PRIMITIVE_CAT
◊,
__VA_ARGS__
)

	)

43 
	#BOOST_PP_DETAIL_IBP_PRIMITIVE_CAT
(
a
, ...Ë®## 
__VA_ARGS__


	)

45 
	#BOOST_PP_DETAIL_IBP_IS_VARIADIC_R_1
 1,

	)

46 
	#BOOST_PP_DETAIL_IBP_IS_VARIADIC_R_BOOST_PP_DETAIL_IBP_IS_VARIADIC_C
 0,

	)

	@
1
.
1
/usr/include
227
7121
debug.h
fileops_hub.c
fileops_nvp.c
fileops_nvp.h
lru_cache.c
lru_cache.h
merkleLogicalBtree.h
nv_common.h
nvp_lock.h
nvp_mman.h
nvp_printf.c
perf_delay/add_delay.h
perf_delay/util.h
perfcount.h
stack.c
stack.h
storage.h
thread_handle.h
timers.h
/usr/include/assert.h
/usr/include/boost/preprocessor/list/for_each.hpp
/usr/include/boost/preprocessor/seq/for_each.hpp
/usr/include/ctype.h
/usr/include/dlfcn.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/linux/kernel.h
/usr/include/math.h
/usr/include/pthread.h
/usr/include/sched.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/mman.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/syscall.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/uio.h
/usr/include/time.h
/usr/include/unistd.h
liblfds711/inc/liblfds711.h
non_temporal.h
/usr/include/alloca.h
/usr/include/asm/unistd.h
/usr/include/bits/confname.h
/usr/include/bits/dlfcn.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/inf.h
/usr/include/bits/math-finite.h
/usr/include/bits/math-vector.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/mman.h
/usr/include/bits/nan.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/sched.h
/usr/include/bits/setjmp.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/syscall.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/uio.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/boost/preprocessor/arithmetic/dec.hpp
/usr/include/boost/preprocessor/config/config.hpp
/usr/include/boost/preprocessor/list/for_each_i.hpp
/usr/include/boost/preprocessor/repetition/for.hpp
/usr/include/boost/preprocessor/seq/seq.hpp
/usr/include/boost/preprocessor/seq/size.hpp
/usr/include/boost/preprocessor/tuple/elem.hpp
/usr/include/boost/preprocessor/tuple/rem.hpp
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/hw_breakpoint.h
/usr/include/linux/perf_event.h
/usr/include/linux/sysinfo.h
/usr/include/sys/ioctl.h
/usr/include/sys/prctl.h
/usr/include/sys/resource.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ucontext.h
/usr/include/sys/wait.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm/byteorder.h
/usr/include/asm/socket.h
/usr/include/asm/unistd_32.h
/usr/include/asm/unistd_64.h
/usr/include/asm/unistd_x32.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/libm-simd-decl-stubs.h
/usr/include/bits/local_lim.h
/usr/include/bits/mman-linux.h
/usr/include/bits/resource.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sockaddr.h
/usr/include/bits/socket_type.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/boost/preprocessor/arithmetic/inc.hpp
/usr/include/boost/preprocessor/cat.hpp
/usr/include/boost/preprocessor/debug/error.hpp
/usr/include/boost/preprocessor/detail/auto_rec.hpp
/usr/include/boost/preprocessor/facilities/expand.hpp
/usr/include/boost/preprocessor/facilities/overload.hpp
/usr/include/boost/preprocessor/list/adt.hpp
/usr/include/boost/preprocessor/repetition/detail/dmc/for.hpp
/usr/include/boost/preprocessor/repetition/detail/edg/for.hpp
/usr/include/boost/preprocessor/repetition/detail/for.hpp
/usr/include/boost/preprocessor/repetition/detail/msvc/for.hpp
/usr/include/boost/preprocessor/seq/elem.hpp
/usr/include/boost/preprocessor/tuple/detail/is_single_return.hpp
/usr/include/boost/preprocessor/variadic/elem.hpp
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/linux/ioctl.h
/usr/include/linux/prctl.h
/usr/include/linux/types.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/sys/ttydefaults.h
/usr/include/asm-generic/socket.h
/usr/include/asm/errno.h
/usr/include/asm/ioctl.h
/usr/include/asm/ioctls.h
/usr/include/asm/types.h
/usr/include/bits/byteswap-16.h
/usr/include/boost/preprocessor/control/expr_iif.hpp
/usr/include/boost/preprocessor/control/if.hpp
/usr/include/boost/preprocessor/control/iif.hpp
/usr/include/boost/preprocessor/detail/dmc/auto_rec.hpp
/usr/include/boost/preprocessor/detail/is_binary.hpp
/usr/include/boost/preprocessor/facilities/empty.hpp
/usr/include/boost/preprocessor/facilities/is_1.hpp
/usr/include/boost/preprocessor/logical/bool.hpp
/usr/include/boost/preprocessor/logical/compl.hpp
/usr/include/boost/preprocessor/tuple/eat.hpp
/usr/include/boost/preprocessor/tuple/size.hpp
/usr/include/boost/preprocessor/variadic/size.hpp
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/linux/byteorder/little_endian.h
/usr/include/linux/limits.h
/usr/include/linux/posix_types.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm-generic/types.h
/usr/include/asm/posix_types.h
/usr/include/asm/sockios.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/boost/preprocessor/detail/check.hpp
/usr/include/boost/preprocessor/facilities/is_empty.hpp
/usr/include/linux/stddef.h
/usr/include/linux/swab.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/sockios.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/asm/swab.h
/usr/include/boost/preprocessor/detail/split.hpp
/usr/include/boost/preprocessor/facilities/identity.hpp
/usr/include/boost/preprocessor/facilities/is_empty_variadic.hpp
/usr/include/asm-generic/posix_types.h
/usr/include/asm/bitsperlong.h
/usr/include/boost/preprocessor/facilities/detail/is_empty.hpp
/usr/include/boost/preprocessor/punctuation/is_begin_parens.hpp
/usr/include/asm-generic/bitsperlong.h
/usr/include/boost/preprocessor/punctuation/detail/is_begin_parens.hpp
